<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170810 02:46:30.505" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/19025/obmc-robot/tests" name="Tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:30.997">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 02:46:30.997" starttime="20170810 02:46:30.997" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:30.998">${has_host} = False</msg>
<status endtime="20170810 02:46:30.998" starttime="20170810 02:46:30.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 02:46:30.999" starttime="20170810 02:46:30.998" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:30.999" starttime="20170810 02:46:30.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:31.000">${port_num} = 22</msg>
<status endtime="20170810 02:46:31.000" starttime="20170810 02:46:31.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:31.001">${SSH_PORT} = 22</msg>
<status endtime="20170810 02:46:31.001" starttime="20170810 02:46:31.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:31.001">${https_num} = 443</msg>
<status endtime="20170810 02:46:31.001" starttime="20170810 02:46:31.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:31.002">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170810 02:46:31.002" starttime="20170810 02:46:31.002" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:31.002" starttime="20170810 02:46:30.999" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:31.002" starttime="20170810 02:46:30.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:31.003">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 02:46:31.003" starttime="20170810 02:46:31.003" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:31.003">${has_port} = False</msg>
<status endtime="20170810 02:46:31.003" starttime="20170810 02:46:31.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 02:46:31.005" starttime="20170810 02:46:31.005" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 02:46:31.005" starttime="20170810 02:46:31.005" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:31.005" starttime="20170810 02:46:31.004" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:31.006" starttime="20170810 02:46:31.003" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:31.006">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170810 02:46:32.866">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 02:46:32.867" starttime="20170810 02:46:31.006" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:32.867" starttime="20170810 02:46:30.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:32.868">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170810 02:46:33.010">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 02:46:33.010">${output} = VERSION_ID="v1.99.8-209-g32f034e"</msg>
<msg level="INFO" timestamp="20170810 02:46:33.011">${stderr} = </msg>
<status endtime="20170810 02:46:33.011" starttime="20170810 02:46:32.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:33.011">Length is 0</msg>
<status endtime="20170810 02:46:33.011" starttime="20170810 02:46:33.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:33.012">VERSION_ID="v1.99.8-209-g32f034e"</msg>
<status endtime="20170810 02:46:33.012" starttime="20170810 02:46:33.011" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:33.012" starttime="20170810 02:46:32.868" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:33.012" starttime="20170810 02:46:32.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:33.013">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170810 02:46:33.194">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170810 02:46:33.194">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170810 02:46:33.194">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170810 02:46:33.194" starttime="20170810 02:46:33.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:33.195">Length is 81</msg>
<msg level="FAIL" timestamp="20170810 02:46:33.195">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170810 02:46:33.195" starttime="20170810 02:46:33.195" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:33.195" starttime="20170810 02:46:33.013" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:33.195" starttime="20170810 02:46:33.012" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:33.195" starttime="20170810 02:46:33.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:33.377">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:46:33.378">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170810 02:46:34.128">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170810 02:46:34.129">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170810 02:46:34.225">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 02:46:34.233">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170810 02:46:34.233">${stderr} = </msg>
<msg level="INFO" timestamp="20170810 02:46:34.233">${rc} = 0</msg>
<status endtime="20170810 02:46:34.233" starttime="20170810 02:46:33.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:34.234">Length is 0</msg>
<status endtime="20170810 02:46:34.234" starttime="20170810 02:46:34.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:34.234">Length is 11</msg>
<status endtime="20170810 02:46:34.234" starttime="20170810 02:46:34.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:34.234">${bmc_model} = Witherspoon</msg>
<status endtime="20170810 02:46:34.234" starttime="20170810 02:46:33.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:34.235">BMC Model=Witherspoon</msg>
<status endtime="20170810 02:46:34.235" starttime="20170810 02:46:34.235" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:34.235" starttime="20170810 02:46:33.196" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:34.235" starttime="20170810 02:46:33.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:34.238">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 02:46:34.238" starttime="20170810 02:46:34.237" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:34.238">${has_host} = False</msg>
<status endtime="20170810 02:46:34.238" starttime="20170810 02:46:34.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 02:46:34.239" starttime="20170810 02:46:34.239" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:34.239" starttime="20170810 02:46:34.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:34.240">${port_num} = 22</msg>
<status endtime="20170810 02:46:34.240" starttime="20170810 02:46:34.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:34.241">${SSH_PORT} = 22</msg>
<status endtime="20170810 02:46:34.241" starttime="20170810 02:46:34.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:34.241">${https_num} = 443</msg>
<status endtime="20170810 02:46:34.241" starttime="20170810 02:46:34.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:34.242">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170810 02:46:34.242" starttime="20170810 02:46:34.242" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:34.242" starttime="20170810 02:46:34.240" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:34.242" starttime="20170810 02:46:34.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:34.243">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 02:46:34.243" starttime="20170810 02:46:34.243" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:34.243">${has_port} = False</msg>
<status endtime="20170810 02:46:34.243" starttime="20170810 02:46:34.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 02:46:34.245" starttime="20170810 02:46:34.245" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 02:46:34.246" starttime="20170810 02:46:34.245" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:34.246" starttime="20170810 02:46:34.244" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:34.246" starttime="20170810 02:46:34.244" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:34.246">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170810 02:46:36.198">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 02:46:36.198" starttime="20170810 02:46:34.246" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.198" starttime="20170810 02:46:34.236" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.199">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170810 02:46:36.286">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 02:46:36.286">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170810 02:46:36.286">${stderr} = </msg>
<status endtime="20170810 02:46:36.286" starttime="20170810 02:46:36.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.287">Length is 0</msg>
<status endtime="20170810 02:46:36.287" starttime="20170810 02:46:36.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.287">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170810 02:46:36.287" starttime="20170810 02:46:36.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170810 02:46:36.288" starttime="20170810 02:46:36.287" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.288" starttime="20170810 02:46:34.236" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.288" starttime="20170810 02:46:34.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170810 02:46:36.288" starttime="20170810 02:46:36.288" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.289" starttime="20170810 02:46:30.996" status="PASS"></status>
</kw>
<suite source="/tmp/fspcibld/19025/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/19025/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.368">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:36.369" starttime="20170810 02:46:36.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:36.369" starttime="20170810 02:46:36.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.370">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:36.370" starttime="20170810 02:46:36.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:36.371" starttime="20170810 02:46:36.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.583">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:36.583" starttime="20170810 02:46:36.371" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.583">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:36.583">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:36.584" starttime="20170810 02:46:36.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.584">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:36.584" starttime="20170810 02:46:36.584" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:36.585" starttime="20170810 02:46:36.584" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.585" starttime="20170810 02:46:36.367" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.585" starttime="20170810 02:46:36.367" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.585" starttime="20170810 02:46:36.366" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.590">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:36.590" starttime="20170810 02:46:36.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.591">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:36.591" starttime="20170810 02:46:36.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.591">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:36.592" starttime="20170810 02:46:36.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.592">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:36.592" starttime="20170810 02:46:36.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.842">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:36.842" starttime="20170810 02:46:36.593" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.842">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:36.842">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:36.842" starttime="20170810 02:46:36.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.843">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:36.843" starttime="20170810 02:46:36.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.843">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:36.844" starttime="20170810 02:46:36.843" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.844" starttime="20170810 02:46:36.589" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.844" starttime="20170810 02:46:36.589" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.844" starttime="20170810 02:46:36.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.844">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:46:36.845" starttime="20170810 02:46:36.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.847">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:36.847" starttime="20170810 02:46:36.846" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.847">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:36.848" starttime="20170810 02:46:36.847" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.848" starttime="20170810 02:46:36.847" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.848" starttime="20170810 02:46:36.845" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.848" starttime="20170810 02:46:36.845" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.936">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:46:36.936">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:36.936" starttime="20170810 02:46:36.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.937">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:36.937" starttime="20170810 02:46:36.937" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.938">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:36.938" starttime="20170810 02:46:36.938" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.939" starttime="20170810 02:46:36.938" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.939" starttime="20170810 02:46:36.936" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.939" starttime="20170810 02:46:36.936" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:36.939">Delete All Sessions</msg>
<status endtime="20170810 02:46:36.939" starttime="20170810 02:46:36.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.939">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:36.940" starttime="20170810 02:46:36.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:36.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:36.940" starttime="20170810 02:46:36.940" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.941">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:46:36.941">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:46:36.941">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:46:36.941" starttime="20170810 02:46:36.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.941">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 02:46:36.941" starttime="20170810 02:46:36.587" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.942">${host_state} = Off</msg>
<status endtime="20170810 02:46:36.942" starttime="20170810 02:46:36.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:36.943">Off != Quiesced</msg>
<status endtime="20170810 02:46:36.943" starttime="20170810 02:46:36.942" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.943">${status} = False</msg>
<status endtime="20170810 02:46:36.943" starttime="20170810 02:46:36.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.943">${status} = False</msg>
<status endtime="20170810 02:46:36.943" starttime="20170810 02:46:36.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170810 02:46:36.944" starttime="20170810 02:46:36.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 02:46:36.944" starttime="20170810 02:46:36.944" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.953">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 02:46:36.953" starttime="20170810 02:46:36.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.962">${FFDC_DIR_PATH} = </msg>
<status endtime="20170810 02:46:36.962" starttime="20170810 02:46:36.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.964">${cur_time} = 2017-08-10 02:46:36:964044</msg>
<status endtime="20170810 02:46:36.964" starttime="20170810 02:46:36.964" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.965">${cur_time} = 20170810024636964044</msg>
<status endtime="20170810 02:46:36.965" starttime="20170810 02:46:36.964" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.965" starttime="20170810 02:46:36.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.969">${FFDC_TIME} = 20170810024636964044</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.970">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170810 02:46:36.970" starttime="20170810 02:46:36.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.971">${suite_name} = 20170810024636964044_TestsSecurityTestSsl</msg>
<status endtime="20170810 02:46:36.971" starttime="20170810 02:46:36.971" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.971">${test_name} = TestSSLConnection</msg>
<status endtime="20170810 02:46:36.972" starttime="20170810 02:46:36.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.972">${test_name} = 20170810024636964044_TestSSLConnection</msg>
<status endtime="20170810 02:46:36.972" starttime="20170810 02:46:36.972" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.972" starttime="20170810 02:46:36.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.973">${FFDC_DIR_PATH} = /tmp/fspcibld/19025/obmc-robot/logs/20170810024636964044_TestsSecurityTestSsl/20170810024636964044_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170810 02:46:36.977">${FFDC_PREFIX} = 20170810024636964044_</msg>
<status endtime="20170810 02:46:36.977" starttime="20170810 02:46:36.963" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.977" starttime="20170810 02:46:36.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 02:46:36.978" starttime="20170810 02:46:36.977" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:46:36.979">Created directory '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs"&gt;/tmp/fspcibld/19025/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170810 02:46:36.979" starttime="20170810 02:46:36.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:36.980">File '/tmp/fspcibld/19025/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170810 02:46:36.980" starttime="20170810 02:46:36.980" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.980">${exist} = False</msg>
<status endtime="20170810 02:46:36.980" starttime="20170810 02:46:36.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:46:36.981">Created file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:46:36.981" starttime="20170810 02:46:36.981" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.982" starttime="20170810 02:46:36.981" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 02:46:36.982" starttime="20170810 02:46:36.982" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.983">${cur_time} = 2017-08-10 02:46:36:982810</msg>
<status endtime="20170810 02:46:36.983" starttime="20170810 02:46:36.983" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:36.984">${cur_time} = 20170810024636982810</msg>
<status endtime="20170810 02:46:36.984" starttime="20170810 02:46:36.983" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:36.984">${cur_time} = 20170810024636982810</msg>
<status endtime="20170810 02:46:36.984" starttime="20170810 02:46:36.982" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:46:36.985">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:46:36.985" starttime="20170810 02:46:36.984" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.985" starttime="20170810 02:46:36.944" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:36.985" starttime="20170810 02:46:36.586" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170810 02:46:36.985" starttime="20170810 02:46:36.366" status="PASS"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:36.986">Delete All Sessions</msg>
<status endtime="20170810 02:46:36.986" starttime="20170810 02:46:36.986" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170810 02:46:36.986" starttime="20170810 02:46:36.290" status="PASS"></status>
</suite>
<status endtime="20170810 02:46:36.987" starttime="20170810 02:46:36.289" status="PASS"></status>
</suite>
<suite source="/tmp/fspcibld/19025/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.024">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:46:37.024" starttime="20170810 02:46:37.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.025">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:46:37.025" starttime="20170810 02:46:37.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:37.025">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:46:37.025" starttime="20170810 02:46:37.023" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.027">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:46:37.027" starttime="20170810 02:46:37.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.027">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:46:37.028" starttime="20170810 02:46:37.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:37.028">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:46:37.028" starttime="20170810 02:46:37.026" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.029">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 02:46:37.029" starttime="20170810 02:46:37.029" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:46:37.029" starttime="20170810 02:46:37.029" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.034">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 02:46:37.040">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 02:46:37.040">${output} = /tmp/fspcibld/19025/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 02:46:37.040" starttime="20170810 02:46:37.030" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:46:37.043" starttime="20170810 02:46:37.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 02:46:37.044" starttime="20170810 02:46:37.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.044">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 02:46:37.044" starttime="20170810 02:46:37.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:37.045">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 02:46:37.045" starttime="20170810 02:46:37.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.045">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 02:46:37.045" starttime="20170810 02:46:37.045" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:46:37.046" starttime="20170810 02:46:37.046" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.050">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 02:46:37.064">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 02:46:37.064">${os_con_pid} = </msg>
<status endtime="20170810 02:46:37.064" starttime="20170810 02:46:37.046" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 02:46:37.078" starttime="20170810 02:46:37.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.081">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 02:46:37.081" starttime="20170810 02:46:37.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:46:37.084" starttime="20170810 02:46:37.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.085">${rc} = None</msg>
<msg level="INFO" timestamp="20170810 02:46:37.085">${output} = None</msg>
<status endtime="20170810 02:46:37.085" starttime="20170810 02:46:37.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:46:37.086" starttime="20170810 02:46:37.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:37.093">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170810 02:46:37.093" starttime="20170810 02:46:37.089" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:37.093" starttime="20170810 02:46:37.089" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:37.093" starttime="20170810 02:46:37.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.094">${output} = </msg>
<status endtime="20170810 02:46:37.094" starttime="20170810 02:46:37.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.094">${loc_quiet} = 1</msg>
<status endtime="20170810 02:46:37.094" starttime="20170810 02:46:37.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 02:46:37.159" starttime="20170810 02:46:37.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:37.162">${rc} = 1</msg>
<msg level="INFO" timestamp="20170810 02:46:37.163">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170810 02:46:37.163" starttime="20170810 02:46:37.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:37.164">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170810 02:46:37.164" starttime="20170810 02:46:37.025" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:46:37.171">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 02:46:37.172" starttime="20170810 02:46:37.170" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.173">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 02:46:37.173" starttime="20170810 02:46:37.172" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:46:37.173" starttime="20170810 02:46:37.173" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.177">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 02:46:37.180">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 02:46:37.180">${output} = /tmp/fspcibld/19025/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 02:46:37.180" starttime="20170810 02:46:37.174" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:46:37.183" starttime="20170810 02:46:37.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 02:46:37.184" starttime="20170810 02:46:37.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.185">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 02:46:37.185" starttime="20170810 02:46:37.184" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:37.185">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 02:46:37.186" starttime="20170810 02:46:37.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.186">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170810 02:46:37.187" starttime="20170810 02:46:37.186" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:46:37.187" starttime="20170810 02:46:37.187" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.191">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170810 02:46:37.203">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 02:46:37.203">${output} = </msg>
<status endtime="20170810 02:46:37.204" starttime="20170810 02:46:37.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 02:46:37.217" starttime="20170810 02:46:37.215" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:37.219" starttime="20170810 02:46:37.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:37.220">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.222">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170810 02:46:37.222" starttime="20170810 02:46:37.221" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.223">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 02:46:37.223" starttime="20170810 02:46:37.223" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:37.227">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:37.231" starttime="20170810 02:46:37.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.232">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:37.232" starttime="20170810 02:46:37.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.233">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:37.233" starttime="20170810 02:46:37.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:37.235" starttime="20170810 02:46:37.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:37.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:37.664" starttime="20170810 02:46:37.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:37.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:37.664">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:37.665" starttime="20170810 02:46:37.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:37.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:37.665" starttime="20170810 02:46:37.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:37.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:37.666" starttime="20170810 02:46:37.666" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:37.666" starttime="20170810 02:46:37.226" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:37.666" starttime="20170810 02:46:37.225" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:37.666" starttime="20170810 02:46:37.224" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.667">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 02:46:37.667" starttime="20170810 02:46:37.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.667">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:37.668" starttime="20170810 02:46:37.667" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 02:46:37.668" starttime="20170810 02:46:37.668" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:37.670">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170810 02:46:37.670" starttime="20170810 02:46:37.669" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:37.671">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 02:46:37.671" starttime="20170810 02:46:37.670" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:37.671" starttime="20170810 02:46:37.670" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:37.671" starttime="20170810 02:46:37.668" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:38.309">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170810 02:46:38.310">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:38.310" starttime="20170810 02:46:37.671" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:38.311">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:38.311" starttime="20170810 02:46:38.310" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:38.312">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:38.312" starttime="20170810 02:46:38.312" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:38.312" starttime="20170810 02:46:38.311" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:38.312" starttime="20170810 02:46:38.310" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:38.313">Delete All Sessions</msg>
<status endtime="20170810 02:46:38.313" starttime="20170810 02:46:38.313" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:38.313">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:38.313" starttime="20170810 02:46:37.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:38.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:38.314" starttime="20170810 02:46:38.313" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:38.314">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:46:38.314">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:46:38.314">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:46:38.314" starttime="20170810 02:46:38.314" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:38.315" starttime="20170810 02:46:37.222" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 02:46:38.315" starttime="20170810 02:46:38.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:38.320">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:38.320" starttime="20170810 02:46:38.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:38.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:38.321" starttime="20170810 02:46:38.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:38.322">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:38.322" starttime="20170810 02:46:38.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:38.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:38.323" starttime="20170810 02:46:38.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:39.211">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:39.211" starttime="20170810 02:46:38.323" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:39.211">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:39.211">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:39.211" starttime="20170810 02:46:38.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:39.212">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:39.212" starttime="20170810 02:46:39.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:39.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:39.213" starttime="20170810 02:46:39.213" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:39.213" starttime="20170810 02:46:38.319" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:39.213" starttime="20170810 02:46:38.319" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:39.213" starttime="20170810 02:46:38.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:39.214">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:46:39.214" starttime="20170810 02:46:39.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:39.216">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:39.216" starttime="20170810 02:46:39.215" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:39.217">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:39.217" starttime="20170810 02:46:39.217" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:39.217" starttime="20170810 02:46:39.216" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:39.217" starttime="20170810 02:46:39.215" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:39.217" starttime="20170810 02:46:39.214" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.088">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:46:40.089">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:40.089" starttime="20170810 02:46:39.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.091">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:40.091" starttime="20170810 02:46:40.090" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:40.092">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:40.092" starttime="20170810 02:46:40.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.092" starttime="20170810 02:46:40.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.092" starttime="20170810 02:46:40.090" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.092" starttime="20170810 02:46:40.089" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:40.092">Delete All Sessions</msg>
<status endtime="20170810 02:46:40.093" starttime="20170810 02:46:40.092" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:40.093">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:40.093" starttime="20170810 02:46:38.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:40.094">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:40.094" starttime="20170810 02:46:40.093" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.095">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:46:40.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:46:40.095">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:46:40.095" starttime="20170810 02:46:40.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:40.095">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:46:40.095" starttime="20170810 02:46:38.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:40.096">${power_state} = Off</msg>
<status endtime="20170810 02:46:40.096" starttime="20170810 02:46:38.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:46:40.096" starttime="20170810 02:46:40.096" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.097" starttime="20170810 02:46:38.316" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:40.101">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:40.101" starttime="20170810 02:46:40.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:40.102" starttime="20170810 02:46:40.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.102">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:40.102" starttime="20170810 02:46:40.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:40.103" starttime="20170810 02:46:40.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:40.779">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:40.780" starttime="20170810 02:46:40.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:40.780">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:40.780">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:40.780" starttime="20170810 02:46:40.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:40.780">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:40.781" starttime="20170810 02:46:40.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:40.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:40.781" starttime="20170810 02:46:40.781" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.781" starttime="20170810 02:46:40.100" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.781" starttime="20170810 02:46:40.099" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.782" starttime="20170810 02:46:40.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.782">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:46:40.782" starttime="20170810 02:46:40.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:40.784">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:40.784" starttime="20170810 02:46:40.784" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:40.785">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:40.785" starttime="20170810 02:46:40.785" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.785" starttime="20170810 02:46:40.784" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.785" starttime="20170810 02:46:40.783" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:40.785" starttime="20170810 02:46:40.782" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.618">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:46:44.618">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:44.619" starttime="20170810 02:46:40.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.621">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:44.621" starttime="20170810 02:46:44.620" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:44.622">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:44.622" starttime="20170810 02:46:44.622" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:44.622" starttime="20170810 02:46:44.621" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:44.622" starttime="20170810 02:46:44.620" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:44.622" starttime="20170810 02:46:44.619" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:44.623">Delete All Sessions</msg>
<status endtime="20170810 02:46:44.623" starttime="20170810 02:46:44.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:44.623">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:44.623" starttime="20170810 02:46:40.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:44.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:44.624" starttime="20170810 02:46:44.623" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.624">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:46:44.624">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:46:44.624">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:46:44.624" starttime="20170810 02:46:44.624" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:44.625">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 02:46:44.625" starttime="20170810 02:46:40.097" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:44.625">${host_state} = Off</msg>
<status endtime="20170810 02:46:44.625" starttime="20170810 02:46:40.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:46:44.625" starttime="20170810 02:46:44.625" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:44.626" starttime="20170810 02:46:38.316" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:44.626" starttime="20170810 02:46:38.315" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:44.626" starttime="20170810 02:46:37.221" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.627">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170810 02:46:44.627" starttime="20170810 02:46:44.626" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.628">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 02:46:44.628" starttime="20170810 02:46:44.627" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:44.631">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:44.631" starttime="20170810 02:46:44.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:44.632" starttime="20170810 02:46:44.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.632">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:44.632" starttime="20170810 02:46:44.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:44.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:44.633" starttime="20170810 02:46:44.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:45.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:45.373" starttime="20170810 02:46:44.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:45.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:45.373">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:45.373" starttime="20170810 02:46:44.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:45.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:45.374" starttime="20170810 02:46:45.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:45.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:45.376" starttime="20170810 02:46:45.374" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:45.376" starttime="20170810 02:46:44.630" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:45.376" starttime="20170810 02:46:44.629" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:45.376" starttime="20170810 02:46:44.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:45.377">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 02:46:45.377" starttime="20170810 02:46:45.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:45.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:45.377" starttime="20170810 02:46:45.377" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 02:46:45.378" starttime="20170810 02:46:45.377" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:45.380">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170810 02:46:45.380" starttime="20170810 02:46:45.379" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:45.381">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 02:46:45.381" starttime="20170810 02:46:45.380" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:45.381" starttime="20170810 02:46:45.380" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:45.381" starttime="20170810 02:46:45.378" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:46.648">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170810 02:46:46.649">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:46.649" starttime="20170810 02:46:45.381" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:46.650">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:46.650" starttime="20170810 02:46:46.649" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:46.651">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:46.651" starttime="20170810 02:46:46.651" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:46.651" starttime="20170810 02:46:46.650" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:46.651" starttime="20170810 02:46:46.649" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:46.652">Delete All Sessions</msg>
<status endtime="20170810 02:46:46.652" starttime="20170810 02:46:46.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:46.652">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:46.652" starttime="20170810 02:46:44.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:46.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:46.653" starttime="20170810 02:46:46.652" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:46.653">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:46:46.653">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:46:46.653">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:46:46.653" starttime="20170810 02:46:46.653" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:46.654" starttime="20170810 02:46:44.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 02:46:46.654" starttime="20170810 02:46:46.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:46.659">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:46.659" starttime="20170810 02:46:46.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:46.660">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:46.660" starttime="20170810 02:46:46.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:46.661">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:46.661" starttime="20170810 02:46:46.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:46.661">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:46.661" starttime="20170810 02:46:46.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:47.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:47.298" starttime="20170810 02:46:46.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:47.298">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:47.299">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:47.299" starttime="20170810 02:46:46.662" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:47.299">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:47.299" starttime="20170810 02:46:47.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:47.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:47.300" starttime="20170810 02:46:47.300" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:47.300" starttime="20170810 02:46:46.658" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:47.300" starttime="20170810 02:46:46.657" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:47.300" starttime="20170810 02:46:46.657" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:47.301">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:46:47.301" starttime="20170810 02:46:47.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:47.304">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:47.304" starttime="20170810 02:46:47.302" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:47.305">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:47.306" starttime="20170810 02:46:47.305" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:47.306" starttime="20170810 02:46:47.305" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:47.306" starttime="20170810 02:46:47.302" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:47.306" starttime="20170810 02:46:47.301" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:48.912">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:46:48.913">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:48.913" starttime="20170810 02:46:47.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:48.915">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:48.915" starttime="20170810 02:46:48.914" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:48.916">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:48.916" starttime="20170810 02:46:48.916" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:48.916" starttime="20170810 02:46:48.915" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:48.916" starttime="20170810 02:46:48.914" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:48.916" starttime="20170810 02:46:48.914" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:48.917">Delete All Sessions</msg>
<status endtime="20170810 02:46:48.917" starttime="20170810 02:46:48.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:48.917">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:48.917" starttime="20170810 02:46:46.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:48.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:48.918" starttime="20170810 02:46:48.917" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:48.918">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:46:48.918">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:46:48.918">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:46:48.918" starttime="20170810 02:46:48.918" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:48.919">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:46:48.919" starttime="20170810 02:46:46.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:48.919">${power_state} = Off</msg>
<status endtime="20170810 02:46:48.919" starttime="20170810 02:46:46.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:48.920">On != Off</msg>
<status endtime="20170810 02:46:48.920" starttime="20170810 02:46:48.919" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:48.920" starttime="20170810 02:46:46.655" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:48.921" starttime="20170810 02:46:46.655" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:58.926">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:46:58.927" starttime="20170810 02:46:58.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:58.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:46:58.927" starttime="20170810 02:46:58.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:58.928">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:46:58.928" starttime="20170810 02:46:58.928" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:58.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:46:58.929" starttime="20170810 02:46:58.928" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:59.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:46:59.235" starttime="20170810 02:46:58.929" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:59.235">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:46:59.235">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:59.235" starttime="20170810 02:46:58.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:59.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:59.236" starttime="20170810 02:46:59.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:59.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:59.237" starttime="20170810 02:46:59.236" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.237" starttime="20170810 02:46:58.925" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.237" starttime="20170810 02:46:58.925" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.237" starttime="20170810 02:46:58.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:59.238">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:46:59.238" starttime="20170810 02:46:59.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:59.240">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:59.240" starttime="20170810 02:46:59.239" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:59.241">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:46:59.241" starttime="20170810 02:46:59.241" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.241" starttime="20170810 02:46:59.240" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.241" starttime="20170810 02:46:59.238" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.241" starttime="20170810 02:46:59.238" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:59.307">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:46:59.307">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:59.307" starttime="20170810 02:46:59.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:59.309">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:59.309" starttime="20170810 02:46:59.309" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:59.310">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:46:59.310" starttime="20170810 02:46:59.310" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.310" starttime="20170810 02:46:59.309" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.311" starttime="20170810 02:46:59.308" status="PASS"></status>
</kw>
<status endtime="20170810 02:46:59.311" starttime="20170810 02:46:59.308" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:46:59.311">Delete All Sessions</msg>
<status endtime="20170810 02:46:59.311" starttime="20170810 02:46:59.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:59.311">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:46:59.311" starttime="20170810 02:46:58.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:46:59.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:46:59.312" starttime="20170810 02:46:59.312" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:46:59.313">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:46:59.313">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:46:59.313">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:46:59.313" starttime="20170810 02:46:59.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:59.313">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:46:59.313" starttime="20170810 02:46:58.923" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:46:59.313">${power_state} = Off</msg>
<status endtime="20170810 02:46:59.313" starttime="20170810 02:46:58.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:46:59.314">On != Off</msg>
<status endtime="20170810 02:46:59.314" starttime="20170810 02:46:59.314" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:59.314" starttime="20170810 02:46:58.922" status="FAIL"></status>
</kw>
<status endtime="20170810 02:46:59.314" starttime="20170810 02:46:58.921" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.320">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:09.320" starttime="20170810 02:47:09.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:09.321" starttime="20170810 02:47:09.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.322">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:09.322" starttime="20170810 02:47:09.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:09.323" starttime="20170810 02:47:09.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:09.707" starttime="20170810 02:47:09.323" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:09.707">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:09.707">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:09.707" starttime="20170810 02:47:09.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.708">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:09.708" starttime="20170810 02:47:09.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:09.709" starttime="20170810 02:47:09.708" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.709" starttime="20170810 02:47:09.319" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.709" starttime="20170810 02:47:09.319" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.709" starttime="20170810 02:47:09.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.710">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:47:09.710" starttime="20170810 02:47:09.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.712">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:09.712" starttime="20170810 02:47:09.711" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.713">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:09.713" starttime="20170810 02:47:09.713" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.713" starttime="20170810 02:47:09.712" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.713" starttime="20170810 02:47:09.711" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.713" starttime="20170810 02:47:09.710" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.776">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:09.776">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:09.776" starttime="20170810 02:47:09.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.778">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:09.778" starttime="20170810 02:47:09.778" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.779">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:09.779" starttime="20170810 02:47:09.779" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.779" starttime="20170810 02:47:09.778" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.779" starttime="20170810 02:47:09.777" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.779" starttime="20170810 02:47:09.777" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:09.780">Delete All Sessions</msg>
<status endtime="20170810 02:47:09.780" starttime="20170810 02:47:09.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:09.780">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:09.780" starttime="20170810 02:47:09.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:09.781" starttime="20170810 02:47:09.780" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.781">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:09.781">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:09.782">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:09.782" starttime="20170810 02:47:09.781" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:09.782">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:47:09.782" starttime="20170810 02:47:09.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:09.782">${power_state} = On</msg>
<status endtime="20170810 02:47:09.782" starttime="20170810 02:47:09.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:47:09.783" starttime="20170810 02:47:09.782" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.783" starttime="20170810 02:47:09.316" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.789">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:09.789" starttime="20170810 02:47:09.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.790">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:09.790" starttime="20170810 02:47:09.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.791">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:09.791" starttime="20170810 02:47:09.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:09.791" starttime="20170810 02:47:09.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:09.993" starttime="20170810 02:47:09.792" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:09.994">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:09.994">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:09.994" starttime="20170810 02:47:09.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.994">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:09.994" starttime="20170810 02:47:09.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:09.995" starttime="20170810 02:47:09.995" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.995" starttime="20170810 02:47:09.788" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.995" starttime="20170810 02:47:09.785" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.995" starttime="20170810 02:47:09.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.996">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:47:09.996" starttime="20170810 02:47:09.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:09.998">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:09.998" starttime="20170810 02:47:09.997" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:09.999">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:09.999" starttime="20170810 02:47:09.999" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.999" starttime="20170810 02:47:09.998" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.999" starttime="20170810 02:47:09.997" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:09.999" starttime="20170810 02:47:09.996" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.089">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:10.089">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:10.090" starttime="20170810 02:47:10.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.091">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:10.091" starttime="20170810 02:47:10.091" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.092">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:10.093" starttime="20170810 02:47:10.092" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.093" starttime="20170810 02:47:10.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.093" starttime="20170810 02:47:10.090" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.093" starttime="20170810 02:47:10.090" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:10.093">Delete All Sessions</msg>
<status endtime="20170810 02:47:10.093" starttime="20170810 02:47:10.093" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:10.094">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:10.094" starttime="20170810 02:47:09.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.094">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:10.094" starttime="20170810 02:47:10.094" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.095">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:10.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:10.095">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:10.095" starttime="20170810 02:47:10.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:10.095">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:47:10.095" starttime="20170810 02:47:09.783" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:10.096">${host_state} = Running</msg>
<status endtime="20170810 02:47:10.096" starttime="20170810 02:47:09.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:47:10.096" starttime="20170810 02:47:10.096" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.100">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:10.100" starttime="20170810 02:47:10.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.101">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:10.101" starttime="20170810 02:47:10.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.102">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:10.102" starttime="20170810 02:47:10.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.102">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:10.102" starttime="20170810 02:47:10.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.293">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:10.293" starttime="20170810 02:47:10.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:10.293">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:10.293">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:10.293" starttime="20170810 02:47:10.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.294">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:10.294" starttime="20170810 02:47:10.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:10.295" starttime="20170810 02:47:10.294" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.295" starttime="20170810 02:47:10.099" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.295" starttime="20170810 02:47:10.099" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.296" starttime="20170810 02:47:10.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.296">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:47:10.296" starttime="20170810 02:47:10.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.298">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:10.298" starttime="20170810 02:47:10.297" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.299">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:10.299" starttime="20170810 02:47:10.299" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.299" starttime="20170810 02:47:10.298" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.299" starttime="20170810 02:47:10.297" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.300" starttime="20170810 02:47:10.296" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.375">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:10.375">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:10.375" starttime="20170810 02:47:10.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.377">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:10.377" starttime="20170810 02:47:10.376" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.378">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:10.378" starttime="20170810 02:47:10.378" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.378" starttime="20170810 02:47:10.377" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.378" starttime="20170810 02:47:10.376" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:10.378" starttime="20170810 02:47:10.376" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:10.379">Delete All Sessions</msg>
<status endtime="20170810 02:47:10.379" starttime="20170810 02:47:10.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:10.379">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:10.379" starttime="20170810 02:47:10.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:10.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:10.380" starttime="20170810 02:47:10.379" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:10.380">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:10.380">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:10.380">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:10.380" starttime="20170810 02:47:10.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:10.381">${state} = Off</msg>
<status endtime="20170810 02:47:10.381" starttime="20170810 02:47:10.097" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:10.381">${boot_progress} = Off</msg>
<status endtime="20170810 02:47:10.381" starttime="20170810 02:47:10.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:47:10.382">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:47:10.382" starttime="20170810 02:47:10.381" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:10.382" starttime="20170810 02:47:10.096" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:10.382" starttime="20170810 02:47:09.315" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.387">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:20.388" starttime="20170810 02:47:20.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.388">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:20.388" starttime="20170810 02:47:20.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.389">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:20.389" starttime="20170810 02:47:20.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.390">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:20.390" starttime="20170810 02:47:20.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:20.736" starttime="20170810 02:47:20.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:20.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:20.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:20.737" starttime="20170810 02:47:20.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:20.737" starttime="20170810 02:47:20.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:20.738" starttime="20170810 02:47:20.737" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.738" starttime="20170810 02:47:20.386" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.738" starttime="20170810 02:47:20.386" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.738" starttime="20170810 02:47:20.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.739">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:47:20.739" starttime="20170810 02:47:20.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.741">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:20.741" starttime="20170810 02:47:20.740" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.742">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:20.742" starttime="20170810 02:47:20.742" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.742" starttime="20170810 02:47:20.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.742" starttime="20170810 02:47:20.740" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.742" starttime="20170810 02:47:20.739" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.965">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:20.965">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:20.966" starttime="20170810 02:47:20.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.967">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:20.967" starttime="20170810 02:47:20.967" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.968">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:20.969" starttime="20170810 02:47:20.968" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.969" starttime="20170810 02:47:20.967" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.969" starttime="20170810 02:47:20.966" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.969" starttime="20170810 02:47:20.966" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:20.969">Delete All Sessions</msg>
<status endtime="20170810 02:47:20.969" starttime="20170810 02:47:20.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:20.970">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:20.970" starttime="20170810 02:47:20.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:20.970" starttime="20170810 02:47:20.970" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.971">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:20.971">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:20.971">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:20.971" starttime="20170810 02:47:20.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:20.971">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:47:20.971" starttime="20170810 02:47:20.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:20.972">${power_state} = On</msg>
<status endtime="20170810 02:47:20.972" starttime="20170810 02:47:20.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:47:20.972" starttime="20170810 02:47:20.972" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:20.972" starttime="20170810 02:47:20.383" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:20.976">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:20.976" starttime="20170810 02:47:20.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:20.977" starttime="20170810 02:47:20.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.977">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:20.977" starttime="20170810 02:47:20.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:20.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:20.978" starttime="20170810 02:47:20.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:21.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:21.468" starttime="20170810 02:47:20.979" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:21.468">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:21.468">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:21.468" starttime="20170810 02:47:20.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:21.469">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:21.469" starttime="20170810 02:47:21.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:21.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:21.470" starttime="20170810 02:47:21.469" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:21.470" starttime="20170810 02:47:20.975" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:21.470" starttime="20170810 02:47:20.974" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:21.470" starttime="20170810 02:47:20.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:21.470">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:47:21.470" starttime="20170810 02:47:21.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:21.473">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:21.473" starttime="20170810 02:47:21.472" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:21.474">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:21.474" starttime="20170810 02:47:21.473" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:21.474" starttime="20170810 02:47:21.473" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:21.474" starttime="20170810 02:47:21.471" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:21.474" starttime="20170810 02:47:21.471" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:22.028">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:22.028" starttime="20170810 02:47:21.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.030">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:22.030" starttime="20170810 02:47:22.030" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:22.031">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:22.031" starttime="20170810 02:47:22.031" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.031" starttime="20170810 02:47:22.030" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.031" starttime="20170810 02:47:22.029" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.031" starttime="20170810 02:47:22.029" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:22.032">Delete All Sessions</msg>
<status endtime="20170810 02:47:22.032" starttime="20170810 02:47:22.032" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:22.032">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:22.032" starttime="20170810 02:47:20.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:22.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:22.033" starttime="20170810 02:47:22.032" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.033">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:22.033">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:22.033">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:22.034" starttime="20170810 02:47:22.033" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:22.034">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:47:22.034" starttime="20170810 02:47:20.973" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:22.034">${host_state} = Running</msg>
<status endtime="20170810 02:47:22.034" starttime="20170810 02:47:20.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:47:22.035" starttime="20170810 02:47:22.034" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:22.038">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:22.039" starttime="20170810 02:47:22.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:22.039" starttime="20170810 02:47:22.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.040">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:22.040" starttime="20170810 02:47:22.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.041">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:22.041" starttime="20170810 02:47:22.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:22.613">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:22.614" starttime="20170810 02:47:22.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:22.614">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:22.614">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:22.614" starttime="20170810 02:47:22.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:22.614">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:22.615" starttime="20170810 02:47:22.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:22.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:22.615" starttime="20170810 02:47:22.615" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.615" starttime="20170810 02:47:22.038" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.615" starttime="20170810 02:47:22.037" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.616" starttime="20170810 02:47:22.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.616">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:47:22.616" starttime="20170810 02:47:22.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:22.618">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:22.618" starttime="20170810 02:47:22.617" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:22.619">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:22.619" starttime="20170810 02:47:22.619" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.619" starttime="20170810 02:47:22.618" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.620" starttime="20170810 02:47:22.617" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:22.620" starttime="20170810 02:47:22.616" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:23.012">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:23.013">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:23.013" starttime="20170810 02:47:22.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:23.015">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:23.015" starttime="20170810 02:47:23.014" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:23.015">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:23.016" starttime="20170810 02:47:23.015" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:23.016" starttime="20170810 02:47:23.015" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:23.016" starttime="20170810 02:47:23.013" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:23.016" starttime="20170810 02:47:23.013" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:23.016">Delete All Sessions</msg>
<status endtime="20170810 02:47:23.016" starttime="20170810 02:47:23.016" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:23.017">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:23.017" starttime="20170810 02:47:22.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:23.017">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:23.017" starttime="20170810 02:47:23.017" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:23.018">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:23.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:23.018">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:23.018" starttime="20170810 02:47:23.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:23.018">${state} = Off</msg>
<status endtime="20170810 02:47:23.018" starttime="20170810 02:47:22.036" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:23.018">${boot_progress} = Off</msg>
<status endtime="20170810 02:47:23.019" starttime="20170810 02:47:22.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:47:23.019">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:47:23.019" starttime="20170810 02:47:23.019" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:23.019" starttime="20170810 02:47:22.035" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:23.020" starttime="20170810 02:47:20.382" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:33.025">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:33.026" starttime="20170810 02:47:33.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:33.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:33.026" starttime="20170810 02:47:33.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:33.027">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:33.027" starttime="20170810 02:47:33.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:33.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:33.028" starttime="20170810 02:47:33.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:33.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:33.470" starttime="20170810 02:47:33.028" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:33.470">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:33.470">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:33.470" starttime="20170810 02:47:33.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:33.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:33.470" starttime="20170810 02:47:33.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:33.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:33.471" starttime="20170810 02:47:33.471" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:33.471" starttime="20170810 02:47:33.024" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:33.471" starttime="20170810 02:47:33.023" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:33.471" starttime="20170810 02:47:33.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:33.472">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:47:33.472" starttime="20170810 02:47:33.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:33.474">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:33.474" starttime="20170810 02:47:33.473" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:33.475">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:33.475" starttime="20170810 02:47:33.475" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:33.475" starttime="20170810 02:47:33.474" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:33.475" starttime="20170810 02:47:33.473" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:33.475" starttime="20170810 02:47:33.472" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.259">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:34.259">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:34.259" starttime="20170810 02:47:33.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.261">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:34.261" starttime="20170810 02:47:34.260" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:34.262">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:34.262" starttime="20170810 02:47:34.262" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.262" starttime="20170810 02:47:34.261" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.263" starttime="20170810 02:47:34.260" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.263" starttime="20170810 02:47:34.260" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:34.263">Delete All Sessions</msg>
<status endtime="20170810 02:47:34.263" starttime="20170810 02:47:34.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:34.263">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:34.263" starttime="20170810 02:47:33.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:34.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:34.264" starttime="20170810 02:47:34.263" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.264">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:34.265">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:34.265">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:34.265" starttime="20170810 02:47:34.264" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:34.265">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:47:34.265" starttime="20170810 02:47:33.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:34.265">${power_state} = On</msg>
<status endtime="20170810 02:47:34.265" starttime="20170810 02:47:33.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:47:34.266" starttime="20170810 02:47:34.266" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.266" starttime="20170810 02:47:33.020" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:34.271">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:34.272" starttime="20170810 02:47:34.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.272">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:34.272" starttime="20170810 02:47:34.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.273">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:34.273" starttime="20170810 02:47:34.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.273">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:34.273" starttime="20170810 02:47:34.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:34.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:34.812" starttime="20170810 02:47:34.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:34.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:34.812">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:34.812" starttime="20170810 02:47:34.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:34.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:34.813" starttime="20170810 02:47:34.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:34.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:34.813" starttime="20170810 02:47:34.813" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.813" starttime="20170810 02:47:34.270" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.813" starttime="20170810 02:47:34.269" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.813" starttime="20170810 02:47:34.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.814">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:47:34.814" starttime="20170810 02:47:34.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:34.816">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:34.817" starttime="20170810 02:47:34.815" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:34.817">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:34.817" starttime="20170810 02:47:34.817" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.818" starttime="20170810 02:47:34.817" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.818" starttime="20170810 02:47:34.815" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:34.818" starttime="20170810 02:47:34.814" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:35.913">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:35.914">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:35.914" starttime="20170810 02:47:34.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:35.915">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:35.915" starttime="20170810 02:47:35.915" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:35.916">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:35.916" starttime="20170810 02:47:35.916" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:35.916" starttime="20170810 02:47:35.915" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:35.916" starttime="20170810 02:47:35.914" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:35.917" starttime="20170810 02:47:35.914" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:35.917">Delete All Sessions</msg>
<status endtime="20170810 02:47:35.917" starttime="20170810 02:47:35.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:35.917">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:35.917" starttime="20170810 02:47:34.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:35.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:35.918" starttime="20170810 02:47:35.917" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:35.918">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:35.918">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:35.919">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:35.919" starttime="20170810 02:47:35.918" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:35.919">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:47:35.919" starttime="20170810 02:47:34.267" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:35.919">${host_state} = Running</msg>
<status endtime="20170810 02:47:35.919" starttime="20170810 02:47:34.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:47:35.920" starttime="20170810 02:47:35.919" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:35.924">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:35.924" starttime="20170810 02:47:35.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:35.925">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:35.925" starttime="20170810 02:47:35.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:35.926">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:35.926" starttime="20170810 02:47:35.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:35.926">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:35.926" starttime="20170810 02:47:35.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:36.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:36.377" starttime="20170810 02:47:35.927" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:36.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:36.377">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:36.377" starttime="20170810 02:47:35.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:36.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:36.378" starttime="20170810 02:47:36.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:36.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:36.378" starttime="20170810 02:47:36.378" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:36.379" starttime="20170810 02:47:35.923" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:36.379" starttime="20170810 02:47:35.922" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:36.379" starttime="20170810 02:47:35.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:36.379">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:47:36.379" starttime="20170810 02:47:36.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:36.381">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:36.381" starttime="20170810 02:47:36.381" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:36.382">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:36.382" starttime="20170810 02:47:36.382" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:36.383" starttime="20170810 02:47:36.382" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:36.383" starttime="20170810 02:47:36.380" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:36.383" starttime="20170810 02:47:36.380" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:37.454">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:37.454">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:37.454" starttime="20170810 02:47:36.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:37.456">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:37.456" starttime="20170810 02:47:37.456" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:37.457">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:37.457" starttime="20170810 02:47:37.457" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:37.457" starttime="20170810 02:47:37.456" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:37.457" starttime="20170810 02:47:37.455" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:37.457" starttime="20170810 02:47:37.455" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:37.458">Delete All Sessions</msg>
<status endtime="20170810 02:47:37.458" starttime="20170810 02:47:37.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:37.458">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:37.458" starttime="20170810 02:47:35.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:37.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:37.459" starttime="20170810 02:47:37.458" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:37.459">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:37.459">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:37.460">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:37.460" starttime="20170810 02:47:37.459" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:37.460">${state} = Off</msg>
<status endtime="20170810 02:47:37.460" starttime="20170810 02:47:35.921" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:37.460">${boot_progress} = Off</msg>
<status endtime="20170810 02:47:37.460" starttime="20170810 02:47:35.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:47:37.461">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:47:37.461" starttime="20170810 02:47:37.460" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:37.461" starttime="20170810 02:47:35.920" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:37.461" starttime="20170810 02:47:33.020" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:47.467">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:47.467" starttime="20170810 02:47:47.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:47.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:47.468" starttime="20170810 02:47:47.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:47.468">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:47.468" starttime="20170810 02:47:47.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:47.469">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:47.469" starttime="20170810 02:47:47.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:47.853">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:47.853" starttime="20170810 02:47:47.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:47.853">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:47.853">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:47.853" starttime="20170810 02:47:47.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:47.854">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:47.854" starttime="20170810 02:47:47.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:47.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:47.855" starttime="20170810 02:47:47.854" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:47.855" starttime="20170810 02:47:47.466" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:47.855" starttime="20170810 02:47:47.465" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:47.855" starttime="20170810 02:47:47.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:47.856">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:47:47.856" starttime="20170810 02:47:47.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:47.858">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:47.858" starttime="20170810 02:47:47.857" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:47.859">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:47.859" starttime="20170810 02:47:47.859" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:47.859" starttime="20170810 02:47:47.858" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:47.859" starttime="20170810 02:47:47.857" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:47.859" starttime="20170810 02:47:47.856" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.416">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:48.417">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:48.417" starttime="20170810 02:47:47.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.423">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:48.423" starttime="20170810 02:47:48.418" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:48.425">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:48.425" starttime="20170810 02:47:48.424" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.425" starttime="20170810 02:47:48.423" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.425" starttime="20170810 02:47:48.418" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.425" starttime="20170810 02:47:48.417" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:48.425">Delete All Sessions</msg>
<status endtime="20170810 02:47:48.426" starttime="20170810 02:47:48.425" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:48.426">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:48.426" starttime="20170810 02:47:47.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:48.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:48.426" starttime="20170810 02:47:48.426" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.427">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:48.427">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:48.427">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:48.427" starttime="20170810 02:47:48.427" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:48.427">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:47:48.427" starttime="20170810 02:47:47.463" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:48.428">${power_state} = On</msg>
<status endtime="20170810 02:47:48.428" starttime="20170810 02:47:47.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:47:48.428" starttime="20170810 02:47:48.428" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.428" starttime="20170810 02:47:47.462" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:48.432">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:48.432" starttime="20170810 02:47:48.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.433">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:48.433" starttime="20170810 02:47:48.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.434">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:48.434" starttime="20170810 02:47:48.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.434">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:48.434" starttime="20170810 02:47:48.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:48.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:48.890" starttime="20170810 02:47:48.435" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:48.890">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:48.890">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:48.890" starttime="20170810 02:47:48.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:48.891">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:48.891" starttime="20170810 02:47:48.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:48.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:48.892" starttime="20170810 02:47:48.891" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.892" starttime="20170810 02:47:48.431" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.892" starttime="20170810 02:47:48.431" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.892" starttime="20170810 02:47:48.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.893">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:47:48.893" starttime="20170810 02:47:48.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:48.937">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:48.937" starttime="20170810 02:47:48.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:48.939">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:47:48.939" starttime="20170810 02:47:48.938" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.939" starttime="20170810 02:47:48.938" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.939" starttime="20170810 02:47:48.893" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:48.939" starttime="20170810 02:47:48.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.481">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:49.482">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:49.482" starttime="20170810 02:47:48.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:49.483" starttime="20170810 02:47:49.483" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:49.484">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:49.484" starttime="20170810 02:47:49.484" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.485" starttime="20170810 02:47:49.484" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.485" starttime="20170810 02:47:49.482" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.485" starttime="20170810 02:47:49.482" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:49.485">Delete All Sessions</msg>
<status endtime="20170810 02:47:49.485" starttime="20170810 02:47:49.485" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:49.485">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:49.485" starttime="20170810 02:47:48.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:49.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:49.486" starttime="20170810 02:47:49.486" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:49.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:49.487">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:49.487" starttime="20170810 02:47:49.486" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:49.487">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:47:49.487" starttime="20170810 02:47:48.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:49.487">${host_state} = Running</msg>
<status endtime="20170810 02:47:49.487" starttime="20170810 02:47:48.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:47:49.488" starttime="20170810 02:47:49.488" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:49.492">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:47:49.493" starttime="20170810 02:47:49.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:47:49.493" starttime="20170810 02:47:49.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.494">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:47:49.494" starttime="20170810 02:47:49.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:47:49.495" starttime="20170810 02:47:49.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:49.875">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:47:49.875" starttime="20170810 02:47:49.495" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:49.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:47:49.875">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:49.875" starttime="20170810 02:47:49.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:49.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:49.876" starttime="20170810 02:47:49.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:49.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:49.876" starttime="20170810 02:47:49.876" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.876" starttime="20170810 02:47:49.491" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.876" starttime="20170810 02:47:49.491" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.877" starttime="20170810 02:47:49.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.877">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:47:49.877" starttime="20170810 02:47:49.877" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:49.879">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:49.879" starttime="20170810 02:47:49.878" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:49.880">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:47:49.880" starttime="20170810 02:47:49.880" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.880" starttime="20170810 02:47:49.879" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.880" starttime="20170810 02:47:49.878" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:49.880" starttime="20170810 02:47:49.877" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:50.402">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:47:50.402">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:50.402" starttime="20170810 02:47:49.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:50.404">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:50.404" starttime="20170810 02:47:50.403" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:50.405">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:47:50.405" starttime="20170810 02:47:50.404" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:50.405" starttime="20170810 02:47:50.404" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:50.405" starttime="20170810 02:47:50.403" status="PASS"></status>
</kw>
<status endtime="20170810 02:47:50.405" starttime="20170810 02:47:50.402" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:47:50.405">Delete All Sessions</msg>
<status endtime="20170810 02:47:50.405" starttime="20170810 02:47:50.405" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:50.406">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:47:50.406" starttime="20170810 02:47:49.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:47:50.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:47:50.406" starttime="20170810 02:47:50.406" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:47:50.407">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:47:50.407">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:47:50.407">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:47:50.407" starttime="20170810 02:47:50.407" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:50.407">${state} = Off</msg>
<status endtime="20170810 02:47:50.407" starttime="20170810 02:47:49.489" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:47:50.407">${boot_progress} = Off</msg>
<status endtime="20170810 02:47:50.408" starttime="20170810 02:47:49.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:47:50.408">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:47:50.408" starttime="20170810 02:47:50.408" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:50.408" starttime="20170810 02:47:49.488" status="FAIL"></status>
</kw>
<status endtime="20170810 02:47:50.409" starttime="20170810 02:47:47.462" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:00.414">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:00.414" starttime="20170810 02:48:00.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:00.415">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:00.415" starttime="20170810 02:48:00.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:00.415">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:00.415" starttime="20170810 02:48:00.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:00.416">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:00.416" starttime="20170810 02:48:00.416" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:00.943">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:00.943" starttime="20170810 02:48:00.417" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:00.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:00.943">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:00.944" starttime="20170810 02:48:00.416" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:00.944">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:00.944" starttime="20170810 02:48:00.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:00.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:00.945" starttime="20170810 02:48:00.944" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:00.945" starttime="20170810 02:48:00.413" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:00.945" starttime="20170810 02:48:00.412" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:00.945" starttime="20170810 02:48:00.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:00.946">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:48:00.946" starttime="20170810 02:48:00.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:00.948">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:00.948" starttime="20170810 02:48:00.947" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:00.949">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:00.949" starttime="20170810 02:48:00.949" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:00.949" starttime="20170810 02:48:00.948" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:00.949" starttime="20170810 02:48:00.946" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:00.949" starttime="20170810 02:48:00.946" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.314">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:01.314">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:01.314" starttime="20170810 02:48:00.950" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.316">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:01.316" starttime="20170810 02:48:01.316" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:01.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:01.317" starttime="20170810 02:48:01.317" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.317" starttime="20170810 02:48:01.316" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.318" starttime="20170810 02:48:01.315" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.318" starttime="20170810 02:48:01.315" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:01.318">Delete All Sessions</msg>
<status endtime="20170810 02:48:01.318" starttime="20170810 02:48:01.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:01.318">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:01.318" starttime="20170810 02:48:00.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:01.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:01.319" starttime="20170810 02:48:01.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:01.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:01.320">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:01.320" starttime="20170810 02:48:01.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:01.320">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:48:01.320" starttime="20170810 02:48:00.411" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:01.320">${power_state} = On</msg>
<status endtime="20170810 02:48:01.320" starttime="20170810 02:48:00.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:48:01.321" starttime="20170810 02:48:01.321" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.321" starttime="20170810 02:48:00.409" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:01.326">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:01.326" starttime="20170810 02:48:01.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:01.327" starttime="20170810 02:48:01.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.327">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:01.327" starttime="20170810 02:48:01.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:01.328" starttime="20170810 02:48:01.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:01.760">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:01.761" starttime="20170810 02:48:01.329" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:01.761">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:01.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:01.761" starttime="20170810 02:48:01.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:01.761">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:01.762" starttime="20170810 02:48:01.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:01.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:01.762" starttime="20170810 02:48:01.762" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.762" starttime="20170810 02:48:01.325" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.762" starttime="20170810 02:48:01.323" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.763" starttime="20170810 02:48:01.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.763">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:48:01.763" starttime="20170810 02:48:01.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:01.767">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:01.767" starttime="20170810 02:48:01.766" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:01.767">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:01.768" starttime="20170810 02:48:01.767" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.768" starttime="20170810 02:48:01.767" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.768" starttime="20170810 02:48:01.765" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:01.768" starttime="20170810 02:48:01.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.344">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:02.344">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:02.344" starttime="20170810 02:48:01.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.346">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:02.346" starttime="20170810 02:48:02.346" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:02.347">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:02.347" starttime="20170810 02:48:02.347" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.347" starttime="20170810 02:48:02.346" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.347" starttime="20170810 02:48:02.345" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.348" starttime="20170810 02:48:02.345" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:02.348">Delete All Sessions</msg>
<status endtime="20170810 02:48:02.348" starttime="20170810 02:48:02.348" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:02.348">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:02.348" starttime="20170810 02:48:01.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:02.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:02.349" starttime="20170810 02:48:02.348" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.349">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:02.349">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:02.350">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:02.350" starttime="20170810 02:48:02.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:02.350">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:48:02.350" starttime="20170810 02:48:01.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:02.350">${host_state} = Running</msg>
<status endtime="20170810 02:48:02.350" starttime="20170810 02:48:01.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:48:02.351" starttime="20170810 02:48:02.351" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:02.355">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:02.356" starttime="20170810 02:48:02.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.357">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:02.357" starttime="20170810 02:48:02.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.358">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:02.358" starttime="20170810 02:48:02.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.359">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:02.359" starttime="20170810 02:48:02.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:02.821">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:02.821" starttime="20170810 02:48:02.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:02.821">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:02.821">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:02.821" starttime="20170810 02:48:02.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:02.822">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:02.822" starttime="20170810 02:48:02.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:02.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:02.822" starttime="20170810 02:48:02.822" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.822" starttime="20170810 02:48:02.354" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.822" starttime="20170810 02:48:02.353" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.823" starttime="20170810 02:48:02.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.824">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:48:02.824" starttime="20170810 02:48:02.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:02.826">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:02.826" starttime="20170810 02:48:02.825" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:02.827">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:02.827" starttime="20170810 02:48:02.826" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.827" starttime="20170810 02:48:02.826" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.827" starttime="20170810 02:48:02.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:02.827" starttime="20170810 02:48:02.824" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:03.433">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:03.434">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:03.434" starttime="20170810 02:48:02.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:03.435">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:03.435" starttime="20170810 02:48:03.435" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:03.437">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:03.437" starttime="20170810 02:48:03.436" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:03.437" starttime="20170810 02:48:03.436" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:03.437" starttime="20170810 02:48:03.434" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:03.437" starttime="20170810 02:48:03.434" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:03.437">Delete All Sessions</msg>
<status endtime="20170810 02:48:03.438" starttime="20170810 02:48:03.437" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:03.438">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:03.438" starttime="20170810 02:48:02.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:03.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:03.438" starttime="20170810 02:48:03.438" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:03.439">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:03.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:03.439">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:03.439" starttime="20170810 02:48:03.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:03.439">${state} = Off</msg>
<status endtime="20170810 02:48:03.439" starttime="20170810 02:48:02.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:03.440">${boot_progress} = Off</msg>
<status endtime="20170810 02:48:03.440" starttime="20170810 02:48:02.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:48:03.441">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:48:03.441" starttime="20170810 02:48:03.440" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:03.441" starttime="20170810 02:48:02.351" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:03.441" starttime="20170810 02:48:00.409" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.446">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:13.446" starttime="20170810 02:48:13.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:13.447" starttime="20170810 02:48:13.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.448">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:13.448" starttime="20170810 02:48:13.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.448">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:13.448" starttime="20170810 02:48:13.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.779">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:13.779" starttime="20170810 02:48:13.449" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:13.779">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:13.779">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:13.780" starttime="20170810 02:48:13.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.780">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:13.780" starttime="20170810 02:48:13.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:13.781" starttime="20170810 02:48:13.781" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.781" starttime="20170810 02:48:13.445" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.781" starttime="20170810 02:48:13.445" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.781" starttime="20170810 02:48:13.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.782">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:48:13.782" starttime="20170810 02:48:13.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.784">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:13.784" starttime="20170810 02:48:13.783" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.785">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:13.785" starttime="20170810 02:48:13.785" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.785" starttime="20170810 02:48:13.784" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.785" starttime="20170810 02:48:13.783" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.785" starttime="20170810 02:48:13.782" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.877">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:13.877">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:13.877" starttime="20170810 02:48:13.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.879">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:13.879" starttime="20170810 02:48:13.878" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.880">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:13.880" starttime="20170810 02:48:13.880" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.880" starttime="20170810 02:48:13.879" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.881" starttime="20170810 02:48:13.878" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.881" starttime="20170810 02:48:13.877" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:13.881">Delete All Sessions</msg>
<status endtime="20170810 02:48:13.881" starttime="20170810 02:48:13.881" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:13.881">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:13.881" starttime="20170810 02:48:13.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:13.882" starttime="20170810 02:48:13.882" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.883">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:13.883">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:13.883">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:13.883" starttime="20170810 02:48:13.882" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:13.883">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:48:13.883" starttime="20170810 02:48:13.443" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:13.883">${power_state} = On</msg>
<status endtime="20170810 02:48:13.883" starttime="20170810 02:48:13.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:48:13.884" starttime="20170810 02:48:13.884" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:13.884" starttime="20170810 02:48:13.442" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:13.888">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:13.888" starttime="20170810 02:48:13.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.889">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:13.889" starttime="20170810 02:48:13.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.889">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:13.889" starttime="20170810 02:48:13.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:13.890">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:13.890" starttime="20170810 02:48:13.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:14.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:14.368" starttime="20170810 02:48:13.891" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:14.369">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:14.369">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:14.369" starttime="20170810 02:48:13.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:14.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:14.369" starttime="20170810 02:48:14.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:14.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:14.370" starttime="20170810 02:48:14.370" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.370" starttime="20170810 02:48:13.887" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.370" starttime="20170810 02:48:13.886" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.370" starttime="20170810 02:48:13.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.371">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:48:14.371" starttime="20170810 02:48:14.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.373">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:14.373" starttime="20170810 02:48:14.373" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:14.374">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:14.374" starttime="20170810 02:48:14.374" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.375" starttime="20170810 02:48:14.374" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.375" starttime="20170810 02:48:14.372" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.375" starttime="20170810 02:48:14.371" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.661">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:14.661">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:14.661" starttime="20170810 02:48:14.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.662">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:14.662" starttime="20170810 02:48:14.662" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:14.663">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:14.663" starttime="20170810 02:48:14.663" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.664" starttime="20170810 02:48:14.663" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.664" starttime="20170810 02:48:14.661" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:14.664" starttime="20170810 02:48:14.661" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:14.664">Delete All Sessions</msg>
<status endtime="20170810 02:48:14.664" starttime="20170810 02:48:14.664" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:14.664">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:14.664" starttime="20170810 02:48:13.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:14.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:14.665" starttime="20170810 02:48:14.665" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.666">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:14.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:14.666">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:14.666" starttime="20170810 02:48:14.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:14.666">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:48:14.666" starttime="20170810 02:48:13.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:14.666">${host_state} = Running</msg>
<status endtime="20170810 02:48:14.667" starttime="20170810 02:48:13.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:48:14.667" starttime="20170810 02:48:14.667" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:14.672">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:14.673" starttime="20170810 02:48:14.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:14.674" starttime="20170810 02:48:14.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.674">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:14.674" starttime="20170810 02:48:14.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:14.675">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:14.675" starttime="20170810 02:48:14.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:15.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:15.160" starttime="20170810 02:48:14.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:15.160">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:15.160">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:15.160" starttime="20170810 02:48:14.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:15.161">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:15.161" starttime="20170810 02:48:15.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:15.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:15.162" starttime="20170810 02:48:15.161" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.162" starttime="20170810 02:48:14.671" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.162" starttime="20170810 02:48:14.670" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.162" starttime="20170810 02:48:14.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:15.163">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:48:15.163" starttime="20170810 02:48:15.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:15.165">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:15.165" starttime="20170810 02:48:15.164" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:15.166">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:15.166" starttime="20170810 02:48:15.166" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.166" starttime="20170810 02:48:15.165" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.166" starttime="20170810 02:48:15.164" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.167" starttime="20170810 02:48:15.163" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:15.507">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:15.507">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:15.507" starttime="20170810 02:48:15.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:15.509">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:15.509" starttime="20170810 02:48:15.508" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:15.510">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:15.510" starttime="20170810 02:48:15.510" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.510" starttime="20170810 02:48:15.509" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.510" starttime="20170810 02:48:15.508" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:15.510" starttime="20170810 02:48:15.508" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:15.511">Delete All Sessions</msg>
<status endtime="20170810 02:48:15.511" starttime="20170810 02:48:15.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:15.511">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:15.511" starttime="20170810 02:48:14.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:15.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:15.512" starttime="20170810 02:48:15.511" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:15.512">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:15.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:15.512">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:15.513" starttime="20170810 02:48:15.512" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:15.513">${state} = Off</msg>
<status endtime="20170810 02:48:15.513" starttime="20170810 02:48:14.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:15.513">${boot_progress} = Off</msg>
<status endtime="20170810 02:48:15.513" starttime="20170810 02:48:14.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:48:15.514">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:48:15.514" starttime="20170810 02:48:15.514" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:15.514" starttime="20170810 02:48:14.667" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:15.514" starttime="20170810 02:48:13.441" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:25.519">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:25.520" starttime="20170810 02:48:25.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:25.520" starttime="20170810 02:48:25.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.521">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:25.521" starttime="20170810 02:48:25.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:25.522" starttime="20170810 02:48:25.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:25.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:25.804" starttime="20170810 02:48:25.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:25.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:25.804">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:25.804" starttime="20170810 02:48:25.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:25.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:25.805" starttime="20170810 02:48:25.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:25.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:25.806" starttime="20170810 02:48:25.805" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.806" starttime="20170810 02:48:25.518" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.806" starttime="20170810 02:48:25.518" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.806" starttime="20170810 02:48:25.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.806">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:48:25.807" starttime="20170810 02:48:25.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.809">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:25.809" starttime="20170810 02:48:25.808" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:25.810">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:25.810" starttime="20170810 02:48:25.809" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.810" starttime="20170810 02:48:25.809" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.810" starttime="20170810 02:48:25.807" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.810" starttime="20170810 02:48:25.807" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.990">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:25.990">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:25.990" starttime="20170810 02:48:25.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.992">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:25.992" starttime="20170810 02:48:25.991" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:25.993">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:25.993" starttime="20170810 02:48:25.993" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.994" starttime="20170810 02:48:25.992" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.994" starttime="20170810 02:48:25.991" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.994" starttime="20170810 02:48:25.990" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:25.994">Delete All Sessions</msg>
<status endtime="20170810 02:48:25.994" starttime="20170810 02:48:25.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:25.994">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:25.994" starttime="20170810 02:48:25.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:25.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:25.995" starttime="20170810 02:48:25.995" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:25.996">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:25.996">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:25.996">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:25.996" starttime="20170810 02:48:25.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:25.996">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:48:25.996" starttime="20170810 02:48:25.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:25.996">${power_state} = On</msg>
<status endtime="20170810 02:48:25.996" starttime="20170810 02:48:25.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:48:25.997" starttime="20170810 02:48:25.997" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:25.997" starttime="20170810 02:48:25.515" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.004">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:26.004" starttime="20170810 02:48:26.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:26.005" starttime="20170810 02:48:26.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.006">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:26.006" starttime="20170810 02:48:26.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:26.006" starttime="20170810 02:48:26.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.209">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:26.209" starttime="20170810 02:48:26.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.210">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:26.210">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:26.210" starttime="20170810 02:48:26.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.210">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:26.210" starttime="20170810 02:48:26.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:26.211" starttime="20170810 02:48:26.211" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.211" starttime="20170810 02:48:26.003" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.211" starttime="20170810 02:48:25.999" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.211" starttime="20170810 02:48:25.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.212">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:48:26.212" starttime="20170810 02:48:26.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.214">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:26.214" starttime="20170810 02:48:26.213" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.215">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:26.215" starttime="20170810 02:48:26.215" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.215" starttime="20170810 02:48:26.214" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.215" starttime="20170810 02:48:26.213" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.215" starttime="20170810 02:48:26.212" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.307">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:26.307">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:26.307" starttime="20170810 02:48:26.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.309">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:26.309" starttime="20170810 02:48:26.308" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.311">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:26.311" starttime="20170810 02:48:26.311" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.311" starttime="20170810 02:48:26.309" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.311" starttime="20170810 02:48:26.308" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.312" starttime="20170810 02:48:26.307" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:26.312">Delete All Sessions</msg>
<status endtime="20170810 02:48:26.312" starttime="20170810 02:48:26.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.312">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:26.312" starttime="20170810 02:48:25.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:26.313" starttime="20170810 02:48:26.312" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.313">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:26.313">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:26.314">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:26.314" starttime="20170810 02:48:26.313" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.314">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:48:26.314" starttime="20170810 02:48:25.998" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.314">${host_state} = Running</msg>
<status endtime="20170810 02:48:26.314" starttime="20170810 02:48:25.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:48:26.315" starttime="20170810 02:48:26.314" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.318">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:26.319" starttime="20170810 02:48:26.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.319">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:26.319" starttime="20170810 02:48:26.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.320">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:26.320" starttime="20170810 02:48:26.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.321">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:26.321" starttime="20170810 02:48:26.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.521">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:26.521" starttime="20170810 02:48:26.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.521">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:26.521">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:26.521" starttime="20170810 02:48:26.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.522">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:26.522" starttime="20170810 02:48:26.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.523">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:26.523" starttime="20170810 02:48:26.522" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.523" starttime="20170810 02:48:26.318" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.523" starttime="20170810 02:48:26.317" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.523" starttime="20170810 02:48:26.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.524">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:48:26.524" starttime="20170810 02:48:26.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.526">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:26.526" starttime="20170810 02:48:26.525" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.527">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:26.527" starttime="20170810 02:48:26.526" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.527" starttime="20170810 02:48:26.526" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.527" starttime="20170810 02:48:26.524" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.527" starttime="20170810 02:48:26.524" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.609">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:26.609">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:26.609" starttime="20170810 02:48:26.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.611">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:26.611" starttime="20170810 02:48:26.611" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.612">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:26.612" starttime="20170810 02:48:26.612" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.612" starttime="20170810 02:48:26.611" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.612" starttime="20170810 02:48:26.610" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:26.612" starttime="20170810 02:48:26.610" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:26.613">Delete All Sessions</msg>
<status endtime="20170810 02:48:26.613" starttime="20170810 02:48:26.613" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.613">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:26.613" starttime="20170810 02:48:26.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:26.614">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:26.614" starttime="20170810 02:48:26.613" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:26.614">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:26.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:26.614">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:26.614" starttime="20170810 02:48:26.614" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.615">${state} = Off</msg>
<status endtime="20170810 02:48:26.615" starttime="20170810 02:48:26.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:26.615">${boot_progress} = Off</msg>
<status endtime="20170810 02:48:26.615" starttime="20170810 02:48:26.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:48:26.616">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:48:26.616" starttime="20170810 02:48:26.615" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:26.616" starttime="20170810 02:48:26.315" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:26.616" starttime="20170810 02:48:25.515" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.622">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:36.622" starttime="20170810 02:48:36.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:36.623" starttime="20170810 02:48:36.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.624">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:36.624" starttime="20170810 02:48:36.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.624">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:36.624" starttime="20170810 02:48:36.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.915">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:36.916" starttime="20170810 02:48:36.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:36.916">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:36.916">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:36.916" starttime="20170810 02:48:36.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.916">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:36.916" starttime="20170810 02:48:36.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:36.917" starttime="20170810 02:48:36.917" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.917" starttime="20170810 02:48:36.620" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.917" starttime="20170810 02:48:36.619" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.917" starttime="20170810 02:48:36.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.918">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:48:36.918" starttime="20170810 02:48:36.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.920">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:36.921" starttime="20170810 02:48:36.919" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.921">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:36.922" starttime="20170810 02:48:36.921" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.923" starttime="20170810 02:48:36.921" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.923" starttime="20170810 02:48:36.919" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.923" starttime="20170810 02:48:36.918" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.987">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:36.987">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:36.987" starttime="20170810 02:48:36.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.989">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:36.989" starttime="20170810 02:48:36.988" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.990">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:36.990" starttime="20170810 02:48:36.990" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.990" starttime="20170810 02:48:36.989" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.990" starttime="20170810 02:48:36.988" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.991" starttime="20170810 02:48:36.987" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:36.991">Delete All Sessions</msg>
<status endtime="20170810 02:48:36.991" starttime="20170810 02:48:36.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:36.991">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:36.991" starttime="20170810 02:48:36.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.992">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:36.992" starttime="20170810 02:48:36.992" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.993">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:36.993">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:36.993">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:36.993" starttime="20170810 02:48:36.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:36.993">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:48:36.993" starttime="20170810 02:48:36.618" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:36.993">${power_state} = On</msg>
<status endtime="20170810 02:48:36.993" starttime="20170810 02:48:36.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:48:36.994" starttime="20170810 02:48:36.994" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:36.994" starttime="20170810 02:48:36.617" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:36.997">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:36.998" starttime="20170810 02:48:36.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:36.998" starttime="20170810 02:48:36.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:36.999">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:36.999" starttime="20170810 02:48:36.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.000">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:37.000" starttime="20170810 02:48:36.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.217">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:37.217" starttime="20170810 02:48:37.000" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.217">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:37.217">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:37.217" starttime="20170810 02:48:37.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.218">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:37.218" starttime="20170810 02:48:37.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:37.219" starttime="20170810 02:48:37.218" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.219" starttime="20170810 02:48:36.997" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.219" starttime="20170810 02:48:36.996" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.219" starttime="20170810 02:48:36.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.222">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:48:37.222" starttime="20170810 02:48:37.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.224">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:37.224" starttime="20170810 02:48:37.223" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.225">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:37.225" starttime="20170810 02:48:37.225" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.225" starttime="20170810 02:48:37.224" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.225" starttime="20170810 02:48:37.222" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.225" starttime="20170810 02:48:37.222" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.346">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:37.346">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:37.347" starttime="20170810 02:48:37.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.348">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:37.348" starttime="20170810 02:48:37.348" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.349">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:37.349" starttime="20170810 02:48:37.349" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.349" starttime="20170810 02:48:37.348" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.349" starttime="20170810 02:48:37.347" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.350" starttime="20170810 02:48:37.347" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:37.350">Delete All Sessions</msg>
<status endtime="20170810 02:48:37.350" starttime="20170810 02:48:37.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.350">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:37.350" starttime="20170810 02:48:36.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:37.351" starttime="20170810 02:48:37.350" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.351">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:37.352">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:37.352">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:37.352" starttime="20170810 02:48:37.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.352">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:48:37.352" starttime="20170810 02:48:36.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.352">${host_state} = Running</msg>
<status endtime="20170810 02:48:37.352" starttime="20170810 02:48:36.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:48:37.353" starttime="20170810 02:48:37.353" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.357">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:37.358" starttime="20170810 02:48:37.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.359">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:37.359" starttime="20170810 02:48:37.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.360">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:37.360" starttime="20170810 02:48:37.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.361">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:37.361" starttime="20170810 02:48:37.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.545">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:37.545" starttime="20170810 02:48:37.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.545">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:37.545">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:37.545" starttime="20170810 02:48:37.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.546">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:37.546" starttime="20170810 02:48:37.546" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:37.547" starttime="20170810 02:48:37.546" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.547" starttime="20170810 02:48:37.356" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.547" starttime="20170810 02:48:37.356" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.547" starttime="20170810 02:48:37.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.548">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:48:37.548" starttime="20170810 02:48:37.547" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.550">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:37.550" starttime="20170810 02:48:37.549" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.550">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:37.551" starttime="20170810 02:48:37.550" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.551" starttime="20170810 02:48:37.550" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.551" starttime="20170810 02:48:37.548" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.551" starttime="20170810 02:48:37.548" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.617">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:37.617">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:37.617" starttime="20170810 02:48:37.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.619">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:37.619" starttime="20170810 02:48:37.618" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.621">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:37.621" starttime="20170810 02:48:37.620" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.621" starttime="20170810 02:48:37.619" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.621" starttime="20170810 02:48:37.618" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:37.622" starttime="20170810 02:48:37.617" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:37.622">Delete All Sessions</msg>
<status endtime="20170810 02:48:37.622" starttime="20170810 02:48:37.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.622">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:37.622" starttime="20170810 02:48:37.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:37.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:37.623" starttime="20170810 02:48:37.623" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:37.623">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:37.623">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:37.624">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:37.624" starttime="20170810 02:48:37.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.624">${state} = Off</msg>
<status endtime="20170810 02:48:37.624" starttime="20170810 02:48:37.354" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:37.624">${boot_progress} = Off</msg>
<status endtime="20170810 02:48:37.624" starttime="20170810 02:48:37.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:48:37.625">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:48:37.625" starttime="20170810 02:48:37.624" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:37.625" starttime="20170810 02:48:37.353" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:37.625" starttime="20170810 02:48:36.616" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.631">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:47.631" starttime="20170810 02:48:47.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:47.632" starttime="20170810 02:48:47.631" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.632">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:47.632" starttime="20170810 02:48:47.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:47.633" starttime="20170810 02:48:47.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:47.827" starttime="20170810 02:48:47.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:47.828">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:47.828">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:47.828" starttime="20170810 02:48:47.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:47.828" starttime="20170810 02:48:47.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:47.829" starttime="20170810 02:48:47.829" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.829" starttime="20170810 02:48:47.630" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.829" starttime="20170810 02:48:47.629" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.829" starttime="20170810 02:48:47.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.830">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:48:47.830" starttime="20170810 02:48:47.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.832">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:47.832" starttime="20170810 02:48:47.831" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.833">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:47.833" starttime="20170810 02:48:47.833" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.833" starttime="20170810 02:48:47.832" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.833" starttime="20170810 02:48:47.831" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.833" starttime="20170810 02:48:47.830" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:47.896">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:47.896" starttime="20170810 02:48:47.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:47.898" starttime="20170810 02:48:47.897" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.899">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:47.899" starttime="20170810 02:48:47.899" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.899" starttime="20170810 02:48:47.898" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.899" starttime="20170810 02:48:47.897" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.899" starttime="20170810 02:48:47.896" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:47.900">Delete All Sessions</msg>
<status endtime="20170810 02:48:47.900" starttime="20170810 02:48:47.900" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:47.900">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:47.900" starttime="20170810 02:48:47.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:47.901" starttime="20170810 02:48:47.900" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.901">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:47.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:47.901">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:47.902" starttime="20170810 02:48:47.901" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:47.902">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:48:47.902" starttime="20170810 02:48:47.627" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:47.902">${power_state} = On</msg>
<status endtime="20170810 02:48:47.902" starttime="20170810 02:48:47.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:48:47.903" starttime="20170810 02:48:47.902" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:47.903" starttime="20170810 02:48:47.626" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:47.906">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:47.907" starttime="20170810 02:48:47.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.907">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:47.907" starttime="20170810 02:48:47.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.908">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:47.908" starttime="20170810 02:48:47.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:47.909">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:47.909" starttime="20170810 02:48:47.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.132">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:48.132" starttime="20170810 02:48:47.910" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.132">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:48.132">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:48.132" starttime="20170810 02:48:47.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.133">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:48.133" starttime="20170810 02:48:48.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:48.133" starttime="20170810 02:48:48.133" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.134" starttime="20170810 02:48:47.905" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.134" starttime="20170810 02:48:47.905" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.134" starttime="20170810 02:48:47.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.134">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:48:48.134" starttime="20170810 02:48:48.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.137">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:48.137" starttime="20170810 02:48:48.136" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.138">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:48.138" starttime="20170810 02:48:48.137" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.138" starttime="20170810 02:48:48.137" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.138" starttime="20170810 02:48:48.135" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.138" starttime="20170810 02:48:48.135" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.256">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:48.256">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:48.256" starttime="20170810 02:48:48.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.258">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:48.258" starttime="20170810 02:48:48.258" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.259">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:48.260" starttime="20170810 02:48:48.259" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.260" starttime="20170810 02:48:48.258" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.260" starttime="20170810 02:48:48.257" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.260" starttime="20170810 02:48:48.257" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:48.260">Delete All Sessions</msg>
<status endtime="20170810 02:48:48.260" starttime="20170810 02:48:48.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.260">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:48.261" starttime="20170810 02:48:47.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:48.261" starttime="20170810 02:48:48.261" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.262">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:48.262">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:48.262">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:48.262" starttime="20170810 02:48:48.261" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.262">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:48:48.262" starttime="20170810 02:48:47.903" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.263">${host_state} = Running</msg>
<status endtime="20170810 02:48:48.263" starttime="20170810 02:48:47.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:48:48.263" starttime="20170810 02:48:48.263" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.267">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:48.267" starttime="20170810 02:48:48.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.268">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:48.268" starttime="20170810 02:48:48.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.268">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:48.268" starttime="20170810 02:48:48.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.269">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:48.269" starttime="20170810 02:48:48.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.465">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:48.465" starttime="20170810 02:48:48.270" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.465">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:48.465">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:48.465" starttime="20170810 02:48:48.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.466">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:48.466" starttime="20170810 02:48:48.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:48.466" starttime="20170810 02:48:48.466" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.467" starttime="20170810 02:48:48.266" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.467" starttime="20170810 02:48:48.266" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.467" starttime="20170810 02:48:48.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.467">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:48:48.467" starttime="20170810 02:48:48.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.469">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:48.469" starttime="20170810 02:48:48.469" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.470">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:48:48.470" starttime="20170810 02:48:48.470" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.470" starttime="20170810 02:48:48.469" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.471" starttime="20170810 02:48:48.468" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.471" starttime="20170810 02:48:48.468" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.586">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:48:48.586">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:48.587" starttime="20170810 02:48:48.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.588">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:48.588" starttime="20170810 02:48:48.588" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.589">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:48:48.589" starttime="20170810 02:48:48.589" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.589" starttime="20170810 02:48:48.588" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.589" starttime="20170810 02:48:48.587" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:48.590" starttime="20170810 02:48:48.587" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:48:48.590">Delete All Sessions</msg>
<status endtime="20170810 02:48:48.590" starttime="20170810 02:48:48.590" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.590">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:48.590" starttime="20170810 02:48:48.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:48.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:48.591" starttime="20170810 02:48:48.590" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:48.591">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:48:48.592">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:48:48.592">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:48:48.592" starttime="20170810 02:48:48.591" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.592">${state} = Off</msg>
<status endtime="20170810 02:48:48.592" starttime="20170810 02:48:48.264" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:48.592">${boot_progress} = Off</msg>
<status endtime="20170810 02:48:48.592" starttime="20170810 02:48:48.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:48:48.593">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:48:48.593" starttime="20170810 02:48:48.593" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:48.593" starttime="20170810 02:48:48.263" status="FAIL"></status>
</kw>
<status endtime="20170810 02:48:48.593" starttime="20170810 02:48:47.626" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:58.599">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:48:58.599" starttime="20170810 02:48:58.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:58.600">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:48:58.600" starttime="20170810 02:48:58.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:58.600">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:48:58.600" starttime="20170810 02:48:58.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:58.601">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:48:58.601" starttime="20170810 02:48:58.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:59.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:48:59.023" starttime="20170810 02:48:58.602" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:48:59.023">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:48:59.023">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:48:59.023" starttime="20170810 02:48:58.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:59.024">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:59.024" starttime="20170810 02:48:59.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:59.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:48:59.025" starttime="20170810 02:48:59.024" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:59.025" starttime="20170810 02:48:58.598" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:59.025" starttime="20170810 02:48:58.597" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:59.025" starttime="20170810 02:48:58.596" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:59.025">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:48:59.025" starttime="20170810 02:48:59.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:48:59.027">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:59.027" starttime="20170810 02:48:59.027" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:48:59.028">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:48:59.029" starttime="20170810 02:48:59.028" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:59.029" starttime="20170810 02:48:59.028" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:59.029" starttime="20170810 02:48:59.026" status="PASS"></status>
</kw>
<status endtime="20170810 02:48:59.029" starttime="20170810 02:48:59.026" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:03.705">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:03.705">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:03.705" starttime="20170810 02:48:59.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:03.711">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:03.711" starttime="20170810 02:49:03.707" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:03.712">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:03.712" starttime="20170810 02:49:03.712" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:03.712" starttime="20170810 02:49:03.711" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:03.712" starttime="20170810 02:49:03.706" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:03.712" starttime="20170810 02:49:03.706" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:03.713">Delete All Sessions</msg>
<status endtime="20170810 02:49:03.713" starttime="20170810 02:49:03.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:03.713">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:03.713" starttime="20170810 02:48:58.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:03.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:03.714" starttime="20170810 02:49:03.713" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:03.714">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:03.714">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:03.714">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:03.714" starttime="20170810 02:49:03.714" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:03.715">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:49:03.715" starttime="20170810 02:48:58.595" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:03.715">${power_state} = On</msg>
<status endtime="20170810 02:49:03.715" starttime="20170810 02:48:58.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:49:03.716" starttime="20170810 02:49:03.716" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:03.716" starttime="20170810 02:48:58.594" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:03.722">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:03.722" starttime="20170810 02:49:03.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:03.722">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:03.723" starttime="20170810 02:49:03.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:03.723">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:03.723" starttime="20170810 02:49:03.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:03.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:03.725" starttime="20170810 02:49:03.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:04.110" starttime="20170810 02:49:03.725" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:04.110">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:04.110" starttime="20170810 02:49:03.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:04.111" starttime="20170810 02:49:04.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:04.112" starttime="20170810 02:49:04.111" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.112" starttime="20170810 02:49:03.720" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.112" starttime="20170810 02:49:03.720" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.112" starttime="20170810 02:49:03.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.113">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:49:04.113" starttime="20170810 02:49:04.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.115">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:04.115" starttime="20170810 02:49:04.114" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.116">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:04.116" starttime="20170810 02:49:04.116" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.116" starttime="20170810 02:49:04.115" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.116" starttime="20170810 02:49:04.113" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.116" starttime="20170810 02:49:04.113" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.321">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:04.321">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:04.321" starttime="20170810 02:49:04.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.323">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:04.323" starttime="20170810 02:49:04.323" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.324">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:04.324" starttime="20170810 02:49:04.324" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.324" starttime="20170810 02:49:04.323" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.324" starttime="20170810 02:49:04.322" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.324" starttime="20170810 02:49:04.322" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:04.325">Delete All Sessions</msg>
<status endtime="20170810 02:49:04.325" starttime="20170810 02:49:04.325" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.325">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:04.325" starttime="20170810 02:49:03.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:04.326" starttime="20170810 02:49:04.325" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.326">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:04.326">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:04.327">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:04.327" starttime="20170810 02:49:04.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.327">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:49:04.327" starttime="20170810 02:49:03.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.327">${host_state} = Running</msg>
<status endtime="20170810 02:49:04.327" starttime="20170810 02:49:03.716" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:49:04.328" starttime="20170810 02:49:04.327" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.332">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:04.332" starttime="20170810 02:49:04.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.333">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:04.333" starttime="20170810 02:49:04.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.333">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:04.333" starttime="20170810 02:49:04.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.334">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:04.334" starttime="20170810 02:49:04.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.557">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:04.557" starttime="20170810 02:49:04.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.557">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:04.557">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:04.557" starttime="20170810 02:49:04.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.557">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:04.558" starttime="20170810 02:49:04.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:04.558" starttime="20170810 02:49:04.558" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.558" starttime="20170810 02:49:04.331" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.558" starttime="20170810 02:49:04.330" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.559" starttime="20170810 02:49:04.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.559">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:49:04.559" starttime="20170810 02:49:04.559" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.561">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:04.561" starttime="20170810 02:49:04.561" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.562">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:04.562" starttime="20170810 02:49:04.562" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.562" starttime="20170810 02:49:04.562" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.563" starttime="20170810 02:49:04.560" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.563" starttime="20170810 02:49:04.559" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.761">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:04.762">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:04.762" starttime="20170810 02:49:04.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.763">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:04.763" starttime="20170810 02:49:04.763" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.764">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:04.764" starttime="20170810 02:49:04.764" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.764" starttime="20170810 02:49:04.764" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.765" starttime="20170810 02:49:04.762" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:04.765" starttime="20170810 02:49:04.762" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:04.765">Delete All Sessions</msg>
<status endtime="20170810 02:49:04.765" starttime="20170810 02:49:04.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.765">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:04.765" starttime="20170810 02:49:04.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:04.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:04.766" starttime="20170810 02:49:04.766" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:04.767">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:04.767">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:04.767">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:04.767" starttime="20170810 02:49:04.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.767">${state} = Off</msg>
<status endtime="20170810 02:49:04.767" starttime="20170810 02:49:04.329" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:04.767">${boot_progress} = Off</msg>
<status endtime="20170810 02:49:04.767" starttime="20170810 02:49:04.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:49:04.768">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:49:04.768" starttime="20170810 02:49:04.768" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:04.768" starttime="20170810 02:49:04.328" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:04.768" starttime="20170810 02:48:58.594" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:14.774">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:14.774" starttime="20170810 02:49:14.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:14.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:14.775" starttime="20170810 02:49:14.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:14.776">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:14.776" starttime="20170810 02:49:14.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:14.776">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:14.776" starttime="20170810 02:49:14.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:15.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:15.073" starttime="20170810 02:49:14.777" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:15.073">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:15.073">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:15.073" starttime="20170810 02:49:14.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:15.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:15.074" starttime="20170810 02:49:15.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:15.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:15.074" starttime="20170810 02:49:15.074" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:15.074" starttime="20170810 02:49:14.773" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:15.074" starttime="20170810 02:49:14.772" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:15.075" starttime="20170810 02:49:14.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:15.075">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:49:15.075" starttime="20170810 02:49:15.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:15.077">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:15.077" starttime="20170810 02:49:15.077" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:15.078">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:15.078" starttime="20170810 02:49:15.078" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:15.078" starttime="20170810 02:49:15.077" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:15.078" starttime="20170810 02:49:15.076" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:15.078" starttime="20170810 02:49:15.075" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:17.439">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:17.440">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:17.440" starttime="20170810 02:49:15.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:17.442">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:17.442" starttime="20170810 02:49:17.441" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:17.443">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:17.443" starttime="20170810 02:49:17.443" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:17.444" starttime="20170810 02:49:17.442" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:17.444" starttime="20170810 02:49:17.441" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:17.444" starttime="20170810 02:49:17.440" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:17.444">Delete All Sessions</msg>
<status endtime="20170810 02:49:17.444" starttime="20170810 02:49:17.444" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:17.444">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:17.445" starttime="20170810 02:49:14.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:17.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:17.445" starttime="20170810 02:49:17.445" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:17.446">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:17.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:17.446">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:17.446" starttime="20170810 02:49:17.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:17.446">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 02:49:17.446" starttime="20170810 02:49:14.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:17.447">${power_state} = Off</msg>
<status endtime="20170810 02:49:17.447" starttime="20170810 02:49:14.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:49:17.447">On != Off</msg>
<status endtime="20170810 02:49:17.447" starttime="20170810 02:49:17.447" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:17.447" starttime="20170810 02:49:14.769" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:17.448" starttime="20170810 02:49:14.769" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:27.453">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:27.454" starttime="20170810 02:49:27.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:27.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:27.454" starttime="20170810 02:49:27.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:27.455">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:27.455" starttime="20170810 02:49:27.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:27.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:27.456" starttime="20170810 02:49:27.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:27.819">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:27.819" starttime="20170810 02:49:27.456" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:27.819">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:27.819">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:27.819" starttime="20170810 02:49:27.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:27.820">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:27.820" starttime="20170810 02:49:27.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:27.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:27.820" starttime="20170810 02:49:27.820" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:27.821" starttime="20170810 02:49:27.452" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:27.821" starttime="20170810 02:49:27.452" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:27.821" starttime="20170810 02:49:27.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:27.822">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:49:27.822" starttime="20170810 02:49:27.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:27.824">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:27.824" starttime="20170810 02:49:27.823" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:27.825">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:27.825" starttime="20170810 02:49:27.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:27.825" starttime="20170810 02:49:27.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:27.825" starttime="20170810 02:49:27.822" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:27.825" starttime="20170810 02:49:27.822" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.113">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:28.113">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.113" starttime="20170810 02:49:27.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.115">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:28.115" starttime="20170810 02:49:28.115" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.116">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:28.116" starttime="20170810 02:49:28.116" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.116" starttime="20170810 02:49:28.115" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.117" starttime="20170810 02:49:28.114" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.117" starttime="20170810 02:49:28.114" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:28.117">Delete All Sessions</msg>
<status endtime="20170810 02:49:28.117" starttime="20170810 02:49:28.117" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.117">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.117" starttime="20170810 02:49:27.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:28.118" starttime="20170810 02:49:28.118" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.118">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:28.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:28.119">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:28.119" starttime="20170810 02:49:28.118" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.119">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:49:28.119" starttime="20170810 02:49:27.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.120">${power_state} = On</msg>
<status endtime="20170810 02:49:28.120" starttime="20170810 02:49:27.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:49:28.120" starttime="20170810 02:49:28.120" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.120" starttime="20170810 02:49:27.449" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.124">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:28.125" starttime="20170810 02:49:28.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:28.125" starttime="20170810 02:49:28.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.126">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:28.126" starttime="20170810 02:49:28.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.127">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:28.127" starttime="20170810 02:49:28.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:28.526" starttime="20170810 02:49:28.127" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:28.527">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.527" starttime="20170810 02:49:28.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.527">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:28.528" starttime="20170810 02:49:28.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:28.528" starttime="20170810 02:49:28.528" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.528" starttime="20170810 02:49:28.123" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.528" starttime="20170810 02:49:28.123" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.529" starttime="20170810 02:49:28.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.530">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:49:28.530" starttime="20170810 02:49:28.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.533">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:28.533" starttime="20170810 02:49:28.532" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.534">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:28.534" starttime="20170810 02:49:28.534" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.534" starttime="20170810 02:49:28.533" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.534" starttime="20170810 02:49:28.531" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.535" starttime="20170810 02:49:28.530" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.648">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:28.648">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.648" starttime="20170810 02:49:28.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.650">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:28.650" starttime="20170810 02:49:28.649" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.651">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:28.651" starttime="20170810 02:49:28.650" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.651" starttime="20170810 02:49:28.650" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.651" starttime="20170810 02:49:28.649" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.651" starttime="20170810 02:49:28.648" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:28.651">Delete All Sessions</msg>
<status endtime="20170810 02:49:28.651" starttime="20170810 02:49:28.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.652">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.652" starttime="20170810 02:49:28.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:28.653" starttime="20170810 02:49:28.652" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.653">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:28.653">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:28.653">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:28.653" starttime="20170810 02:49:28.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.654">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:49:28.654" starttime="20170810 02:49:28.121" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.654">${host_state} = Running</msg>
<status endtime="20170810 02:49:28.654" starttime="20170810 02:49:28.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:49:28.654" starttime="20170810 02:49:28.654" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.659">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:28.659" starttime="20170810 02:49:28.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.660">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:28.660" starttime="20170810 02:49:28.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.660">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:28.660" starttime="20170810 02:49:28.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.661">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:28.661" starttime="20170810 02:49:28.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:28.905" starttime="20170810 02:49:28.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:28.905">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.906" starttime="20170810 02:49:28.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.906">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:28.906" starttime="20170810 02:49:28.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:28.907" starttime="20170810 02:49:28.907" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.907" starttime="20170810 02:49:28.658" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.907" starttime="20170810 02:49:28.657" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.907" starttime="20170810 02:49:28.657" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.908">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:49:28.908" starttime="20170810 02:49:28.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.910">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:28.910" starttime="20170810 02:49:28.909" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.911">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:28.911" starttime="20170810 02:49:28.911" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.911" starttime="20170810 02:49:28.910" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.911" starttime="20170810 02:49:28.909" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.911" starttime="20170810 02:49:28.908" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.981">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:28.981">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.981" starttime="20170810 02:49:28.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.983">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:28.983" starttime="20170810 02:49:28.982" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.983">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:28.984" starttime="20170810 02:49:28.983" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.984" starttime="20170810 02:49:28.983" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.984" starttime="20170810 02:49:28.982" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:28.984" starttime="20170810 02:49:28.981" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:28.984">Delete All Sessions</msg>
<status endtime="20170810 02:49:28.984" starttime="20170810 02:49:28.984" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:28.985" starttime="20170810 02:49:28.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:28.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:28.985" starttime="20170810 02:49:28.985" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:28.986">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:28.986">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:28.986">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:28.986" starttime="20170810 02:49:28.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.986">${state} = Off</msg>
<status endtime="20170810 02:49:28.986" starttime="20170810 02:49:28.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:28.986">${boot_progress} = Off</msg>
<status endtime="20170810 02:49:28.987" starttime="20170810 02:49:28.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:49:28.987">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:49:28.987" starttime="20170810 02:49:28.987" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:28.987" starttime="20170810 02:49:28.655" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:28.988" starttime="20170810 02:49:27.448" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:38.995">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:38.996" starttime="20170810 02:49:38.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:38.996">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:38.997" starttime="20170810 02:49:38.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:38.997">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:38.997" starttime="20170810 02:49:38.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:38.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:38.998" starttime="20170810 02:49:38.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:39.335">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:39.335" starttime="20170810 02:49:38.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:39.335">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:39.335">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:39.335" starttime="20170810 02:49:38.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:39.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:39.336" starttime="20170810 02:49:39.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:39.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:39.337" starttime="20170810 02:49:39.336" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.337" starttime="20170810 02:49:38.994" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.337" starttime="20170810 02:49:38.993" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.337" starttime="20170810 02:49:38.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.338">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:49:39.338" starttime="20170810 02:49:39.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.340">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:39.340" starttime="20170810 02:49:39.339" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:39.341">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:39.341" starttime="20170810 02:49:39.341" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.341" starttime="20170810 02:49:39.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.341" starttime="20170810 02:49:39.339" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.341" starttime="20170810 02:49:39.338" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:39.723">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:39.723" starttime="20170810 02:49:39.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.724">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:39.725" starttime="20170810 02:49:39.724" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:39.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:39.726" starttime="20170810 02:49:39.725" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.726" starttime="20170810 02:49:39.725" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.726" starttime="20170810 02:49:39.723" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.726" starttime="20170810 02:49:39.723" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:39.726">Delete All Sessions</msg>
<status endtime="20170810 02:49:39.726" starttime="20170810 02:49:39.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:39.727">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:39.727" starttime="20170810 02:49:38.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:39.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:39.727" starttime="20170810 02:49:39.727" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.728">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:39.728">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:39.728">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:39.728" starttime="20170810 02:49:39.728" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:39.728">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:49:39.728" starttime="20170810 02:49:38.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:39.729">${power_state} = On</msg>
<status endtime="20170810 02:49:39.729" starttime="20170810 02:49:38.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:49:39.729" starttime="20170810 02:49:39.729" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:39.729" starttime="20170810 02:49:38.989" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:39.733">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:39.734" starttime="20170810 02:49:39.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.735">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:39.735" starttime="20170810 02:49:39.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.735">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:39.735" starttime="20170810 02:49:39.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:39.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:39.736" starttime="20170810 02:49:39.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:40.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:40.236" starttime="20170810 02:49:39.737" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:40.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:40.236">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:40.236" starttime="20170810 02:49:39.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:40.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:40.237" starttime="20170810 02:49:40.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:40.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:40.237" starttime="20170810 02:49:40.237" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.237" starttime="20170810 02:49:39.732" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.237" starttime="20170810 02:49:39.732" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.238" starttime="20170810 02:49:39.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.238">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:49:40.238" starttime="20170810 02:49:40.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.240">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:40.240" starttime="20170810 02:49:40.240" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:40.241">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:40.241" starttime="20170810 02:49:40.241" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.241" starttime="20170810 02:49:40.240" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.241" starttime="20170810 02:49:40.239" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.242" starttime="20170810 02:49:40.238" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:40.722">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:40.722" starttime="20170810 02:49:40.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.724">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:40.724" starttime="20170810 02:49:40.724" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:40.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:40.725" starttime="20170810 02:49:40.725" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.725" starttime="20170810 02:49:40.724" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.725" starttime="20170810 02:49:40.723" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:40.726" starttime="20170810 02:49:40.723" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:40.726">Delete All Sessions</msg>
<status endtime="20170810 02:49:40.726" starttime="20170810 02:49:40.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:40.726">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:40.726" starttime="20170810 02:49:39.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:40.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:40.727" starttime="20170810 02:49:40.726" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:40.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:40.728">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:40.728" starttime="20170810 02:49:40.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:40.728">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:49:40.728" starttime="20170810 02:49:39.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:40.728">${host_state} = Running</msg>
<status endtime="20170810 02:49:40.728" starttime="20170810 02:49:39.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:49:40.729" starttime="20170810 02:49:40.729" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:40.734">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:40.734" starttime="20170810 02:49:40.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.735">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:40.735" starttime="20170810 02:49:40.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.736">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:40.736" starttime="20170810 02:49:40.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:40.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:40.736" starttime="20170810 02:49:40.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:41.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:41.079" starttime="20170810 02:49:40.737" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:41.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:41.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:41.079" starttime="20170810 02:49:40.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:41.080">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:41.080" starttime="20170810 02:49:41.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:41.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:41.081" starttime="20170810 02:49:41.080" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:41.081" starttime="20170810 02:49:40.733" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:41.081" starttime="20170810 02:49:40.733" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:41.081" starttime="20170810 02:49:40.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:41.082">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:49:41.082" starttime="20170810 02:49:41.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:41.084">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:41.084" starttime="20170810 02:49:41.083" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:41.091">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:41.091" starttime="20170810 02:49:41.085" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:41.091" starttime="20170810 02:49:41.084" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:41.091" starttime="20170810 02:49:41.083" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:41.091" starttime="20170810 02:49:41.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:42.297">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:42.298">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:42.298" starttime="20170810 02:49:41.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:42.300">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:42.300" starttime="20170810 02:49:42.299" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:42.301">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:42.301" starttime="20170810 02:49:42.300" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:42.301" starttime="20170810 02:49:42.300" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:42.301" starttime="20170810 02:49:42.299" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:42.301" starttime="20170810 02:49:42.298" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:42.301">Delete All Sessions</msg>
<status endtime="20170810 02:49:42.302" starttime="20170810 02:49:42.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:42.302">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:42.302" starttime="20170810 02:49:40.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:42.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:42.303" starttime="20170810 02:49:42.303" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:42.303">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:42.304">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:42.304">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:42.304" starttime="20170810 02:49:42.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:42.304">${state} = Off</msg>
<status endtime="20170810 02:49:42.304" starttime="20170810 02:49:40.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:42.304">${boot_progress} = Off</msg>
<status endtime="20170810 02:49:42.304" starttime="20170810 02:49:40.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:49:42.305">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:49:42.305" starttime="20170810 02:49:42.304" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:42.305" starttime="20170810 02:49:40.729" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:42.306" starttime="20170810 02:49:38.988" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.311">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:52.311" starttime="20170810 02:49:52.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:52.312" starttime="20170810 02:49:52.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.313">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:52.313" starttime="20170810 02:49:52.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.314">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:52.314" starttime="20170810 02:49:52.313" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.706">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:52.706" starttime="20170810 02:49:52.314" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:52.707">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:52.707">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:52.707" starttime="20170810 02:49:52.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.707">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:52.707" starttime="20170810 02:49:52.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:52.708" starttime="20170810 02:49:52.708" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.708" starttime="20170810 02:49:52.310" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.708" starttime="20170810 02:49:52.309" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.708" starttime="20170810 02:49:52.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.709">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:49:52.709" starttime="20170810 02:49:52.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.711">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:52.711" starttime="20170810 02:49:52.710" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.713">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:52.713" starttime="20170810 02:49:52.712" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.713" starttime="20170810 02:49:52.711" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.713" starttime="20170810 02:49:52.710" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.713" starttime="20170810 02:49:52.709" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.977">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:52.977">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:52.977" starttime="20170810 02:49:52.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.978">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:52.978" starttime="20170810 02:49:52.978" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.979">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:52.979" starttime="20170810 02:49:52.979" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.980" starttime="20170810 02:49:52.979" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.980" starttime="20170810 02:49:52.977" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.980" starttime="20170810 02:49:52.977" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:52.980">Delete All Sessions</msg>
<status endtime="20170810 02:49:52.980" starttime="20170810 02:49:52.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:52.980">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:52.980" starttime="20170810 02:49:52.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:52.981" starttime="20170810 02:49:52.981" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.982">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:52.982">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:52.982">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:52.982" starttime="20170810 02:49:52.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:52.982">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:49:52.982" starttime="20170810 02:49:52.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:52.983">${power_state} = On</msg>
<status endtime="20170810 02:49:52.983" starttime="20170810 02:49:52.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:49:52.983" starttime="20170810 02:49:52.983" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:52.983" starttime="20170810 02:49:52.307" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:52.987">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:52.988" starttime="20170810 02:49:52.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:52.988" starttime="20170810 02:49:52.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.989">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:52.989" starttime="20170810 02:49:52.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:52.989">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:52.989" starttime="20170810 02:49:52.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:53.378">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:53.379" starttime="20170810 02:49:52.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:53.379">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:53.379">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:53.379" starttime="20170810 02:49:52.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:53.379">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:53.380" starttime="20170810 02:49:53.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:53.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:53.380" starttime="20170810 02:49:53.380" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:53.380" starttime="20170810 02:49:52.986" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:53.380" starttime="20170810 02:49:52.986" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:53.381" starttime="20170810 02:49:52.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:53.381">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:49:53.381" starttime="20170810 02:49:53.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:53.383">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:53.383" starttime="20170810 02:49:53.383" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:53.384">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:49:53.384" starttime="20170810 02:49:53.384" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:53.384" starttime="20170810 02:49:53.384" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:53.385" starttime="20170810 02:49:53.382" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:53.385" starttime="20170810 02:49:53.381" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:54.028">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:54.028" starttime="20170810 02:49:53.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.030">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:54.030" starttime="20170810 02:49:54.029" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.030">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:54.031" starttime="20170810 02:49:54.030" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.031" starttime="20170810 02:49:54.030" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.031" starttime="20170810 02:49:54.029" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.031" starttime="20170810 02:49:54.028" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:54.031">Delete All Sessions</msg>
<status endtime="20170810 02:49:54.031" starttime="20170810 02:49:54.031" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:54.032">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:54.032" starttime="20170810 02:49:52.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:54.032" starttime="20170810 02:49:54.032" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.033">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:54.033">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:54.033">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:54.033" starttime="20170810 02:49:54.033" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:54.033">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:49:54.033" starttime="20170810 02:49:52.984" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:54.034">${host_state} = Running</msg>
<status endtime="20170810 02:49:54.034" starttime="20170810 02:49:52.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:49:54.034" starttime="20170810 02:49:54.034" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.038">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:49:54.039" starttime="20170810 02:49:54.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:49:54.039" starttime="20170810 02:49:54.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.040">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:49:54.040" starttime="20170810 02:49:54.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.041">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:49:54.041" starttime="20170810 02:49:54.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:49:54.434" starttime="20170810 02:49:54.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:54.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:49:54.434">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:54.434" starttime="20170810 02:49:54.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:54.435" starttime="20170810 02:49:54.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:54.436" starttime="20170810 02:49:54.435" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.436" starttime="20170810 02:49:54.037" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.436" starttime="20170810 02:49:54.037" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.436" starttime="20170810 02:49:54.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.437">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:49:54.437" starttime="20170810 02:49:54.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.439">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:54.439" starttime="20170810 02:49:54.438" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.440">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:49:54.440" starttime="20170810 02:49:54.440" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.440" starttime="20170810 02:49:54.439" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.440" starttime="20170810 02:49:54.437" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.440" starttime="20170810 02:49:54.437" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.969">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:49:54.970">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:54.970" starttime="20170810 02:49:54.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.971">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:54.971" starttime="20170810 02:49:54.971" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.972">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:49:54.973" starttime="20170810 02:49:54.972" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.973" starttime="20170810 02:49:54.972" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.973" starttime="20170810 02:49:54.970" status="PASS"></status>
</kw>
<status endtime="20170810 02:49:54.973" starttime="20170810 02:49:54.970" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:49:54.973">Delete All Sessions</msg>
<status endtime="20170810 02:49:54.973" starttime="20170810 02:49:54.973" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:54.974">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:49:54.974" starttime="20170810 02:49:54.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:49:54.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:49:54.975" starttime="20170810 02:49:54.974" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:49:54.975">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:49:54.975">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:49:54.975">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:49:54.975" starttime="20170810 02:49:54.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:54.976">${state} = Off</msg>
<status endtime="20170810 02:49:54.976" starttime="20170810 02:49:54.035" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:49:54.976">${boot_progress} = Off</msg>
<status endtime="20170810 02:49:54.976" starttime="20170810 02:49:54.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:49:54.977">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:49:54.977" starttime="20170810 02:49:54.976" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:54.977" starttime="20170810 02:49:54.034" status="FAIL"></status>
</kw>
<status endtime="20170810 02:49:54.977" starttime="20170810 02:49:52.306" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:04.982">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:04.982" starttime="20170810 02:50:04.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:04.983">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:04.983" starttime="20170810 02:50:04.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:04.984">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:04.984" starttime="20170810 02:50:04.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:04.984">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:04.984" starttime="20170810 02:50:04.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:05.515">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:05.515" starttime="20170810 02:50:04.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:05.515">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:05.515">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:05.515" starttime="20170810 02:50:04.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:05.516">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:05.516" starttime="20170810 02:50:05.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:05.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:05.516" starttime="20170810 02:50:05.516" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:05.516" starttime="20170810 02:50:04.981" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:05.516" starttime="20170810 02:50:04.981" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:05.517" starttime="20170810 02:50:04.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:05.517">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:50:05.517" starttime="20170810 02:50:05.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:05.519">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:05.519" starttime="20170810 02:50:05.519" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:05.521">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:05.521" starttime="20170810 02:50:05.520" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:05.521" starttime="20170810 02:50:05.520" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:05.521" starttime="20170810 02:50:05.518" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:05.521" starttime="20170810 02:50:05.518" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.376">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:06.377">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:06.377" starttime="20170810 02:50:05.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.378">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:06.378" starttime="20170810 02:50:06.378" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:06.379">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:06.379" starttime="20170810 02:50:06.379" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.380" starttime="20170810 02:50:06.379" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.380" starttime="20170810 02:50:06.377" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.380" starttime="20170810 02:50:06.377" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:06.380">Delete All Sessions</msg>
<status endtime="20170810 02:50:06.380" starttime="20170810 02:50:06.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:06.380">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:06.380" starttime="20170810 02:50:04.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:06.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:06.381" starttime="20170810 02:50:06.381" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.382">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:06.382">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:06.382">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:06.382" starttime="20170810 02:50:06.381" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:06.382">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:50:06.382" starttime="20170810 02:50:04.979" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:06.382">${power_state} = On</msg>
<status endtime="20170810 02:50:06.383" starttime="20170810 02:50:04.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:50:06.383" starttime="20170810 02:50:06.383" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.383" starttime="20170810 02:50:04.978" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:06.387">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:06.387" starttime="20170810 02:50:06.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.388">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:06.388" starttime="20170810 02:50:06.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.389">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:06.389" starttime="20170810 02:50:06.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.389">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:06.389" starttime="20170810 02:50:06.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:06.809">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:06.809" starttime="20170810 02:50:06.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:06.810">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:06.810">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:06.810" starttime="20170810 02:50:06.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:06.810">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:06.810" starttime="20170810 02:50:06.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:06.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:06.811" starttime="20170810 02:50:06.811" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.811" starttime="20170810 02:50:06.386" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.811" starttime="20170810 02:50:06.385" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.811" starttime="20170810 02:50:06.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.812">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:50:06.812" starttime="20170810 02:50:06.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:06.814">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:06.814" starttime="20170810 02:50:06.813" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:06.815">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:06.815" starttime="20170810 02:50:06.815" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.815" starttime="20170810 02:50:06.814" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.815" starttime="20170810 02:50:06.813" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:06.815" starttime="20170810 02:50:06.812" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.240">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:07.241">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:07.241" starttime="20170810 02:50:06.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.243">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:07.243" starttime="20170810 02:50:07.242" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:07.244">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:07.244" starttime="20170810 02:50:07.244" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.244" starttime="20170810 02:50:07.243" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.244" starttime="20170810 02:50:07.241" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.245" starttime="20170810 02:50:07.241" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:07.245">Delete All Sessions</msg>
<status endtime="20170810 02:50:07.245" starttime="20170810 02:50:07.245" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:07.245">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:07.245" starttime="20170810 02:50:06.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:07.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:07.246" starttime="20170810 02:50:07.245" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.246">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:07.246">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:07.247">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:07.247" starttime="20170810 02:50:07.246" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:07.247">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:50:07.247" starttime="20170810 02:50:06.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:07.247">${host_state} = Running</msg>
<status endtime="20170810 02:50:07.247" starttime="20170810 02:50:06.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:50:07.248" starttime="20170810 02:50:07.247" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:07.252">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:07.252" starttime="20170810 02:50:07.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:07.253" starttime="20170810 02:50:07.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.254">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:07.254" starttime="20170810 02:50:07.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:07.255" starttime="20170810 02:50:07.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:07.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:07.774" starttime="20170810 02:50:07.255" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:07.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:07.774">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:07.774" starttime="20170810 02:50:07.255" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:07.775">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:07.775" starttime="20170810 02:50:07.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:07.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:07.775" starttime="20170810 02:50:07.775" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.775" starttime="20170810 02:50:07.251" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.776" starttime="20170810 02:50:07.251" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.776" starttime="20170810 02:50:07.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.776">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:50:07.776" starttime="20170810 02:50:07.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:07.778">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:07.778" starttime="20170810 02:50:07.778" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:07.779">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:07.780" starttime="20170810 02:50:07.779" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.780" starttime="20170810 02:50:07.779" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.780" starttime="20170810 02:50:07.777" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:07.780" starttime="20170810 02:50:07.777" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:08.295">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:08.295">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:08.295" starttime="20170810 02:50:07.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:08.297">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:08.297" starttime="20170810 02:50:08.296" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:08.298">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:08.298" starttime="20170810 02:50:08.298" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:08.298" starttime="20170810 02:50:08.297" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:08.298" starttime="20170810 02:50:08.296" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:08.298" starttime="20170810 02:50:08.296" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:08.299">Delete All Sessions</msg>
<status endtime="20170810 02:50:08.299" starttime="20170810 02:50:08.298" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:08.299">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:08.299" starttime="20170810 02:50:07.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:08.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:08.300" starttime="20170810 02:50:08.299" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:08.300">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:08.300">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:08.300">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:08.300" starttime="20170810 02:50:08.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:08.301">${state} = Off</msg>
<status endtime="20170810 02:50:08.301" starttime="20170810 02:50:07.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:08.301">${boot_progress} = Off</msg>
<status endtime="20170810 02:50:08.301" starttime="20170810 02:50:07.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:50:08.301">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:50:08.302" starttime="20170810 02:50:08.301" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:08.302" starttime="20170810 02:50:07.248" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:08.302" starttime="20170810 02:50:04.978" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.307">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:18.307" starttime="20170810 02:50:18.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.308">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:18.308" starttime="20170810 02:50:18.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.309">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:18.309" starttime="20170810 02:50:18.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.310">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:18.310" starttime="20170810 02:50:18.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:18.781" starttime="20170810 02:50:18.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:18.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:18.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:18.781" starttime="20170810 02:50:18.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:18.782" starttime="20170810 02:50:18.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:18.783" starttime="20170810 02:50:18.782" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.783" starttime="20170810 02:50:18.306" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.783" starttime="20170810 02:50:18.306" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.783" starttime="20170810 02:50:18.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.783">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:50:18.783" starttime="20170810 02:50:18.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.785">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:18.786" starttime="20170810 02:50:18.785" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.786">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:18.787" starttime="20170810 02:50:18.786" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.787" starttime="20170810 02:50:18.786" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.787" starttime="20170810 02:50:18.784" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.787" starttime="20170810 02:50:18.784" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.966">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:18.966">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:18.967" starttime="20170810 02:50:18.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.968">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:18.968" starttime="20170810 02:50:18.968" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.969">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:18.969" starttime="20170810 02:50:18.969" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.970" starttime="20170810 02:50:18.969" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.970" starttime="20170810 02:50:18.967" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.970" starttime="20170810 02:50:18.967" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:18.970">Delete All Sessions</msg>
<status endtime="20170810 02:50:18.970" starttime="20170810 02:50:18.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:18.970">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:18.970" starttime="20170810 02:50:18.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.971">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:18.971" starttime="20170810 02:50:18.971" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.972">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:18.972">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:18.972">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:18.972" starttime="20170810 02:50:18.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:18.972">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:50:18.972" starttime="20170810 02:50:18.304" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:18.972">${power_state} = On</msg>
<status endtime="20170810 02:50:18.972" starttime="20170810 02:50:18.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:50:18.973" starttime="20170810 02:50:18.973" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:18.973" starttime="20170810 02:50:18.303" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:18.977">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:18.978" starttime="20170810 02:50:18.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.978">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:18.978" starttime="20170810 02:50:18.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.979">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:18.979" starttime="20170810 02:50:18.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:18.979">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:18.979" starttime="20170810 02:50:18.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:19.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:19.296" starttime="20170810 02:50:18.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:19.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:19.296">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:19.297" starttime="20170810 02:50:18.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:19.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:19.297" starttime="20170810 02:50:19.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:19.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:19.298" starttime="20170810 02:50:19.298" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.298" starttime="20170810 02:50:18.976" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.298" starttime="20170810 02:50:18.976" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.298" starttime="20170810 02:50:18.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.299">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:50:19.299" starttime="20170810 02:50:19.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.301">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:19.301" starttime="20170810 02:50:19.300" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:19.302">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:19.302" starttime="20170810 02:50:19.302" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.302" starttime="20170810 02:50:19.301" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.302" starttime="20170810 02:50:19.300" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.303" starttime="20170810 02:50:19.299" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.926">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:19.926">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:19.927" starttime="20170810 02:50:19.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.929">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:19.929" starttime="20170810 02:50:19.928" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:19.930">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:19.930" starttime="20170810 02:50:19.929" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.930" starttime="20170810 02:50:19.929" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.930" starttime="20170810 02:50:19.927" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:19.930" starttime="20170810 02:50:19.927" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:19.931">Delete All Sessions</msg>
<status endtime="20170810 02:50:19.931" starttime="20170810 02:50:19.930" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:19.931">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:19.931" starttime="20170810 02:50:18.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:19.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:19.932" starttime="20170810 02:50:19.931" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.932">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:19.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:19.933">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:19.933" starttime="20170810 02:50:19.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:19.933">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:50:19.933" starttime="20170810 02:50:18.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:19.933">${host_state} = Running</msg>
<status endtime="20170810 02:50:19.933" starttime="20170810 02:50:18.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:50:19.934" starttime="20170810 02:50:19.934" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:19.939">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:19.939" starttime="20170810 02:50:19.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.940">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:19.940" starttime="20170810 02:50:19.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.941">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:19.941" starttime="20170810 02:50:19.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:19.941">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:19.941" starttime="20170810 02:50:19.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:20.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:20.333" starttime="20170810 02:50:19.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:20.333">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:20.333">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:20.333" starttime="20170810 02:50:19.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:20.334">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:20.334" starttime="20170810 02:50:20.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:20.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:20.335" starttime="20170810 02:50:20.334" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.335" starttime="20170810 02:50:19.938" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.335" starttime="20170810 02:50:19.937" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.335" starttime="20170810 02:50:19.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:20.336">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:50:20.336" starttime="20170810 02:50:20.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:20.342">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:20.342" starttime="20170810 02:50:20.338" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:20.343">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:20.343" starttime="20170810 02:50:20.343" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.343" starttime="20170810 02:50:20.342" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.343" starttime="20170810 02:50:20.337" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.344" starttime="20170810 02:50:20.336" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:20.956">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:20.956">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:20.956" starttime="20170810 02:50:20.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:20.958">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:20.958" starttime="20170810 02:50:20.958" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:20.959">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:20.959" starttime="20170810 02:50:20.959" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.960" starttime="20170810 02:50:20.959" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.960" starttime="20170810 02:50:20.957" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:20.960" starttime="20170810 02:50:20.957" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:20.960">Delete All Sessions</msg>
<status endtime="20170810 02:50:20.960" starttime="20170810 02:50:20.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:20.960">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:20.960" starttime="20170810 02:50:19.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:20.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:20.961" starttime="20170810 02:50:20.961" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:20.962">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:20.962">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:20.962">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:20.962" starttime="20170810 02:50:20.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:20.963">${state} = Off</msg>
<status endtime="20170810 02:50:20.963" starttime="20170810 02:50:19.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:20.963">${boot_progress} = Off</msg>
<status endtime="20170810 02:50:20.963" starttime="20170810 02:50:19.935" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:50:20.964">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:50:20.964" starttime="20170810 02:50:20.964" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:20.965" starttime="20170810 02:50:19.934" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:20.965" starttime="20170810 02:50:18.302" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:30.970">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:30.970" starttime="20170810 02:50:30.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:30.971">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:30.971" starttime="20170810 02:50:30.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:30.971">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:30.971" starttime="20170810 02:50:30.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:30.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:30.972" starttime="20170810 02:50:30.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.243">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:31.243" starttime="20170810 02:50:30.973" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.243">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:31.244">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:31.244" starttime="20170810 02:50:30.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.244">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:31.244" starttime="20170810 02:50:31.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:31.245" starttime="20170810 02:50:31.245" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.245" starttime="20170810 02:50:30.969" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.245" starttime="20170810 02:50:30.968" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.245" starttime="20170810 02:50:30.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.246">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:50:31.246" starttime="20170810 02:50:31.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.248">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:31.248" starttime="20170810 02:50:31.247" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.249">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:31.249" starttime="20170810 02:50:31.249" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.249" starttime="20170810 02:50:31.248" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.249" starttime="20170810 02:50:31.247" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.249" starttime="20170810 02:50:31.246" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.345">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:31.345">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:31.345" starttime="20170810 02:50:31.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.347">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:31.347" starttime="20170810 02:50:31.346" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.348">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:31.348" starttime="20170810 02:50:31.348" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.348" starttime="20170810 02:50:31.347" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.348" starttime="20170810 02:50:31.346" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.348" starttime="20170810 02:50:31.346" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:31.349">Delete All Sessions</msg>
<status endtime="20170810 02:50:31.349" starttime="20170810 02:50:31.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.349">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:31.349" starttime="20170810 02:50:30.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:31.350" starttime="20170810 02:50:31.349" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.350">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:31.350">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:31.350">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:31.350" starttime="20170810 02:50:31.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.351">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:50:31.351" starttime="20170810 02:50:30.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.351">${power_state} = On</msg>
<status endtime="20170810 02:50:31.351" starttime="20170810 02:50:30.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:50:31.352" starttime="20170810 02:50:31.351" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.352" starttime="20170810 02:50:30.966" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.356">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:31.356" starttime="20170810 02:50:31.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.357">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:31.357" starttime="20170810 02:50:31.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.357">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:31.357" starttime="20170810 02:50:31.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.358">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:31.358" starttime="20170810 02:50:31.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.670">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:31.670" starttime="20170810 02:50:31.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.670">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:31.670">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:31.670" starttime="20170810 02:50:31.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.671">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:31.671" starttime="20170810 02:50:31.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:31.672" starttime="20170810 02:50:31.671" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.672" starttime="20170810 02:50:31.354" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.672" starttime="20170810 02:50:31.354" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.672" starttime="20170810 02:50:31.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.673">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:50:31.673" starttime="20170810 02:50:31.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.675">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:31.675" starttime="20170810 02:50:31.674" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.676">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:31.676" starttime="20170810 02:50:31.676" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.676" starttime="20170810 02:50:31.675" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.676" starttime="20170810 02:50:31.674" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.676" starttime="20170810 02:50:31.673" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.859">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:31.859">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:31.859" starttime="20170810 02:50:31.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.861">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:31.861" starttime="20170810 02:50:31.860" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.862">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:31.862" starttime="20170810 02:50:31.861" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.862" starttime="20170810 02:50:31.861" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.862" starttime="20170810 02:50:31.860" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:31.862" starttime="20170810 02:50:31.859" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:31.862">Delete All Sessions</msg>
<status endtime="20170810 02:50:31.863" starttime="20170810 02:50:31.862" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.863">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:31.863" starttime="20170810 02:50:31.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:31.864" starttime="20170810 02:50:31.863" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.864">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:31.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:31.865">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:31.865" starttime="20170810 02:50:31.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.865">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:50:31.865" starttime="20170810 02:50:31.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:31.866">${host_state} = Running</msg>
<status endtime="20170810 02:50:31.866" starttime="20170810 02:50:31.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:50:31.866" starttime="20170810 02:50:31.866" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:31.872">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:31.873" starttime="20170810 02:50:31.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.874">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:31.874" starttime="20170810 02:50:31.873" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.875">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:31.875" starttime="20170810 02:50:31.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:31.875">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:31.876" starttime="20170810 02:50:31.875" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:32.231">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:32.231" starttime="20170810 02:50:31.876" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:32.232">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:32.232">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:32.232" starttime="20170810 02:50:31.876" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:32.232">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:32.232" starttime="20170810 02:50:32.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:32.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:32.233" starttime="20170810 02:50:32.233" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.233" starttime="20170810 02:50:31.871" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.233" starttime="20170810 02:50:31.870" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.233" starttime="20170810 02:50:31.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:32.234">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:50:32.234" starttime="20170810 02:50:32.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:32.236">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:32.236" starttime="20170810 02:50:32.235" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:32.237">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:32.237" starttime="20170810 02:50:32.237" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.237" starttime="20170810 02:50:32.237" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.238" starttime="20170810 02:50:32.235" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.238" starttime="20170810 02:50:32.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:32.328">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:32.329">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:32.329" starttime="20170810 02:50:32.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:32.330">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:32.330" starttime="20170810 02:50:32.330" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:32.332">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:32.332" starttime="20170810 02:50:32.331" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.332" starttime="20170810 02:50:32.331" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.332" starttime="20170810 02:50:32.329" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:32.332" starttime="20170810 02:50:32.329" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:32.333">Delete All Sessions</msg>
<status endtime="20170810 02:50:32.333" starttime="20170810 02:50:32.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:32.333">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:32.333" starttime="20170810 02:50:31.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:32.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:32.334" starttime="20170810 02:50:32.333" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:32.334">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:32.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:32.334">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:32.334" starttime="20170810 02:50:32.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:32.335">${state} = Off</msg>
<status endtime="20170810 02:50:32.335" starttime="20170810 02:50:31.868" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:32.335">${boot_progress} = Off</msg>
<status endtime="20170810 02:50:32.335" starttime="20170810 02:50:31.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:50:32.336">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:50:32.336" starttime="20170810 02:50:32.335" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:32.336" starttime="20170810 02:50:31.867" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:32.336" starttime="20170810 02:50:30.965" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:42.341">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:42.341" starttime="20170810 02:50:42.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:42.342">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:42.342" starttime="20170810 02:50:42.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:42.342">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:42.342" starttime="20170810 02:50:42.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:42.343">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:42.343" starttime="20170810 02:50:42.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:42.742">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:42.742" starttime="20170810 02:50:42.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:42.742">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:42.742">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:42.742" starttime="20170810 02:50:42.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:42.742">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:42.743" starttime="20170810 02:50:42.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:42.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:42.743" starttime="20170810 02:50:42.743" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:42.743" starttime="20170810 02:50:42.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:42.744" starttime="20170810 02:50:42.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:42.744" starttime="20170810 02:50:42.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:42.744">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:50:42.744" starttime="20170810 02:50:42.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:42.747">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:42.747" starttime="20170810 02:50:42.746" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:42.748">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:42.748" starttime="20170810 02:50:42.747" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:42.748" starttime="20170810 02:50:42.747" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:42.748" starttime="20170810 02:50:42.745" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:42.748" starttime="20170810 02:50:42.745" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:43.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:43.529">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:43.529" starttime="20170810 02:50:42.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:43.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:43.531" starttime="20170810 02:50:43.530" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:43.532">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:43.532" starttime="20170810 02:50:43.531" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:43.532" starttime="20170810 02:50:43.531" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:43.532" starttime="20170810 02:50:43.530" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:43.532" starttime="20170810 02:50:43.529" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:43.532">Delete All Sessions</msg>
<status endtime="20170810 02:50:43.532" starttime="20170810 02:50:43.532" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:43.533">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:43.533" starttime="20170810 02:50:42.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:43.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:43.533" starttime="20170810 02:50:43.533" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:43.534">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:43.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:43.534">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:43.534" starttime="20170810 02:50:43.534" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:43.534">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:50:43.534" starttime="20170810 02:50:42.338" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:43.535">${power_state} = On</msg>
<status endtime="20170810 02:50:43.535" starttime="20170810 02:50:42.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:50:43.535" starttime="20170810 02:50:43.535" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:43.535" starttime="20170810 02:50:42.337" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:43.539">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:43.540" starttime="20170810 02:50:43.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:43.540">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:43.540" starttime="20170810 02:50:43.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:43.541">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:43.541" starttime="20170810 02:50:43.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:43.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:43.542" starttime="20170810 02:50:43.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:44.217">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:44.217" starttime="20170810 02:50:43.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:44.217">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:44.217">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:44.217" starttime="20170810 02:50:43.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:44.218">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:44.218" starttime="20170810 02:50:44.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:44.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:44.219" starttime="20170810 02:50:44.218" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:44.219" starttime="20170810 02:50:43.538" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:44.219" starttime="20170810 02:50:43.538" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:44.219" starttime="20170810 02:50:43.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:44.220">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:50:44.220" starttime="20170810 02:50:44.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:44.222">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:44.222" starttime="20170810 02:50:44.221" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:44.223">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:44.223" starttime="20170810 02:50:44.222" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:44.223" starttime="20170810 02:50:44.222" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:44.223" starttime="20170810 02:50:44.220" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:44.223" starttime="20170810 02:50:44.220" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.050">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:45.050">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:45.050" starttime="20170810 02:50:44.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.052">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:45.052" starttime="20170810 02:50:45.051" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:45.053">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:45.053" starttime="20170810 02:50:45.052" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.053" starttime="20170810 02:50:45.052" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.053" starttime="20170810 02:50:45.051" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.053" starttime="20170810 02:50:45.050" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:45.054">Delete All Sessions</msg>
<status endtime="20170810 02:50:45.054" starttime="20170810 02:50:45.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:45.054">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:45.054" starttime="20170810 02:50:43.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:45.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:45.055" starttime="20170810 02:50:45.054" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.055">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:45.055">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:45.055">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:45.055" starttime="20170810 02:50:45.055" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:45.056">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:50:45.056" starttime="20170810 02:50:43.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:45.056">${host_state} = Running</msg>
<status endtime="20170810 02:50:45.056" starttime="20170810 02:50:43.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:50:45.056" starttime="20170810 02:50:45.056" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:45.061">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:45.061" starttime="20170810 02:50:45.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.061">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:45.061" starttime="20170810 02:50:45.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.062">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:45.062" starttime="20170810 02:50:45.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.063">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:45.063" starttime="20170810 02:50:45.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:45.725">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:45.725" starttime="20170810 02:50:45.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:45.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:45.725">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:45.725" starttime="20170810 02:50:45.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:45.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:45.726" starttime="20170810 02:50:45.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:45.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:45.727" starttime="20170810 02:50:45.726" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.727" starttime="20170810 02:50:45.060" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.727" starttime="20170810 02:50:45.059" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.727" starttime="20170810 02:50:45.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.727">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:50:45.728" starttime="20170810 02:50:45.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:45.730">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:45.730" starttime="20170810 02:50:45.729" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:45.731">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:45.731" starttime="20170810 02:50:45.731" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.731" starttime="20170810 02:50:45.730" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.731" starttime="20170810 02:50:45.728" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:45.731" starttime="20170810 02:50:45.728" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:47.445">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:47.446">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:47.446" starttime="20170810 02:50:45.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:47.447">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:47.448" starttime="20170810 02:50:47.447" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:47.448">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:47.449" starttime="20170810 02:50:47.448" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:47.449" starttime="20170810 02:50:47.448" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:47.449" starttime="20170810 02:50:47.446" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:47.449" starttime="20170810 02:50:47.446" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:47.449">Delete All Sessions</msg>
<status endtime="20170810 02:50:47.449" starttime="20170810 02:50:47.449" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:47.449">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:47.450" starttime="20170810 02:50:45.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:47.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:47.450" starttime="20170810 02:50:47.450" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:47.451">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:47.451">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:47.451">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:47.451" starttime="20170810 02:50:47.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:47.451">${state} = Off</msg>
<status endtime="20170810 02:50:47.451" starttime="20170810 02:50:45.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:47.451">${boot_progress} = Off</msg>
<status endtime="20170810 02:50:47.451" starttime="20170810 02:50:45.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:50:47.452">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:50:47.452" starttime="20170810 02:50:47.452" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:47.452" starttime="20170810 02:50:45.057" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:47.453" starttime="20170810 02:50:42.336" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.458">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:57.458" starttime="20170810 02:50:57.457" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:57.459" starttime="20170810 02:50:57.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.459">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:57.459" starttime="20170810 02:50:57.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.460">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:57.460" starttime="20170810 02:50:57.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.750">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:57.750" starttime="20170810 02:50:57.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:57.750">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:57.751">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:57.751" starttime="20170810 02:50:57.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.751">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:57.751" starttime="20170810 02:50:57.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:57.752" starttime="20170810 02:50:57.751" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.752" starttime="20170810 02:50:57.457" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.752" starttime="20170810 02:50:57.456" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.752" starttime="20170810 02:50:57.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.753">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:50:57.753" starttime="20170810 02:50:57.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.755">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:57.755" starttime="20170810 02:50:57.754" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.756">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:57.756" starttime="20170810 02:50:57.756" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.756" starttime="20170810 02:50:57.755" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.756" starttime="20170810 02:50:57.754" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.756" starttime="20170810 02:50:57.753" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.828">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:57.829">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:57.829" starttime="20170810 02:50:57.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.830">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:57.830" starttime="20170810 02:50:57.830" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.831">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:57.832" starttime="20170810 02:50:57.831" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.832" starttime="20170810 02:50:57.831" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.832" starttime="20170810 02:50:57.829" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.832" starttime="20170810 02:50:57.829" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:57.832">Delete All Sessions</msg>
<status endtime="20170810 02:50:57.832" starttime="20170810 02:50:57.832" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:57.832">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:57.833" starttime="20170810 02:50:57.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:57.833" starttime="20170810 02:50:57.833" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:57.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:57.834">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:57.834" starttime="20170810 02:50:57.834" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:57.834">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:50:57.834" starttime="20170810 02:50:57.454" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:57.835">${power_state} = On</msg>
<status endtime="20170810 02:50:57.835" starttime="20170810 02:50:57.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:50:57.835" starttime="20170810 02:50:57.835" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:57.835" starttime="20170810 02:50:57.454" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:57.839">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:57.839" starttime="20170810 02:50:57.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:57.840" starttime="20170810 02:50:57.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.841">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:57.841" starttime="20170810 02:50:57.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:57.841">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:57.841" starttime="20170810 02:50:57.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:58.107" starttime="20170810 02:50:57.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.107">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:58.107">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:58.107" starttime="20170810 02:50:57.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.108">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:58.108" starttime="20170810 02:50:58.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:58.109" starttime="20170810 02:50:58.108" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.109" starttime="20170810 02:50:57.838" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.109" starttime="20170810 02:50:57.837" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.109" starttime="20170810 02:50:57.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.110">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:50:58.110" starttime="20170810 02:50:58.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.112">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:58.112" starttime="20170810 02:50:58.111" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.113">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:50:58.113" starttime="20170810 02:50:58.113" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.113" starttime="20170810 02:50:58.112" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.113" starttime="20170810 02:50:58.110" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.113" starttime="20170810 02:50:58.110" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.280">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:58.280">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:58.280" starttime="20170810 02:50:58.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.282">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:58.282" starttime="20170810 02:50:58.281" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.283">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:58.283" starttime="20170810 02:50:58.283" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.283" starttime="20170810 02:50:58.282" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.284" starttime="20170810 02:50:58.281" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.284" starttime="20170810 02:50:58.280" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:58.284">Delete All Sessions</msg>
<status endtime="20170810 02:50:58.284" starttime="20170810 02:50:58.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.284">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:58.284" starttime="20170810 02:50:57.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:58.285" starttime="20170810 02:50:58.285" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.286">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:58.286">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:58.286">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:58.286" starttime="20170810 02:50:58.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.286">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:50:58.286" starttime="20170810 02:50:57.836" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.286">${host_state} = Running</msg>
<status endtime="20170810 02:50:58.286" starttime="20170810 02:50:57.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:50:58.287" starttime="20170810 02:50:58.287" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.291">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:50:58.291" starttime="20170810 02:50:58.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:50:58.292" starttime="20170810 02:50:58.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.292">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:50:58.292" starttime="20170810 02:50:58.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:50:58.293" starttime="20170810 02:50:58.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:50:58.527" starttime="20170810 02:50:58.295" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:50:58.527">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:58.527" starttime="20170810 02:50:58.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:58.528" starttime="20170810 02:50:58.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:58.528" starttime="20170810 02:50:58.528" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.528" starttime="20170810 02:50:58.290" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.529" starttime="20170810 02:50:58.290" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.529" starttime="20170810 02:50:58.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.529">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:50:58.529" starttime="20170810 02:50:58.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.531">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:58.531" starttime="20170810 02:50:58.531" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.532">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:50:58.532" starttime="20170810 02:50:58.532" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.532" starttime="20170810 02:50:58.531" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.533" starttime="20170810 02:50:58.530" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.533" starttime="20170810 02:50:58.529" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.671">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:50:58.671">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:58.671" starttime="20170810 02:50:58.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.673">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:58.673" starttime="20170810 02:50:58.673" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.674">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:50:58.674" starttime="20170810 02:50:58.674" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.674" starttime="20170810 02:50:58.674" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.675" starttime="20170810 02:50:58.672" status="PASS"></status>
</kw>
<status endtime="20170810 02:50:58.675" starttime="20170810 02:50:58.672" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:50:58.675">Delete All Sessions</msg>
<status endtime="20170810 02:50:58.675" starttime="20170810 02:50:58.675" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.675">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:50:58.675" starttime="20170810 02:50:58.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:50:58.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:50:58.676" starttime="20170810 02:50:58.676" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:50:58.677">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:50:58.677">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:50:58.677">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:50:58.677" starttime="20170810 02:50:58.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.677">${state} = Off</msg>
<status endtime="20170810 02:50:58.677" starttime="20170810 02:50:58.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:50:58.677">${boot_progress} = Off</msg>
<status endtime="20170810 02:50:58.677" starttime="20170810 02:50:58.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:50:58.678">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:50:58.678" starttime="20170810 02:50:58.678" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:58.678" starttime="20170810 02:50:58.287" status="FAIL"></status>
</kw>
<status endtime="20170810 02:50:58.678" starttime="20170810 02:50:57.453" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:08.685">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:08.686" starttime="20170810 02:51:08.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:08.687">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:08.687" starttime="20170810 02:51:08.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:08.688">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:08.688" starttime="20170810 02:51:08.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:08.689">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:08.689" starttime="20170810 02:51:08.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:08.965">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:08.965" starttime="20170810 02:51:08.690" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:08.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:08.965">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:08.965" starttime="20170810 02:51:08.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:08.966">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:08.966" starttime="20170810 02:51:08.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:08.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:08.967" starttime="20170810 02:51:08.966" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:08.967" starttime="20170810 02:51:08.684" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:08.967" starttime="20170810 02:51:08.683" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:08.967" starttime="20170810 02:51:08.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:08.967">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:51:08.967" starttime="20170810 02:51:08.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:08.969">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:08.970" starttime="20170810 02:51:08.969" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:08.970">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:08.970" starttime="20170810 02:51:08.970" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:08.971" starttime="20170810 02:51:08.970" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:08.971" starttime="20170810 02:51:08.968" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:08.971" starttime="20170810 02:51:08.968" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.040">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:09.041">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.041" starttime="20170810 02:51:08.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.043">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:09.043" starttime="20170810 02:51:09.042" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.044">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:09.044" starttime="20170810 02:51:09.043" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.044" starttime="20170810 02:51:09.043" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.044" starttime="20170810 02:51:09.042" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.044" starttime="20170810 02:51:09.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:09.045">Delete All Sessions</msg>
<status endtime="20170810 02:51:09.045" starttime="20170810 02:51:09.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.045">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.045" starttime="20170810 02:51:08.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.045">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:09.046" starttime="20170810 02:51:09.045" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.046">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:09.046">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:09.046">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:09.046" starttime="20170810 02:51:09.046" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.047">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:51:09.047" starttime="20170810 02:51:08.680" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.047">${power_state} = On</msg>
<status endtime="20170810 02:51:09.047" starttime="20170810 02:51:08.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:51:09.048" starttime="20170810 02:51:09.047" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.048" starttime="20170810 02:51:08.679" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.051">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:09.052" starttime="20170810 02:51:09.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:09.052" starttime="20170810 02:51:09.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.053">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:09.053" starttime="20170810 02:51:09.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.053">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:09.053" starttime="20170810 02:51:09.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:09.257" starttime="20170810 02:51:09.054" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.257">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:09.257">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.257" starttime="20170810 02:51:09.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.258">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:09.258" starttime="20170810 02:51:09.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:09.259" starttime="20170810 02:51:09.258" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.259" starttime="20170810 02:51:09.050" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.259" starttime="20170810 02:51:09.050" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.259" starttime="20170810 02:51:09.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.260">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:51:09.260" starttime="20170810 02:51:09.259" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.262">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:09.262" starttime="20170810 02:51:09.261" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.263">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:09.263" starttime="20170810 02:51:09.263" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.263" starttime="20170810 02:51:09.262" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.263" starttime="20170810 02:51:09.260" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.263" starttime="20170810 02:51:09.260" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.363">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:09.363">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.363" starttime="20170810 02:51:09.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.365">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:09.365" starttime="20170810 02:51:09.365" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:09.366" starttime="20170810 02:51:09.366" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.366" starttime="20170810 02:51:09.365" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.366" starttime="20170810 02:51:09.364" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.366" starttime="20170810 02:51:09.364" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:09.367">Delete All Sessions</msg>
<status endtime="20170810 02:51:09.367" starttime="20170810 02:51:09.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.367">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.367" starttime="20170810 02:51:09.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:09.368" starttime="20170810 02:51:09.367" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.368">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:09.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:09.368">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:09.368" starttime="20170810 02:51:09.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.369">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:51:09.369" starttime="20170810 02:51:09.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.369">${host_state} = Running</msg>
<status endtime="20170810 02:51:09.369" starttime="20170810 02:51:09.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:51:09.370" starttime="20170810 02:51:09.369" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.373">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:09.374" starttime="20170810 02:51:09.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.374">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:09.374" starttime="20170810 02:51:09.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.375">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:09.375" starttime="20170810 02:51:09.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:09.376" starttime="20170810 02:51:09.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.754">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:09.754" starttime="20170810 02:51:09.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.754">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:09.754">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.754" starttime="20170810 02:51:09.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.755">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:09.755" starttime="20170810 02:51:09.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:09.756" starttime="20170810 02:51:09.755" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.756" starttime="20170810 02:51:09.372" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.756" starttime="20170810 02:51:09.372" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.756" starttime="20170810 02:51:09.372" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.756">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:51:09.757" starttime="20170810 02:51:09.756" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.759">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:09.759" starttime="20170810 02:51:09.758" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.759">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:09.760" starttime="20170810 02:51:09.759" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.760" starttime="20170810 02:51:09.759" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.760" starttime="20170810 02:51:09.757" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.760" starttime="20170810 02:51:09.757" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.876">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:09.877">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.877" starttime="20170810 02:51:09.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.878">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:09.878" starttime="20170810 02:51:09.878" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.879">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:09.879" starttime="20170810 02:51:09.879" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.880" starttime="20170810 02:51:09.879" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.880" starttime="20170810 02:51:09.877" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:09.880" starttime="20170810 02:51:09.877" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:09.880">Delete All Sessions</msg>
<status endtime="20170810 02:51:09.880" starttime="20170810 02:51:09.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.880">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:09.880" starttime="20170810 02:51:09.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:09.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:09.881" starttime="20170810 02:51:09.881" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:09.882">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:09.882">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:09.882">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:09.882" starttime="20170810 02:51:09.881" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.882">${state} = Off</msg>
<status endtime="20170810 02:51:09.882" starttime="20170810 02:51:09.370" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:09.882">${boot_progress} = Off</msg>
<status endtime="20170810 02:51:09.882" starttime="20170810 02:51:09.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:51:09.883">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:51:09.883" starttime="20170810 02:51:09.883" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:09.883" starttime="20170810 02:51:09.370" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:09.884" starttime="20170810 02:51:08.679" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:19.889">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:19.889" starttime="20170810 02:51:19.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:19.890">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:19.890" starttime="20170810 02:51:19.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:19.890">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:19.890" starttime="20170810 02:51:19.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:19.891">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:19.891" starttime="20170810 02:51:19.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:20.112" starttime="20170810 02:51:19.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:20.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:20.112">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:20.112" starttime="20170810 02:51:19.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:20.113" starttime="20170810 02:51:20.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:20.114" starttime="20170810 02:51:20.113" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.114" starttime="20170810 02:51:19.888" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.114" starttime="20170810 02:51:19.887" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.114" starttime="20170810 02:51:19.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.115">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:51:20.115" starttime="20170810 02:51:20.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.117">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:20.117" starttime="20170810 02:51:20.116" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.118">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:20.118" starttime="20170810 02:51:20.117" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.118" starttime="20170810 02:51:20.117" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.118" starttime="20170810 02:51:20.115" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.118" starttime="20170810 02:51:20.115" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.225">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:20.226">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:20.226" starttime="20170810 02:51:20.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.228">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:20.228" starttime="20170810 02:51:20.227" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.229">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:20.229" starttime="20170810 02:51:20.228" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.229" starttime="20170810 02:51:20.228" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.229" starttime="20170810 02:51:20.226" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.229" starttime="20170810 02:51:20.226" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:20.229">Delete All Sessions</msg>
<status endtime="20170810 02:51:20.230" starttime="20170810 02:51:20.229" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:20.230">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:20.230" starttime="20170810 02:51:19.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:20.230" starttime="20170810 02:51:20.230" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.231">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:20.231">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:20.231">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:20.231" starttime="20170810 02:51:20.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:20.231">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:51:20.231" starttime="20170810 02:51:19.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:20.232">${power_state} = On</msg>
<status endtime="20170810 02:51:20.232" starttime="20170810 02:51:19.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:51:20.232" starttime="20170810 02:51:20.232" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.232" starttime="20170810 02:51:19.885" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.236">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:20.236" starttime="20170810 02:51:20.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:20.237" starttime="20170810 02:51:20.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.237">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:20.237" starttime="20170810 02:51:20.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:20.238" starttime="20170810 02:51:20.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.818">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:20.818" starttime="20170810 02:51:20.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:20.818">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:20.819">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:20.819" starttime="20170810 02:51:20.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.819">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:20.819" starttime="20170810 02:51:20.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:20.820" starttime="20170810 02:51:20.820" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.820" starttime="20170810 02:51:20.235" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.820" starttime="20170810 02:51:20.235" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.820" starttime="20170810 02:51:20.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.821">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:51:20.821" starttime="20170810 02:51:20.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:20.823">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:20.823" starttime="20170810 02:51:20.822" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:20.824">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:20.825" starttime="20170810 02:51:20.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.825" starttime="20170810 02:51:20.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.825" starttime="20170810 02:51:20.822" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:20.825" starttime="20170810 02:51:20.821" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.522">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:21.522">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:21.522" starttime="20170810 02:51:20.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.524">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:21.524" starttime="20170810 02:51:21.524" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:21.525">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:21.525" starttime="20170810 02:51:21.525" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.525" starttime="20170810 02:51:21.524" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.526" starttime="20170810 02:51:21.523" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.526" starttime="20170810 02:51:21.523" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:21.526">Delete All Sessions</msg>
<status endtime="20170810 02:51:21.526" starttime="20170810 02:51:21.526" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:21.526">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:21.526" starttime="20170810 02:51:20.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:21.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:21.527" starttime="20170810 02:51:21.527" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.528">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:21.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:21.528">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:21.528" starttime="20170810 02:51:21.527" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:21.528">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:51:21.528" starttime="20170810 02:51:20.233" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:21.528">${host_state} = Running</msg>
<status endtime="20170810 02:51:21.528" starttime="20170810 02:51:20.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:51:21.529" starttime="20170810 02:51:21.529" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:21.533">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:21.533" starttime="20170810 02:51:21.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.534">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:21.534" starttime="20170810 02:51:21.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.534">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:21.535" starttime="20170810 02:51:21.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.535">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:21.535" starttime="20170810 02:51:21.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:21.906">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:21.907" starttime="20170810 02:51:21.536" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:21.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:21.907">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:21.907" starttime="20170810 02:51:21.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:21.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:21.908" starttime="20170810 02:51:21.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:21.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:21.909" starttime="20170810 02:51:21.908" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.909" starttime="20170810 02:51:21.532" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.909" starttime="20170810 02:51:21.531" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.909" starttime="20170810 02:51:21.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.910">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:51:21.910" starttime="20170810 02:51:21.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:21.913">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:21.913" starttime="20170810 02:51:21.912" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:21.914">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:21.914" starttime="20170810 02:51:21.914" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.914" starttime="20170810 02:51:21.913" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.914" starttime="20170810 02:51:21.911" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:21.914" starttime="20170810 02:51:21.910" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:22.641">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:22.641">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:22.641" starttime="20170810 02:51:21.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:22.643">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:22.643" starttime="20170810 02:51:22.643" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:22.644">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:22.644" starttime="20170810 02:51:22.644" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:22.644" starttime="20170810 02:51:22.643" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:22.644" starttime="20170810 02:51:22.642" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:22.645" starttime="20170810 02:51:22.642" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:22.645">Delete All Sessions</msg>
<status endtime="20170810 02:51:22.645" starttime="20170810 02:51:22.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:22.645">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:22.645" starttime="20170810 02:51:21.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:22.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:22.646" starttime="20170810 02:51:22.646" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:22.646">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:22.646">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:22.647">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:22.647" starttime="20170810 02:51:22.646" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:22.647">${state} = Off</msg>
<status endtime="20170810 02:51:22.647" starttime="20170810 02:51:21.530" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:22.647">${boot_progress} = Off</msg>
<status endtime="20170810 02:51:22.647" starttime="20170810 02:51:21.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:51:22.648">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:51:22.648" starttime="20170810 02:51:22.647" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:22.648" starttime="20170810 02:51:21.529" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:22.648" starttime="20170810 02:51:19.884" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.654">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:32.654" starttime="20170810 02:51:32.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.655">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:32.655" starttime="20170810 02:51:32.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.655">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:32.655" starttime="20170810 02:51:32.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.656">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:32.656" starttime="20170810 02:51:32.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.902">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:32.902" starttime="20170810 02:51:32.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:32.902">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:32.902">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:32.902" starttime="20170810 02:51:32.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.903">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:32.903" starttime="20170810 02:51:32.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:32.904" starttime="20170810 02:51:32.903" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.904" starttime="20170810 02:51:32.653" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.904" starttime="20170810 02:51:32.652" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.904" starttime="20170810 02:51:32.651" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.904">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:51:32.905" starttime="20170810 02:51:32.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.907">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:32.907" starttime="20170810 02:51:32.906" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.907">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:32.908" starttime="20170810 02:51:32.907" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.908" starttime="20170810 02:51:32.907" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.908" starttime="20170810 02:51:32.905" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.908" starttime="20170810 02:51:32.905" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.985">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:32.985">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:32.985" starttime="20170810 02:51:32.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.987">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:32.987" starttime="20170810 02:51:32.986" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.988">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:32.988" starttime="20170810 02:51:32.988" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.988" starttime="20170810 02:51:32.987" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.988" starttime="20170810 02:51:32.986" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.988" starttime="20170810 02:51:32.985" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:32.989">Delete All Sessions</msg>
<status endtime="20170810 02:51:32.989" starttime="20170810 02:51:32.989" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:32.989">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:32.989" starttime="20170810 02:51:32.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:32.990" starttime="20170810 02:51:32.989" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.990">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:32.990">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:32.990">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:32.990" starttime="20170810 02:51:32.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:32.991">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:51:32.991" starttime="20170810 02:51:32.650" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:32.991">${power_state} = On</msg>
<status endtime="20170810 02:51:32.991" starttime="20170810 02:51:32.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:51:32.991" starttime="20170810 02:51:32.991" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:32.992" starttime="20170810 02:51:32.649" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:32.995">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:32.995" starttime="20170810 02:51:32.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.996">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:32.996" starttime="20170810 02:51:32.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.997">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:32.997" starttime="20170810 02:51:32.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:32.997">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:32.997" starttime="20170810 02:51:32.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:33.221" starttime="20170810 02:51:32.998" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:33.222">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:33.222" starttime="20170810 02:51:32.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:33.222" starttime="20170810 02:51:33.222" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:33.223" starttime="20170810 02:51:33.223" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.223" starttime="20170810 02:51:32.994" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.223" starttime="20170810 02:51:32.994" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.223" starttime="20170810 02:51:32.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.224">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:51:33.224" starttime="20170810 02:51:33.224" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.227">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:33.227" starttime="20170810 02:51:33.225" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.228">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:33.228" starttime="20170810 02:51:33.228" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.228" starttime="20170810 02:51:33.227" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.228" starttime="20170810 02:51:33.225" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.228" starttime="20170810 02:51:33.224" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.321">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:33.321">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:33.321" starttime="20170810 02:51:33.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.323">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:33.323" starttime="20170810 02:51:33.322" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.323">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:33.324" starttime="20170810 02:51:33.323" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.324" starttime="20170810 02:51:33.323" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.324" starttime="20170810 02:51:33.322" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.324" starttime="20170810 02:51:33.321" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:33.324">Delete All Sessions</msg>
<status endtime="20170810 02:51:33.324" starttime="20170810 02:51:33.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.325">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:33.325" starttime="20170810 02:51:32.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:33.325" starttime="20170810 02:51:33.325" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.326">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:33.326">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:33.326">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:33.326" starttime="20170810 02:51:33.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.326">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:51:33.326" starttime="20170810 02:51:32.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.327">${host_state} = Running</msg>
<status endtime="20170810 02:51:33.327" starttime="20170810 02:51:32.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:51:33.327" starttime="20170810 02:51:33.327" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.332">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:33.333" starttime="20170810 02:51:33.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.333">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:33.333" starttime="20170810 02:51:33.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.334">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:33.334" starttime="20170810 02:51:33.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.335">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:33.335" starttime="20170810 02:51:33.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:33.624" starttime="20170810 02:51:33.338" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:33.624">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:33.625" starttime="20170810 02:51:33.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.625">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:33.625" starttime="20170810 02:51:33.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:33.626" starttime="20170810 02:51:33.625" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.626" starttime="20170810 02:51:33.331" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.626" starttime="20170810 02:51:33.330" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.626" starttime="20170810 02:51:33.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.627">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:51:33.627" starttime="20170810 02:51:33.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.629">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:33.629" starttime="20170810 02:51:33.628" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.630">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:33.630" starttime="20170810 02:51:33.630" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.630" starttime="20170810 02:51:33.629" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.630" starttime="20170810 02:51:33.628" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.630" starttime="20170810 02:51:33.627" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.729">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:33.729">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:33.729" starttime="20170810 02:51:33.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.730">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:33.730" starttime="20170810 02:51:33.730" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.731">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:33.731" starttime="20170810 02:51:33.731" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.732" starttime="20170810 02:51:33.731" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.732" starttime="20170810 02:51:33.729" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:33.732" starttime="20170810 02:51:33.729" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:33.732">Delete All Sessions</msg>
<status endtime="20170810 02:51:33.732" starttime="20170810 02:51:33.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.732">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:33.732" starttime="20170810 02:51:33.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:33.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:33.733" starttime="20170810 02:51:33.733" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:33.734">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:33.734">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:33.734">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:33.735" starttime="20170810 02:51:33.734" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.735">${state} = Off</msg>
<status endtime="20170810 02:51:33.735" starttime="20170810 02:51:33.328" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:33.735">${boot_progress} = Off</msg>
<status endtime="20170810 02:51:33.735" starttime="20170810 02:51:33.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:51:33.736">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:51:33.736" starttime="20170810 02:51:33.736" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:33.737" starttime="20170810 02:51:33.327" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:33.737" starttime="20170810 02:51:32.649" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:43.742">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:43.742" starttime="20170810 02:51:43.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:43.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:43.743" starttime="20170810 02:51:43.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:43.744">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:43.744" starttime="20170810 02:51:43.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:43.744">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:43.744" starttime="20170810 02:51:43.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:44.254" starttime="20170810 02:51:43.745" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.254">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:44.254">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:44.254" starttime="20170810 02:51:43.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.255">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:44.255" starttime="20170810 02:51:44.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:44.255" starttime="20170810 02:51:44.255" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.256" starttime="20170810 02:51:43.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.256" starttime="20170810 02:51:43.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.256" starttime="20170810 02:51:43.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.256">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:51:44.256" starttime="20170810 02:51:44.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.258">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:44.258" starttime="20170810 02:51:44.258" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.259">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:44.259" starttime="20170810 02:51:44.259" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.260" starttime="20170810 02:51:44.259" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.260" starttime="20170810 02:51:44.257" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.260" starttime="20170810 02:51:44.257" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.367">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:44.367">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:44.367" starttime="20170810 02:51:44.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.369">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:44.369" starttime="20170810 02:51:44.369" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.370">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:44.370" starttime="20170810 02:51:44.370" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.370" starttime="20170810 02:51:44.369" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.370" starttime="20170810 02:51:44.368" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.370" starttime="20170810 02:51:44.367" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:44.371">Delete All Sessions</msg>
<status endtime="20170810 02:51:44.371" starttime="20170810 02:51:44.371" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.371">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:44.371" starttime="20170810 02:51:43.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:44.372" starttime="20170810 02:51:44.371" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.372">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:44.372">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:44.372">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:44.373" starttime="20170810 02:51:44.372" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.373">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:51:44.373" starttime="20170810 02:51:43.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.373">${power_state} = On</msg>
<status endtime="20170810 02:51:44.373" starttime="20170810 02:51:43.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:51:44.374" starttime="20170810 02:51:44.373" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.374" starttime="20170810 02:51:43.738" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.377">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:44.378" starttime="20170810 02:51:44.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.378">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:44.378" starttime="20170810 02:51:44.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.379">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:44.379" starttime="20170810 02:51:44.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.380">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:44.380" starttime="20170810 02:51:44.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:44.723" starttime="20170810 02:51:44.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:44.723">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:44.723" starttime="20170810 02:51:44.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.724">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:44.724" starttime="20170810 02:51:44.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:44.724" starttime="20170810 02:51:44.724" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.724" starttime="20170810 02:51:44.377" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.725" starttime="20170810 02:51:44.376" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.725" starttime="20170810 02:51:44.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.725">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:51:44.725" starttime="20170810 02:51:44.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.728">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:44.728" starttime="20170810 02:51:44.727" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.729">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:44.729" starttime="20170810 02:51:44.728" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.729" starttime="20170810 02:51:44.728" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.729" starttime="20170810 02:51:44.726" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.729" starttime="20170810 02:51:44.726" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:44.823">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:44.823" starttime="20170810 02:51:44.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:44.825" starttime="20170810 02:51:44.825" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:44.826" starttime="20170810 02:51:44.826" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.826" starttime="20170810 02:51:44.825" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.826" starttime="20170810 02:51:44.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:44.826" starttime="20170810 02:51:44.823" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:44.827">Delete All Sessions</msg>
<status endtime="20170810 02:51:44.827" starttime="20170810 02:51:44.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.827">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:44.827" starttime="20170810 02:51:44.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:44.828" starttime="20170810 02:51:44.827" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:44.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:44.828">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:44.828" starttime="20170810 02:51:44.828" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.829">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:51:44.829" starttime="20170810 02:51:44.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:44.829">${host_state} = Running</msg>
<status endtime="20170810 02:51:44.829" starttime="20170810 02:51:44.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:51:44.830" starttime="20170810 02:51:44.829" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:44.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:44.834" starttime="20170810 02:51:44.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:44.834" starttime="20170810 02:51:44.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.835">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:44.835" starttime="20170810 02:51:44.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:44.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:44.836" starttime="20170810 02:51:44.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:45.046">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:45.046" starttime="20170810 02:51:44.836" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:45.046">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:45.046">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:45.046" starttime="20170810 02:51:44.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:45.047">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:45.047" starttime="20170810 02:51:45.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:45.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:45.048" starttime="20170810 02:51:45.047" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.048" starttime="20170810 02:51:44.833" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.048" starttime="20170810 02:51:44.832" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.048" starttime="20170810 02:51:44.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:45.049">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:51:45.049" starttime="20170810 02:51:45.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:45.051">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:45.051" starttime="20170810 02:51:45.050" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:45.052">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:45.052" starttime="20170810 02:51:45.051" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.052" starttime="20170810 02:51:45.051" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.052" starttime="20170810 02:51:45.049" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.052" starttime="20170810 02:51:45.049" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:45.136">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:45.137">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:45.137" starttime="20170810 02:51:45.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:45.138">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:45.138" starttime="20170810 02:51:45.138" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:45.139">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:45.139" starttime="20170810 02:51:45.139" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.139" starttime="20170810 02:51:45.139" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.140" starttime="20170810 02:51:45.137" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:45.140" starttime="20170810 02:51:45.137" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:45.140">Delete All Sessions</msg>
<status endtime="20170810 02:51:45.140" starttime="20170810 02:51:45.140" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:45.140">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:45.140" starttime="20170810 02:51:44.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:45.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:45.141" starttime="20170810 02:51:45.141" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:45.141">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:45.142">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:45.142">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:45.142" starttime="20170810 02:51:45.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:45.142">${state} = Off</msg>
<status endtime="20170810 02:51:45.142" starttime="20170810 02:51:44.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:45.142">${boot_progress} = Off</msg>
<status endtime="20170810 02:51:45.142" starttime="20170810 02:51:44.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:51:45.143">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:51:45.143" starttime="20170810 02:51:45.142" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:45.143" starttime="20170810 02:51:44.830" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:45.143" starttime="20170810 02:51:43.737" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.149">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:55.149" starttime="20170810 02:51:55.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.150">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:55.150" starttime="20170810 02:51:55.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.150">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:55.150" starttime="20170810 02:51:55.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.151">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:55.151" starttime="20170810 02:51:55.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.386">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:55.386" starttime="20170810 02:51:55.151" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:55.386">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:55.386" starttime="20170810 02:51:55.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:55.387" starttime="20170810 02:51:55.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:55.387" starttime="20170810 02:51:55.387" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.387" starttime="20170810 02:51:55.148" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.388" starttime="20170810 02:51:55.147" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.388" starttime="20170810 02:51:55.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.388">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:51:55.388" starttime="20170810 02:51:55.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.390">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:55.390" starttime="20170810 02:51:55.390" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.391">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:55.391" starttime="20170810 02:51:55.391" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.391" starttime="20170810 02:51:55.390" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.392" starttime="20170810 02:51:55.389" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.392" starttime="20170810 02:51:55.389" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.503">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:55.504">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:55.504" starttime="20170810 02:51:55.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.506">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:55.506" starttime="20170810 02:51:55.505" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.507">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:55.507" starttime="20170810 02:51:55.506" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.507" starttime="20170810 02:51:55.506" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.507" starttime="20170810 02:51:55.504" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.507" starttime="20170810 02:51:55.504" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:55.507">Delete All Sessions</msg>
<status endtime="20170810 02:51:55.508" starttime="20170810 02:51:55.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.508">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:55.508" starttime="20170810 02:51:55.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:55.509" starttime="20170810 02:51:55.508" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.509">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:55.509">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:55.509">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:55.509" starttime="20170810 02:51:55.509" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.510">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:51:55.510" starttime="20170810 02:51:55.145" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.510">${power_state} = On</msg>
<status endtime="20170810 02:51:55.510" starttime="20170810 02:51:55.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:51:55.510" starttime="20170810 02:51:55.510" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.510" starttime="20170810 02:51:55.144" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.514">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:55.514" starttime="20170810 02:51:55.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.515">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:55.515" starttime="20170810 02:51:55.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.516">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:55.516" starttime="20170810 02:51:55.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.516">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:55.516" starttime="20170810 02:51:55.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.810">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:55.810" starttime="20170810 02:51:55.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.810">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:55.811">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:55.811" starttime="20170810 02:51:55.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.811">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:55.811" starttime="20170810 02:51:55.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:55.812" starttime="20170810 02:51:55.812" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.812" starttime="20170810 02:51:55.513" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.812" starttime="20170810 02:51:55.513" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.812" starttime="20170810 02:51:55.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.813">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:51:55.813" starttime="20170810 02:51:55.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.815">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:55.815" starttime="20170810 02:51:55.814" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.816">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:51:55.817" starttime="20170810 02:51:55.816" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.817" starttime="20170810 02:51:55.816" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.817" starttime="20170810 02:51:55.814" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.817" starttime="20170810 02:51:55.813" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.910">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:55.910">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:55.910" starttime="20170810 02:51:55.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.912">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:55.912" starttime="20170810 02:51:55.911" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.912">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:55.913" starttime="20170810 02:51:55.912" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.913" starttime="20170810 02:51:55.912" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.913" starttime="20170810 02:51:55.911" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:55.913" starttime="20170810 02:51:55.910" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:55.913">Delete All Sessions</msg>
<status endtime="20170810 02:51:55.913" starttime="20170810 02:51:55.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.914">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:55.914" starttime="20170810 02:51:55.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:55.915" starttime="20170810 02:51:55.914" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.915">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:55.915">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:55.915">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:55.915" starttime="20170810 02:51:55.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.916">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:51:55.916" starttime="20170810 02:51:55.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:55.916">${host_state} = Running</msg>
<status endtime="20170810 02:51:55.916" starttime="20170810 02:51:55.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:51:55.916" starttime="20170810 02:51:55.916" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:55.920">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:51:55.921" starttime="20170810 02:51:55.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:51:55.921" starttime="20170810 02:51:55.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.922">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:51:55.922" starttime="20170810 02:51:55.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:55.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:51:55.922" starttime="20170810 02:51:55.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:56.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:51:56.135" starttime="20170810 02:51:55.923" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:56.135">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:51:56.135">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:56.135" starttime="20170810 02:51:55.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:56.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:56.136" starttime="20170810 02:51:56.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:56.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:56.137" starttime="20170810 02:51:56.136" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.137" starttime="20170810 02:51:55.919" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.137" starttime="20170810 02:51:55.919" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.137" starttime="20170810 02:51:55.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:56.137">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:51:56.138" starttime="20170810 02:51:56.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:56.140">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:56.140" starttime="20170810 02:51:56.139" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:56.141">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:51:56.141" starttime="20170810 02:51:56.140" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.141" starttime="20170810 02:51:56.140" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.141" starttime="20170810 02:51:56.138" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.141" starttime="20170810 02:51:56.138" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:56.221">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:51:56.221">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:56.221" starttime="20170810 02:51:56.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:56.223">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:56.223" starttime="20170810 02:51:56.222" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:56.224">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:51:56.224" starttime="20170810 02:51:56.223" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.224" starttime="20170810 02:51:56.223" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.224" starttime="20170810 02:51:56.222" status="PASS"></status>
</kw>
<status endtime="20170810 02:51:56.224" starttime="20170810 02:51:56.221" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:51:56.224">Delete All Sessions</msg>
<status endtime="20170810 02:51:56.225" starttime="20170810 02:51:56.224" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:56.225">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:51:56.225" starttime="20170810 02:51:55.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:51:56.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:51:56.225" starttime="20170810 02:51:56.225" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:51:56.226">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:51:56.226">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:51:56.226">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:51:56.226" starttime="20170810 02:51:56.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:56.226">${state} = Off</msg>
<status endtime="20170810 02:51:56.226" starttime="20170810 02:51:55.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:51:56.227">${boot_progress} = Off</msg>
<status endtime="20170810 02:51:56.227" starttime="20170810 02:51:55.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:51:56.227">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:51:56.227" starttime="20170810 02:51:56.227" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:56.228" starttime="20170810 02:51:55.917" status="FAIL"></status>
</kw>
<status endtime="20170810 02:51:56.228" starttime="20170810 02:51:55.144" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.233">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:06.233" starttime="20170810 02:52:06.233" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:06.234" starttime="20170810 02:52:06.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.235">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:06.235" starttime="20170810 02:52:06.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:06.235" starttime="20170810 02:52:06.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.467">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:06.467" starttime="20170810 02:52:06.236" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.467">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:06.467">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:06.467" starttime="20170810 02:52:06.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.468">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:06.468" starttime="20170810 02:52:06.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:06.469" starttime="20170810 02:52:06.468" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.469" starttime="20170810 02:52:06.232" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.469" starttime="20170810 02:52:06.231" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.469" starttime="20170810 02:52:06.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.470">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:52:06.470" starttime="20170810 02:52:06.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.472">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:06.472" starttime="20170810 02:52:06.471" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.473">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:06.473" starttime="20170810 02:52:06.472" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.473" starttime="20170810 02:52:06.472" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.473" starttime="20170810 02:52:06.470" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.473" starttime="20170810 02:52:06.470" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.565">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:06.565">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:06.565" starttime="20170810 02:52:06.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.567">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:06.567" starttime="20170810 02:52:06.567" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.568">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:06.568" starttime="20170810 02:52:06.568" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.569" starttime="20170810 02:52:06.568" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.569" starttime="20170810 02:52:06.566" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.569" starttime="20170810 02:52:06.566" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:06.569">Delete All Sessions</msg>
<status endtime="20170810 02:52:06.569" starttime="20170810 02:52:06.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.569">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:06.569" starttime="20170810 02:52:06.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:06.570" starttime="20170810 02:52:06.570" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.571">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:06.571">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:06.571">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:06.571" starttime="20170810 02:52:06.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.571">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:52:06.571" starttime="20170810 02:52:06.229" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.571">${power_state} = On</msg>
<status endtime="20170810 02:52:06.571" starttime="20170810 02:52:06.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:52:06.572" starttime="20170810 02:52:06.572" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.572" starttime="20170810 02:52:06.229" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.576">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:06.576" starttime="20170810 02:52:06.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:06.577" starttime="20170810 02:52:06.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.577">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:06.577" starttime="20170810 02:52:06.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.578">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:06.578" starttime="20170810 02:52:06.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.822">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:06.823" starttime="20170810 02:52:06.579" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:06.823">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:06.823" starttime="20170810 02:52:06.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.823">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:06.823" starttime="20170810 02:52:06.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:06.824" starttime="20170810 02:52:06.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.824" starttime="20170810 02:52:06.575" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.824" starttime="20170810 02:52:06.574" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.825" starttime="20170810 02:52:06.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.825">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:52:06.825" starttime="20170810 02:52:06.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.828">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:06.828" starttime="20170810 02:52:06.827" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.829">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:06.829" starttime="20170810 02:52:06.828" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.829" starttime="20170810 02:52:06.828" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.829" starttime="20170810 02:52:06.826" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.829" starttime="20170810 02:52:06.825" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.970">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:06.970">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:06.970" starttime="20170810 02:52:06.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.972">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:06.972" starttime="20170810 02:52:06.971" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.973">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:06.973" starttime="20170810 02:52:06.973" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.973" starttime="20170810 02:52:06.972" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.973" starttime="20170810 02:52:06.971" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:06.973" starttime="20170810 02:52:06.971" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:06.974">Delete All Sessions</msg>
<status endtime="20170810 02:52:06.974" starttime="20170810 02:52:06.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.974">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:06.974" starttime="20170810 02:52:06.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:06.975" starttime="20170810 02:52:06.974" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.975">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:06.975">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:06.975">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:06.975" starttime="20170810 02:52:06.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.976">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:52:06.976" starttime="20170810 02:52:06.573" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:06.976">${host_state} = Running</msg>
<status endtime="20170810 02:52:06.976" starttime="20170810 02:52:06.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:52:06.977" starttime="20170810 02:52:06.976" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:06.981">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:06.981" starttime="20170810 02:52:06.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.982">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:06.982" starttime="20170810 02:52:06.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.983">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:06.983" starttime="20170810 02:52:06.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:06.983">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:06.983" starttime="20170810 02:52:06.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:07.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:07.250" starttime="20170810 02:52:06.984" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:07.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:07.251">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:07.251" starttime="20170810 02:52:06.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:07.251">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:07.251" starttime="20170810 02:52:07.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:07.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:07.252" starttime="20170810 02:52:07.252" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.252" starttime="20170810 02:52:06.979" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.252" starttime="20170810 02:52:06.979" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.252" starttime="20170810 02:52:06.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:07.253">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:52:07.253" starttime="20170810 02:52:07.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:07.255">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:07.255" starttime="20170810 02:52:07.254" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:07.256">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:07.256" starttime="20170810 02:52:07.256" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.256" starttime="20170810 02:52:07.255" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.256" starttime="20170810 02:52:07.254" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.256" starttime="20170810 02:52:07.253" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:07.339">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:07.339">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:07.339" starttime="20170810 02:52:07.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:07.341">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:07.341" starttime="20170810 02:52:07.341" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:07.342">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:07.342" starttime="20170810 02:52:07.342" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.342" starttime="20170810 02:52:07.341" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.342" starttime="20170810 02:52:07.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:07.342" starttime="20170810 02:52:07.340" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:07.343">Delete All Sessions</msg>
<status endtime="20170810 02:52:07.343" starttime="20170810 02:52:07.343" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:07.343">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:07.343" starttime="20170810 02:52:06.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:07.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:07.344" starttime="20170810 02:52:07.343" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:07.345">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:07.345">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:07.345">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:07.345" starttime="20170810 02:52:07.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:07.345">${state} = Off</msg>
<status endtime="20170810 02:52:07.345" starttime="20170810 02:52:06.977" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:07.345">${boot_progress} = Off</msg>
<status endtime="20170810 02:52:07.345" starttime="20170810 02:52:06.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:52:07.346">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:52:07.346" starttime="20170810 02:52:07.345" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:07.346" starttime="20170810 02:52:06.977" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:07.346" starttime="20170810 02:52:06.228" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.352">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:17.352" starttime="20170810 02:52:17.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.353">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:17.353" starttime="20170810 02:52:17.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.353">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:17.353" starttime="20170810 02:52:17.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.354">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:17.354" starttime="20170810 02:52:17.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.653">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:17.653" starttime="20170810 02:52:17.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:17.653">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:17.653">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:17.653" starttime="20170810 02:52:17.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.654">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:17.654" starttime="20170810 02:52:17.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:17.655" starttime="20170810 02:52:17.654" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.655" starttime="20170810 02:52:17.351" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.655" starttime="20170810 02:52:17.350" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.655" starttime="20170810 02:52:17.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.656">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:52:17.656" starttime="20170810 02:52:17.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.658">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:17.658" starttime="20170810 02:52:17.657" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.659">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:17.659" starttime="20170810 02:52:17.658" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.659" starttime="20170810 02:52:17.658" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.659" starttime="20170810 02:52:17.656" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.659" starttime="20170810 02:52:17.656" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.750">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:17.750">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:17.750" starttime="20170810 02:52:17.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.752">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:17.752" starttime="20170810 02:52:17.751" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.753">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:17.753" starttime="20170810 02:52:17.753" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.753" starttime="20170810 02:52:17.752" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.753" starttime="20170810 02:52:17.751" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.753" starttime="20170810 02:52:17.750" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:17.754">Delete All Sessions</msg>
<status endtime="20170810 02:52:17.754" starttime="20170810 02:52:17.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:17.754">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:17.754" starttime="20170810 02:52:17.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:17.755" starttime="20170810 02:52:17.754" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.755">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:17.755">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:17.755">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:17.755" starttime="20170810 02:52:17.755" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:17.756">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:52:17.756" starttime="20170810 02:52:17.348" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:17.756">${power_state} = On</msg>
<status endtime="20170810 02:52:17.756" starttime="20170810 02:52:17.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:52:17.757" starttime="20170810 02:52:17.756" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.757" starttime="20170810 02:52:17.347" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.760">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:17.761" starttime="20170810 02:52:17.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:17.761" starttime="20170810 02:52:17.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.762">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:17.762" starttime="20170810 02:52:17.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:17.763" starttime="20170810 02:52:17.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.983">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:17.983" starttime="20170810 02:52:17.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:17.983">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:17.983">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:17.983" starttime="20170810 02:52:17.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.984">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:17.984" starttime="20170810 02:52:17.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:17.985" starttime="20170810 02:52:17.984" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.985" starttime="20170810 02:52:17.759" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.985" starttime="20170810 02:52:17.759" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.985" starttime="20170810 02:52:17.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.986">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:52:17.986" starttime="20170810 02:52:17.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:17.988">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:17.988" starttime="20170810 02:52:17.987" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:17.989">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:17.989" starttime="20170810 02:52:17.989" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.989" starttime="20170810 02:52:17.988" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.989" starttime="20170810 02:52:17.986" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:17.989" starttime="20170810 02:52:17.986" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.093">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:18.093">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:18.093" starttime="20170810 02:52:17.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.095">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:18.095" starttime="20170810 02:52:18.094" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.096">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:18.096" starttime="20170810 02:52:18.096" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.096" starttime="20170810 02:52:18.095" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.096" starttime="20170810 02:52:18.094" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.096" starttime="20170810 02:52:18.093" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:18.097">Delete All Sessions</msg>
<status endtime="20170810 02:52:18.097" starttime="20170810 02:52:18.097" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:18.097">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:18.097" starttime="20170810 02:52:17.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:18.098" starttime="20170810 02:52:18.097" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.098">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:18.098">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:18.098">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:18.098" starttime="20170810 02:52:18.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:18.099">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:52:18.099" starttime="20170810 02:52:17.757" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:18.099">${host_state} = Running</msg>
<status endtime="20170810 02:52:18.099" starttime="20170810 02:52:17.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:52:18.100" starttime="20170810 02:52:18.099" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.103">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:18.104" starttime="20170810 02:52:18.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.104">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:18.104" starttime="20170810 02:52:18.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.105">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:18.105" starttime="20170810 02:52:18.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.106">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:18.106" starttime="20170810 02:52:18.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:18.337" starttime="20170810 02:52:18.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:18.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:18.338">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:18.338" starttime="20170810 02:52:18.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:18.338" starttime="20170810 02:52:18.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:18.339" starttime="20170810 02:52:18.338" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.339" starttime="20170810 02:52:18.103" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.339" starttime="20170810 02:52:18.102" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.339" starttime="20170810 02:52:18.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.340">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:52:18.340" starttime="20170810 02:52:18.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.342">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:18.342" starttime="20170810 02:52:18.341" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.343">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:18.343" starttime="20170810 02:52:18.343" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.343" starttime="20170810 02:52:18.342" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.343" starttime="20170810 02:52:18.341" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.343" starttime="20170810 02:52:18.340" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.413">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:18.413">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:18.413" starttime="20170810 02:52:18.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.415">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:18.415" starttime="20170810 02:52:18.414" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.416">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:18.416" starttime="20170810 02:52:18.416" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.416" starttime="20170810 02:52:18.415" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.416" starttime="20170810 02:52:18.414" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:18.416" starttime="20170810 02:52:18.413" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:18.417">Delete All Sessions</msg>
<status endtime="20170810 02:52:18.417" starttime="20170810 02:52:18.417" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:18.417">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:18.417" starttime="20170810 02:52:18.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:18.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:18.418" starttime="20170810 02:52:18.417" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:18.418">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:18.418">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:18.418">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:18.418" starttime="20170810 02:52:18.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:18.419">${state} = Off</msg>
<status endtime="20170810 02:52:18.419" starttime="20170810 02:52:18.100" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:18.419">${boot_progress} = Off</msg>
<status endtime="20170810 02:52:18.419" starttime="20170810 02:52:18.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:52:18.420">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:52:18.420" starttime="20170810 02:52:18.419" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:18.420" starttime="20170810 02:52:18.100" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:18.420" starttime="20170810 02:52:17.347" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.425">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:28.426" starttime="20170810 02:52:28.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.426">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:28.426" starttime="20170810 02:52:28.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.427">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:28.427" starttime="20170810 02:52:28.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.428">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:28.428" starttime="20170810 02:52:28.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.658">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:28.658" starttime="20170810 02:52:28.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:28.659">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:28.659">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:28.659" starttime="20170810 02:52:28.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.659">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:28.659" starttime="20170810 02:52:28.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:28.660" starttime="20170810 02:52:28.660" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.660" starttime="20170810 02:52:28.424" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.660" starttime="20170810 02:52:28.424" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.660" starttime="20170810 02:52:28.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.661">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:52:28.661" starttime="20170810 02:52:28.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.663">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:28.663" starttime="20170810 02:52:28.662" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.664">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:28.664" starttime="20170810 02:52:28.664" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.664" starttime="20170810 02:52:28.663" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.664" starttime="20170810 02:52:28.662" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.664" starttime="20170810 02:52:28.661" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.776">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:28.776">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:28.776" starttime="20170810 02:52:28.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.778">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:28.778" starttime="20170810 02:52:28.778" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.780">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:28.780" starttime="20170810 02:52:28.779" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.780" starttime="20170810 02:52:28.779" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.780" starttime="20170810 02:52:28.777" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.780" starttime="20170810 02:52:28.777" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:28.780">Delete All Sessions</msg>
<status endtime="20170810 02:52:28.780" starttime="20170810 02:52:28.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:28.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:28.781" starttime="20170810 02:52:28.422" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:28.781" starttime="20170810 02:52:28.781" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.782">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:28.782">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:28.782">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:28.782" starttime="20170810 02:52:28.782" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:28.782">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:52:28.782" starttime="20170810 02:52:28.422" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:28.783">${power_state} = On</msg>
<status endtime="20170810 02:52:28.783" starttime="20170810 02:52:28.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:52:28.783" starttime="20170810 02:52:28.783" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:28.783" starttime="20170810 02:52:28.421" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:28.787">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:28.787" starttime="20170810 02:52:28.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:28.788" starttime="20170810 02:52:28.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.788">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:28.788" starttime="20170810 02:52:28.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:28.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:28.789" starttime="20170810 02:52:28.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.062">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:29.062" starttime="20170810 02:52:28.790" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.062">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:29.062">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:29.062" starttime="20170810 02:52:28.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.063">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:29.063" starttime="20170810 02:52:29.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:29.064" starttime="20170810 02:52:29.063" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.064" starttime="20170810 02:52:28.786" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.064" starttime="20170810 02:52:28.786" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.064" starttime="20170810 02:52:28.785" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.064">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:52:29.064" starttime="20170810 02:52:29.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.067">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:29.067" starttime="20170810 02:52:29.066" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.068">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:29.068" starttime="20170810 02:52:29.068" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.068" starttime="20170810 02:52:29.067" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.068" starttime="20170810 02:52:29.065" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.068" starttime="20170810 02:52:29.065" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.197">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:29.197">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:29.197" starttime="20170810 02:52:29.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.199">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:29.199" starttime="20170810 02:52:29.198" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.200">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:29.200" starttime="20170810 02:52:29.200" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.200" starttime="20170810 02:52:29.199" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.200" starttime="20170810 02:52:29.198" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.200" starttime="20170810 02:52:29.198" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:29.201">Delete All Sessions</msg>
<status endtime="20170810 02:52:29.201" starttime="20170810 02:52:29.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.201">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:29.201" starttime="20170810 02:52:28.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:29.202" starttime="20170810 02:52:29.201" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.202">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:29.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:29.202">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:29.202" starttime="20170810 02:52:29.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.203">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:52:29.203" starttime="20170810 02:52:28.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.203">${host_state} = Running</msg>
<status endtime="20170810 02:52:29.203" starttime="20170810 02:52:28.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:52:29.204" starttime="20170810 02:52:29.203" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.207">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:29.208" starttime="20170810 02:52:29.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.208">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:29.208" starttime="20170810 02:52:29.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.209">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:29.209" starttime="20170810 02:52:29.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:29.210" starttime="20170810 02:52:29.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.472">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:29.472" starttime="20170810 02:52:29.210" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.473">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:29.473">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:29.473" starttime="20170810 02:52:29.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.473">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:29.473" starttime="20170810 02:52:29.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:29.474" starttime="20170810 02:52:29.474" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.474" starttime="20170810 02:52:29.207" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.474" starttime="20170810 02:52:29.206" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.474" starttime="20170810 02:52:29.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.475">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:52:29.475" starttime="20170810 02:52:29.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.478">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:29.478" starttime="20170810 02:52:29.477" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.479">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:29.479" starttime="20170810 02:52:29.479" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.479" starttime="20170810 02:52:29.478" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.479" starttime="20170810 02:52:29.476" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.479" starttime="20170810 02:52:29.475" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.559">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:29.559">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:29.559" starttime="20170810 02:52:29.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.561">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:29.561" starttime="20170810 02:52:29.560" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.562">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:29.562" starttime="20170810 02:52:29.562" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.562" starttime="20170810 02:52:29.561" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.562" starttime="20170810 02:52:29.560" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:29.562" starttime="20170810 02:52:29.560" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:29.563">Delete All Sessions</msg>
<status endtime="20170810 02:52:29.563" starttime="20170810 02:52:29.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.563">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:29.563" starttime="20170810 02:52:29.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:29.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:29.564" starttime="20170810 02:52:29.563" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:29.564">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:29.564">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:29.564">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:29.564" starttime="20170810 02:52:29.564" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.565">${state} = Off</msg>
<status endtime="20170810 02:52:29.565" starttime="20170810 02:52:29.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:29.565">${boot_progress} = Off</msg>
<status endtime="20170810 02:52:29.565" starttime="20170810 02:52:29.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:52:29.566">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:52:29.566" starttime="20170810 02:52:29.565" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:29.566" starttime="20170810 02:52:29.204" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:29.566" starttime="20170810 02:52:28.420" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.571">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:39.572" starttime="20170810 02:52:39.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.572">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:39.572" starttime="20170810 02:52:39.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.573">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:39.573" starttime="20170810 02:52:39.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.573">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:39.573" starttime="20170810 02:52:39.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.764">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:39.764" starttime="20170810 02:52:39.574" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:39.764">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:39.764">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:39.764" starttime="20170810 02:52:39.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.765">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:39.765" starttime="20170810 02:52:39.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:39.766" starttime="20170810 02:52:39.765" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.766" starttime="20170810 02:52:39.570" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.766" starttime="20170810 02:52:39.569" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.766" starttime="20170810 02:52:39.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.766">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:52:39.766" starttime="20170810 02:52:39.766" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.769">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:39.769" starttime="20170810 02:52:39.768" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.770">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:39.770" starttime="20170810 02:52:39.769" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.770" starttime="20170810 02:52:39.769" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.770" starttime="20170810 02:52:39.767" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.770" starttime="20170810 02:52:39.767" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.837">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:39.837">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:39.837" starttime="20170810 02:52:39.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.839">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:39.839" starttime="20170810 02:52:39.838" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.840">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:39.840" starttime="20170810 02:52:39.840" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.840" starttime="20170810 02:52:39.839" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.840" starttime="20170810 02:52:39.838" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.840" starttime="20170810 02:52:39.837" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:39.841">Delete All Sessions</msg>
<status endtime="20170810 02:52:39.841" starttime="20170810 02:52:39.841" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:39.841">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:39.841" starttime="20170810 02:52:39.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:39.842" starttime="20170810 02:52:39.841" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.842">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:39.842">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:39.842">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:39.843" starttime="20170810 02:52:39.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:39.843">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:52:39.843" starttime="20170810 02:52:39.568" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:39.843">${power_state} = On</msg>
<status endtime="20170810 02:52:39.843" starttime="20170810 02:52:39.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:52:39.844" starttime="20170810 02:52:39.843" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:39.844" starttime="20170810 02:52:39.567" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:39.847">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:39.848" starttime="20170810 02:52:39.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.848">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:39.848" starttime="20170810 02:52:39.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.849">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:39.849" starttime="20170810 02:52:39.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:39.850">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:39.850" starttime="20170810 02:52:39.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.086">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:40.086" starttime="20170810 02:52:39.850" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.086">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:40.086">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:40.086" starttime="20170810 02:52:39.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.087">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:40.087" starttime="20170810 02:52:40.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:40.087" starttime="20170810 02:52:40.087" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.088" starttime="20170810 02:52:39.846" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.088" starttime="20170810 02:52:39.846" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.088" starttime="20170810 02:52:39.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.088">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:52:40.088" starttime="20170810 02:52:40.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.091">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:40.091" starttime="20170810 02:52:40.090" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.092">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:40.092" starttime="20170810 02:52:40.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.092" starttime="20170810 02:52:40.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.092" starttime="20170810 02:52:40.089" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.092" starttime="20170810 02:52:40.089" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.219">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:40.219">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:40.219" starttime="20170810 02:52:40.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.220">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:40.221" starttime="20170810 02:52:40.220" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.221">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:40.221" starttime="20170810 02:52:40.221" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.222" starttime="20170810 02:52:40.221" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.222" starttime="20170810 02:52:40.220" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.222" starttime="20170810 02:52:40.219" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:40.222">Delete All Sessions</msg>
<status endtime="20170810 02:52:40.222" starttime="20170810 02:52:40.222" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.222">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:40.222" starttime="20170810 02:52:39.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:40.223" starttime="20170810 02:52:40.223" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.224">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:40.224">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:40.224">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:40.224" starttime="20170810 02:52:40.223" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.224">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:52:40.224" starttime="20170810 02:52:39.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.224">${host_state} = Running</msg>
<status endtime="20170810 02:52:40.224" starttime="20170810 02:52:39.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:52:40.225" starttime="20170810 02:52:40.225" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.230">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:40.230" starttime="20170810 02:52:40.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.231">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:40.231" starttime="20170810 02:52:40.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.231">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:40.231" starttime="20170810 02:52:40.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.232">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:40.232" starttime="20170810 02:52:40.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:40.585" starttime="20170810 02:52:40.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:40.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:40.585" starttime="20170810 02:52:40.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:40.586" starttime="20170810 02:52:40.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:40.587" starttime="20170810 02:52:40.586" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.587" starttime="20170810 02:52:40.229" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.587" starttime="20170810 02:52:40.229" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.587" starttime="20170810 02:52:40.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.588">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:52:40.588" starttime="20170810 02:52:40.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.590">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:40.590" starttime="20170810 02:52:40.589" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.591">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:40.591" starttime="20170810 02:52:40.590" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.591" starttime="20170810 02:52:40.590" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.591" starttime="20170810 02:52:40.588" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.591" starttime="20170810 02:52:40.588" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.669">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:40.670">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:40.670" starttime="20170810 02:52:40.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.671">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:40.671" starttime="20170810 02:52:40.671" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.672">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:40.672" starttime="20170810 02:52:40.672" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.672" starttime="20170810 02:52:40.671" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.673" starttime="20170810 02:52:40.670" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:40.673" starttime="20170810 02:52:40.670" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:40.673">Delete All Sessions</msg>
<status endtime="20170810 02:52:40.673" starttime="20170810 02:52:40.673" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.673">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:40.673" starttime="20170810 02:52:40.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:40.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:40.674" starttime="20170810 02:52:40.674" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:40.675">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:40.675">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:40.675">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:40.675" starttime="20170810 02:52:40.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.675">${state} = Off</msg>
<status endtime="20170810 02:52:40.675" starttime="20170810 02:52:40.226" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:40.675">${boot_progress} = Off</msg>
<status endtime="20170810 02:52:40.675" starttime="20170810 02:52:40.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:52:40.676">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:52:40.676" starttime="20170810 02:52:40.676" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:40.676" starttime="20170810 02:52:40.225" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:40.676" starttime="20170810 02:52:39.566" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:50.682">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:50.682" starttime="20170810 02:52:50.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:50.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:50.683" starttime="20170810 02:52:50.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:50.683">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:50.683" starttime="20170810 02:52:50.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:50.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:50.684" starttime="20170810 02:52:50.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:50.991">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:50.991" starttime="20170810 02:52:50.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:50.992">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:50.992">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:50.992" starttime="20170810 02:52:50.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:50.992">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:50.992" starttime="20170810 02:52:50.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:50.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:50.993" starttime="20170810 02:52:50.993" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:50.993" starttime="20170810 02:52:50.681" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:50.993" starttime="20170810 02:52:50.680" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:50.993" starttime="20170810 02:52:50.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:50.994">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:52:50.994" starttime="20170810 02:52:50.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:50.996">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:50.996" starttime="20170810 02:52:50.995" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:50.997">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:50.997" starttime="20170810 02:52:50.997" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:50.997" starttime="20170810 02:52:50.996" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:50.997" starttime="20170810 02:52:50.995" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:50.997" starttime="20170810 02:52:50.994" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.096">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:51.096">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.096" starttime="20170810 02:52:50.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.098">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:51.098" starttime="20170810 02:52:51.097" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.099">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:51.099" starttime="20170810 02:52:51.099" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.099" starttime="20170810 02:52:51.098" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.099" starttime="20170810 02:52:51.097" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.099" starttime="20170810 02:52:51.096" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:51.100">Delete All Sessions</msg>
<status endtime="20170810 02:52:51.100" starttime="20170810 02:52:51.100" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.100">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.100" starttime="20170810 02:52:50.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:51.101" starttime="20170810 02:52:51.100" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.101">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:51.101">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:51.101">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:51.101" starttime="20170810 02:52:51.101" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.102">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:52:51.102" starttime="20170810 02:52:50.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.102">${power_state} = On</msg>
<status endtime="20170810 02:52:51.102" starttime="20170810 02:52:50.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:52:51.103" starttime="20170810 02:52:51.102" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.103" starttime="20170810 02:52:50.677" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.106">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:51.107" starttime="20170810 02:52:51.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.107">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:51.107" starttime="20170810 02:52:51.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.108">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:51.108" starttime="20170810 02:52:51.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.109">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:51.109" starttime="20170810 02:52:51.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.355">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:51.355" starttime="20170810 02:52:51.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.355">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:51.355">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.355" starttime="20170810 02:52:51.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.356">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:51.356" starttime="20170810 02:52:51.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:51.357" starttime="20170810 02:52:51.356" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.357" starttime="20170810 02:52:51.106" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.357" starttime="20170810 02:52:51.105" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.357" starttime="20170810 02:52:51.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.358">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:52:51.358" starttime="20170810 02:52:51.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.360">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:51.360" starttime="20170810 02:52:51.359" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.361">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:52:51.361" starttime="20170810 02:52:51.361" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.361" starttime="20170810 02:52:51.360" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.361" starttime="20170810 02:52:51.358" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.361" starttime="20170810 02:52:51.358" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.484">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:51.484">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.484" starttime="20170810 02:52:51.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.486">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:51.486" starttime="20170810 02:52:51.486" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.487">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:51.487" starttime="20170810 02:52:51.487" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.487" starttime="20170810 02:52:51.487" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.488" starttime="20170810 02:52:51.485" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.488" starttime="20170810 02:52:51.485" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:51.488">Delete All Sessions</msg>
<status endtime="20170810 02:52:51.488" starttime="20170810 02:52:51.488" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.488" starttime="20170810 02:52:51.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:51.489" starttime="20170810 02:52:51.489" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.490">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:51.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:51.490">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:51.490" starttime="20170810 02:52:51.489" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.490">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:52:51.490" starttime="20170810 02:52:51.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.490">${host_state} = Running</msg>
<status endtime="20170810 02:52:51.490" starttime="20170810 02:52:51.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:52:51.491" starttime="20170810 02:52:51.491" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.495">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:52:51.496" starttime="20170810 02:52:51.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.497">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:52:51.497" starttime="20170810 02:52:51.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.497">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:52:51.497" starttime="20170810 02:52:51.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.498">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:52:51.498" starttime="20170810 02:52:51.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:52:51.792" starttime="20170810 02:52:51.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:52:51.792">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.792" starttime="20170810 02:52:51.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:51.793" starttime="20170810 02:52:51.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:51.793" starttime="20170810 02:52:51.793" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.794" starttime="20170810 02:52:51.494" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.794" starttime="20170810 02:52:51.494" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.794" starttime="20170810 02:52:51.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.794">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:52:51.794" starttime="20170810 02:52:51.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.796">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:51.797" starttime="20170810 02:52:51.796" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.797">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:52:51.798" starttime="20170810 02:52:51.797" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.798" starttime="20170810 02:52:51.797" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.798" starttime="20170810 02:52:51.795" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.798" starttime="20170810 02:52:51.795" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.898">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:52:51.898">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.899" starttime="20170810 02:52:51.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.900">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:51.900" starttime="20170810 02:52:51.900" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.901">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:52:51.901" starttime="20170810 02:52:51.901" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.901" starttime="20170810 02:52:51.901" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.902" starttime="20170810 02:52:51.899" status="PASS"></status>
</kw>
<status endtime="20170810 02:52:51.902" starttime="20170810 02:52:51.899" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:52:51.902">Delete All Sessions</msg>
<status endtime="20170810 02:52:51.902" starttime="20170810 02:52:51.902" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.902">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:52:51.902" starttime="20170810 02:52:51.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:52:51.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:52:51.903" starttime="20170810 02:52:51.903" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:52:51.904">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:52:51.904">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:52:51.904">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:52:51.904" starttime="20170810 02:52:51.903" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.904">${state} = Off</msg>
<status endtime="20170810 02:52:51.904" starttime="20170810 02:52:51.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:52:51.904">${boot_progress} = Off</msg>
<status endtime="20170810 02:52:51.904" starttime="20170810 02:52:51.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:52:51.905">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:52:51.905" starttime="20170810 02:52:51.904" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:51.905" starttime="20170810 02:52:51.491" status="FAIL"></status>
</kw>
<status endtime="20170810 02:52:51.905" starttime="20170810 02:52:50.677" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:01.911">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:01.911" starttime="20170810 02:53:01.910" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:01.912">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:01.912" starttime="20170810 02:53:01.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:01.912">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:01.912" starttime="20170810 02:53:01.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:01.913">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:01.913" starttime="20170810 02:53:01.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.207">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:02.207" starttime="20170810 02:53:01.914" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.207">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:02.207">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.207" starttime="20170810 02:53:01.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.207">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.208" starttime="20170810 02:53:02.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.208" starttime="20170810 02:53:02.208" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.208" starttime="20170810 02:53:01.910" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.208" starttime="20170810 02:53:01.909" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.209" starttime="20170810 02:53:01.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.209">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:53:02.209" starttime="20170810 02:53:02.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.211">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:02.211" starttime="20170810 02:53:02.211" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.214">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:02.214" starttime="20170810 02:53:02.212" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.214" starttime="20170810 02:53:02.211" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.214" starttime="20170810 02:53:02.210" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.214" starttime="20170810 02:53:02.209" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.304">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:02.304">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.304" starttime="20170810 02:53:02.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.306">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:02.306" starttime="20170810 02:53:02.305" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.307">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:02.307" starttime="20170810 02:53:02.307" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.307" starttime="20170810 02:53:02.306" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.308" starttime="20170810 02:53:02.305" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.308" starttime="20170810 02:53:02.304" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:02.308">Delete All Sessions</msg>
<status endtime="20170810 02:53:02.308" starttime="20170810 02:53:02.308" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.308">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.308" starttime="20170810 02:53:01.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.309" starttime="20170810 02:53:02.309" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.309">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:02.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:02.310">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:02.310" starttime="20170810 02:53:02.309" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.310">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:53:02.310" starttime="20170810 02:53:01.907" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.310">${power_state} = On</msg>
<status endtime="20170810 02:53:02.310" starttime="20170810 02:53:01.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:53:02.311" starttime="20170810 02:53:02.311" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.311" starttime="20170810 02:53:01.906" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.315">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:02.315" starttime="20170810 02:53:02.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.316">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:02.316" starttime="20170810 02:53:02.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.316">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:02.316" starttime="20170810 02:53:02.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:02.317" starttime="20170810 02:53:02.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.522">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:02.522" starttime="20170810 02:53:02.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.522">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:02.522">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.522" starttime="20170810 02:53:02.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.523">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.523" starttime="20170810 02:53:02.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.524" starttime="20170810 02:53:02.523" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.524" starttime="20170810 02:53:02.314" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.524" starttime="20170810 02:53:02.313" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.524" starttime="20170810 02:53:02.313" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.525">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:53:02.525" starttime="20170810 02:53:02.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.528">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:02.528" starttime="20170810 02:53:02.526" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.529">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:02.529" starttime="20170810 02:53:02.529" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.529" starttime="20170810 02:53:02.528" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.529" starttime="20170810 02:53:02.526" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.529" starttime="20170810 02:53:02.525" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.622">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:02.622">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.622" starttime="20170810 02:53:02.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.624">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:02.624" starttime="20170810 02:53:02.623" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.625">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:02.625" starttime="20170810 02:53:02.624" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.625" starttime="20170810 02:53:02.624" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.625" starttime="20170810 02:53:02.623" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.625" starttime="20170810 02:53:02.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:02.625">Delete All Sessions</msg>
<status endtime="20170810 02:53:02.625" starttime="20170810 02:53:02.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.626">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.626" starttime="20170810 02:53:02.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.626" starttime="20170810 02:53:02.626" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.627">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:02.627">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:02.627">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:02.627" starttime="20170810 02:53:02.627" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.627">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:53:02.627" starttime="20170810 02:53:02.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.628">${host_state} = Running</msg>
<status endtime="20170810 02:53:02.628" starttime="20170810 02:53:02.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:53:02.628" starttime="20170810 02:53:02.628" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.632">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:02.632" starttime="20170810 02:53:02.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.633">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:02.633" starttime="20170810 02:53:02.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.634">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:02.634" starttime="20170810 02:53:02.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.634">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:02.634" starttime="20170810 02:53:02.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:02.850" starttime="20170810 02:53:02.635" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.850">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:02.850">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.850" starttime="20170810 02:53:02.635" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.851">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.851" starttime="20170810 02:53:02.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.852" starttime="20170810 02:53:02.851" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.852" starttime="20170810 02:53:02.631" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.852" starttime="20170810 02:53:02.631" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.852" starttime="20170810 02:53:02.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.853">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:53:02.853" starttime="20170810 02:53:02.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.855">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:02.855" starttime="20170810 02:53:02.854" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.856">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:02.856" starttime="20170810 02:53:02.856" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.856" starttime="20170810 02:53:02.855" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.856" starttime="20170810 02:53:02.853" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.856" starttime="20170810 02:53:02.853" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.931">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:02.931">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.931" starttime="20170810 02:53:02.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.933">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:02.933" starttime="20170810 02:53:02.933" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.934">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:02.934" starttime="20170810 02:53:02.934" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.934" starttime="20170810 02:53:02.933" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.934" starttime="20170810 02:53:02.932" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:02.934" starttime="20170810 02:53:02.932" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:02.935">Delete All Sessions</msg>
<status endtime="20170810 02:53:02.935" starttime="20170810 02:53:02.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.935">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:02.935" starttime="20170810 02:53:02.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:02.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:02.936" starttime="20170810 02:53:02.935" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:02.936">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:02.936">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:02.937">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:02.937" starttime="20170810 02:53:02.936" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.937">${state} = Off</msg>
<status endtime="20170810 02:53:02.937" starttime="20170810 02:53:02.629" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:02.937">${boot_progress} = Off</msg>
<status endtime="20170810 02:53:02.937" starttime="20170810 02:53:02.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:53:02.938">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:53:02.938" starttime="20170810 02:53:02.937" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:02.938" starttime="20170810 02:53:02.628" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:02.938" starttime="20170810 02:53:01.906" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:12.944">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:12.944" starttime="20170810 02:53:12.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:12.945">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:12.945" starttime="20170810 02:53:12.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:12.946">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:12.946" starttime="20170810 02:53:12.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:12.947">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:12.947" starttime="20170810 02:53:12.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.177">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:13.177" starttime="20170810 02:53:12.948" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:13.178">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:13.178" starttime="20170810 02:53:12.947" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.178">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:13.178" starttime="20170810 02:53:13.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:13.179" starttime="20170810 02:53:13.179" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.179" starttime="20170810 02:53:12.942" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.179" starttime="20170810 02:53:12.942" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.179" starttime="20170810 02:53:12.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.180">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:53:13.180" starttime="20170810 02:53:13.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.182">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:13.182" starttime="20170810 02:53:13.181" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.183">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:13.183" starttime="20170810 02:53:13.183" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.183" starttime="20170810 02:53:13.182" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.183" starttime="20170810 02:53:13.181" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.183" starttime="20170810 02:53:13.180" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.292">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:13.292">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:13.292" starttime="20170810 02:53:13.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.294">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:13.294" starttime="20170810 02:53:13.294" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.295">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:13.295" starttime="20170810 02:53:13.295" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.296" starttime="20170810 02:53:13.295" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.296" starttime="20170810 02:53:13.293" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.296" starttime="20170810 02:53:13.293" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:13.296">Delete All Sessions</msg>
<status endtime="20170810 02:53:13.296" starttime="20170810 02:53:13.296" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.296">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:13.296" starttime="20170810 02:53:12.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:13.297" starttime="20170810 02:53:13.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.298">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:13.298">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:13.298">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:13.298" starttime="20170810 02:53:13.297" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.298">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:53:13.298" starttime="20170810 02:53:12.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.299">${power_state} = On</msg>
<status endtime="20170810 02:53:13.299" starttime="20170810 02:53:12.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:53:13.299" starttime="20170810 02:53:13.299" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.299" starttime="20170810 02:53:12.939" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.303">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:13.303" starttime="20170810 02:53:13.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.304">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:13.304" starttime="20170810 02:53:13.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.304">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:13.304" starttime="20170810 02:53:13.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:13.305" starttime="20170810 02:53:13.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.546">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:13.546" starttime="20170810 02:53:13.306" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.546">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:13.546">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:13.546" starttime="20170810 02:53:13.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.547">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:13.547" starttime="20170810 02:53:13.546" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:13.547" starttime="20170810 02:53:13.547" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.547" starttime="20170810 02:53:13.302" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.548" starttime="20170810 02:53:13.301" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.548" starttime="20170810 02:53:13.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.548">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:53:13.548" starttime="20170810 02:53:13.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.551">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:13.551" starttime="20170810 02:53:13.550" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.552">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:13.553" starttime="20170810 02:53:13.552" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.553" starttime="20170810 02:53:13.551" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.553" starttime="20170810 02:53:13.549" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.553" starttime="20170810 02:53:13.549" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.657">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:13.657">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:13.657" starttime="20170810 02:53:13.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.659">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:13.659" starttime="20170810 02:53:13.659" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.660">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:13.660" starttime="20170810 02:53:13.660" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.660" starttime="20170810 02:53:13.659" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.660" starttime="20170810 02:53:13.658" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:13.661" starttime="20170810 02:53:13.658" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:13.661">Delete All Sessions</msg>
<status endtime="20170810 02:53:13.661" starttime="20170810 02:53:13.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.661">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:13.661" starttime="20170810 02:53:13.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:13.662" starttime="20170810 02:53:13.661" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.662">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:13.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:13.663">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:13.663" starttime="20170810 02:53:13.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.663">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:53:13.663" starttime="20170810 02:53:13.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:13.663">${host_state} = Running</msg>
<status endtime="20170810 02:53:13.663" starttime="20170810 02:53:13.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:53:13.664" starttime="20170810 02:53:13.663" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:13.668">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:13.668" starttime="20170810 02:53:13.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.669">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:13.669" starttime="20170810 02:53:13.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.669">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:13.669" starttime="20170810 02:53:13.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:13.670">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:13.670" starttime="20170810 02:53:13.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:14.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:14.045" starttime="20170810 02:53:13.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:14.045">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:14.045">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:14.045" starttime="20170810 02:53:13.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:14.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:14.046" starttime="20170810 02:53:14.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:14.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:14.047" starttime="20170810 02:53:14.046" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.047" starttime="20170810 02:53:13.667" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.047" starttime="20170810 02:53:13.666" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.047" starttime="20170810 02:53:13.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:14.048">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:53:14.048" starttime="20170810 02:53:14.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:14.050">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:14.050" starttime="20170810 02:53:14.049" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:14.051">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:14.051" starttime="20170810 02:53:14.050" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.051" starttime="20170810 02:53:14.050" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.051" starttime="20170810 02:53:14.048" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.051" starttime="20170810 02:53:14.048" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:14.199">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:14.199">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:14.199" starttime="20170810 02:53:14.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:14.201">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:14.201" starttime="20170810 02:53:14.200" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:14.201">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:14.202" starttime="20170810 02:53:14.201" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.202" starttime="20170810 02:53:14.201" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.202" starttime="20170810 02:53:14.200" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:14.202" starttime="20170810 02:53:14.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:14.202">Delete All Sessions</msg>
<status endtime="20170810 02:53:14.202" starttime="20170810 02:53:14.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:14.202">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:14.203" starttime="20170810 02:53:13.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:14.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:14.203" starttime="20170810 02:53:14.203" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:14.204">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:14.204">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:14.204">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:14.204" starttime="20170810 02:53:14.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:14.204">${state} = Off</msg>
<status endtime="20170810 02:53:14.204" starttime="20170810 02:53:13.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:14.205">${boot_progress} = Off</msg>
<status endtime="20170810 02:53:14.205" starttime="20170810 02:53:13.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:53:14.205">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:53:14.205" starttime="20170810 02:53:14.205" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:14.205" starttime="20170810 02:53:13.664" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:14.206" starttime="20170810 02:53:12.939" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.211">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:24.211" starttime="20170810 02:53:24.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.212">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:24.212" starttime="20170810 02:53:24.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.212">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:24.212" starttime="20170810 02:53:24.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.213">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:24.213" starttime="20170810 02:53:24.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.419">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:24.419" starttime="20170810 02:53:24.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:24.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:24.419">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:24.419" starttime="20170810 02:53:24.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.420">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:24.420" starttime="20170810 02:53:24.420" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:24.421" starttime="20170810 02:53:24.420" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.421" starttime="20170810 02:53:24.210" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.421" starttime="20170810 02:53:24.210" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.421" starttime="20170810 02:53:24.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.422">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:53:24.422" starttime="20170810 02:53:24.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.424">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:24.424" starttime="20170810 02:53:24.423" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.425">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:24.425" starttime="20170810 02:53:24.424" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.425" starttime="20170810 02:53:24.424" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.425" starttime="20170810 02:53:24.422" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.425" starttime="20170810 02:53:24.422" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.503">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:24.503">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:24.503" starttime="20170810 02:53:24.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.505">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:24.505" starttime="20170810 02:53:24.504" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.506">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:24.506" starttime="20170810 02:53:24.506" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.507" starttime="20170810 02:53:24.505" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.507" starttime="20170810 02:53:24.504" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.507" starttime="20170810 02:53:24.503" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:24.507">Delete All Sessions</msg>
<status endtime="20170810 02:53:24.507" starttime="20170810 02:53:24.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:24.507">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:24.507" starttime="20170810 02:53:24.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:24.508" starttime="20170810 02:53:24.508" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.509">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:24.509">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:24.509">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:24.509" starttime="20170810 02:53:24.508" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:24.509">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:53:24.509" starttime="20170810 02:53:24.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:24.509">${power_state} = On</msg>
<status endtime="20170810 02:53:24.509" starttime="20170810 02:53:24.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:53:24.510" starttime="20170810 02:53:24.510" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.510" starttime="20170810 02:53:24.207" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.514">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:24.514" starttime="20170810 02:53:24.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:24.514" starttime="20170810 02:53:24.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.515">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:24.515" starttime="20170810 02:53:24.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.516">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:24.516" starttime="20170810 02:53:24.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.847">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:24.847" starttime="20170810 02:53:24.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:24.847">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:24.847">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:24.847" starttime="20170810 02:53:24.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.848">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:24.848" starttime="20170810 02:53:24.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:24.849" starttime="20170810 02:53:24.848" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.849" starttime="20170810 02:53:24.513" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.849" starttime="20170810 02:53:24.512" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.849" starttime="20170810 02:53:24.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.850">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:53:24.850" starttime="20170810 02:53:24.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:24.852">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:24.852" starttime="20170810 02:53:24.851" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:24.853">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:24.853" starttime="20170810 02:53:24.853" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.853" starttime="20170810 02:53:24.852" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.853" starttime="20170810 02:53:24.850" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:24.853" starttime="20170810 02:53:24.850" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.024">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:25.024">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:25.024" starttime="20170810 02:53:24.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.026">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:25.026" starttime="20170810 02:53:25.025" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.027">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:25.027" starttime="20170810 02:53:25.026" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.027" starttime="20170810 02:53:25.026" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.027" starttime="20170810 02:53:25.025" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.027" starttime="20170810 02:53:25.024" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:25.027">Delete All Sessions</msg>
<status endtime="20170810 02:53:25.027" starttime="20170810 02:53:25.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:25.028">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:25.028" starttime="20170810 02:53:24.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:25.028" starttime="20170810 02:53:25.028" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.029">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:25.029">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:25.029">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:25.029" starttime="20170810 02:53:25.029" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:25.029">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:53:25.029" starttime="20170810 02:53:24.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:25.030">${host_state} = Running</msg>
<status endtime="20170810 02:53:25.030" starttime="20170810 02:53:24.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:53:25.030" starttime="20170810 02:53:25.030" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.034">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:25.034" starttime="20170810 02:53:25.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.035">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:25.035" starttime="20170810 02:53:25.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.036">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:25.036" starttime="20170810 02:53:25.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.036">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:25.036" starttime="20170810 02:53:25.036" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:25.285" starttime="20170810 02:53:25.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:25.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:25.285">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:25.285" starttime="20170810 02:53:25.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:25.286" starttime="20170810 02:53:25.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:25.287" starttime="20170810 02:53:25.286" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.287" starttime="20170810 02:53:25.033" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.287" starttime="20170810 02:53:25.033" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.287" starttime="20170810 02:53:25.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.288">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:53:25.288" starttime="20170810 02:53:25.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.290">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:25.290" starttime="20170810 02:53:25.289" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.291">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:25.291" starttime="20170810 02:53:25.291" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.291" starttime="20170810 02:53:25.290" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.291" starttime="20170810 02:53:25.289" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.291" starttime="20170810 02:53:25.288" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.361">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:25.361">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:25.361" starttime="20170810 02:53:25.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.363">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:25.363" starttime="20170810 02:53:25.362" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.364">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:25.364" starttime="20170810 02:53:25.363" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.364" starttime="20170810 02:53:25.363" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.364" starttime="20170810 02:53:25.362" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:25.364" starttime="20170810 02:53:25.361" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:25.364">Delete All Sessions</msg>
<status endtime="20170810 02:53:25.365" starttime="20170810 02:53:25.364" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:25.365">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:25.365" starttime="20170810 02:53:25.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:25.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:25.365" starttime="20170810 02:53:25.365" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:25.366">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:25.366">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:25.366">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:25.366" starttime="20170810 02:53:25.366" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:25.366">${state} = Off</msg>
<status endtime="20170810 02:53:25.367" starttime="20170810 02:53:25.031" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:25.367">${boot_progress} = Off</msg>
<status endtime="20170810 02:53:25.367" starttime="20170810 02:53:25.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:53:25.367">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:53:25.367" starttime="20170810 02:53:25.367" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:25.368" starttime="20170810 02:53:25.030" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:25.368" starttime="20170810 02:53:24.206" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.373">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:35.373" starttime="20170810 02:53:35.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.374">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:35.374" starttime="20170810 02:53:35.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.375">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:35.375" starttime="20170810 02:53:35.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.375">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:35.375" starttime="20170810 02:53:35.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:35.615" starttime="20170810 02:53:35.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:35.615">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:35.616">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:35.616" starttime="20170810 02:53:35.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.616">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:35.616" starttime="20170810 02:53:35.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:35.617" starttime="20170810 02:53:35.617" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.617" starttime="20170810 02:53:35.372" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.617" starttime="20170810 02:53:35.371" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.617" starttime="20170810 02:53:35.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.618">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:53:35.618" starttime="20170810 02:53:35.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.620">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:35.620" starttime="20170810 02:53:35.619" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.621">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:35.621" starttime="20170810 02:53:35.621" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.621" starttime="20170810 02:53:35.620" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.621" starttime="20170810 02:53:35.619" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.621" starttime="20170810 02:53:35.618" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.775">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:35.775">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:35.775" starttime="20170810 02:53:35.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.777">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:35.777" starttime="20170810 02:53:35.776" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.778">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:35.778" starttime="20170810 02:53:35.778" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.778" starttime="20170810 02:53:35.777" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.778" starttime="20170810 02:53:35.776" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.778" starttime="20170810 02:53:35.775" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:35.779">Delete All Sessions</msg>
<status endtime="20170810 02:53:35.779" starttime="20170810 02:53:35.779" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:35.779">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:35.779" starttime="20170810 02:53:35.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.780">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:35.780" starttime="20170810 02:53:35.779" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.780">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:35.780">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:35.780">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:35.780" starttime="20170810 02:53:35.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:35.781">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:53:35.781" starttime="20170810 02:53:35.369" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:35.781">${power_state} = On</msg>
<status endtime="20170810 02:53:35.781" starttime="20170810 02:53:35.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:53:35.782" starttime="20170810 02:53:35.781" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:35.782" starttime="20170810 02:53:35.369" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:35.787">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:35.787" starttime="20170810 02:53:35.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:35.788" starttime="20170810 02:53:35.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.789">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:35.789" starttime="20170810 02:53:35.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:35.790">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:35.790" starttime="20170810 02:53:35.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.170">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:36.170" starttime="20170810 02:53:35.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.170">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:36.170">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:36.170" starttime="20170810 02:53:35.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.171">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:36.171" starttime="20170810 02:53:36.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:36.172" starttime="20170810 02:53:36.171" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.172" starttime="20170810 02:53:35.785" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.172" starttime="20170810 02:53:35.785" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.172" starttime="20170810 02:53:35.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.173">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:53:36.173" starttime="20170810 02:53:36.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.175">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:36.175" starttime="20170810 02:53:36.174" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.176">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:36.176" starttime="20170810 02:53:36.176" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.176" starttime="20170810 02:53:36.175" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.176" starttime="20170810 02:53:36.173" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.177" starttime="20170810 02:53:36.173" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.330">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:36.330">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:36.330" starttime="20170810 02:53:36.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.332">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:36.332" starttime="20170810 02:53:36.331" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.333">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:36.333" starttime="20170810 02:53:36.332" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.333" starttime="20170810 02:53:36.332" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.333" starttime="20170810 02:53:36.331" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.333" starttime="20170810 02:53:36.330" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:36.333">Delete All Sessions</msg>
<status endtime="20170810 02:53:36.334" starttime="20170810 02:53:36.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.334">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:36.334" starttime="20170810 02:53:35.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:36.334" starttime="20170810 02:53:36.334" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.335">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:36.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:36.335">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:36.335" starttime="20170810 02:53:36.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.335">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:53:36.335" starttime="20170810 02:53:35.782" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.336">${host_state} = Running</msg>
<status endtime="20170810 02:53:36.336" starttime="20170810 02:53:35.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:53:36.336" starttime="20170810 02:53:36.336" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.341">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:36.341" starttime="20170810 02:53:36.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.342">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:36.342" starttime="20170810 02:53:36.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.342">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:36.342" starttime="20170810 02:53:36.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.343">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:36.343" starttime="20170810 02:53:36.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:36.745" starttime="20170810 02:53:36.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:36.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:36.745" starttime="20170810 02:53:36.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:36.746" starttime="20170810 02:53:36.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:36.747" starttime="20170810 02:53:36.746" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.747" starttime="20170810 02:53:36.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.747" starttime="20170810 02:53:36.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.747" starttime="20170810 02:53:36.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.748">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:53:36.748" starttime="20170810 02:53:36.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.750">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:36.750" starttime="20170810 02:53:36.749" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.751">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:36.751" starttime="20170810 02:53:36.751" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.751" starttime="20170810 02:53:36.750" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.751" starttime="20170810 02:53:36.749" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.751" starttime="20170810 02:53:36.748" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.842">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:36.842">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:36.842" starttime="20170810 02:53:36.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.844">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:36.844" starttime="20170810 02:53:36.843" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.845">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:36.845" starttime="20170810 02:53:36.844" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.845" starttime="20170810 02:53:36.844" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.845" starttime="20170810 02:53:36.843" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:36.845" starttime="20170810 02:53:36.842" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:36.845">Delete All Sessions</msg>
<status endtime="20170810 02:53:36.846" starttime="20170810 02:53:36.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.846">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:36.846" starttime="20170810 02:53:36.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:36.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:36.847" starttime="20170810 02:53:36.846" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:36.847">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:36.847">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:36.847">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:36.847" starttime="20170810 02:53:36.847" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.848">${state} = Off</msg>
<status endtime="20170810 02:53:36.848" starttime="20170810 02:53:36.337" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:36.848">${boot_progress} = Off</msg>
<status endtime="20170810 02:53:36.848" starttime="20170810 02:53:36.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:53:36.848">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:53:36.849" starttime="20170810 02:53:36.848" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:36.849" starttime="20170810 02:53:36.336" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:36.849" starttime="20170810 02:53:35.368" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:46.854">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:46.854" starttime="20170810 02:53:46.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:46.855">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:46.855" starttime="20170810 02:53:46.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:46.856">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:46.856" starttime="20170810 02:53:46.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:46.856">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:46.856" starttime="20170810 02:53:46.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.101">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:47.101" starttime="20170810 02:53:46.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.102">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:47.102">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:47.102" starttime="20170810 02:53:46.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.102">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:47.102" starttime="20170810 02:53:47.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:47.103" starttime="20170810 02:53:47.103" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.103" starttime="20170810 02:53:46.853" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.103" starttime="20170810 02:53:46.852" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.103" starttime="20170810 02:53:46.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.104">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:53:47.104" starttime="20170810 02:53:47.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.106">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:47.106" starttime="20170810 02:53:47.105" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.108">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:47.108" starttime="20170810 02:53:47.107" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.108" starttime="20170810 02:53:47.106" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.108" starttime="20170810 02:53:47.105" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.108" starttime="20170810 02:53:47.104" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.243">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:47.243">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:47.244" starttime="20170810 02:53:47.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.246">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:47.246" starttime="20170810 02:53:47.245" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.247">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:47.247" starttime="20170810 02:53:47.246" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.247" starttime="20170810 02:53:47.246" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.247" starttime="20170810 02:53:47.244" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.247" starttime="20170810 02:53:47.244" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:47.247">Delete All Sessions</msg>
<status endtime="20170810 02:53:47.247" starttime="20170810 02:53:47.247" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.248">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:47.248" starttime="20170810 02:53:46.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.248">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:47.248" starttime="20170810 02:53:47.248" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.249">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:47.249">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:47.249">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:47.249" starttime="20170810 02:53:47.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.249">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:53:47.249" starttime="20170810 02:53:46.850" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.250">${power_state} = On</msg>
<status endtime="20170810 02:53:47.250" starttime="20170810 02:53:46.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:53:47.250" starttime="20170810 02:53:47.250" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.250" starttime="20170810 02:53:46.850" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.254">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:47.254" starttime="20170810 02:53:47.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.255">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:47.255" starttime="20170810 02:53:47.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.255">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:47.255" starttime="20170810 02:53:47.255" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.256">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:47.257" starttime="20170810 02:53:47.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.618">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:47.618" starttime="20170810 02:53:47.257" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.618">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:47.619">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:47.619" starttime="20170810 02:53:47.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.619">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:47.619" starttime="20170810 02:53:47.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:47.620" starttime="20170810 02:53:47.620" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.620" starttime="20170810 02:53:47.253" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.620" starttime="20170810 02:53:47.253" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.620" starttime="20170810 02:53:47.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.621">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:53:47.621" starttime="20170810 02:53:47.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.623">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:47.624" starttime="20170810 02:53:47.622" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.624">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:47.625" starttime="20170810 02:53:47.624" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.625" starttime="20170810 02:53:47.624" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.625" starttime="20170810 02:53:47.622" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.625" starttime="20170810 02:53:47.621" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.821">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:47.821">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:47.822" starttime="20170810 02:53:47.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.823">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:47.823" starttime="20170810 02:53:47.823" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.824">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:47.824" starttime="20170810 02:53:47.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.824" starttime="20170810 02:53:47.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.825" starttime="20170810 02:53:47.822" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:47.825" starttime="20170810 02:53:47.822" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:47.825">Delete All Sessions</msg>
<status endtime="20170810 02:53:47.825" starttime="20170810 02:53:47.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.825">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:47.825" starttime="20170810 02:53:47.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:47.826" starttime="20170810 02:53:47.826" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:47.827">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:47.827">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:47.827" starttime="20170810 02:53:47.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.827">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:53:47.827" starttime="20170810 02:53:47.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:47.827">${host_state} = Running</msg>
<status endtime="20170810 02:53:47.827" starttime="20170810 02:53:47.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:53:47.828" starttime="20170810 02:53:47.828" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:47.833">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:47.833" starttime="20170810 02:53:47.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:47.834" starttime="20170810 02:53:47.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.835">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:47.835" starttime="20170810 02:53:47.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:47.835">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:47.835" starttime="20170810 02:53:47.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:48.193">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:48.193" starttime="20170810 02:53:47.840" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:48.193">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:48.195">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:48.195" starttime="20170810 02:53:47.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:48.196">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:48.196" starttime="20170810 02:53:48.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:48.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:48.197" starttime="20170810 02:53:48.196" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.197" starttime="20170810 02:53:47.832" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.197" starttime="20170810 02:53:47.831" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.197" starttime="20170810 02:53:47.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:48.198">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:53:48.198" starttime="20170810 02:53:48.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:48.201">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:48.201" starttime="20170810 02:53:48.200" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:48.202">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:48.202" starttime="20170810 02:53:48.202" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.202" starttime="20170810 02:53:48.201" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.202" starttime="20170810 02:53:48.199" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.202" starttime="20170810 02:53:48.198" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:48.354">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:48.354">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:48.354" starttime="20170810 02:53:48.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:48.356">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:48.356" starttime="20170810 02:53:48.356" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:48.357">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:48.357" starttime="20170810 02:53:48.357" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.357" starttime="20170810 02:53:48.356" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.358" starttime="20170810 02:53:48.355" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:48.358" starttime="20170810 02:53:48.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:48.358">Delete All Sessions</msg>
<status endtime="20170810 02:53:48.358" starttime="20170810 02:53:48.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:48.358">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:48.358" starttime="20170810 02:53:47.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:48.359">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:48.359" starttime="20170810 02:53:48.359" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:48.359">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:48.360">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:48.360">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:48.360" starttime="20170810 02:53:48.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:48.360">${state} = Off</msg>
<status endtime="20170810 02:53:48.360" starttime="20170810 02:53:47.829" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:48.360">${boot_progress} = Off</msg>
<status endtime="20170810 02:53:48.360" starttime="20170810 02:53:47.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:53:48.361">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:53:48.361" starttime="20170810 02:53:48.360" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:48.361" starttime="20170810 02:53:47.828" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:48.361" starttime="20170810 02:53:46.849" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.367">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:58.367" starttime="20170810 02:53:58.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.368">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:58.368" starttime="20170810 02:53:58.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.368">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:58.368" starttime="20170810 02:53:58.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:58.369" starttime="20170810 02:53:58.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.703">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:58.704" starttime="20170810 02:53:58.370" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:58.704">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:58.704">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:58.704" starttime="20170810 02:53:58.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.704">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:58.705" starttime="20170810 02:53:58.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:58.705" starttime="20170810 02:53:58.705" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.705" starttime="20170810 02:53:58.366" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.705" starttime="20170810 02:53:58.365" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.706" starttime="20170810 02:53:58.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.706">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:53:58.706" starttime="20170810 02:53:58.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.708">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:58.708" starttime="20170810 02:53:58.708" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.709">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:58.709" starttime="20170810 02:53:58.709" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.709" starttime="20170810 02:53:58.708" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.710" starttime="20170810 02:53:58.707" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.710" starttime="20170810 02:53:58.707" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.795">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:58.795">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:58.796" starttime="20170810 02:53:58.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.798">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:58.798" starttime="20170810 02:53:58.797" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.799">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:58.799" starttime="20170810 02:53:58.799" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.799" starttime="20170810 02:53:58.798" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.799" starttime="20170810 02:53:58.796" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.799" starttime="20170810 02:53:58.796" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:58.800">Delete All Sessions</msg>
<status endtime="20170810 02:53:58.800" starttime="20170810 02:53:58.799" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:58.800">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:58.800" starttime="20170810 02:53:58.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:58.801" starttime="20170810 02:53:58.800" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.801">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:58.801">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:58.801">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:58.801" starttime="20170810 02:53:58.801" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:58.802">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:53:58.802" starttime="20170810 02:53:58.363" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:58.802">${power_state} = On</msg>
<status endtime="20170810 02:53:58.802" starttime="20170810 02:53:58.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:53:58.802" starttime="20170810 02:53:58.802" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:58.803" starttime="20170810 02:53:58.362" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:58.806">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:58.806" starttime="20170810 02:53:58.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.807">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:58.807" starttime="20170810 02:53:58.807" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.808">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:58.808" starttime="20170810 02:53:58.807" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:58.808">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:58.808" starttime="20170810 02:53:58.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.228">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:59.228" starttime="20170810 02:53:58.809" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.228">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:59.228">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:59.228" starttime="20170810 02:53:58.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.229">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:59.229" starttime="20170810 02:53:59.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:59.230" starttime="20170810 02:53:59.229" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.230" starttime="20170810 02:53:58.805" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.230" starttime="20170810 02:53:58.805" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.230" starttime="20170810 02:53:58.804" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.231">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:53:59.231" starttime="20170810 02:53:59.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.233">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:59.233" starttime="20170810 02:53:59.232" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.234">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:53:59.234" starttime="20170810 02:53:59.234" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.234" starttime="20170810 02:53:59.233" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.235" starttime="20170810 02:53:59.232" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.235" starttime="20170810 02:53:59.231" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.367">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:59.367">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:59.367" starttime="20170810 02:53:59.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.369">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:59.369" starttime="20170810 02:53:59.368" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.370">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:59.370" starttime="20170810 02:53:59.369" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.370" starttime="20170810 02:53:59.369" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.370" starttime="20170810 02:53:59.368" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.370" starttime="20170810 02:53:59.367" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:59.370">Delete All Sessions</msg>
<status endtime="20170810 02:53:59.370" starttime="20170810 02:53:59.370" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.371">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:59.371" starttime="20170810 02:53:58.804" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:59.371" starttime="20170810 02:53:59.371" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.372">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:59.372">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:59.372">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:59.372" starttime="20170810 02:53:59.372" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.373">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:53:59.373" starttime="20170810 02:53:58.803" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.373">${host_state} = Running</msg>
<status endtime="20170810 02:53:59.373" starttime="20170810 02:53:58.803" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:53:59.373" starttime="20170810 02:53:59.373" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.377">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:53:59.378" starttime="20170810 02:53:59.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.378">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:53:59.378" starttime="20170810 02:53:59.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.379">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:53:59.379" starttime="20170810 02:53:59.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.379">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:53:59.379" starttime="20170810 02:53:59.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:53:59.620" starttime="20170810 02:53:59.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.620">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:53:59.621">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:59.621" starttime="20170810 02:53:59.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.621">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:59.621" starttime="20170810 02:53:59.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:59.622" starttime="20170810 02:53:59.622" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.622" starttime="20170810 02:53:59.376" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.622" starttime="20170810 02:53:59.376" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.622" starttime="20170810 02:53:59.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.623">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:53:59.623" starttime="20170810 02:53:59.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.626">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:59.626" starttime="20170810 02:53:59.625" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.627">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:53:59.627" starttime="20170810 02:53:59.626" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.627" starttime="20170810 02:53:59.626" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.627" starttime="20170810 02:53:59.624" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.627" starttime="20170810 02:53:59.623" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.712">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:53:59.712">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:59.712" starttime="20170810 02:53:59.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.714">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:59.714" starttime="20170810 02:53:59.714" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.715">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:53:59.715" starttime="20170810 02:53:59.715" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.715" starttime="20170810 02:53:59.714" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.715" starttime="20170810 02:53:59.713" status="PASS"></status>
</kw>
<status endtime="20170810 02:53:59.715" starttime="20170810 02:53:59.713" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:53:59.716">Delete All Sessions</msg>
<status endtime="20170810 02:53:59.716" starttime="20170810 02:53:59.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.716">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:53:59.716" starttime="20170810 02:53:59.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:53:59.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:53:59.717" starttime="20170810 02:53:59.716" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:53:59.718">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:53:59.718">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:53:59.718">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:53:59.718" starttime="20170810 02:53:59.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.718">${state} = Off</msg>
<status endtime="20170810 02:53:59.718" starttime="20170810 02:53:59.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:53:59.719">${boot_progress} = Off</msg>
<status endtime="20170810 02:53:59.719" starttime="20170810 02:53:59.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:53:59.720">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:53:59.720" starttime="20170810 02:53:59.719" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:59.720" starttime="20170810 02:53:59.374" status="FAIL"></status>
</kw>
<status endtime="20170810 02:53:59.720" starttime="20170810 02:53:58.362" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:09.726">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:09.726" starttime="20170810 02:54:09.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:09.727">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:09.727" starttime="20170810 02:54:09.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:09.728">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:09.728" starttime="20170810 02:54:09.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:09.728">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:09.728" starttime="20170810 02:54:09.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.033">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:10.033" starttime="20170810 02:54:09.729" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.033">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:10.033">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.033" starttime="20170810 02:54:09.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.034">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.034" starttime="20170810 02:54:10.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.035">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.035" starttime="20170810 02:54:10.034" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.035" starttime="20170810 02:54:09.725" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.035" starttime="20170810 02:54:09.724" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.035" starttime="20170810 02:54:09.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.036">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:54:10.036" starttime="20170810 02:54:10.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.039">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:10.039" starttime="20170810 02:54:10.038" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.040">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:10.041" starttime="20170810 02:54:10.040" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.041" starttime="20170810 02:54:10.039" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.041" starttime="20170810 02:54:10.037" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.041" starttime="20170810 02:54:10.036" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.118">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:10.118">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.118" starttime="20170810 02:54:10.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.121">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:10.121" starttime="20170810 02:54:10.120" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.122">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:10.122" starttime="20170810 02:54:10.121" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.122" starttime="20170810 02:54:10.121" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.122" starttime="20170810 02:54:10.119" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.122" starttime="20170810 02:54:10.119" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:10.122">Delete All Sessions</msg>
<status endtime="20170810 02:54:10.122" starttime="20170810 02:54:10.122" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.123">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.123" starttime="20170810 02:54:09.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.123" starttime="20170810 02:54:10.123" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.124">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:10.124">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:10.124">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:10.124" starttime="20170810 02:54:10.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.124">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:54:10.124" starttime="20170810 02:54:09.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.125">${power_state} = On</msg>
<status endtime="20170810 02:54:10.125" starttime="20170810 02:54:09.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:54:10.125" starttime="20170810 02:54:10.125" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.125" starttime="20170810 02:54:09.721" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.129">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:10.129" starttime="20170810 02:54:10.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:10.130" starttime="20170810 02:54:10.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.131">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:10.131" starttime="20170810 02:54:10.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.131">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:10.131" starttime="20170810 02:54:10.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.339">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:10.339" starttime="20170810 02:54:10.132" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.339">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:10.339">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.340" starttime="20170810 02:54:10.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.340">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.340" starttime="20170810 02:54:10.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.341" starttime="20170810 02:54:10.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.341" starttime="20170810 02:54:10.128" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.341" starttime="20170810 02:54:10.128" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.341" starttime="20170810 02:54:10.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.342">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:54:10.342" starttime="20170810 02:54:10.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.345">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:10.345" starttime="20170810 02:54:10.344" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.346">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:10.346" starttime="20170810 02:54:10.346" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.346" starttime="20170810 02:54:10.345" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.346" starttime="20170810 02:54:10.343" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.346" starttime="20170810 02:54:10.343" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.474">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:10.474">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.474" starttime="20170810 02:54:10.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.476">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:10.476" starttime="20170810 02:54:10.475" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.477">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:10.477" starttime="20170810 02:54:10.477" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.477" starttime="20170810 02:54:10.476" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.477" starttime="20170810 02:54:10.475" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.477" starttime="20170810 02:54:10.474" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:10.478">Delete All Sessions</msg>
<status endtime="20170810 02:54:10.478" starttime="20170810 02:54:10.477" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.478">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.478" starttime="20170810 02:54:10.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.479" starttime="20170810 02:54:10.478" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.479">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:10.479">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:10.479">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:10.479" starttime="20170810 02:54:10.479" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.480">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:54:10.480" starttime="20170810 02:54:10.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.480">${host_state} = Running</msg>
<status endtime="20170810 02:54:10.480" starttime="20170810 02:54:10.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:54:10.480" starttime="20170810 02:54:10.480" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.484">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:10.485" starttime="20170810 02:54:10.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.485">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:10.485" starttime="20170810 02:54:10.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.486">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:10.486" starttime="20170810 02:54:10.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.487">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:10.487" starttime="20170810 02:54:10.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.746">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:10.746" starttime="20170810 02:54:10.487" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.746">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:10.746">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.746" starttime="20170810 02:54:10.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.747" starttime="20170810 02:54:10.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.748" starttime="20170810 02:54:10.747" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.748" starttime="20170810 02:54:10.483" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.748" starttime="20170810 02:54:10.483" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.748" starttime="20170810 02:54:10.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.748">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:54:10.748" starttime="20170810 02:54:10.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.751">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:10.751" starttime="20170810 02:54:10.750" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.751">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:10.752" starttime="20170810 02:54:10.751" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.752" starttime="20170810 02:54:10.751" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.752" starttime="20170810 02:54:10.749" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.752" starttime="20170810 02:54:10.749" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.856">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:10.856">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.857" starttime="20170810 02:54:10.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.858">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:10.858" starttime="20170810 02:54:10.858" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.859">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:10.859" starttime="20170810 02:54:10.859" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.859" starttime="20170810 02:54:10.859" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.860" starttime="20170810 02:54:10.857" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:10.860" starttime="20170810 02:54:10.857" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:10.860">Delete All Sessions</msg>
<status endtime="20170810 02:54:10.860" starttime="20170810 02:54:10.860" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.860">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:10.860" starttime="20170810 02:54:10.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:10.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:10.861" starttime="20170810 02:54:10.861" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:10.862">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:10.862">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:10.862">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:10.862" starttime="20170810 02:54:10.862" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.863">${state} = Off</msg>
<status endtime="20170810 02:54:10.863" starttime="20170810 02:54:10.481" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:10.863">${boot_progress} = Off</msg>
<status endtime="20170810 02:54:10.863" starttime="20170810 02:54:10.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:54:10.865">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:54:10.865" starttime="20170810 02:54:10.864" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:10.865" starttime="20170810 02:54:10.481" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:10.865" starttime="20170810 02:54:09.721" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:20.871">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:20.872" starttime="20170810 02:54:20.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:20.872">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:20.872" starttime="20170810 02:54:20.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:20.873">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:20.873" starttime="20170810 02:54:20.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:20.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:20.873" starttime="20170810 02:54:20.873" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.184">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:21.184" starttime="20170810 02:54:20.874" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.185">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:21.185">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:21.185" starttime="20170810 02:54:20.874" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.185">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:21.185" starttime="20170810 02:54:21.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:21.186" starttime="20170810 02:54:21.186" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.186" starttime="20170810 02:54:20.870" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.186" starttime="20170810 02:54:20.869" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.186" starttime="20170810 02:54:20.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.187">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:54:21.187" starttime="20170810 02:54:21.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.189">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:21.189" starttime="20170810 02:54:21.189" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.190">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:21.190" starttime="20170810 02:54:21.190" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.190" starttime="20170810 02:54:21.189" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.191" starttime="20170810 02:54:21.188" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.191" starttime="20170810 02:54:21.187" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.327">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:21.327">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:21.327" starttime="20170810 02:54:21.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.329">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:21.329" starttime="20170810 02:54:21.328" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.330">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:21.330" starttime="20170810 02:54:21.330" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.330" starttime="20170810 02:54:21.329" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.330" starttime="20170810 02:54:21.328" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.330" starttime="20170810 02:54:21.327" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:21.331">Delete All Sessions</msg>
<status endtime="20170810 02:54:21.331" starttime="20170810 02:54:21.331" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.331">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:21.331" starttime="20170810 02:54:20.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.332">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:21.332" starttime="20170810 02:54:21.331" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.332">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:21.332">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:21.333">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:21.333" starttime="20170810 02:54:21.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.333">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:54:21.333" starttime="20170810 02:54:20.867" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.333">${power_state} = On</msg>
<status endtime="20170810 02:54:21.333" starttime="20170810 02:54:20.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:54:21.334" starttime="20170810 02:54:21.333" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.334" starttime="20170810 02:54:20.867" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.337">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:21.338" starttime="20170810 02:54:21.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.338">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:21.338" starttime="20170810 02:54:21.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.339">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:21.339" starttime="20170810 02:54:21.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.340">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:21.340" starttime="20170810 02:54:21.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.735">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:21.735" starttime="20170810 02:54:21.340" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:21.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:21.736" starttime="20170810 02:54:21.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.736">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:21.736" starttime="20170810 02:54:21.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:21.737" starttime="20170810 02:54:21.737" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.737" starttime="20170810 02:54:21.337" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.737" starttime="20170810 02:54:21.336" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.737" starttime="20170810 02:54:21.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.738">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:54:21.738" starttime="20170810 02:54:21.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.741">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:21.741" starttime="20170810 02:54:21.739" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.741">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:21.742" starttime="20170810 02:54:21.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.742" starttime="20170810 02:54:21.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.742" starttime="20170810 02:54:21.739" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.742" starttime="20170810 02:54:21.738" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.878">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:21.879">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:21.879" starttime="20170810 02:54:21.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.881">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:21.881" starttime="20170810 02:54:21.881" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.882">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:21.882" starttime="20170810 02:54:21.882" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.882" starttime="20170810 02:54:21.881" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.883" starttime="20170810 02:54:21.880" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:21.883" starttime="20170810 02:54:21.879" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:21.883">Delete All Sessions</msg>
<status endtime="20170810 02:54:21.883" starttime="20170810 02:54:21.883" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.883">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:21.883" starttime="20170810 02:54:21.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:21.884" starttime="20170810 02:54:21.884" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.884">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:21.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:21.885">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:21.885" starttime="20170810 02:54:21.884" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.885">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:54:21.885" starttime="20170810 02:54:21.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:21.885">${host_state} = Running</msg>
<status endtime="20170810 02:54:21.885" starttime="20170810 02:54:21.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:54:21.886" starttime="20170810 02:54:21.886" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:21.890">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:21.890" starttime="20170810 02:54:21.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.891">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:21.891" starttime="20170810 02:54:21.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.891">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:21.891" starttime="20170810 02:54:21.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:21.892">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:21.892" starttime="20170810 02:54:21.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:22.225">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:22.225" starttime="20170810 02:54:21.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:22.225">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:22.225">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:22.225" starttime="20170810 02:54:21.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:22.226">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:22.226" starttime="20170810 02:54:22.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:22.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:22.227" starttime="20170810 02:54:22.226" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.227" starttime="20170810 02:54:21.889" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.227" starttime="20170810 02:54:21.888" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.227" starttime="20170810 02:54:21.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:22.228">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:54:22.228" starttime="20170810 02:54:22.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:22.230">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:22.230" starttime="20170810 02:54:22.229" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:22.231">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:22.231" starttime="20170810 02:54:22.231" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.231" starttime="20170810 02:54:22.230" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.231" starttime="20170810 02:54:22.229" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.231" starttime="20170810 02:54:22.228" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:22.328">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:22.328">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:22.328" starttime="20170810 02:54:22.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:22.330">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:22.330" starttime="20170810 02:54:22.329" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:22.331">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:22.331" starttime="20170810 02:54:22.331" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.331" starttime="20170810 02:54:22.330" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.331" starttime="20170810 02:54:22.329" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:22.331" starttime="20170810 02:54:22.329" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:22.332">Delete All Sessions</msg>
<status endtime="20170810 02:54:22.332" starttime="20170810 02:54:22.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:22.332">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:22.332" starttime="20170810 02:54:21.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:22.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:22.333" starttime="20170810 02:54:22.332" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:22.333">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:22.333">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:22.333">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:22.333" starttime="20170810 02:54:22.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:22.334">${state} = Off</msg>
<status endtime="20170810 02:54:22.334" starttime="20170810 02:54:21.887" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:22.334">${boot_progress} = Off</msg>
<status endtime="20170810 02:54:22.334" starttime="20170810 02:54:21.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:54:22.335">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:54:22.335" starttime="20170810 02:54:22.334" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:22.335" starttime="20170810 02:54:21.886" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:22.335" starttime="20170810 02:54:20.866" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.341">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:32.341" starttime="20170810 02:54:32.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.342">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:32.342" starttime="20170810 02:54:32.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.342">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:32.343" starttime="20170810 02:54:32.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.343">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:32.343" starttime="20170810 02:54:32.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:32.620" starttime="20170810 02:54:32.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:32.620">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:32.620">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:32.620" starttime="20170810 02:54:32.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:32.621" starttime="20170810 02:54:32.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:32.621" starttime="20170810 02:54:32.621" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.621" starttime="20170810 02:54:32.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.621" starttime="20170810 02:54:32.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.622" starttime="20170810 02:54:32.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.622">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:54:32.622" starttime="20170810 02:54:32.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.624">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:32.624" starttime="20170810 02:54:32.624" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.625">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:32.625" starttime="20170810 02:54:32.625" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.625" starttime="20170810 02:54:32.624" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.626" starttime="20170810 02:54:32.623" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.626" starttime="20170810 02:54:32.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.719">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:32.719">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:32.719" starttime="20170810 02:54:32.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.721">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:32.721" starttime="20170810 02:54:32.720" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.722">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:32.722" starttime="20170810 02:54:32.722" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.722" starttime="20170810 02:54:32.721" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.723" starttime="20170810 02:54:32.720" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.723" starttime="20170810 02:54:32.719" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:32.723">Delete All Sessions</msg>
<status endtime="20170810 02:54:32.723" starttime="20170810 02:54:32.723" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:32.723">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:32.723" starttime="20170810 02:54:32.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:32.724" starttime="20170810 02:54:32.724" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.724">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:32.725">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:32.725">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:32.725" starttime="20170810 02:54:32.724" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:32.725">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:54:32.725" starttime="20170810 02:54:32.337" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:32.725">${power_state} = On</msg>
<status endtime="20170810 02:54:32.725" starttime="20170810 02:54:32.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:54:32.726" starttime="20170810 02:54:32.726" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.726" starttime="20170810 02:54:32.336" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.730">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:32.730" starttime="20170810 02:54:32.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:32.731" starttime="20170810 02:54:32.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.731">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:32.731" starttime="20170810 02:54:32.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.732">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:32.732" starttime="20170810 02:54:32.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.933">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:32.934" starttime="20170810 02:54:32.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:32.934">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:32.934">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:32.934" starttime="20170810 02:54:32.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.935">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:32.935" starttime="20170810 02:54:32.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.935">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:32.935" starttime="20170810 02:54:32.935" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.935" starttime="20170810 02:54:32.729" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.935" starttime="20170810 02:54:32.728" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.936" starttime="20170810 02:54:32.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.936">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:54:32.936" starttime="20170810 02:54:32.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:32.939">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:32.939" starttime="20170810 02:54:32.938" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:32.940">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:32.940" starttime="20170810 02:54:32.939" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.940" starttime="20170810 02:54:32.939" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.940" starttime="20170810 02:54:32.937" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:32.940" starttime="20170810 02:54:32.937" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.036">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:33.036">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:33.036" starttime="20170810 02:54:32.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.038">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:33.038" starttime="20170810 02:54:33.037" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.039">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:33.039" starttime="20170810 02:54:33.038" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.039" starttime="20170810 02:54:33.038" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.039" starttime="20170810 02:54:33.037" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.039" starttime="20170810 02:54:33.036" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:33.039">Delete All Sessions</msg>
<status endtime="20170810 02:54:33.040" starttime="20170810 02:54:33.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:33.040">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:33.040" starttime="20170810 02:54:32.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:33.040" starttime="20170810 02:54:33.040" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.041">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:33.041">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:33.041">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:33.041" starttime="20170810 02:54:33.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:33.041">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:54:33.042" starttime="20170810 02:54:32.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:33.042">${host_state} = Running</msg>
<status endtime="20170810 02:54:33.042" starttime="20170810 02:54:32.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:54:33.042" starttime="20170810 02:54:33.042" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.046">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:33.047" starttime="20170810 02:54:33.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.047">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:33.047" starttime="20170810 02:54:33.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.048">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:33.048" starttime="20170810 02:54:33.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.048">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:33.049" starttime="20170810 02:54:33.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.284">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:33.284" starttime="20170810 02:54:33.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:33.284">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:33.285">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:33.285" starttime="20170810 02:54:33.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:33.285" starttime="20170810 02:54:33.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:33.286" starttime="20170810 02:54:33.286" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.286" starttime="20170810 02:54:33.045" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.286" starttime="20170810 02:54:33.045" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.286" starttime="20170810 02:54:33.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.287">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:54:33.287" starttime="20170810 02:54:33.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.289">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:33.289" starttime="20170810 02:54:33.288" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.291">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:33.291" starttime="20170810 02:54:33.290" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.291" starttime="20170810 02:54:33.289" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.291" starttime="20170810 02:54:33.288" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.291" starttime="20170810 02:54:33.287" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.381">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:33.381">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:33.381" starttime="20170810 02:54:33.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.383">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:33.383" starttime="20170810 02:54:33.382" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.384">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:33.384" starttime="20170810 02:54:33.384" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.384" starttime="20170810 02:54:33.383" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.384" starttime="20170810 02:54:33.382" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:33.384" starttime="20170810 02:54:33.381" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:33.385">Delete All Sessions</msg>
<status endtime="20170810 02:54:33.385" starttime="20170810 02:54:33.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:33.385">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:33.385" starttime="20170810 02:54:33.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:33.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:33.386" starttime="20170810 02:54:33.385" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:33.386">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:33.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:33.386">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:33.386" starttime="20170810 02:54:33.386" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:33.387">${state} = Off</msg>
<status endtime="20170810 02:54:33.387" starttime="20170810 02:54:33.043" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:33.387">${boot_progress} = Off</msg>
<status endtime="20170810 02:54:33.387" starttime="20170810 02:54:33.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:54:33.388">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:54:33.388" starttime="20170810 02:54:33.387" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:33.388" starttime="20170810 02:54:33.043" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:33.388" starttime="20170810 02:54:32.336" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.394">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:43.394" starttime="20170810 02:54:43.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.395">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:43.395" starttime="20170810 02:54:43.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.395">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:43.395" starttime="20170810 02:54:43.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.396">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:43.396" starttime="20170810 02:54:43.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.642">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:43.642" starttime="20170810 02:54:43.397" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:43.642">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:43.642">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:43.642" starttime="20170810 02:54:43.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.643">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:43.643" starttime="20170810 02:54:43.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:43.644" starttime="20170810 02:54:43.644" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.644" starttime="20170810 02:54:43.393" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.644" starttime="20170810 02:54:43.392" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.644" starttime="20170810 02:54:43.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.645">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:54:43.645" starttime="20170810 02:54:43.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.647">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:43.647" starttime="20170810 02:54:43.646" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.648">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:43.648" starttime="20170810 02:54:43.648" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.648" starttime="20170810 02:54:43.647" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.648" starttime="20170810 02:54:43.646" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.648" starttime="20170810 02:54:43.645" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.733">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:43.734">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:43.734" starttime="20170810 02:54:43.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.736">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:43.736" starttime="20170810 02:54:43.735" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.737">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:43.737" starttime="20170810 02:54:43.737" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.737" starttime="20170810 02:54:43.736" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.738" starttime="20170810 02:54:43.735" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.738" starttime="20170810 02:54:43.734" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:43.738">Delete All Sessions</msg>
<status endtime="20170810 02:54:43.738" starttime="20170810 02:54:43.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:43.738">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:43.738" starttime="20170810 02:54:43.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:43.739" starttime="20170810 02:54:43.739" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.740">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:43.740">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:43.740">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:43.740" starttime="20170810 02:54:43.739" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:43.740">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:54:43.740" starttime="20170810 02:54:43.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:43.740">${power_state} = On</msg>
<status endtime="20170810 02:54:43.740" starttime="20170810 02:54:43.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:54:43.741" starttime="20170810 02:54:43.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.741" starttime="20170810 02:54:43.389" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.745">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:43.745" starttime="20170810 02:54:43.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:43.746" starttime="20170810 02:54:43.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.746">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:43.746" starttime="20170810 02:54:43.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.747">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:43.747" starttime="20170810 02:54:43.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:43.953" starttime="20170810 02:54:43.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:43.954">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:43.954">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:43.954" starttime="20170810 02:54:43.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.954">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:43.954" starttime="20170810 02:54:43.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:43.955" starttime="20170810 02:54:43.955" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.955" starttime="20170810 02:54:43.744" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.955" starttime="20170810 02:54:43.743" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.955" starttime="20170810 02:54:43.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.956">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:54:43.956" starttime="20170810 02:54:43.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:43.959">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:43.959" starttime="20170810 02:54:43.957" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:43.960">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:43.960" starttime="20170810 02:54:43.959" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.960" starttime="20170810 02:54:43.959" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.960" starttime="20170810 02:54:43.957" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:43.960" starttime="20170810 02:54:43.956" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:44.054">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:44.054" starttime="20170810 02:54:43.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:44.055" starttime="20170810 02:54:44.055" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:44.057" starttime="20170810 02:54:44.056" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.057" starttime="20170810 02:54:44.056" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.057" starttime="20170810 02:54:44.054" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.057" starttime="20170810 02:54:44.054" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:44.057">Delete All Sessions</msg>
<status endtime="20170810 02:54:44.057" starttime="20170810 02:54:44.057" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:44.058">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:44.058" starttime="20170810 02:54:43.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:44.058" starttime="20170810 02:54:44.058" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.059">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:44.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:44.059">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:44.059" starttime="20170810 02:54:44.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:44.059">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:54:44.059" starttime="20170810 02:54:43.742" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:44.060">${host_state} = Running</msg>
<status endtime="20170810 02:54:44.060" starttime="20170810 02:54:43.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:54:44.060" starttime="20170810 02:54:44.060" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.064">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:44.064" starttime="20170810 02:54:44.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:44.065" starttime="20170810 02:54:44.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.065">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:44.066" starttime="20170810 02:54:44.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.066">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:44.066" starttime="20170810 02:54:44.066" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.258">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:44.258" starttime="20170810 02:54:44.067" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:44.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:44.258">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:44.258" starttime="20170810 02:54:44.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:44.259" starttime="20170810 02:54:44.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:44.260" starttime="20170810 02:54:44.259" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.260" starttime="20170810 02:54:44.063" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.260" starttime="20170810 02:54:44.063" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.260" starttime="20170810 02:54:44.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.260">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:54:44.260" starttime="20170810 02:54:44.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.263">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:44.263" starttime="20170810 02:54:44.262" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.263">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:44.264" starttime="20170810 02:54:44.263" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.264" starttime="20170810 02:54:44.263" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.264" starttime="20170810 02:54:44.261" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.264" starttime="20170810 02:54:44.261" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.355">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:44.355">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:44.355" starttime="20170810 02:54:44.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.357">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:44.357" starttime="20170810 02:54:44.356" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.358">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:44.358" starttime="20170810 02:54:44.358" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.358" starttime="20170810 02:54:44.357" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.358" starttime="20170810 02:54:44.356" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:44.358" starttime="20170810 02:54:44.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:44.359">Delete All Sessions</msg>
<status endtime="20170810 02:54:44.359" starttime="20170810 02:54:44.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:44.359">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:44.359" starttime="20170810 02:54:44.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:44.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:44.360" starttime="20170810 02:54:44.359" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:44.360">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:44.360">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:44.360">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:44.361" starttime="20170810 02:54:44.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:44.361">${state} = Off</msg>
<status endtime="20170810 02:54:44.361" starttime="20170810 02:54:44.061" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:44.361">${boot_progress} = Off</msg>
<status endtime="20170810 02:54:44.361" starttime="20170810 02:54:44.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:54:44.362">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:54:44.362" starttime="20170810 02:54:44.361" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:44.362" starttime="20170810 02:54:44.060" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:44.362" starttime="20170810 02:54:43.389" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.368">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:54.368" starttime="20170810 02:54:54.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:54.369" starttime="20170810 02:54:54.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.369">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:54.369" starttime="20170810 02:54:54.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.370">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:54.370" starttime="20170810 02:54:54.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.589">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:54.590" starttime="20170810 02:54:54.371" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.590">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:54.590">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:54.590" starttime="20170810 02:54:54.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.590">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:54.591" starttime="20170810 02:54:54.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:54.591" starttime="20170810 02:54:54.591" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.591" starttime="20170810 02:54:54.367" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.591" starttime="20170810 02:54:54.366" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.592" starttime="20170810 02:54:54.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.592">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:54:54.592" starttime="20170810 02:54:54.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.594">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:54.594" starttime="20170810 02:54:54.594" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.595">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:54.595" starttime="20170810 02:54:54.595" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.595" starttime="20170810 02:54:54.594" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.596" starttime="20170810 02:54:54.593" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.596" starttime="20170810 02:54:54.592" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.687">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:54.687">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:54.687" starttime="20170810 02:54:54.596" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.689">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:54.689" starttime="20170810 02:54:54.688" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.690">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:54.690" starttime="20170810 02:54:54.690" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.690" starttime="20170810 02:54:54.689" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.690" starttime="20170810 02:54:54.688" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.690" starttime="20170810 02:54:54.687" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:54.691">Delete All Sessions</msg>
<status endtime="20170810 02:54:54.691" starttime="20170810 02:54:54.691" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.691">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:54.691" starttime="20170810 02:54:54.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:54.692" starttime="20170810 02:54:54.691" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.692">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:54.692">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:54.692">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:54.692" starttime="20170810 02:54:54.692" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.693">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:54:54.693" starttime="20170810 02:54:54.364" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.693">${power_state} = On</msg>
<status endtime="20170810 02:54:54.693" starttime="20170810 02:54:54.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:54:54.694" starttime="20170810 02:54:54.693" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.694" starttime="20170810 02:54:54.363" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.697">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:54.698" starttime="20170810 02:54:54.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.698">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:54.698" starttime="20170810 02:54:54.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.699">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:54.699" starttime="20170810 02:54:54.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.699">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:54.700" starttime="20170810 02:54:54.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:54.892" starttime="20170810 02:54:54.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.892">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:54.892">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:54.892" starttime="20170810 02:54:54.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.893">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:54.893" starttime="20170810 02:54:54.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:54.894" starttime="20170810 02:54:54.893" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.894" starttime="20170810 02:54:54.696" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.894" starttime="20170810 02:54:54.696" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.894" starttime="20170810 02:54:54.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.895">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:54:54.895" starttime="20170810 02:54:54.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.897">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:54.897" starttime="20170810 02:54:54.896" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.898">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:54:54.898" starttime="20170810 02:54:54.898" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.899" starttime="20170810 02:54:54.898" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.899" starttime="20170810 02:54:54.896" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.899" starttime="20170810 02:54:54.895" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.993">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:54.993">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:54.993" starttime="20170810 02:54:54.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.995">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:54.995" starttime="20170810 02:54:54.995" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.996">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:54.996" starttime="20170810 02:54:54.996" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.996" starttime="20170810 02:54:54.995" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.996" starttime="20170810 02:54:54.994" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:54.996" starttime="20170810 02:54:54.994" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:54.997">Delete All Sessions</msg>
<status endtime="20170810 02:54:54.997" starttime="20170810 02:54:54.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.997">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:54.997" starttime="20170810 02:54:54.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:54.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:54.998" starttime="20170810 02:54:54.998" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:54.998">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:54.998">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:54.999">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:54.999" starttime="20170810 02:54:54.998" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.999">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:54:54.999" starttime="20170810 02:54:54.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:54.999">${host_state} = Running</msg>
<status endtime="20170810 02:54:54.999" starttime="20170810 02:54:54.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:54:55.000" starttime="20170810 02:54:55.000" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:55.004">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:54:55.004" starttime="20170810 02:54:55.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:54:55.005" starttime="20170810 02:54:55.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.005">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:54:55.005" starttime="20170810 02:54:55.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:54:55.006" starttime="20170810 02:54:55.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:55.253">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:54:55.253" starttime="20170810 02:54:55.010" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:55.253">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:54:55.253">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:55.253" starttime="20170810 02:54:55.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:55.254">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:55.254" starttime="20170810 02:54:55.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:55.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:55.255" starttime="20170810 02:54:55.254" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.255" starttime="20170810 02:54:55.003" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.255" starttime="20170810 02:54:55.003" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.255" starttime="20170810 02:54:55.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.256">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:54:55.256" starttime="20170810 02:54:55.255" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.258">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:55.258" starttime="20170810 02:54:55.257" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:55.259">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:54:55.259" starttime="20170810 02:54:55.259" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.259" starttime="20170810 02:54:55.258" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.259" starttime="20170810 02:54:55.257" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.259" starttime="20170810 02:54:55.256" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.330">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:54:55.330">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:55.330" starttime="20170810 02:54:55.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.332">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:55.332" starttime="20170810 02:54:55.332" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:55.333">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:54:55.333" starttime="20170810 02:54:55.333" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.333" starttime="20170810 02:54:55.332" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.333" starttime="20170810 02:54:55.331" status="PASS"></status>
</kw>
<status endtime="20170810 02:54:55.333" starttime="20170810 02:54:55.331" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:54:55.334">Delete All Sessions</msg>
<status endtime="20170810 02:54:55.334" starttime="20170810 02:54:55.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:55.334">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:54:55.334" starttime="20170810 02:54:55.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:54:55.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:54:55.335" starttime="20170810 02:54:55.334" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:54:55.335">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:54:55.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:54:55.335">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:54:55.336" starttime="20170810 02:54:55.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:55.336">${state} = Off</msg>
<status endtime="20170810 02:54:55.336" starttime="20170810 02:54:55.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:54:55.336">${boot_progress} = Off</msg>
<status endtime="20170810 02:54:55.336" starttime="20170810 02:54:55.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:54:55.337">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:54:55.337" starttime="20170810 02:54:55.336" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:55.337" starttime="20170810 02:54:55.000" status="FAIL"></status>
</kw>
<status endtime="20170810 02:54:55.337" starttime="20170810 02:54:54.363" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.343">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:05.344" starttime="20170810 02:55:05.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.344">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:05.344" starttime="20170810 02:55:05.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.345">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:05.345" starttime="20170810 02:55:05.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.346">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:05.346" starttime="20170810 02:55:05.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.542">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:05.543" starttime="20170810 02:55:05.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.543">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:05.543">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:05.543" starttime="20170810 02:55:05.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.544">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:05.544" starttime="20170810 02:55:05.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:05.544" starttime="20170810 02:55:05.544" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.544" starttime="20170810 02:55:05.342" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.545" starttime="20170810 02:55:05.342" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.545" starttime="20170810 02:55:05.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.545">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:55:05.545" starttime="20170810 02:55:05.545" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.547">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:05.547" starttime="20170810 02:55:05.547" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.548">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:05.549" starttime="20170810 02:55:05.548" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.549" starttime="20170810 02:55:05.548" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.549" starttime="20170810 02:55:05.546" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.549" starttime="20170810 02:55:05.546" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.632">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:05.632">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:05.632" starttime="20170810 02:55:05.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.634">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:05.634" starttime="20170810 02:55:05.633" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.635">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:05.635" starttime="20170810 02:55:05.635" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.635" starttime="20170810 02:55:05.634" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.635" starttime="20170810 02:55:05.633" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.635" starttime="20170810 02:55:05.632" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:05.636">Delete All Sessions</msg>
<status endtime="20170810 02:55:05.636" starttime="20170810 02:55:05.636" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.636">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:05.636" starttime="20170810 02:55:05.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:05.638" starttime="20170810 02:55:05.637" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.638">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:05.638">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:05.639">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:05.639" starttime="20170810 02:55:05.638" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.639">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:55:05.639" starttime="20170810 02:55:05.339" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.640">${power_state} = On</msg>
<status endtime="20170810 02:55:05.640" starttime="20170810 02:55:05.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:55:05.640" starttime="20170810 02:55:05.640" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.641" starttime="20170810 02:55:05.338" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.646">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:05.646" starttime="20170810 02:55:05.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.647">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:05.647" starttime="20170810 02:55:05.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.648">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:05.648" starttime="20170810 02:55:05.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.649">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:05.649" starttime="20170810 02:55:05.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:05.830" starttime="20170810 02:55:05.650" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.830">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:05.830">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:05.830" starttime="20170810 02:55:05.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.831">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:05.831" starttime="20170810 02:55:05.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:05.832" starttime="20170810 02:55:05.831" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.832" starttime="20170810 02:55:05.644" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.832" starttime="20170810 02:55:05.644" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.832" starttime="20170810 02:55:05.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.833">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:55:05.833" starttime="20170810 02:55:05.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.835">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:05.835" starttime="20170810 02:55:05.834" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.836">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:05.836" starttime="20170810 02:55:05.836" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.836" starttime="20170810 02:55:05.835" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.837" starttime="20170810 02:55:05.834" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.837" starttime="20170810 02:55:05.833" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:05.930">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:05.930" starttime="20170810 02:55:05.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.931">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:05.931" starttime="20170810 02:55:05.931" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.932">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:05.932" starttime="20170810 02:55:05.932" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.932" starttime="20170810 02:55:05.931" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.933" starttime="20170810 02:55:05.930" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:05.933" starttime="20170810 02:55:05.930" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:05.933">Delete All Sessions</msg>
<status endtime="20170810 02:55:05.933" starttime="20170810 02:55:05.933" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.933">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:05.933" starttime="20170810 02:55:05.642" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:05.934" starttime="20170810 02:55:05.934" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.935">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:05.935">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:05.935">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:05.935" starttime="20170810 02:55:05.934" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.935">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:55:05.935" starttime="20170810 02:55:05.641" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:05.935">${host_state} = Running</msg>
<status endtime="20170810 02:55:05.935" starttime="20170810 02:55:05.641" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:55:05.936" starttime="20170810 02:55:05.936" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:05.940">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:05.940" starttime="20170810 02:55:05.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:05.941" starttime="20170810 02:55:05.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.941">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:05.941" starttime="20170810 02:55:05.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:05.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:05.942" starttime="20170810 02:55:05.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:06.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:06.158" starttime="20170810 02:55:05.943" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:06.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:06.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:06.158" starttime="20170810 02:55:05.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:06.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:06.159" starttime="20170810 02:55:06.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:06.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:06.160" starttime="20170810 02:55:06.159" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.160" starttime="20170810 02:55:05.939" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.160" starttime="20170810 02:55:05.939" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.160" starttime="20170810 02:55:05.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:06.160">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:55:06.160" starttime="20170810 02:55:06.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:06.163">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:06.163" starttime="20170810 02:55:06.162" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:06.163">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:06.164" starttime="20170810 02:55:06.163" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.164" starttime="20170810 02:55:06.163" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.164" starttime="20170810 02:55:06.161" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.164" starttime="20170810 02:55:06.161" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:06.238">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:06.238">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:06.238" starttime="20170810 02:55:06.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:06.240">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:06.240" starttime="20170810 02:55:06.240" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:06.241">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:06.241" starttime="20170810 02:55:06.241" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.241" starttime="20170810 02:55:06.240" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.241" starttime="20170810 02:55:06.239" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:06.241" starttime="20170810 02:55:06.239" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:06.242">Delete All Sessions</msg>
<status endtime="20170810 02:55:06.242" starttime="20170810 02:55:06.242" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:06.242">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:06.242" starttime="20170810 02:55:05.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:06.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:06.243" starttime="20170810 02:55:06.242" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:06.243">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:06.243">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:06.244">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:06.244" starttime="20170810 02:55:06.243" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:06.244">${state} = Off</msg>
<status endtime="20170810 02:55:06.244" starttime="20170810 02:55:05.937" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:06.244">${boot_progress} = Off</msg>
<status endtime="20170810 02:55:06.244" starttime="20170810 02:55:05.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:55:06.245">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:55:06.245" starttime="20170810 02:55:06.244" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:06.245" starttime="20170810 02:55:05.936" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:06.245" starttime="20170810 02:55:05.338" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.251">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:16.251" starttime="20170810 02:55:16.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.252">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:16.252" starttime="20170810 02:55:16.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.252">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:16.252" starttime="20170810 02:55:16.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.253">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:16.253" starttime="20170810 02:55:16.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.464">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:16.464" starttime="20170810 02:55:16.254" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:16.464">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:16.465" starttime="20170810 02:55:16.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.465">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:16.465" starttime="20170810 02:55:16.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:16.466" starttime="20170810 02:55:16.466" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.466" starttime="20170810 02:55:16.250" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.466" starttime="20170810 02:55:16.249" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.466" starttime="20170810 02:55:16.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.467">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:55:16.467" starttime="20170810 02:55:16.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.471">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:16.471" starttime="20170810 02:55:16.470" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.472">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:16.472" starttime="20170810 02:55:16.472" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.472" starttime="20170810 02:55:16.471" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.472" starttime="20170810 02:55:16.469" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.472" starttime="20170810 02:55:16.468" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.556">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:16.556">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:16.556" starttime="20170810 02:55:16.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.558">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:16.558" starttime="20170810 02:55:16.557" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.559">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:16.559" starttime="20170810 02:55:16.559" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.559" starttime="20170810 02:55:16.558" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.559" starttime="20170810 02:55:16.557" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.559" starttime="20170810 02:55:16.556" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:16.560">Delete All Sessions</msg>
<status endtime="20170810 02:55:16.560" starttime="20170810 02:55:16.560" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.560">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:16.560" starttime="20170810 02:55:16.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:16.561" starttime="20170810 02:55:16.560" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.561">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:16.561">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:16.561">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:16.561" starttime="20170810 02:55:16.561" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.562">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:55:16.562" starttime="20170810 02:55:16.247" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.562">${power_state} = On</msg>
<status endtime="20170810 02:55:16.562" starttime="20170810 02:55:16.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:55:16.563" starttime="20170810 02:55:16.562" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.563" starttime="20170810 02:55:16.246" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.567">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:16.567" starttime="20170810 02:55:16.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.568">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:16.568" starttime="20170810 02:55:16.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.568">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:16.568" starttime="20170810 02:55:16.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.569">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:16.569" starttime="20170810 02:55:16.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.775">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:16.775" starttime="20170810 02:55:16.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.775">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:16.775">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:16.775" starttime="20170810 02:55:16.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.776">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:16.776" starttime="20170810 02:55:16.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:16.777" starttime="20170810 02:55:16.776" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.777" starttime="20170810 02:55:16.566" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.777" starttime="20170810 02:55:16.565" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.777" starttime="20170810 02:55:16.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.777">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:55:16.777" starttime="20170810 02:55:16.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.780">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:16.780" starttime="20170810 02:55:16.779" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.781">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:16.781" starttime="20170810 02:55:16.781" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.781" starttime="20170810 02:55:16.780" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.781" starttime="20170810 02:55:16.778" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.782" starttime="20170810 02:55:16.778" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.874">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:16.874">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:16.874" starttime="20170810 02:55:16.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.876">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:16.876" starttime="20170810 02:55:16.875" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.876">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:16.877" starttime="20170810 02:55:16.876" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.877" starttime="20170810 02:55:16.876" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.877" starttime="20170810 02:55:16.875" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:16.877" starttime="20170810 02:55:16.874" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:16.877">Delete All Sessions</msg>
<status endtime="20170810 02:55:16.877" starttime="20170810 02:55:16.877" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.878">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:16.878" starttime="20170810 02:55:16.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:16.878" starttime="20170810 02:55:16.878" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.879">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:16.879">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:16.879">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:16.879" starttime="20170810 02:55:16.879" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.879">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:55:16.879" starttime="20170810 02:55:16.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:16.880">${host_state} = Running</msg>
<status endtime="20170810 02:55:16.880" starttime="20170810 02:55:16.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:55:16.880" starttime="20170810 02:55:16.880" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:16.884">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:16.884" starttime="20170810 02:55:16.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.885">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:16.885" starttime="20170810 02:55:16.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.886">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:16.886" starttime="20170810 02:55:16.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:16.886">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:16.886" starttime="20170810 02:55:16.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:17.188">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:17.188" starttime="20170810 02:55:16.887" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:17.188">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:17.188">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:17.188" starttime="20170810 02:55:16.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:17.189">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:17.189" starttime="20170810 02:55:17.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:17.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:17.190" starttime="20170810 02:55:17.189" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.190" starttime="20170810 02:55:16.883" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.190" starttime="20170810 02:55:16.883" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.190" starttime="20170810 02:55:16.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:17.191">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:55:17.191" starttime="20170810 02:55:17.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:17.193">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:17.193" starttime="20170810 02:55:17.192" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:17.194">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:17.194" starttime="20170810 02:55:17.193" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.194" starttime="20170810 02:55:17.193" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.194" starttime="20170810 02:55:17.191" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.194" starttime="20170810 02:55:17.191" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:17.264">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:17.264">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:17.264" starttime="20170810 02:55:17.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:17.266">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:17.266" starttime="20170810 02:55:17.266" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:17.267">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:17.267" starttime="20170810 02:55:17.267" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.267" starttime="20170810 02:55:17.266" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.267" starttime="20170810 02:55:17.265" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:17.267" starttime="20170810 02:55:17.265" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:17.268">Delete All Sessions</msg>
<status endtime="20170810 02:55:17.268" starttime="20170810 02:55:17.268" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:17.268">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:17.268" starttime="20170810 02:55:16.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:17.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:17.269" starttime="20170810 02:55:17.268" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:17.269">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:17.269">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:17.270">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:17.270" starttime="20170810 02:55:17.269" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:17.270">${state} = Off</msg>
<status endtime="20170810 02:55:17.270" starttime="20170810 02:55:16.881" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:17.270">${boot_progress} = Off</msg>
<status endtime="20170810 02:55:17.270" starttime="20170810 02:55:16.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:55:17.271">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:55:17.271" starttime="20170810 02:55:17.270" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:17.271" starttime="20170810 02:55:16.880" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:17.271" starttime="20170810 02:55:16.246" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.277">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:27.277" starttime="20170810 02:55:27.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.278">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:27.278" starttime="20170810 02:55:27.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.279">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:27.279" starttime="20170810 02:55:27.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.279">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:27.279" starttime="20170810 02:55:27.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:27.469" starttime="20170810 02:55:27.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.469">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:27.469">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:27.469" starttime="20170810 02:55:27.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:27.470" starttime="20170810 02:55:27.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:27.471" starttime="20170810 02:55:27.470" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.471" starttime="20170810 02:55:27.276" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.471" starttime="20170810 02:55:27.275" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.471" starttime="20170810 02:55:27.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.472">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:55:27.472" starttime="20170810 02:55:27.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.474">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:27.474" starttime="20170810 02:55:27.473" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.475">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:27.475" starttime="20170810 02:55:27.475" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.475" starttime="20170810 02:55:27.474" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.475" starttime="20170810 02:55:27.473" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.475" starttime="20170810 02:55:27.472" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.541">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:27.541">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:27.541" starttime="20170810 02:55:27.476" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.543">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:27.543" starttime="20170810 02:55:27.542" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.544">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:27.544" starttime="20170810 02:55:27.544" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.544" starttime="20170810 02:55:27.543" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.544" starttime="20170810 02:55:27.542" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.544" starttime="20170810 02:55:27.541" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:27.545">Delete All Sessions</msg>
<status endtime="20170810 02:55:27.545" starttime="20170810 02:55:27.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.545">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:27.545" starttime="20170810 02:55:27.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.546">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:27.546" starttime="20170810 02:55:27.545" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.546">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:27.546">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:27.546">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:27.547" starttime="20170810 02:55:27.546" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.547">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:55:27.547" starttime="20170810 02:55:27.273" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.547">${power_state} = On</msg>
<status endtime="20170810 02:55:27.547" starttime="20170810 02:55:27.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:55:27.548" starttime="20170810 02:55:27.547" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.548" starttime="20170810 02:55:27.272" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.551">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:27.552" starttime="20170810 02:55:27.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.552">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:27.552" starttime="20170810 02:55:27.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.553">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:27.553" starttime="20170810 02:55:27.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.554">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:27.554" starttime="20170810 02:55:27.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:27.791" starttime="20170810 02:55:27.554" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:27.791">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:27.791" starttime="20170810 02:55:27.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:27.792" starttime="20170810 02:55:27.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:27.793" starttime="20170810 02:55:27.792" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.793" starttime="20170810 02:55:27.551" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.793" starttime="20170810 02:55:27.550" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.793" starttime="20170810 02:55:27.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.794">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:55:27.794" starttime="20170810 02:55:27.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.796">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:27.796" starttime="20170810 02:55:27.795" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.797">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:27.797" starttime="20170810 02:55:27.797" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.797" starttime="20170810 02:55:27.796" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.798" starttime="20170810 02:55:27.795" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.798" starttime="20170810 02:55:27.794" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.989">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:27.990">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:27.990" starttime="20170810 02:55:27.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.992">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:27.992" starttime="20170810 02:55:27.991" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.993">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:27.993" starttime="20170810 02:55:27.992" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.993" starttime="20170810 02:55:27.992" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.993" starttime="20170810 02:55:27.991" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:27.993" starttime="20170810 02:55:27.990" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:27.994">Delete All Sessions</msg>
<status endtime="20170810 02:55:27.994" starttime="20170810 02:55:27.993" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.994">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:27.994" starttime="20170810 02:55:27.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:27.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:27.995" starttime="20170810 02:55:27.994" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:27.995">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:27.995">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:27.995">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:27.995" starttime="20170810 02:55:27.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.996">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:55:27.996" starttime="20170810 02:55:27.548" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:27.996">${host_state} = Running</msg>
<status endtime="20170810 02:55:27.996" starttime="20170810 02:55:27.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:55:27.997" starttime="20170810 02:55:27.996" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:28.001">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:28.001" starttime="20170810 02:55:28.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.002">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:28.002" starttime="20170810 02:55:28.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.002">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:28.002" starttime="20170810 02:55:28.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.003">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:28.003" starttime="20170810 02:55:28.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:28.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:28.250" starttime="20170810 02:55:28.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:28.250">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:28.250">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:28.251" starttime="20170810 02:55:28.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:28.251">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:28.251" starttime="20170810 02:55:28.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:28.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:28.252" starttime="20170810 02:55:28.252" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.252" starttime="20170810 02:55:28.000" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.252" starttime="20170810 02:55:27.999" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.252" starttime="20170810 02:55:27.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.253">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:55:28.253" starttime="20170810 02:55:28.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.255">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:28.255" starttime="20170810 02:55:28.254" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:28.256">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:28.256" starttime="20170810 02:55:28.256" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.256" starttime="20170810 02:55:28.255" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.256" starttime="20170810 02:55:28.254" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.256" starttime="20170810 02:55:28.253" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.397">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:28.397">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:28.397" starttime="20170810 02:55:28.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.399">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:28.399" starttime="20170810 02:55:28.399" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:28.400">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:28.400" starttime="20170810 02:55:28.400" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.400" starttime="20170810 02:55:28.399" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.400" starttime="20170810 02:55:28.398" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:28.400" starttime="20170810 02:55:28.398" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:28.401">Delete All Sessions</msg>
<status endtime="20170810 02:55:28.401" starttime="20170810 02:55:28.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:28.401">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:28.401" starttime="20170810 02:55:27.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:28.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:28.402" starttime="20170810 02:55:28.401" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:28.402">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:28.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:28.403">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:28.403" starttime="20170810 02:55:28.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:28.403">${state} = Off</msg>
<status endtime="20170810 02:55:28.403" starttime="20170810 02:55:27.998" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:28.403">${boot_progress} = Off</msg>
<status endtime="20170810 02:55:28.403" starttime="20170810 02:55:27.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:55:28.404">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:55:28.404" starttime="20170810 02:55:28.403" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:28.404" starttime="20170810 02:55:27.997" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:28.404" starttime="20170810 02:55:27.272" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.410">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:38.410" starttime="20170810 02:55:38.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.411">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:38.411" starttime="20170810 02:55:38.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.411">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:38.411" starttime="20170810 02:55:38.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:38.412" starttime="20170810 02:55:38.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.596">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:38.596" starttime="20170810 02:55:38.413" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:38.596">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:38.596">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:38.596" starttime="20170810 02:55:38.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.597">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:38.597" starttime="20170810 02:55:38.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:38.598" starttime="20170810 02:55:38.597" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.598" starttime="20170810 02:55:38.409" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.598" starttime="20170810 02:55:38.408" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.598" starttime="20170810 02:55:38.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.599">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:55:38.599" starttime="20170810 02:55:38.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.601">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:38.601" starttime="20170810 02:55:38.600" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.602">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:38.602" starttime="20170810 02:55:38.602" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.602" starttime="20170810 02:55:38.601" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.602" starttime="20170810 02:55:38.600" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.602" starttime="20170810 02:55:38.599" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.792">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:38.792">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:38.793" starttime="20170810 02:55:38.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.795">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:38.795" starttime="20170810 02:55:38.794" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.796">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:38.796" starttime="20170810 02:55:38.795" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.796" starttime="20170810 02:55:38.795" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.796" starttime="20170810 02:55:38.793" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.796" starttime="20170810 02:55:38.793" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:38.797">Delete All Sessions</msg>
<status endtime="20170810 02:55:38.797" starttime="20170810 02:55:38.796" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:38.797">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:38.797" starttime="20170810 02:55:38.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:38.798" starttime="20170810 02:55:38.797" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.798">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:38.798">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:38.798">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:38.798" starttime="20170810 02:55:38.798" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:38.799">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:55:38.799" starttime="20170810 02:55:38.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:38.799">${power_state} = On</msg>
<status endtime="20170810 02:55:38.799" starttime="20170810 02:55:38.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:55:38.799" starttime="20170810 02:55:38.799" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:38.800" starttime="20170810 02:55:38.405" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:38.803">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:38.803" starttime="20170810 02:55:38.803" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:38.804" starttime="20170810 02:55:38.804" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.805">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:38.805" starttime="20170810 02:55:38.804" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:38.806">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:38.806" starttime="20170810 02:55:38.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:39.169" starttime="20170810 02:55:38.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.170">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:39.170">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:39.170" starttime="20170810 02:55:38.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:39.170" starttime="20170810 02:55:39.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:39.171" starttime="20170810 02:55:39.171" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.171" starttime="20170810 02:55:38.802" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.171" starttime="20170810 02:55:38.802" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.171" starttime="20170810 02:55:38.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.172">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:55:39.172" starttime="20170810 02:55:39.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.175">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:39.175" starttime="20170810 02:55:39.174" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.176">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:39.176" starttime="20170810 02:55:39.175" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.176" starttime="20170810 02:55:39.175" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.176" starttime="20170810 02:55:39.173" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.176" starttime="20170810 02:55:39.172" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.387">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:39.388">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:39.388" starttime="20170810 02:55:39.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.390">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:39.390" starttime="20170810 02:55:39.389" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.390">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:39.391" starttime="20170810 02:55:39.390" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.391" starttime="20170810 02:55:39.390" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.391" starttime="20170810 02:55:39.389" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.391" starttime="20170810 02:55:39.388" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:39.391">Delete All Sessions</msg>
<status endtime="20170810 02:55:39.391" starttime="20170810 02:55:39.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.392">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:39.392" starttime="20170810 02:55:38.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:39.392" starttime="20170810 02:55:39.392" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.393">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:39.393">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:39.393">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:39.393" starttime="20170810 02:55:39.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.393">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:55:39.393" starttime="20170810 02:55:38.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.394">${host_state} = Running</msg>
<status endtime="20170810 02:55:39.394" starttime="20170810 02:55:38.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:55:39.394" starttime="20170810 02:55:39.394" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.398">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:39.398" starttime="20170810 02:55:39.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.399">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:39.399" starttime="20170810 02:55:39.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.400">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:39.400" starttime="20170810 02:55:39.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:39.400" starttime="20170810 02:55:39.400" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:39.615" starttime="20170810 02:55:39.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.616">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:39.616">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:39.616" starttime="20170810 02:55:39.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.616">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:39.616" starttime="20170810 02:55:39.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:39.617" starttime="20170810 02:55:39.617" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.617" starttime="20170810 02:55:39.397" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.617" starttime="20170810 02:55:39.397" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.617" starttime="20170810 02:55:39.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.618">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:55:39.618" starttime="20170810 02:55:39.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.620">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:39.620" starttime="20170810 02:55:39.620" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.621">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:39.621" starttime="20170810 02:55:39.621" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.621" starttime="20170810 02:55:39.620" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.622" starttime="20170810 02:55:39.619" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.622" starttime="20170810 02:55:39.618" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.692">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:39.692">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:39.692" starttime="20170810 02:55:39.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.694">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:39.694" starttime="20170810 02:55:39.693" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.695">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:39.695" starttime="20170810 02:55:39.695" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.695" starttime="20170810 02:55:39.694" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.695" starttime="20170810 02:55:39.693" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:39.695" starttime="20170810 02:55:39.692" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:39.696">Delete All Sessions</msg>
<status endtime="20170810 02:55:39.696" starttime="20170810 02:55:39.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.696">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:39.696" starttime="20170810 02:55:39.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:39.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:39.697" starttime="20170810 02:55:39.696" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:39.697">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:39.697">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:39.697">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:39.698" starttime="20170810 02:55:39.697" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.698">${state} = Off</msg>
<status endtime="20170810 02:55:39.698" starttime="20170810 02:55:39.395" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:39.698">${boot_progress} = Off</msg>
<status endtime="20170810 02:55:39.698" starttime="20170810 02:55:39.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:55:39.699">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:55:39.699" starttime="20170810 02:55:39.698" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:39.699" starttime="20170810 02:55:39.394" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:39.699" starttime="20170810 02:55:38.405" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.705">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:49.706" starttime="20170810 02:55:49.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:49.706" starttime="20170810 02:55:49.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.707">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:49.707" starttime="20170810 02:55:49.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:49.707" starttime="20170810 02:55:49.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.910">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:49.910" starttime="20170810 02:55:49.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:49.910">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:49.910">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:49.910" starttime="20170810 02:55:49.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.911">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:49.911" starttime="20170810 02:55:49.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:49.912" starttime="20170810 02:55:49.911" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.912" starttime="20170810 02:55:49.704" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.912" starttime="20170810 02:55:49.703" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.912" starttime="20170810 02:55:49.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.913">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:55:49.913" starttime="20170810 02:55:49.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.915">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:49.915" starttime="20170810 02:55:49.914" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.916">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:49.916" starttime="20170810 02:55:49.916" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.916" starttime="20170810 02:55:49.915" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.916" starttime="20170810 02:55:49.914" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.916" starttime="20170810 02:55:49.913" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.982">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:49.983">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:49.983" starttime="20170810 02:55:49.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.985">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:49.985" starttime="20170810 02:55:49.984" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.986">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:49.986" starttime="20170810 02:55:49.985" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.986" starttime="20170810 02:55:49.985" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.986" starttime="20170810 02:55:49.983" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.986" starttime="20170810 02:55:49.983" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:49.986">Delete All Sessions</msg>
<status endtime="20170810 02:55:49.987" starttime="20170810 02:55:49.986" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:49.987">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:49.987" starttime="20170810 02:55:49.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:49.987" starttime="20170810 02:55:49.987" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.988">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:49.988">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:49.988">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:49.988" starttime="20170810 02:55:49.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:49.989">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:55:49.989" starttime="20170810 02:55:49.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:49.989">${power_state} = On</msg>
<status endtime="20170810 02:55:49.989" starttime="20170810 02:55:49.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:55:49.989" starttime="20170810 02:55:49.989" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:49.990" starttime="20170810 02:55:49.700" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:49.993">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:49.993" starttime="20170810 02:55:49.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:49.994" starttime="20170810 02:55:49.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.995">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:49.995" starttime="20170810 02:55:49.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:49.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:49.995" starttime="20170810 02:55:49.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.269">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:50.270" starttime="20170810 02:55:49.996" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.270">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:50.270">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:50.270" starttime="20170810 02:55:49.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.270">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:50.270" starttime="20170810 02:55:50.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:50.271" starttime="20170810 02:55:50.271" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.271" starttime="20170810 02:55:49.992" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.271" starttime="20170810 02:55:49.992" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.271" starttime="20170810 02:55:49.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.272">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:55:50.272" starttime="20170810 02:55:50.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.275">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:50.275" starttime="20170810 02:55:50.273" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.275">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:55:50.276" starttime="20170810 02:55:50.275" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.276" starttime="20170810 02:55:50.275" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.276" starttime="20170810 02:55:50.273" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.276" starttime="20170810 02:55:50.272" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.385">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:50.385">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:50.385" starttime="20170810 02:55:50.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.387">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:50.387" starttime="20170810 02:55:50.386" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.388">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:50.388" starttime="20170810 02:55:50.387" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.388" starttime="20170810 02:55:50.387" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.388" starttime="20170810 02:55:50.386" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.388" starttime="20170810 02:55:50.385" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:50.389">Delete All Sessions</msg>
<status endtime="20170810 02:55:50.389" starttime="20170810 02:55:50.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.389">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:50.389" starttime="20170810 02:55:49.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:50.390" starttime="20170810 02:55:50.389" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.390">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:50.390">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:50.390">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:50.390" starttime="20170810 02:55:50.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.391">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:55:50.391" starttime="20170810 02:55:49.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.391">${host_state} = Running</msg>
<status endtime="20170810 02:55:50.391" starttime="20170810 02:55:49.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:55:50.391" starttime="20170810 02:55:50.391" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.395">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:55:50.396" starttime="20170810 02:55:50.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.396">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:55:50.396" starttime="20170810 02:55:50.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.397">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:55:50.397" starttime="20170810 02:55:50.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.397">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:55:50.397" starttime="20170810 02:55:50.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:55:50.584" starttime="20170810 02:55:50.398" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:55:50.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:50.585" starttime="20170810 02:55:50.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:50.585" starttime="20170810 02:55:50.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:50.586" starttime="20170810 02:55:50.586" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.586" starttime="20170810 02:55:50.394" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.586" starttime="20170810 02:55:50.394" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.586" starttime="20170810 02:55:50.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.587">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:55:50.587" starttime="20170810 02:55:50.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.589">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:50.589" starttime="20170810 02:55:50.588" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.590">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:55:50.590" starttime="20170810 02:55:50.590" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.590" starttime="20170810 02:55:50.589" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.590" starttime="20170810 02:55:50.588" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.590" starttime="20170810 02:55:50.587" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.692">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:55:50.692">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:50.692" starttime="20170810 02:55:50.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.694">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:50.694" starttime="20170810 02:55:50.693" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.695">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:55:50.695" starttime="20170810 02:55:50.695" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.695" starttime="20170810 02:55:50.694" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.695" starttime="20170810 02:55:50.693" status="PASS"></status>
</kw>
<status endtime="20170810 02:55:50.695" starttime="20170810 02:55:50.693" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:55:50.696">Delete All Sessions</msg>
<status endtime="20170810 02:55:50.696" starttime="20170810 02:55:50.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.696">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:55:50.696" starttime="20170810 02:55:50.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:55:50.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:55:50.697" starttime="20170810 02:55:50.696" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:55:50.697">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:55:50.697">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:55:50.697">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:55:50.697" starttime="20170810 02:55:50.697" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.698">${state} = Off</msg>
<status endtime="20170810 02:55:50.698" starttime="20170810 02:55:50.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:55:50.698">${boot_progress} = Off</msg>
<status endtime="20170810 02:55:50.698" starttime="20170810 02:55:50.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:55:50.699">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:55:50.699" starttime="20170810 02:55:50.698" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:50.699" starttime="20170810 02:55:50.392" status="FAIL"></status>
</kw>
<status endtime="20170810 02:55:50.699" starttime="20170810 02:55:49.700" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.705">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:00.705" starttime="20170810 02:56:00.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:00.706" starttime="20170810 02:56:00.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.707">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:00.707" starttime="20170810 02:56:00.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:00.707" starttime="20170810 02:56:00.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.887">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:00.887" starttime="20170810 02:56:00.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:00.887">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:00.888">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:00.888" starttime="20170810 02:56:00.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.888">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:00.888" starttime="20170810 02:56:00.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:00.889" starttime="20170810 02:56:00.889" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.889" starttime="20170810 02:56:00.704" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.889" starttime="20170810 02:56:00.703" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.889" starttime="20170810 02:56:00.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.890">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:56:00.890" starttime="20170810 02:56:00.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.892">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:00.892" starttime="20170810 02:56:00.891" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.893">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:00.893" starttime="20170810 02:56:00.893" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.893" starttime="20170810 02:56:00.892" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.893" starttime="20170810 02:56:00.891" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.894" starttime="20170810 02:56:00.890" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.976">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:00.976">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:00.976" starttime="20170810 02:56:00.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.978">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:00.978" starttime="20170810 02:56:00.977" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.979">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:00.979" starttime="20170810 02:56:00.979" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.980" starttime="20170810 02:56:00.979" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.980" starttime="20170810 02:56:00.977" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.980" starttime="20170810 02:56:00.976" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:00.980">Delete All Sessions</msg>
<status endtime="20170810 02:56:00.980" starttime="20170810 02:56:00.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:00.980">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:00.980" starttime="20170810 02:56:00.702" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:00.981" starttime="20170810 02:56:00.981" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.982">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:00.982">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:00.982">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:00.982" starttime="20170810 02:56:00.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:00.982">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:56:00.982" starttime="20170810 02:56:00.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:00.982">${power_state} = On</msg>
<status endtime="20170810 02:56:00.982" starttime="20170810 02:56:00.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:56:00.983" starttime="20170810 02:56:00.983" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:00.983" starttime="20170810 02:56:00.700" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:00.987">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:00.987" starttime="20170810 02:56:00.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.987">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:00.987" starttime="20170810 02:56:00.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.988">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:00.988" starttime="20170810 02:56:00.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:00.989">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:00.989" starttime="20170810 02:56:00.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.213">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:01.213" starttime="20170810 02:56:00.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.213">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:01.213">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:01.213" starttime="20170810 02:56:00.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.214">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:01.214" starttime="20170810 02:56:01.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:01.215" starttime="20170810 02:56:01.214" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.215" starttime="20170810 02:56:00.986" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.215" starttime="20170810 02:56:00.985" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.215" starttime="20170810 02:56:00.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.216">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:56:01.216" starttime="20170810 02:56:01.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.218">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:01.218" starttime="20170810 02:56:01.217" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.219">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:01.219" starttime="20170810 02:56:01.219" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.219" starttime="20170810 02:56:01.218" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.219" starttime="20170810 02:56:01.216" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.219" starttime="20170810 02:56:01.216" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.352">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:01.352">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:01.352" starttime="20170810 02:56:01.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.354">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:01.354" starttime="20170810 02:56:01.353" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.355">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:01.355" starttime="20170810 02:56:01.355" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.356" starttime="20170810 02:56:01.354" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.356" starttime="20170810 02:56:01.353" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.356" starttime="20170810 02:56:01.353" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:01.356">Delete All Sessions</msg>
<status endtime="20170810 02:56:01.357" starttime="20170810 02:56:01.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.357">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:01.357" starttime="20170810 02:56:00.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.358">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:01.358" starttime="20170810 02:56:01.357" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.359">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:01.359">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:01.359">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:01.359" starttime="20170810 02:56:01.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.359">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:56:01.359" starttime="20170810 02:56:00.984" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.360">${host_state} = Running</msg>
<status endtime="20170810 02:56:01.360" starttime="20170810 02:56:00.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:56:01.360" starttime="20170810 02:56:01.360" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:01.364" starttime="20170810 02:56:01.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:01.365" starttime="20170810 02:56:01.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.366">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:01.366" starttime="20170810 02:56:01.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.366">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:01.366" starttime="20170810 02:56:01.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.631">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:01.631" starttime="20170810 02:56:01.370" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.631">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:01.631">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:01.632" starttime="20170810 02:56:01.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.632">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:01.632" starttime="20170810 02:56:01.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:01.633" starttime="20170810 02:56:01.633" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.633" starttime="20170810 02:56:01.363" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.633" starttime="20170810 02:56:01.363" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.633" starttime="20170810 02:56:01.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.634">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:56:01.634" starttime="20170810 02:56:01.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.636">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:01.636" starttime="20170810 02:56:01.635" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.637">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:01.637" starttime="20170810 02:56:01.637" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.637" starttime="20170810 02:56:01.636" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.637" starttime="20170810 02:56:01.635" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.637" starttime="20170810 02:56:01.634" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.707">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:01.707">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:01.707" starttime="20170810 02:56:01.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.709">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:01.709" starttime="20170810 02:56:01.708" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.710">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:01.710" starttime="20170810 02:56:01.710" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.710" starttime="20170810 02:56:01.709" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.710" starttime="20170810 02:56:01.708" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:01.710" starttime="20170810 02:56:01.707" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:01.711">Delete All Sessions</msg>
<status endtime="20170810 02:56:01.711" starttime="20170810 02:56:01.711" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.711">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:01.711" starttime="20170810 02:56:01.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:01.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:01.712" starttime="20170810 02:56:01.711" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:01.712">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:01.712">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:01.712">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:01.712" starttime="20170810 02:56:01.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.713">${state} = Off</msg>
<status endtime="20170810 02:56:01.713" starttime="20170810 02:56:01.361" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:01.713">${boot_progress} = Off</msg>
<status endtime="20170810 02:56:01.713" starttime="20170810 02:56:01.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:56:01.714">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:56:01.714" starttime="20170810 02:56:01.713" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:01.714" starttime="20170810 02:56:01.360" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:01.714" starttime="20170810 02:56:00.700" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:11.720">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:11.720" starttime="20170810 02:56:11.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:11.721">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:11.721" starttime="20170810 02:56:11.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:11.721">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:11.721" starttime="20170810 02:56:11.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:11.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:11.722" starttime="20170810 02:56:11.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:11.924">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:11.925" starttime="20170810 02:56:11.723" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:11.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:11.925">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:11.925" starttime="20170810 02:56:11.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:11.925">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:11.926" starttime="20170810 02:56:11.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:11.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:11.926" starttime="20170810 02:56:11.926" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:11.926" starttime="20170810 02:56:11.719" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:11.926" starttime="20170810 02:56:11.718" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:11.927" starttime="20170810 02:56:11.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:11.927">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:56:11.927" starttime="20170810 02:56:11.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:11.929">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:11.929" starttime="20170810 02:56:11.929" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:11.930">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:11.930" starttime="20170810 02:56:11.930" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:11.930" starttime="20170810 02:56:11.930" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:11.931" starttime="20170810 02:56:11.928" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:11.931" starttime="20170810 02:56:11.927" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.009">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:12.010">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.010" starttime="20170810 02:56:11.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.012">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:12.012" starttime="20170810 02:56:12.011" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.013">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:12.013" starttime="20170810 02:56:12.013" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.013" starttime="20170810 02:56:12.012" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.013" starttime="20170810 02:56:12.011" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.013" starttime="20170810 02:56:12.010" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:12.014">Delete All Sessions</msg>
<status endtime="20170810 02:56:12.014" starttime="20170810 02:56:12.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.014">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.014" starttime="20170810 02:56:11.716" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:12.015" starttime="20170810 02:56:12.014" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.015">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:12.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:12.015">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:12.016" starttime="20170810 02:56:12.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.016">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:56:12.016" starttime="20170810 02:56:11.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.016">${power_state} = On</msg>
<status endtime="20170810 02:56:12.016" starttime="20170810 02:56:11.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:56:12.017" starttime="20170810 02:56:12.016" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.017" starttime="20170810 02:56:11.715" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.020">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:12.021" starttime="20170810 02:56:12.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.021">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:12.021" starttime="20170810 02:56:12.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.022">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:12.022" starttime="20170810 02:56:12.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.023">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:12.023" starttime="20170810 02:56:12.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:12.265" starttime="20170810 02:56:12.023" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:12.265">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.265" starttime="20170810 02:56:12.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.266">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:12.266" starttime="20170810 02:56:12.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:12.267" starttime="20170810 02:56:12.266" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.267" starttime="20170810 02:56:12.019" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.267" starttime="20170810 02:56:12.019" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.267" starttime="20170810 02:56:12.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.268">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:56:12.268" starttime="20170810 02:56:12.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.271">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:12.271" starttime="20170810 02:56:12.270" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.272">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:12.273" starttime="20170810 02:56:12.272" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.273" starttime="20170810 02:56:12.271" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.273" starttime="20170810 02:56:12.269" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.273" starttime="20170810 02:56:12.268" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.369">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:12.369">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.369" starttime="20170810 02:56:12.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.371">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:12.371" starttime="20170810 02:56:12.371" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.372">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:12.372" starttime="20170810 02:56:12.372" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.372" starttime="20170810 02:56:12.371" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.372" starttime="20170810 02:56:12.370" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.372" starttime="20170810 02:56:12.370" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:12.373">Delete All Sessions</msg>
<status endtime="20170810 02:56:12.373" starttime="20170810 02:56:12.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.373">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.373" starttime="20170810 02:56:12.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:12.374" starttime="20170810 02:56:12.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.375">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:12.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:12.375">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:12.375" starttime="20170810 02:56:12.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.376">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:56:12.376" starttime="20170810 02:56:12.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.376">${host_state} = Running</msg>
<status endtime="20170810 02:56:12.376" starttime="20170810 02:56:12.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:56:12.377" starttime="20170810 02:56:12.377" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.383">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:12.383" starttime="20170810 02:56:12.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:12.384" starttime="20170810 02:56:12.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.385">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:12.385" starttime="20170810 02:56:12.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.385">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:12.385" starttime="20170810 02:56:12.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.608">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:12.608" starttime="20170810 02:56:12.386" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.608">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:12.608">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.608" starttime="20170810 02:56:12.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.609">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:12.609" starttime="20170810 02:56:12.608" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:12.610" starttime="20170810 02:56:12.609" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.610" starttime="20170810 02:56:12.381" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.610" starttime="20170810 02:56:12.381" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.610" starttime="20170810 02:56:12.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.611">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:56:12.611" starttime="20170810 02:56:12.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.613">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:12.613" starttime="20170810 02:56:12.612" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.614">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:12.614" starttime="20170810 02:56:12.613" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.614" starttime="20170810 02:56:12.613" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.614" starttime="20170810 02:56:12.611" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.614" starttime="20170810 02:56:12.611" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.684">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:12.684">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.684" starttime="20170810 02:56:12.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.687">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:12.687" starttime="20170810 02:56:12.686" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.688">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:12.688" starttime="20170810 02:56:12.688" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.688" starttime="20170810 02:56:12.687" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.689" starttime="20170810 02:56:12.685" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:12.689" starttime="20170810 02:56:12.685" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:12.689">Delete All Sessions</msg>
<status endtime="20170810 02:56:12.689" starttime="20170810 02:56:12.689" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.689">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:12.689" starttime="20170810 02:56:12.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:12.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:12.690" starttime="20170810 02:56:12.690" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:12.691">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:12.691">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:12.691">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:12.691" starttime="20170810 02:56:12.690" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.691">${state} = Off</msg>
<status endtime="20170810 02:56:12.691" starttime="20170810 02:56:12.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:12.691">${boot_progress} = Off</msg>
<status endtime="20170810 02:56:12.691" starttime="20170810 02:56:12.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:56:12.692">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:56:12.692" starttime="20170810 02:56:12.692" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:12.692" starttime="20170810 02:56:12.377" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:12.692" starttime="20170810 02:56:11.714" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:22.698">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:22.698" starttime="20170810 02:56:22.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:22.699">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:22.699" starttime="20170810 02:56:22.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:22.700">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:22.700" starttime="20170810 02:56:22.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:22.700">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:22.700" starttime="20170810 02:56:22.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:22.926">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:22.926" starttime="20170810 02:56:22.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:22.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:22.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:22.926" starttime="20170810 02:56:22.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:22.927">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:22.927" starttime="20170810 02:56:22.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:22.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:22.928" starttime="20170810 02:56:22.927" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:22.928" starttime="20170810 02:56:22.697" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:22.928" starttime="20170810 02:56:22.696" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:22.928" starttime="20170810 02:56:22.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:22.929">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:56:22.929" starttime="20170810 02:56:22.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:22.931">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:22.931" starttime="20170810 02:56:22.930" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:22.932">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:22.932" starttime="20170810 02:56:22.932" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:22.932" starttime="20170810 02:56:22.931" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:22.932" starttime="20170810 02:56:22.930" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:22.932" starttime="20170810 02:56:22.929" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.081">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:23.081">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.081" starttime="20170810 02:56:22.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.084">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:23.084" starttime="20170810 02:56:23.083" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.085">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:23.085" starttime="20170810 02:56:23.084" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.085" starttime="20170810 02:56:23.084" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.085" starttime="20170810 02:56:23.082" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.085" starttime="20170810 02:56:23.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:23.085">Delete All Sessions</msg>
<status endtime="20170810 02:56:23.085" starttime="20170810 02:56:23.085" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.086">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.086" starttime="20170810 02:56:22.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:23.086" starttime="20170810 02:56:23.086" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.087">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:23.087">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:23.087">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:23.087" starttime="20170810 02:56:23.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.087">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:56:23.087" starttime="20170810 02:56:22.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.088">${power_state} = On</msg>
<status endtime="20170810 02:56:23.088" starttime="20170810 02:56:22.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:56:23.088" starttime="20170810 02:56:23.088" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.088" starttime="20170810 02:56:22.694" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.092">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:23.092" starttime="20170810 02:56:23.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:23.093" starttime="20170810 02:56:23.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.094">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:23.094" starttime="20170810 02:56:23.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:23.095" starttime="20170810 02:56:23.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:23.299" starttime="20170810 02:56:23.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.299">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:23.299">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.299" starttime="20170810 02:56:23.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.300">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:23.300" starttime="20170810 02:56:23.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:23.300" starttime="20170810 02:56:23.300" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.300" starttime="20170810 02:56:23.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.301" starttime="20170810 02:56:23.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.301" starttime="20170810 02:56:23.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.301">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:56:23.301" starttime="20170810 02:56:23.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.304">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:23.304" starttime="20170810 02:56:23.303" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.306">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:23.306" starttime="20170810 02:56:23.305" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.306" starttime="20170810 02:56:23.305" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.306" starttime="20170810 02:56:23.302" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.306" starttime="20170810 02:56:23.302" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.399">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:23.399">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.399" starttime="20170810 02:56:23.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.401">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:23.401" starttime="20170810 02:56:23.400" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.402">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:23.402" starttime="20170810 02:56:23.402" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.402" starttime="20170810 02:56:23.401" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.402" starttime="20170810 02:56:23.400" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.402" starttime="20170810 02:56:23.399" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:23.403">Delete All Sessions</msg>
<status endtime="20170810 02:56:23.403" starttime="20170810 02:56:23.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.403">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.403" starttime="20170810 02:56:23.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.404">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:23.404" starttime="20170810 02:56:23.403" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.404">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:23.404">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:23.404">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:23.404" starttime="20170810 02:56:23.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.405">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:56:23.405" starttime="20170810 02:56:23.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.405">${host_state} = Running</msg>
<status endtime="20170810 02:56:23.405" starttime="20170810 02:56:23.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:56:23.406" starttime="20170810 02:56:23.405" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.411">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:23.412" starttime="20170810 02:56:23.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.413">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:23.413" starttime="20170810 02:56:23.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.413">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:23.414" starttime="20170810 02:56:23.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.414">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:23.414" starttime="20170810 02:56:23.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:23.693" starttime="20170810 02:56:23.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:23.693">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.693" starttime="20170810 02:56:23.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:23.694" starttime="20170810 02:56:23.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:23.695" starttime="20170810 02:56:23.694" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.695" starttime="20170810 02:56:23.410" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.695" starttime="20170810 02:56:23.409" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.695" starttime="20170810 02:56:23.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.696">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:56:23.696" starttime="20170810 02:56:23.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.698">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:23.698" starttime="20170810 02:56:23.697" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.699">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:23.699" starttime="20170810 02:56:23.699" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.699" starttime="20170810 02:56:23.698" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.699" starttime="20170810 02:56:23.697" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.699" starttime="20170810 02:56:23.696" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.768">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:23.769">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.769" starttime="20170810 02:56:23.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.770">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:23.771" starttime="20170810 02:56:23.770" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.771">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:23.772" starttime="20170810 02:56:23.771" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.772" starttime="20170810 02:56:23.771" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.772" starttime="20170810 02:56:23.769" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:23.772" starttime="20170810 02:56:23.769" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:23.772">Delete All Sessions</msg>
<status endtime="20170810 02:56:23.772" starttime="20170810 02:56:23.772" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.773">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:23.773" starttime="20170810 02:56:23.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:23.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:23.773" starttime="20170810 02:56:23.773" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:23.774">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:23.774">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:23.774">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:23.774" starttime="20170810 02:56:23.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.774">${state} = Off</msg>
<status endtime="20170810 02:56:23.774" starttime="20170810 02:56:23.407" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:23.774">${boot_progress} = Off</msg>
<status endtime="20170810 02:56:23.774" starttime="20170810 02:56:23.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:56:23.775">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:56:23.775" starttime="20170810 02:56:23.775" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:23.775" starttime="20170810 02:56:23.406" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:23.775" starttime="20170810 02:56:22.693" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:33.781">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:33.782" starttime="20170810 02:56:33.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:33.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:33.782" starttime="20170810 02:56:33.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:33.783">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:33.783" starttime="20170810 02:56:33.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:33.784">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:33.784" starttime="20170810 02:56:33.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:33.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:33.979" starttime="20170810 02:56:33.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:33.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:33.979">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:33.979" starttime="20170810 02:56:33.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:33.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:33.980" starttime="20170810 02:56:33.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:33.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:33.981" starttime="20170810 02:56:33.980" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:33.981" starttime="20170810 02:56:33.780" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:33.981" starttime="20170810 02:56:33.780" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:33.981" starttime="20170810 02:56:33.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:33.982">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:56:33.982" starttime="20170810 02:56:33.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:33.984">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:33.984" starttime="20170810 02:56:33.983" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:33.985">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:33.985" starttime="20170810 02:56:33.985" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:33.985" starttime="20170810 02:56:33.984" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:33.985" starttime="20170810 02:56:33.982" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:33.985" starttime="20170810 02:56:33.982" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.052">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:34.053">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.053" starttime="20170810 02:56:33.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:34.055" starttime="20170810 02:56:34.054" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:34.056" starttime="20170810 02:56:34.056" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.056" starttime="20170810 02:56:34.055" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.056" starttime="20170810 02:56:34.054" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.056" starttime="20170810 02:56:34.053" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:34.057">Delete All Sessions</msg>
<status endtime="20170810 02:56:34.057" starttime="20170810 02:56:34.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.057">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.057" starttime="20170810 02:56:33.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:34.058" starttime="20170810 02:56:34.057" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.058">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:34.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:34.058">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:34.058" starttime="20170810 02:56:34.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.059">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:56:34.059" starttime="20170810 02:56:33.778" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.059">${power_state} = On</msg>
<status endtime="20170810 02:56:34.059" starttime="20170810 02:56:33.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:56:34.060" starttime="20170810 02:56:34.059" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.060" starttime="20170810 02:56:33.777" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.063">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:34.064" starttime="20170810 02:56:34.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.064">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:34.064" starttime="20170810 02:56:34.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.065">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:34.065" starttime="20170810 02:56:34.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:34.065" starttime="20170810 02:56:34.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.264">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:34.265" starttime="20170810 02:56:34.066" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:34.265">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.265" starttime="20170810 02:56:34.066" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.266">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:34.266" starttime="20170810 02:56:34.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:34.266" starttime="20170810 02:56:34.266" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.267" starttime="20170810 02:56:34.062" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.267" starttime="20170810 02:56:34.062" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.267" starttime="20170810 02:56:34.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.267">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:56:34.267" starttime="20170810 02:56:34.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.270">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:34.270" starttime="20170810 02:56:34.269" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.271">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:34.271" starttime="20170810 02:56:34.271" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.271" starttime="20170810 02:56:34.270" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.271" starttime="20170810 02:56:34.268" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.271" starttime="20170810 02:56:34.268" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.380">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:34.381">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.381" starttime="20170810 02:56:34.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.382">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:34.382" starttime="20170810 02:56:34.382" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.383">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:34.383" starttime="20170810 02:56:34.383" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.383" starttime="20170810 02:56:34.383" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.384" starttime="20170810 02:56:34.381" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.384" starttime="20170810 02:56:34.381" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:34.384">Delete All Sessions</msg>
<status endtime="20170810 02:56:34.384" starttime="20170810 02:56:34.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.384">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.384" starttime="20170810 02:56:34.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:34.385" starttime="20170810 02:56:34.385" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.386">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:34.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:34.386">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:34.386" starttime="20170810 02:56:34.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.386">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:56:34.386" starttime="20170810 02:56:34.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.386">${host_state} = Running</msg>
<status endtime="20170810 02:56:34.386" starttime="20170810 02:56:34.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:56:34.387" starttime="20170810 02:56:34.387" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.391">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:34.391" starttime="20170810 02:56:34.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:34.392" starttime="20170810 02:56:34.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.393">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:34.393" starttime="20170810 02:56:34.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:34.393" starttime="20170810 02:56:34.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.772">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:34.772" starttime="20170810 02:56:34.397" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:34.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.772" starttime="20170810 02:56:34.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:34.773" starttime="20170810 02:56:34.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:34.774" starttime="20170810 02:56:34.773" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.774" starttime="20170810 02:56:34.390" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.774" starttime="20170810 02:56:34.390" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.774" starttime="20170810 02:56:34.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.775">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:56:34.775" starttime="20170810 02:56:34.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.777">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:34.777" starttime="20170810 02:56:34.776" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.778">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:34.778" starttime="20170810 02:56:34.777" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.778" starttime="20170810 02:56:34.777" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.778" starttime="20170810 02:56:34.775" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.778" starttime="20170810 02:56:34.775" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.847">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:34.848">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.848" starttime="20170810 02:56:34.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.850">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:34.850" starttime="20170810 02:56:34.849" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.850">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:34.851" starttime="20170810 02:56:34.850" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.851" starttime="20170810 02:56:34.850" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.851" starttime="20170810 02:56:34.848" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:34.851" starttime="20170810 02:56:34.848" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:34.851">Delete All Sessions</msg>
<status endtime="20170810 02:56:34.851" starttime="20170810 02:56:34.851" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.852">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:34.852" starttime="20170810 02:56:34.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:34.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:34.852" starttime="20170810 02:56:34.852" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:34.853">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:34.853">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:34.853">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:34.853" starttime="20170810 02:56:34.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.853">${state} = Off</msg>
<status endtime="20170810 02:56:34.853" starttime="20170810 02:56:34.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:34.853">${boot_progress} = Off</msg>
<status endtime="20170810 02:56:34.853" starttime="20170810 02:56:34.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:56:34.854">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:56:34.854" starttime="20170810 02:56:34.854" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:34.854" starttime="20170810 02:56:34.387" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:34.855" starttime="20170810 02:56:33.776" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:44.861">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:44.861" starttime="20170810 02:56:44.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:44.862">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:44.862" starttime="20170810 02:56:44.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:44.862">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:44.862" starttime="20170810 02:56:44.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:44.863">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:44.863" starttime="20170810 02:56:44.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.086">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:45.086" starttime="20170810 02:56:44.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.086">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:45.086">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.086" starttime="20170810 02:56:44.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.087">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.087" starttime="20170810 02:56:45.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.088" starttime="20170810 02:56:45.087" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.088" starttime="20170810 02:56:44.860" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.088" starttime="20170810 02:56:44.860" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.088" starttime="20170810 02:56:44.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.089">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:56:45.089" starttime="20170810 02:56:45.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.091">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:45.091" starttime="20170810 02:56:45.090" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.092">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:45.092" starttime="20170810 02:56:45.092" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.092" starttime="20170810 02:56:45.091" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.092" starttime="20170810 02:56:45.090" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.092" starttime="20170810 02:56:45.089" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.159">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:45.160">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.160" starttime="20170810 02:56:45.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.162">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:45.162" starttime="20170810 02:56:45.161" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.163">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:45.163" starttime="20170810 02:56:45.163" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.163" starttime="20170810 02:56:45.162" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.163" starttime="20170810 02:56:45.161" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.164" starttime="20170810 02:56:45.160" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:45.164">Delete All Sessions</msg>
<status endtime="20170810 02:56:45.164" starttime="20170810 02:56:45.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.164">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.164" starttime="20170810 02:56:44.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.165" starttime="20170810 02:56:45.164" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.166">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:45.166">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:45.166">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:45.166" starttime="20170810 02:56:45.165" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.166">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:56:45.166" starttime="20170810 02:56:44.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.166">${power_state} = On</msg>
<status endtime="20170810 02:56:45.166" starttime="20170810 02:56:44.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:56:45.167" starttime="20170810 02:56:45.167" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.167" starttime="20170810 02:56:44.856" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.171">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:45.171" starttime="20170810 02:56:45.170" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.171">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:45.172" starttime="20170810 02:56:45.171" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.172">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:45.172" starttime="20170810 02:56:45.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.173">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:45.173" starttime="20170810 02:56:45.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:45.460" starttime="20170810 02:56:45.173" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:45.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.460" starttime="20170810 02:56:45.173" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.461" starttime="20170810 02:56:45.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.462" starttime="20170810 02:56:45.461" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.462" starttime="20170810 02:56:45.170" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.462" starttime="20170810 02:56:45.169" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.462" starttime="20170810 02:56:45.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.463">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:56:45.463" starttime="20170810 02:56:45.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.465">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:45.465" starttime="20170810 02:56:45.464" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.466">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:45.466" starttime="20170810 02:56:45.466" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.466" starttime="20170810 02:56:45.465" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.466" starttime="20170810 02:56:45.463" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.466" starttime="20170810 02:56:45.463" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.636">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:45.636">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.636" starttime="20170810 02:56:45.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.638">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:45.638" starttime="20170810 02:56:45.637" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.639">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:45.640" starttime="20170810 02:56:45.639" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.640" starttime="20170810 02:56:45.638" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.640" starttime="20170810 02:56:45.637" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.640" starttime="20170810 02:56:45.636" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:45.640">Delete All Sessions</msg>
<status endtime="20170810 02:56:45.640" starttime="20170810 02:56:45.640" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.641">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.641" starttime="20170810 02:56:45.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.641" starttime="20170810 02:56:45.641" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.642">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:45.642">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:45.642">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:45.642" starttime="20170810 02:56:45.642" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.642">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:56:45.643" starttime="20170810 02:56:45.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.643">${host_state} = Running</msg>
<status endtime="20170810 02:56:45.643" starttime="20170810 02:56:45.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:56:45.643" starttime="20170810 02:56:45.643" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.648">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:45.649" starttime="20170810 02:56:45.648" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:45.649" starttime="20170810 02:56:45.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.650">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:45.650" starttime="20170810 02:56:45.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:45.651" starttime="20170810 02:56:45.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.877">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:45.877" starttime="20170810 02:56:45.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.878">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:45.878">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.878" starttime="20170810 02:56:45.651" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.878">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.878" starttime="20170810 02:56:45.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.879" starttime="20170810 02:56:45.879" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.879" starttime="20170810 02:56:45.647" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.879" starttime="20170810 02:56:45.646" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.880" starttime="20170810 02:56:45.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.880">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:56:45.880" starttime="20170810 02:56:45.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.882">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:45.882" starttime="20170810 02:56:45.882" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.883">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:45.883" starttime="20170810 02:56:45.883" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.883" starttime="20170810 02:56:45.882" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.883" starttime="20170810 02:56:45.881" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.884" starttime="20170810 02:56:45.880" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.953">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:45.953">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.953" starttime="20170810 02:56:45.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.955">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:45.955" starttime="20170810 02:56:45.954" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.956">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:45.957" starttime="20170810 02:56:45.956" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.957" starttime="20170810 02:56:45.955" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.957" starttime="20170810 02:56:45.954" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:45.957" starttime="20170810 02:56:45.953" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:45.957">Delete All Sessions</msg>
<status endtime="20170810 02:56:45.957" starttime="20170810 02:56:45.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.958">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:45.958" starttime="20170810 02:56:45.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:45.958">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:45.958" starttime="20170810 02:56:45.958" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:45.959">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:45.959">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:45.959">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:45.959" starttime="20170810 02:56:45.959" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.959">${state} = Off</msg>
<status endtime="20170810 02:56:45.959" starttime="20170810 02:56:45.644" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:45.960">${boot_progress} = Off</msg>
<status endtime="20170810 02:56:45.960" starttime="20170810 02:56:45.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:56:45.960">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:56:45.960" starttime="20170810 02:56:45.960" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:45.961" starttime="20170810 02:56:45.644" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:45.961" starttime="20170810 02:56:44.855" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:55.968">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:55.969" starttime="20170810 02:56:55.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:55.969">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:55.969" starttime="20170810 02:56:55.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:55.970">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:55.970" starttime="20170810 02:56:55.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:55.971">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:55.971" starttime="20170810 02:56:55.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:56.250" starttime="20170810 02:56:55.972" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.250">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:56.250">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.250" starttime="20170810 02:56:55.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.251">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.251" starttime="20170810 02:56:56.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.252" starttime="20170810 02:56:56.251" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.252" starttime="20170810 02:56:55.967" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.252" starttime="20170810 02:56:55.966" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.252" starttime="20170810 02:56:55.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.253">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 02:56:56.253" starttime="20170810 02:56:56.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.256">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:56.256" starttime="20170810 02:56:56.255" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.257">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:56.257" starttime="20170810 02:56:56.257" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.257" starttime="20170810 02:56:56.256" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.257" starttime="20170810 02:56:56.254" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.257" starttime="20170810 02:56:56.253" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.337">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:56.337">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.337" starttime="20170810 02:56:56.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.340">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:56.340" starttime="20170810 02:56:56.339" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.341">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:56.341" starttime="20170810 02:56:56.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.341" starttime="20170810 02:56:56.340" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.341" starttime="20170810 02:56:56.338" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.341" starttime="20170810 02:56:56.338" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:56.341">Delete All Sessions</msg>
<status endtime="20170810 02:56:56.341" starttime="20170810 02:56:56.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.342">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.342" starttime="20170810 02:56:55.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.342" starttime="20170810 02:56:56.342" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.343">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:56.343">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:56.343">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:56.343" starttime="20170810 02:56:56.343" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.343">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 02:56:56.343" starttime="20170810 02:56:55.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.344">${power_state} = On</msg>
<status endtime="20170810 02:56:56.344" starttime="20170810 02:56:55.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 02:56:56.344" starttime="20170810 02:56:56.344" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.344" starttime="20170810 02:56:55.962" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.348">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:56.348" starttime="20170810 02:56:56.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:56.349" starttime="20170810 02:56:56.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.350">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:56.350" starttime="20170810 02:56:56.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.350">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:56.350" starttime="20170810 02:56:56.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.576">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:56.576" starttime="20170810 02:56:56.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.576">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:56.576">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.576" starttime="20170810 02:56:56.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.577">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.577" starttime="20170810 02:56:56.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.578" starttime="20170810 02:56:56.577" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.578" starttime="20170810 02:56:56.347" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.578" starttime="20170810 02:56:56.347" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.578" starttime="20170810 02:56:56.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.579">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:56:56.579" starttime="20170810 02:56:56.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.581">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:56.581" starttime="20170810 02:56:56.580" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.582">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:56.582" starttime="20170810 02:56:56.582" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.582" starttime="20170810 02:56:56.581" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.583" starttime="20170810 02:56:56.579" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.583" starttime="20170810 02:56:56.579" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.676">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:56.676">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.676" starttime="20170810 02:56:56.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.678">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:56.678" starttime="20170810 02:56:56.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.679">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:56.679" starttime="20170810 02:56:56.679" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.679" starttime="20170810 02:56:56.678" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.679" starttime="20170810 02:56:56.677" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.679" starttime="20170810 02:56:56.676" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:56.680">Delete All Sessions</msg>
<status endtime="20170810 02:56:56.680" starttime="20170810 02:56:56.680" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.680">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.680" starttime="20170810 02:56:56.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.681" starttime="20170810 02:56:56.680" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.681">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:56.681">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:56.682">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:56.682" starttime="20170810 02:56:56.681" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.682">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:56:56.682" starttime="20170810 02:56:56.345" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.682">${host_state} = Running</msg>
<status endtime="20170810 02:56:56.682" starttime="20170810 02:56:56.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 02:56:56.683" starttime="20170810 02:56:56.682" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.687">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:56.687" starttime="20170810 02:56:56.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.688">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:56.688" starttime="20170810 02:56:56.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.688">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:56.688" starttime="20170810 02:56:56.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.689">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:56.689" starttime="20170810 02:56:56.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.880">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:56.880" starttime="20170810 02:56:56.690" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.880">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:56.880">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.880" starttime="20170810 02:56:56.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.881">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.881" starttime="20170810 02:56:56.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.882" starttime="20170810 02:56:56.881" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.882" starttime="20170810 02:56:56.686" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.882" starttime="20170810 02:56:56.685" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.882" starttime="20170810 02:56:56.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.883">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 02:56:56.883" starttime="20170810 02:56:56.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.885">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:56.885" starttime="20170810 02:56:56.884" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.886">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 02:56:56.886" starttime="20170810 02:56:56.886" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.886" starttime="20170810 02:56:56.885" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.886" starttime="20170810 02:56:56.884" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.886" starttime="20170810 02:56:56.883" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.956">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:56.956">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.956" starttime="20170810 02:56:56.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.958">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:56.958" starttime="20170810 02:56:56.957" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.959">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:56.959" starttime="20170810 02:56:56.959" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.959" starttime="20170810 02:56:56.958" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.960" starttime="20170810 02:56:56.957" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:56.960" starttime="20170810 02:56:56.956" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:56.960">Delete All Sessions</msg>
<status endtime="20170810 02:56:56.960" starttime="20170810 02:56:56.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.960">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:56.960" starttime="20170810 02:56:56.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:56.961" starttime="20170810 02:56:56.961" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.962">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:56.962">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:56.962">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:56.962" starttime="20170810 02:56:56.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.962">${state} = Off</msg>
<status endtime="20170810 02:56:56.962" starttime="20170810 02:56:56.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:56.962">${boot_progress} = Off</msg>
<status endtime="20170810 02:56:56.962" starttime="20170810 02:56:56.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:56:56.963">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:56:56.963" starttime="20170810 02:56:56.963" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:56.963" starttime="20170810 02:56:56.683" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:56.963" starttime="20170810 02:56:55.961" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170810 02:56:56.963">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status endtime="20170810 02:56:56.964" starttime="20170810 02:46:46.654" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:56.964" starttime="20170810 02:46:44.626" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:56.964" starttime="20170810 02:46:37.220" status="FAIL"></status>
</kw>
<status endtime="20170810 02:56:56.964" starttime="20170810 02:46:37.219" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:56.969">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:56:56.970" starttime="20170810 02:56:56.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:56:56.970" starttime="20170810 02:56:56.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.971">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:56:56.971" starttime="20170810 02:56:56.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:56.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:56:56.972" starttime="20170810 02:56:56.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:57.193">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:56:57.193" starttime="20170810 02:56:56.972" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:57.193">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:56:57.193">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:57.193" starttime="20170810 02:56:56.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:57.194">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:57.194" starttime="20170810 02:56:57.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:57.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:57.195" starttime="20170810 02:56:57.194" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.195" starttime="20170810 02:56:56.968" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.195" starttime="20170810 02:56:56.968" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.195" starttime="20170810 02:56:56.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:57.196">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 02:56:57.196" starttime="20170810 02:56:57.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:57.198">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:57.198" starttime="20170810 02:56:57.197" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:57.199">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 02:56:57.199" starttime="20170810 02:56:57.199" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.199" starttime="20170810 02:56:57.198" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.199" starttime="20170810 02:56:57.197" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.199" starttime="20170810 02:56:57.196" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:57.375">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:56:57.375">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:57.375" starttime="20170810 02:56:57.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:57.377">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:57.377" starttime="20170810 02:56:57.377" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:57.379">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 02:56:57.379" starttime="20170810 02:56:57.378" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.379" starttime="20170810 02:56:57.377" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.379" starttime="20170810 02:56:57.376" status="PASS"></status>
</kw>
<status endtime="20170810 02:56:57.379" starttime="20170810 02:56:57.376" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:56:57.379">Delete All Sessions</msg>
<status endtime="20170810 02:56:57.380" starttime="20170810 02:56:57.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:57.380">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:56:57.380" starttime="20170810 02:56:56.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:57.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:56:57.380" starttime="20170810 02:56:57.380" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:57.381">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:56:57.381">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:56:57.381">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:56:57.381" starttime="20170810 02:56:57.381" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:57.381">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 02:56:57.381" starttime="20170810 02:56:56.966" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:57.382">${host_state} = Running</msg>
<status endtime="20170810 02:56:57.382" starttime="20170810 02:56:56.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:56:57.383">Running != Quiesced</msg>
<status endtime="20170810 02:56:57.383" starttime="20170810 02:56:57.382" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:57.383">${status} = False</msg>
<status endtime="20170810 02:56:57.383" starttime="20170810 02:56:57.382" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:56:57.383">${status} = False</msg>
<status endtime="20170810 02:56:57.383" starttime="20170810 02:56:56.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:56:57.407">Length is 10</msg>
<status endtime="20170810 02:56:57.407" starttime="20170810 02:56:57.407" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:56:57.417">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 02:57:00.436">${RC} = 0</msg>
<msg level="INFO" timestamp="20170810 02:57:00.436">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.834 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.582 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170810 02:57:00.437" starttime="20170810 02:56:57.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:00.448">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.834 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.582 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.40 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.617 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.582/0.858/1.402/0.330 ms</msg>
<status endtime="20170810 02:57:00.449" starttime="20170810 02:57:00.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 02:57:00.450" starttime="20170810 02:57:00.449" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.451" starttime="20170810 02:56:57.406" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.481">${cur_time} = 2017-08-10 02:57:00:480517</msg>
<status endtime="20170810 02:57:00.481" starttime="20170810 02:57:00.480" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.482">${cur_time} = 20170810025700480517</msg>
<status endtime="20170810 02:57:00.482" starttime="20170810 02:57:00.481" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.482" starttime="20170810 02:57:00.479" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:00.482">${FFDC_TIME} = 20170810025700480517</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.497">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170810 02:57:00.497" starttime="20170810 02:57:00.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.498">${suite_name} = 20170810025700480517_TestsTestBasicPoweron</msg>
<status endtime="20170810 02:57:00.498" starttime="20170810 02:57:00.497" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.498">${test_name} = PowerOnTest</msg>
<status endtime="20170810 02:57:00.498" starttime="20170810 02:57:00.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.499">${test_name} = 20170810025700480517_PowerOnTest</msg>
<status endtime="20170810 02:57:00.499" starttime="20170810 02:57:00.499" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.499" starttime="20170810 02:57:00.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:00.500">${FFDC_DIR_PATH} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170810 02:57:00.500">${FFDC_PREFIX} = 20170810025700480517_</msg>
<msg level="INFO" timestamp="20170810 02:57:00.520">${LOG_PREFIX} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.521">Created directory '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.522" starttime="20170810 02:57:00.521" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:00.526">${FFDC_FILE_PATH} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.546">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.546" starttime="20170810 02:57:00.546" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.546" starttime="20170810 02:57:00.545" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.548">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.548" starttime="20170810 02:57:00.547" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.548" starttime="20170810 02:57:00.547" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.549">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.549" starttime="20170810 02:57:00.549" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.549" starttime="20170810 02:57:00.548" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.550">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.550" starttime="20170810 02:57:00.550" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.550" starttime="20170810 02:57:00.549" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.552">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.552" starttime="20170810 02:57:00.551" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.552" starttime="20170810 02:57:00.551" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.553">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.553" starttime="20170810 02:57:00.553" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.553" starttime="20170810 02:57:00.552" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.554">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.554" starttime="20170810 02:57:00.554" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.555" starttime="20170810 02:57:00.553" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.590">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.590" starttime="20170810 02:57:00.589" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.590" starttime="20170810 02:57:00.555" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.592">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.592" starttime="20170810 02:57:00.591" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.592" starttime="20170810 02:57:00.591" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.593">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.593" starttime="20170810 02:57:00.593" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.594" starttime="20170810 02:57:00.592" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.595">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.595" starttime="20170810 02:57:00.594" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.595" starttime="20170810 02:57:00.594" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.596">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.596" starttime="20170810 02:57:00.596" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.596" starttime="20170810 02:57:00.595" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.597">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.598" starttime="20170810 02:57:00.597" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.598" starttime="20170810 02:57:00.596" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.627">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:00.627">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170810 02:57:00.724">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 02:57:00.734">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170810 02:57:00.734">${stderr} = </msg>
<msg level="INFO" timestamp="20170810 02:57:00.734">${rc} = 0</msg>
<status endtime="20170810 02:57:00.734" starttime="20170810 02:57:00.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:00.735">Length is 0</msg>
<status endtime="20170810 02:57:00.735" starttime="20170810 02:57:00.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:00.735">Length is 11</msg>
<status endtime="20170810 02:57:00.735" starttime="20170810 02:57:00.735" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:00.736">${model_name} = Witherspoon</msg>
<status endtime="20170810 02:57:00.736" starttime="20170810 02:57:00.598" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.737">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.737" starttime="20170810 02:57:00.736" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.737" starttime="20170810 02:57:00.736" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.737" starttime="20170810 02:57:00.592" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.738">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.738" starttime="20170810 02:57:00.738" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.739" starttime="20170810 02:57:00.737" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.739">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20170810 02:57:00.739" starttime="20170810 02:57:00.739" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.741">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.741" starttime="20170810 02:57:00.740" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.741" starttime="20170810 02:57:00.740" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.742">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.742" starttime="20170810 02:57:00.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.742" starttime="20170810 02:57:00.741" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.742" starttime="20170810 02:57:00.739" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.743">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.744" starttime="20170810 02:57:00.743" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.744" starttime="20170810 02:57:00.742" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.745">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.745" starttime="20170810 02:57:00.744" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.745" starttime="20170810 02:57:00.744" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.745" starttime="20170810 02:57:00.742" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.746">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.746" starttime="20170810 02:57:00.746" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.746" starttime="20170810 02:57:00.745" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.747">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.747" starttime="20170810 02:57:00.747" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.748" starttime="20170810 02:57:00.746" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.748" starttime="20170810 02:57:00.745" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.748" starttime="20170810 02:57:00.739" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:00.749">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:00.749" starttime="20170810 02:57:00.748" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.749" starttime="20170810 02:57:00.748" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:00.749" starttime="20170810 02:57:00.545" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.755">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170810 02:57:00.755" starttime="20170810 02:57:00.755" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.757">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('F...</msg>
<status endtime="20170810 02:57:00.757" starttime="20170810 02:57:00.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170810 02:57:00.758" starttime="20170810 02:57:00.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:00.758">@{ffdc_function_list} = [ Get Request FFDC | SEL Log | Core Files | OS FFDC | BMC Specific Files | FFDC Generic Report ]</msg>
<status endtime="20170810 02:57:00.758" starttime="20170810 02:57:00.757" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:57:00.760" starttime="20170810 02:57:00.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:00.760">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:00.760">${ret_values} = None</msg>
<status endtime="20170810 02:57:00.760" starttime="20170810 02:57:00.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:57:00.761" starttime="20170810 02:57:00.761" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.787">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170810 02:57:00.787" starttime="20170810 02:57:00.786" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.788">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170810 02:57:00.788" starttime="20170810 02:57:00.788" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.789">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_record_log.txt</msg>
<status endtime="20170810 02:57:00.789" starttime="20170810 02:57:00.789" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:00.792">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:00.793" starttime="20170810 02:57:00.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:00.794" starttime="20170810 02:57:00.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.795">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:00.795" starttime="20170810 02:57:00.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:00.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:00.796" starttime="20170810 02:57:00.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.009">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:01.009" starttime="20170810 02:57:00.797" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:01.009">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:01.009">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:01.009" starttime="20170810 02:57:00.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.010">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:01.010" starttime="20170810 02:57:01.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:01.011" starttime="20170810 02:57:01.010" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.011" starttime="20170810 02:57:00.791" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.011" starttime="20170810 02:57:00.791" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.011" starttime="20170810 02:57:00.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:01.012">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170810 02:57:01.012" starttime="20170810 02:57:01.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:01.012" starttime="20170810 02:57:01.012" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:01.060">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:01.060">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:57:01.060" starttime="20170810 02:57:01.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:01.061" starttime="20170810 02:57:01.061" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:01.061">Delete All Sessions</msg>
<status endtime="20170810 02:57:01.061" starttime="20170810 02:57:01.061" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:01.062">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:57:01.062" starttime="20170810 02:57:00.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170810 02:57:01.063">404 != 200</msg>
<status endtime="20170810 02:57:01.063" starttime="20170810 02:57:01.062" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:01.063">${status} = False</msg>
<status endtime="20170810 02:57:01.063" starttime="20170810 02:57:01.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170810 02:57:01.064">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:57:01.064" starttime="20170810 02:57:01.064" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.064" starttime="20170810 02:57:01.063" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.064" starttime="20170810 02:57:00.788" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:01.065">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_inventory.txt</msg>
<status endtime="20170810 02:57:01.065" starttime="20170810 02:57:01.065" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.068">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:01.068" starttime="20170810 02:57:01.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:01.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:01.069" starttime="20170810 02:57:01.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:01.069">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:01.070" starttime="20170810 02:57:01.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:01.070">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:01.070" starttime="20170810 02:57:01.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.341">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:01.342" starttime="20170810 02:57:01.071" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:01.342">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:01.342">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:01.342" starttime="20170810 02:57:01.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.342">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:01.342" starttime="20170810 02:57:01.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:01.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:01.343" starttime="20170810 02:57:01.343" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.343" starttime="20170810 02:57:01.067" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.343" starttime="20170810 02:57:01.067" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:01.344" starttime="20170810 02:57:01.066" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:01.344">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170810 02:57:01.344" starttime="20170810 02:57:01.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:01.345" starttime="20170810 02:57:01.344" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.468">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:03.468">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:03.468" starttime="20170810 02:57:01.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:03.469" starttime="20170810 02:57:03.469" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:03.469">Delete All Sessions</msg>
<status endtime="20170810 02:57:03.470" starttime="20170810 02:57:03.469" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:03.470">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:03.470" starttime="20170810 02:57:01.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:03.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:03.471" starttime="20170810 02:57:03.471" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:03.471">${status} = True</msg>
<status endtime="20170810 02:57:03.471" starttime="20170810 02:57:03.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 02:57:03.472" starttime="20170810 02:57:03.471" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.475">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/5", 
        "/xyz/openbmc_project/logging/entry/4"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:03.476">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170810 02:57:03.476">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170810 02:57:03.476" starttime="20170810 02:57:03.472" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:03.478">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_inventory.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:03.478" starttime="20170810 02:57:03.477" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:03.478" starttime="20170810 02:57:03.476" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:03.478" starttime="20170810 02:57:01.064" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.479">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_led.txt</msg>
<status endtime="20170810 02:57:03.479" starttime="20170810 02:57:03.478" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:03.481">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:03.482" starttime="20170810 02:57:03.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.482">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:03.482" starttime="20170810 02:57:03.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.483">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:03.483" starttime="20170810 02:57:03.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.484">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:03.484" starttime="20170810 02:57:03.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:03.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:03.736" starttime="20170810 02:57:03.484" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:03.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:03.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:03.736" starttime="20170810 02:57:03.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:03.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:03.737" starttime="20170810 02:57:03.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:03.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:03.737" starttime="20170810 02:57:03.737" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:03.737" starttime="20170810 02:57:03.481" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:03.738" starttime="20170810 02:57:03.480" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:03.738" starttime="20170810 02:57:03.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.738">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170810 02:57:03.738" starttime="20170810 02:57:03.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:03.739" starttime="20170810 02:57:03.739" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.805">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:03.805">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:57:03.805" starttime="20170810 02:57:03.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:03.806" starttime="20170810 02:57:03.805" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:03.806">Delete All Sessions</msg>
<status endtime="20170810 02:57:03.806" starttime="20170810 02:57:03.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:03.806">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 02:57:03.806" starttime="20170810 02:57:03.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:03.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170810 02:57:03.808">404 != 200</msg>
<status endtime="20170810 02:57:03.808" starttime="20170810 02:57:03.807" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:03.808">${status} = False</msg>
<status endtime="20170810 02:57:03.808" starttime="20170810 02:57:03.807" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170810 02:57:03.809">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:57:03.809" starttime="20170810 02:57:03.809" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:03.809" starttime="20170810 02:57:03.808" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:03.809" starttime="20170810 02:57:03.478" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.810">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_sensor_list.txt</msg>
<status endtime="20170810 02:57:03.810" starttime="20170810 02:57:03.809" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:03.812">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:03.813" starttime="20170810 02:57:03.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:03.813" starttime="20170810 02:57:03.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.814">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:03.814" starttime="20170810 02:57:03.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:03.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:03.815" starttime="20170810 02:57:03.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.103">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:04.104" starttime="20170810 02:57:03.815" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.104">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:04.104">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:04.104" starttime="20170810 02:57:03.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.104">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.105" starttime="20170810 02:57:04.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.105">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.105" starttime="20170810 02:57:04.105" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.105" starttime="20170810 02:57:03.812" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.106" starttime="20170810 02:57:03.811" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.106" starttime="20170810 02:57:03.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.106">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170810 02:57:04.106" starttime="20170810 02:57:04.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:04.107" starttime="20170810 02:57:04.107" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.283">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:04.283">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:04.284" starttime="20170810 02:57:04.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:04.284" starttime="20170810 02:57:04.284" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:04.285">Delete All Sessions</msg>
<status endtime="20170810 02:57:04.285" starttime="20170810 02:57:04.285" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.285">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:04.285" starttime="20170810 02:57:03.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.286" starttime="20170810 02:57:04.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.286">${status} = True</msg>
<status endtime="20170810 02:57:04.286" starttime="20170810 02:57:04.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 02:57:04.287" starttime="20170810 02:57:04.286" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.288">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:04.288">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170810 02:57:04.288">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170810 02:57:04.288" starttime="20170810 02:57:04.287" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:04.289">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_sensor_list.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:04.289" starttime="20170810 02:57:04.289" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.289" starttime="20170810 02:57:04.288" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.290" starttime="20170810 02:57:03.809" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.290">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_elog.txt</msg>
<status endtime="20170810 02:57:04.290" starttime="20170810 02:57:04.290" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.293">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:04.293" starttime="20170810 02:57:04.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:04.294" starttime="20170810 02:57:04.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.295">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:04.295" starttime="20170810 02:57:04.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.295">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:04.295" starttime="20170810 02:57:04.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:04.486" starttime="20170810 02:57:04.296" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:04.486">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:04.486" starttime="20170810 02:57:04.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.487" starttime="20170810 02:57:04.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.487" starttime="20170810 02:57:04.487" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.488" starttime="20170810 02:57:04.292" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.488" starttime="20170810 02:57:04.292" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.488" starttime="20170810 02:57:04.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.488">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170810 02:57:04.488" starttime="20170810 02:57:04.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:04.489" starttime="20170810 02:57:04.489" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.711">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:04.711">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:04.711" starttime="20170810 02:57:04.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:04.712" starttime="20170810 02:57:04.712" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:04.712">Delete All Sessions</msg>
<status endtime="20170810 02:57:04.712" starttime="20170810 02:57:04.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.713">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:04.713" starttime="20170810 02:57:04.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.714" starttime="20170810 02:57:04.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.714">${status} = True</msg>
<status endtime="20170810 02:57:04.714" starttime="20170810 02:57:04.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 02:57:04.714" starttime="20170810 02:57:04.714" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.716">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502332275714, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502332911325, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0e cf 20 8d 5b 00 00 00 0e cf 20 fa 4e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 c8 e9 5f 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 58 0c 88 cd 49 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 58 0c 88 f8 75 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 0c 8a 72 69 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 58 12 7e a7 36 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 58 12 7e be 9a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 58 12 7e e7 02 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 12 7f 82 19 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 58 18 74 a3 d8 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 7c 04 77 af 86 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 7c 04 78 18 a8 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 7c 04 c8 a5 f2 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 7c 07 9b 97 79 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 7c 07 9b cc bb 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 7c 0d 91 8d 54 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 7c 0d 91 a2 2c 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 7c 0d 91 a9 60 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 7c 0d 91 b2 af 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 0c c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0c c0 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 0c 00 7e 60 00 00 00 7f e4 fb 78 8d eb c2 f8 e0 3d 20 00 8c 1e fb a1 00 70 61 29 0d 84 00 fb a1 00 78 7f c3 f3 78 4a 91 21 56 00 00 00 00 00 00 00 08 00 00 00 00 00 84 49 d0 00 00 00 00 00 00 0c c0 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0f 00 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c3 00 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 c0 00 c3 f3 78 4b f8 77 65 c6 e8 41 00 28 fa fe 00 08 f9 fa fe 00 10 38 60 00 08 18 4b f8 76 71 e8 41 00 28 5c 39 20 00 01 56 00 00 00 00 00 00 00 03 00 00 00 00 00 84 49 80 00 00 00 00 40 65 94 88 00 00 00 00 00 00 00 00 00 00 00 00 00 84 49 88 00 00 00 00 00 9d 2a 58 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 21 00 87 7a 39 20 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 84 4a 50 00 00 00 00 00 00 86 40 80 00 04 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 08 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 10 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 80 00 04 01 07 01 10 3f 00 00 00 00 00 00 00 00 e4 ae 7f e3 fb 78 4b 56 00 00 00 00 00 00 00 03 00 00 00 00 00 84 7f 10 00 00 00 00 40 65 72 68 00 00 00 00 40 66 97 a8 00 00 00 00 00 84 7f 18 00 00 00 00 00 9d 2a 58 80 00 08 24 07 01 10 3f 80 00 08 25 07 01 10 3f 80 00 0c 24 07 01 10 3f 01 b8 85 4b f8 75 c9 56 00 00 00 00 00 00 00 04 00 00 00 00 00 84 7e 90 00 00 00 00 07 01 23 59 00 00 00 00 07 01 23 5a 00 00 00 00 07 01 23 5b 00 00 00 00 07 01 23 5c 00 00 00 00 07 01 23 5d 00 00 00 00 07 01 23 5e 00 00 00 00 07 01 23 5f 00 00 00 00 07 01 23 60 00 00 00 00 00 00 ff ff 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 00 03 6c 60 42 00 00 41 60 00 00 00 e8 79 00 00 7c 7f e9 fb 78 e8 82 56 00 00 00 00 00 00 00 06 00 00 00 00 00 31 cd c0 00 00 00 00 00 00 ff ff 80 00 04 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 08 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 0c 00 07 01 10 3f 00 00 00 00 00 00 ff ff"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502333339572, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0a 1a 00 b3 8e 00 00 00 0a 1a 01 d7 13 42 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2b 90 00 00 2b 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 08 00 00 00 08 00 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 06 a8 01 00 2a 00 ed df 01 02 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 02 a8 67 cd f8 00 01 03 80 00 00 08 00 00 00 08 00 00 00 00 00 06 a0 06 28 00 01 06 00 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cc 00 00 00 00 00 00 00 cc 00 00 00 05 00 00 00 00 00 00 00 02 0e c0 af 36 00 00 00 01 00 08 46 54 fe 36 d6 d2 00 00 01 6d 00 00 00 00 00 00 07 d0 00 00 00 24 00 00 00 16 30 e8 88 82 00 00 00 00 00 04 46 54 b3 0e 3f b6 00 00 00 95 00 00 00 00 00 00 00 20 00 00 00 16 31 81 ea ce 00 00 00 00 00 04 46 54 2d 5e d8 74 00 00 04 3d 00 00 08 0f 00 00 00 20 00 00 00 16 31 81 f8 26 00 00 00 00 00 04 46 54 5d ac e6 35 00 00 05 01 00 00 08 00 00 00 00 20 00 00 00 16 31 82 02 fa 00 00 00 00 00 04 46 54 21 0e 9c fc 00 00 05 95 00 00 08 00 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 2d 00 00 00 00 00 03 0d d0 cf d8 00 00 00 01 00 04 46 54 e8 cb 8d fb 00 00 06 a8 00 00 00 00 00 00 00 20 00 00 00 03 1c 78 7b 46 00 00 00 01 00 04 46 54 27 4f b9 f0 00 00 08 d9 00 00 00 14 00 00 00 20 00 00 00 03 1c 78 a9 c6 00 00 00 01 00 04 46 54 f4 41 74 7c 00 00 04 a0 00 00 00 00 00 00 00 20 00 00 00 03 1c 7d af 6a 00 00 00 00 00 04 46 54 86 ed 4a 46 00 00 04 d5 00 00 00 01 00 00 00 20 00 00 00 16 18 71 57 b4 00 00 00 00 00 08 46 54 08 1c a1 13 00 00 01 d6 00 00 09 47 00 00 06 fe 00 00 00 24 00 00 00 16 30 de 4c 18 00 00 00 01 00 04 46 54 46 9e d3 b9 00 00 03 ed 00 00 00 01 00 00 00 20 00 00 00 16 30 de 57 e4 00 00 00 01 00 04 46 54 c2 cf d2 29 00 00 00 92 00 00 00 00 00 00 00 20 00 00 00 16 30 de 6a 20 00 00 00 01 00 04 46 54 ba 81 8b 92 00 00 00 9e 00 00 00 01 00 00 00 20 00 00 00 16 30 de 75 9a 00 00 00 01 00 04 46 54 b5 3c be bd 00 00 02 15 00 00 00 00 00 00 00 20 00 00 00 16 30 de 88 8e 00 00 00 01 00 0c 46 54 13 26 d9 b4 00 00 02 7e 00 00 00 65 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 16 30 de de ee 00 00 00 01 00 04 46 54 6d ee 36 d2 00 00 03 05 00 00 00 00 00 00 00 20 00 00 00 16 30 e1 45 24 00 00 00 01 00 04 46 54 8f e0 a2 86 00 00 02 4c 00 00 00 02 00 00 00 20 00 00 00 16 30 e1 50 a4 00 00 00 01 00 04 46 54 db d0 fb 0b 00 00 00 ad 00 00 00 00 00 00 00 20 00 00 00 16 30 e1 ae 1a 00 00 00 01 00 04 46 54 7d 46 50 0c 00 00 02 5b 00 00 00 01 00 00 00 20 00 00 00 16 30 e1 b9 26 00 00 00 01 00 04 46 54 d1 a6 41 80 00 00 03 fc 00 00 00 00 00 00 00 20 00 00 00 16 30 e5 6f f0 00 00 00 00 00 0c 46 54 35 1a 22 28 00 00 00 b3 00 00 00 01 00 80 00 01 00 00 00 80 00 00 00 28 00 00 00 16 30 f0 65 f0 00 00 00 00 00 04 46 54 aa 85 de d7 00 00 00 88 00 00 07 99 00 00 00 20 00 00 00 16 31 1a cb 1a 00 00 00 00 00 04 46 54 52 89 27 b6 00 00 00 a2 00 00 00 03 00 00 00 20 00 00 00 16 31 44 2c b2 00 00 00 00 00 04 46 54 21 48 34 4d 00 00 05 e3 00 00 00 00 00 00 00 20 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 58 00 00 00 00 00 a5 90 60 40 00 00 00 00 20 00 00 00 16 18 67 57 b6 00 00 00 01 00 08 46 54 82 f9 8a 2b 00 00 07 86 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 16 30 d4 7e 50 00 00 00 01 00 08 46 54 8d c3 56 a3 00 00 06 10 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 16 30 e8 96 5a 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 07 00 00 00 20 00 00 00 16 30 e9 7c 6c 00 00 00 00 00 08 46 54 d4 f8 58 37 00 00 02 57 ff f9 67 a0 00 00 06 a0 00 00 00 24 00 00 00 16 30 e9 88 a8 00 00 00 00 00 10 46 54 e8 ab b6 e1 00 00 02 5a 00 00 0c 07 00 00 00 05 00 00 00 01 00 00 00 00 00 00 00 2c 00 00 00 16 30 e9 94 4c 00 00 00 00 00 04 46 54 c0 fa a9 38 00 00 00 d2 00 00 00 04 00 00 00 20 00 00 00 16 30 e9 f5 26 00 00 00 01 00 10 46 54 c3 58 71 12 00 00 02 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 16 30 ea 01 be 00 00 00 01 00 08 46 54 f1 ba 3e 82 00 00 02 0d 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 16 30 ea 0e 66 00 00 00 01 00 10 46 54 2f da c9 3b 00 00 02 1c 00 00 00 00 00 00 07 99 00 00 00 00 00 00 07 99 00 00 00 2c 00 00 00 16 30 ea 1b 0a 00 00 00 01 00 10 46 54 72 31 8e 42 00 00 02 20 00 00 00 00 00 00 09 47 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 16 30 ea 27 00 00 00 00 01 00 10 46 54 e0 df 31 f7 00 00 02 24 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 16 31 53 9a 26 00 00 00 00 00 04 46 54 cc 4c c9 f7 00 00 00 c2 00 00 00 ff 00 00 00 20 00 00 00 16 31 82 12 be 00 00 00 00 00 04 46 54 dc 8e 1c 44 00 00 05 1a 00 00 10 00 00 00 00 20 00 00 00 16 31 82 21 3c 00 00 00 00 00 14 46 54 f6 6a b3 d5 00 00 00 cf 00 00 00 00 00 00 07 d0 00 00 00 65 00 00 0c 1c 00 00 00 23 00 00 00 30 00 00 00 16 31 82 2e 52 00 00 00 00 00 10 46 54 3f 7c 1e d4 00 00 00 eb 00 00 07 d0 00 00 0b 22 00 00 0e 64 00 00 02 1e 00 00 00 2c 00 00 00 16 31 82 42 44 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 43 c0 54 00 00 00 00 40 43 fb 24 00 00 00 00 40 43 b3 54 00 00 00 00 40 43 b8 c0 00 00 00 00 40 43 bc d0 00 00 00 00 40 43 be 04 00 00 00 00 40 43 6f a4 00 00 00 00 40 43 82 d4 00 00 00 00 40 43 92 c4 00 00 00 00 40 43 3d 3c 00 00 00 00 40 1a 7d 24 00 00 00 00 00 00 25 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502333459231, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:04.716">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170810 02:57:04.716">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status endtime="20170810 02:57:04.716" starttime="20170810 02:57:04.715" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:04.718">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_elog.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:04.718" starttime="20170810 02:57:04.717" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.718" starttime="20170810 02:57:04.717" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.718" starttime="20170810 02:57:04.290" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.718" starttime="20170810 02:57:00.788" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.718" starttime="20170810 02:57:00.787" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.719" starttime="20170810 02:57:00.787" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.719" starttime="20170810 02:57:00.787" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.719" starttime="20170810 02:57:00.786" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.719" starttime="20170810 02:57:00.761" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.719" starttime="20170810 02:57:00.759" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.719" starttime="20170810 02:57:00.758" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:57:04.721" starttime="20170810 02:57:04.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.721">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:04.721">${ret_values} = None</msg>
<status endtime="20170810 02:57:04.721" starttime="20170810 02:57:04.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:57:04.721" starttime="20170810 02:57:04.721" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.749">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:04.750" starttime="20170810 02:57:04.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:04.751" starttime="20170810 02:57:04.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.751">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:04.751" starttime="20170810 02:57:04.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:04.752" starttime="20170810 02:57:04.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.989">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:04.989" starttime="20170810 02:57:04.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:04.990">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:04.990">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:04.990" starttime="20170810 02:57:04.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.991">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.991" starttime="20170810 02:57:04.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:04.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:04.991" starttime="20170810 02:57:04.991" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.991" starttime="20170810 02:57:04.748" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.992" starttime="20170810 02:57:04.748" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:04.992" starttime="20170810 02:57:04.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:04.992">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170810 02:57:04.992" starttime="20170810 02:57:04.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:04.993" starttime="20170810 02:57:04.993" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.289">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:05.289">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.289" starttime="20170810 02:57:04.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:05.290" starttime="20170810 02:57:05.289" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:05.290">Delete All Sessions</msg>
<status endtime="20170810 02:57:05.290" starttime="20170810 02:57:05.290" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.291">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.291" starttime="20170810 02:57:04.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:05.292" starttime="20170810 02:57:05.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.292">${status} = True</msg>
<status endtime="20170810 02:57:05.292" starttime="20170810 02:57:05.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170810 02:57:05.292" starttime="20170810 02:57:05.292" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.293">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502332275714, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502332911325, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0e cf 20 8d 5b 00 00 00 0e cf 20 fa 4e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 c8 e9 5f 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 58 0c 88 cd 49 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 58 0c 88 f8 75 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 0c 8a 72 69 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 58 12 7e a7 36 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 58 12 7e be 9a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 58 12 7e e7 02 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 12 7f 82 19 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 58 18 74 a3 d8 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 7c 04 77 af 86 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 7c 04 78 18 a8 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 7c 04 c8 a5 f2 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 7c 07 9b 97 79 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 7c 07 9b cc bb 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 7c 0d 91 8d 54 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 7c 0d 91 a2 2c 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 7c 0d 91 a9 60 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 7c 0d 91 b2 af 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 0c c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0c c0 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 0c 00 7e 60 00 00 00 7f e4 fb 78 8d eb c2 f8 e0 3d 20 00 8c 1e fb a1 00 70 61 29 0d 84 00 fb a1 00 78 7f c3 f3 78 4a 91 21 56 00 00 00 00 00 00 00 08 00 00 00 00 00 84 49 d0 00 00 00 00 00 00 0c c0 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0f 00 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c3 00 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 c0 00 c3 f3 78 4b f8 77 65 c6 e8 41 00 28 fa fe 00 08 f9 fa fe 00 10 38 60 00 08 18 4b f8 76 71 e8 41 00 28 5c 39 20 00 01 56 00 00 00 00 00 00 00 03 00 00 00 00 00 84 49 80 00 00 00 00 40 65 94 88 00 00 00 00 00 00 00 00 00 00 00 00 00 84 49 88 00 00 00 00 00 9d 2a 58 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 21 00 87 7a 39 20 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 84 4a 50 00 00 00 00 00 00 86 40 80 00 04 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 08 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 10 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 80 00 04 01 07 01 10 3f 00 00 00 00 00 00 00 00 e4 ae 7f e3 fb 78 4b 56 00 00 00 00 00 00 00 03 00 00 00 00 00 84 7f 10 00 00 00 00 40 65 72 68 00 00 00 00 40 66 97 a8 00 00 00 00 00 84 7f 18 00 00 00 00 00 9d 2a 58 80 00 08 24 07 01 10 3f 80 00 08 25 07 01 10 3f 80 00 0c 24 07 01 10 3f 01 b8 85 4b f8 75 c9 56 00 00 00 00 00 00 00 04 00 00 00 00 00 84 7e 90 00 00 00 00 07 01 23 59 00 00 00 00 07 01 23 5a 00 00 00 00 07 01 23 5b 00 00 00 00 07 01 23 5c 00 00 00 00 07 01 23 5d 00 00 00 00 07 01 23 5e 00 00 00 00 07 01 23 5f 00 00 00 00 07 01 23 60 00 00 00 00 00 00 ff ff 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 00 03 6c 60 42 00 00 41 60 00 00 00 e8 79 00 00 7c 7f e9 fb 78 e8 82 56 00 00 00 00 00 00 00 06 00 00 00 00 00 31 cd c0 00 00 00 00 00 00 ff ff 80 00 04 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 08 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 0c 00 07 01 10 3f 00 00 00 00 00 00 ff ff"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502333339572, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0a 1a 00 b3 8e 00 00 00 0a 1a 01 d7 13 42 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2b 90 00 00 2b 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 08 00 00 00 08 00 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 06 a8 01 00 2a 00 ed df 01 02 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 02 a8 67 cd f8 00 01 03 80 00 00 08 00 00 00 08 00 00 00 00 00 06 a0 06 28 00 01 06 00 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cc 00 00 00 00 00 00 00 cc 00 00 00 05 00 00 00 00 00 00 00 02 0e c0 af 36 00 00 00 01 00 08 46 54 fe 36 d6 d2 00 00 01 6d 00 00 00 00 00 00 07 d0 00 00 00 24 00 00 00 16 30 e8 88 82 00 00 00 00 00 04 46 54 b3 0e 3f b6 00 00 00 95 00 00 00 00 00 00 00 20 00 00 00 16 31 81 ea ce 00 00 00 00 00 04 46 54 2d 5e d8 74 00 00 04 3d 00 00 08 0f 00 00 00 20 00 00 00 16 31 81 f8 26 00 00 00 00 00 04 46 54 5d ac e6 35 00 00 05 01 00 00 08 00 00 00 00 20 00 00 00 16 31 82 02 fa 00 00 00 00 00 04 46 54 21 0e 9c fc 00 00 05 95 00 00 08 00 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 2d 00 00 00 00 00 03 0d d0 cf d8 00 00 00 01 00 04 46 54 e8 cb 8d fb 00 00 06 a8 00 00 00 00 00 00 00 20 00 00 00 03 1c 78 7b 46 00 00 00 01 00 04 46 54 27 4f b9 f0 00 00 08 d9 00 00 00 14 00 00 00 20 00 00 00 03 1c 78 a9 c6 00 00 00 01 00 04 46 54 f4 41 74 7c 00 00 04 a0 00 00 00 00 00 00 00 20 00 00 00 03 1c 7d af 6a 00 00 00 00 00 04 46 54 86 ed 4a 46 00 00 04 d5 00 00 00 01 00 00 00 20 00 00 00 16 18 71 57 b4 00 00 00 00 00 08 46 54 08 1c a1 13 00 00 01 d6 00 00 09 47 00 00 06 fe 00 00 00 24 00 00 00 16 30 de 4c 18 00 00 00 01 00 04 46 54 46 9e d3 b9 00 00 03 ed 00 00 00 01 00 00 00 20 00 00 00 16 30 de 57 e4 00 00 00 01 00 04 46 54 c2 cf d2 29 00 00 00 92 00 00 00 00 00 00 00 20 00 00 00 16 30 de 6a 20 00 00 00 01 00 04 46 54 ba 81 8b 92 00 00 00 9e 00 00 00 01 00 00 00 20 00 00 00 16 30 de 75 9a 00 00 00 01 00 04 46 54 b5 3c be bd 00 00 02 15 00 00 00 00 00 00 00 20 00 00 00 16 30 de 88 8e 00 00 00 01 00 0c 46 54 13 26 d9 b4 00 00 02 7e 00 00 00 65 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 16 30 de de ee 00 00 00 01 00 04 46 54 6d ee 36 d2 00 00 03 05 00 00 00 00 00 00 00 20 00 00 00 16 30 e1 45 24 00 00 00 01 00 04 46 54 8f e0 a2 86 00 00 02 4c 00 00 00 02 00 00 00 20 00 00 00 16 30 e1 50 a4 00 00 00 01 00 04 46 54 db d0 fb 0b 00 00 00 ad 00 00 00 00 00 00 00 20 00 00 00 16 30 e1 ae 1a 00 00 00 01 00 04 46 54 7d 46 50 0c 00 00 02 5b 00 00 00 01 00 00 00 20 00 00 00 16 30 e1 b9 26 00 00 00 01 00 04 46 54 d1 a6 41 80 00 00 03 fc 00 00 00 00 00 00 00 20 00 00 00 16 30 e5 6f f0 00 00 00 00 00 0c 46 54 35 1a 22 28 00 00 00 b3 00 00 00 01 00 80 00 01 00 00 00 80 00 00 00 28 00 00 00 16 30 f0 65 f0 00 00 00 00 00 04 46 54 aa 85 de d7 00 00 00 88 00 00 07 99 00 00 00 20 00 00 00 16 31 1a cb 1a 00 00 00 00 00 04 46 54 52 89 27 b6 00 00 00 a2 00 00 00 03 00 00 00 20 00 00 00 16 31 44 2c b2 00 00 00 00 00 04 46 54 21 48 34 4d 00 00 05 e3 00 00 00 00 00 00 00 20 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 58 00 00 00 00 00 a5 90 60 40 00 00 00 00 20 00 00 00 16 18 67 57 b6 00 00 00 01 00 08 46 54 82 f9 8a 2b 00 00 07 86 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 16 30 d4 7e 50 00 00 00 01 00 08 46 54 8d c3 56 a3 00 00 06 10 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 16 30 e8 96 5a 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 07 00 00 00 20 00 00 00 16 30 e9 7c 6c 00 00 00 00 00 08 46 54 d4 f8 58 37 00 00 02 57 ff f9 67 a0 00 00 06 a0 00 00 00 24 00 00 00 16 30 e9 88 a8 00 00 00 00 00 10 46 54 e8 ab b6 e1 00 00 02 5a 00 00 0c 07 00 00 00 05 00 00 00 01 00 00 00 00 00 00 00 2c 00 00 00 16 30 e9 94 4c 00 00 00 00 00 04 46 54 c0 fa a9 38 00 00 00 d2 00 00 00 04 00 00 00 20 00 00 00 16 30 e9 f5 26 00 00 00 01 00 10 46 54 c3 58 71 12 00 00 02 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 16 30 ea 01 be 00 00 00 01 00 08 46 54 f1 ba 3e 82 00 00 02 0d 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 16 30 ea 0e 66 00 00 00 01 00 10 46 54 2f da c9 3b 00 00 02 1c 00 00 00 00 00 00 07 99 00 00 00 00 00 00 07 99 00 00 00 2c 00 00 00 16 30 ea 1b 0a 00 00 00 01 00 10 46 54 72 31 8e 42 00 00 02 20 00 00 00 00 00 00 09 47 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 16 30 ea 27 00 00 00 00 01 00 10 46 54 e0 df 31 f7 00 00 02 24 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 16 31 53 9a 26 00 00 00 00 00 04 46 54 cc 4c c9 f7 00 00 00 c2 00 00 00 ff 00 00 00 20 00 00 00 16 31 82 12 be 00 00 00 00 00 04 46 54 dc 8e 1c 44 00 00 05 1a 00 00 10 00 00 00 00 20 00 00 00 16 31 82 21 3c 00 00 00 00 00 14 46 54 f6 6a b3 d5 00 00 00 cf 00 00 00 00 00 00 07 d0 00 00 00 65 00 00 0c 1c 00 00 00 23 00 00 00 30 00 00 00 16 31 82 2e 52 00 00 00 00 00 10 46 54 3f 7c 1e d4 00 00 00 eb 00 00 07 d0 00 00 0b 22 00 00 0e 64 00 00 02 1e 00 00 00 2c 00 00 00 16 31 82 42 44 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 43 c0 54 00 00 00 00 40 43 fb 24 00 00 00 00 40 43 b3 54 00 00 00 00 40 43 b8 c0 00 00 00 00 40 43 bc d0 00 00 00 00 40 43 be 04 00 00 00 00 40 43 6f a4 00 00 00 00 40 43 82 d4 00 00 00 00 40 43 92 c4 00 00 00 00 40 43 3d 3c 00 00 00 00 40 1a 7d 24 00 00 00 00 00 00 25 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502333459231, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:05.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:57:05.294">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/4/callout': {u'endpoints': [u'/xyz/openbmc_project/inventory/system']}, u'/xyz/openbmc_project/logging/entry/5/callout': {u'endpoints': [u'/xyz/openbmc_...</msg>
<status endtime="20170810 02:57:05.294" starttime="20170810 02:57:05.293" status="PASS"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.295">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/4/callout', u'/xyz/openbmc_project/logg...</msg>
<status endtime="20170810 02:57:05.295" starttime="20170810 02:57:05.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.295">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel</msg>
<status endtime="20170810 02:57:05.295" starttime="20170810 02:57:05.295" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:05.296">Created file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:05.296" starttime="20170810 02:57:05.295" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:57:05.297" starttime="20170810 02:57:05.297" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.301">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:05.301" starttime="20170810 02:57:05.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:05.302" starttime="20170810 02:57:05.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.302">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:05.302" starttime="20170810 02:57:05.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:05.303" starttime="20170810 02:57:05.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.492">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:05.492" starttime="20170810 02:57:05.304" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.492">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:05.492">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.492" starttime="20170810 02:57:05.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.493">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:05.493" starttime="20170810 02:57:05.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:05.494" starttime="20170810 02:57:05.493" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.494" starttime="20170810 02:57:05.299" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.494" starttime="20170810 02:57:05.299" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.494" starttime="20170810 02:57:05.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.495">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170810 02:57:05.495" starttime="20170810 02:57:05.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:05.495" starttime="20170810 02:57:05.495" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.582">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:05.582">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.582" starttime="20170810 02:57:05.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:05.583" starttime="20170810 02:57:05.582" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:05.583">Delete All Sessions</msg>
<status endtime="20170810 02:57:05.583" starttime="20170810 02:57:05.583" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.584">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.584" starttime="20170810 02:57:05.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.584">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:05.584" starttime="20170810 02:57:05.584" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.585">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:05.585">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:57:05.585">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:57:05.585" starttime="20170810 02:57:05.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.585">${esel_data} = []</msg>
<status endtime="20170810 02:57:05.585" starttime="20170810 02:57:05.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.586">Length is 0</msg>
<msg level="INFO" timestamp="20170810 02:57:05.586">${length} = 0</msg>
<status endtime="20170810 02:57:05.586" starttime="20170810 02:57:05.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.586">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:57:05.587" starttime="20170810 02:57:05.586" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.587" starttime="20170810 02:57:05.296" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:57:05.587" starttime="20170810 02:57:05.587" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.591">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:05.592" starttime="20170810 02:57:05.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.592">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:05.592" starttime="20170810 02:57:05.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.593">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:05.593" starttime="20170810 02:57:05.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.593">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:05.593" starttime="20170810 02:57:05.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.786">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:05.786" starttime="20170810 02:57:05.594" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.786">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:05.786">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.786" starttime="20170810 02:57:05.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.787">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:05.787" starttime="20170810 02:57:05.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:05.787" starttime="20170810 02:57:05.787" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.788" starttime="20170810 02:57:05.590" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.788" starttime="20170810 02:57:05.589" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.788" starttime="20170810 02:57:05.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.788">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170810 02:57:05.788" starttime="20170810 02:57:05.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:05.789" starttime="20170810 02:57:05.789" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:05.893">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.893" starttime="20170810 02:57:05.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:05.894" starttime="20170810 02:57:05.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:05.894">Delete All Sessions</msg>
<status endtime="20170810 02:57:05.894" starttime="20170810 02:57:05.894" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.894">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:05.894" starttime="20170810 02:57:05.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:05.895" starttime="20170810 02:57:05.895" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.895">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:05.896">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:57:05.896">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 02:57:05.896" starttime="20170810 02:57:05.895" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:05.896">${esel_data} = []</msg>
<status endtime="20170810 02:57:05.896" starttime="20170810 02:57:05.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.896">Length is 0</msg>
<msg level="INFO" timestamp="20170810 02:57:05.897">${length} = 0</msg>
<status endtime="20170810 02:57:05.897" starttime="20170810 02:57:05.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.897">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:57:05.897" starttime="20170810 02:57:05.897" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:05.897" starttime="20170810 02:57:05.587" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:57:05.898" starttime="20170810 02:57:05.898" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:05.904">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:05.905" starttime="20170810 02:57:05.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.905">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:05.905" starttime="20170810 02:57:05.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.906">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:05.906" starttime="20170810 02:57:05.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:05.907">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:05.907" starttime="20170810 02:57:05.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:06.157" starttime="20170810 02:57:05.908" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:06.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:06.158" starttime="20170810 02:57:05.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:06.158" starttime="20170810 02:57:06.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:06.159" starttime="20170810 02:57:06.159" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.159" starttime="20170810 02:57:05.903" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.159" starttime="20170810 02:57:05.902" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.159" starttime="20170810 02:57:05.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.160">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170810 02:57:06.160" starttime="20170810 02:57:06.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:06.161" starttime="20170810 02:57:06.160" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.353">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:06.353">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:06.353" starttime="20170810 02:57:06.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:06.354" starttime="20170810 02:57:06.354" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:06.354">Delete All Sessions</msg>
<status endtime="20170810 02:57:06.354" starttime="20170810 02:57:06.354" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.355">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:06.355" starttime="20170810 02:57:05.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:06.355" starttime="20170810 02:57:06.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.356">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0e cf 20 8d 5b 00 00 00 0e cf 20 fa 4e 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 c8 e9 5f 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 58 0c 88 cd 49 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 58 0c 88 f8 75 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 0c 8a 72 69 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 58 12 7e a7 36 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 58 12 7e be 9a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 58 12 7e e7 02 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 58 12 7f 82 19 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 58 18 74 a3 d8 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 7c 04 77 af 86 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 7c 04 78 18 a8 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 7c 04 c8 a5 f2 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 7c 07 9b 97 79 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 7c 07 9b cc bb 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 7c 0d 91 8d 54 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 7c 0d 91 a2 2c 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 7c 0d 91 a9 60 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 7c 0d 91 b2 af 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 0c c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0c c0 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 0c 00 7e 60 00 00 00 7f e4 fb 78 8d eb c2 f8 e0 3d 20 00 8c 1e fb a1 00 70 61 29 0d 84 00 fb a1 00 78 7f c3 f3 78 4a 91 21 56 00 00 00 00 00 00 00 08 00 00 00 00 00 84 49 d0 00 00 00 00 00 00 0c c0 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0f 00 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c3 00 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 c0 00 c3 f3 78 4b f8 77 65 c6 e8 41 00 28 fa fe 00 08 f9 fa fe 00 10 38 60 00 08 18 4b f8 76 71 e8 41 00 28 5c 39 20 00 01 56 00 00 00 00 00 00 00 03 00 00 00 00 00 84 49 80 00 00 00 00 40 65 94 88 00 00 00 00 00 00 00 00 00 00 00 00 00 84 49 88 00 00 00 00 00 9d 2a 58 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 21 00 87 7a 39 20 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 84 4a 50 00 00 00 00 00 00 86 40 80 00 04 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 08 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 10 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 80 00 04 01 07 01 10 3f 00 00 00 00 00 00 00 00 e4 ae 7f e3 fb 78 4b 56 00 00 00 00 00 00 00 03 00 00 00 00 00 84 7f 10 00 00 00 00 40 65 72 68 00 00 00 00 40 66 97 a8 00 00 00 00 00 84 7f 18 00 00 00 00 00 9d 2a 58 80 00 08 24 07 01 10 3f 80 00 08 25 07 01 10 3f 80 00 0c 24 07 01 10 3f 01 b8 85 4b f8 75 c9 56 00 00 00 00 00 00 00 04 00 00 00 00 00 84 7e 90 00 00 00 00 07 01 23 59 00 00 00 00 07 01 23 5a 00 00 00 00 07 01 23 5b 00 00 00 00 07 01 23 5c 00 00 00 00 07 01 23 5d 00 00 00 00 07 01 23 5e 00 00 00 00 07 01 23 5f 00 00 00 00 07 01 23 60 00 00 00 00 00 00 ff ff 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 00 03 6c 60 42 00 00 41 60 00 00 00 e8 79 00 00 7c 7f e9 fb 78 e8 82 56 00 00 00 00 00 00 00 06 00 00 00 00 00 31 cd c0 00 00 00 00 00 00 ff ff 80 00 04 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 08 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 0c 00 07 01 10 3f 00 00 00 00 00 00 ff ff"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:06.356">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:57:06.356">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0e cf 20 8d 5b 00 00 00 0e cf 20 fa ...</msg>
<status endtime="20170810 02:57:06.356" starttime="20170810 02:57:06.355" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.357">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 0e cf 20 8d 5b 00 00 00 0e cf 20 fa 4e 42 00 0...</msg>
<status endtime="20170810 02:57:06.357" starttime="20170810 02:57:05.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.357">Length is 2</msg>
<msg level="INFO" timestamp="20170810 02:57:06.357">${length} = 2</msg>
<status endtime="20170810 02:57:06.357" starttime="20170810 02:57:06.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:57:06.358" starttime="20170810 02:57:06.358" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.359">${index} = 1</msg>
<status endtime="20170810 02:57:06.359" starttime="20170810 02:57:06.358" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:06.360">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:06.360" starttime="20170810 02:57:06.360" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.360" starttime="20170810 02:57:06.359" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:06.362">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:06.362" starttime="20170810 02:57:06.361" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.362" starttime="20170810 02:57:06.361" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.362" starttime="20170810 02:57:05.897" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.363">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:57:06.363" starttime="20170810 02:57:06.362" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.363" starttime="20170810 02:57:06.362" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 02:57:06.364" starttime="20170810 02:57:06.363" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.367">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 02:57:06.367" starttime="20170810 02:57:06.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.368">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 02:57:06.368" starttime="20170810 02:57:06.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.369">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 02:57:06.369" starttime="20170810 02:57:06.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 02:57:06.369" starttime="20170810 02:57:06.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 02:57:06.569" starttime="20170810 02:57:06.370" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:06.570">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:06.570" starttime="20170810 02:57:06.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.570">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:06.570" starttime="20170810 02:57:06.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:06.571" starttime="20170810 02:57:06.571" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.571" starttime="20170810 02:57:06.366" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.571" starttime="20170810 02:57:06.366" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.572" starttime="20170810 02:57:06.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.572">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170810 02:57:06.572" starttime="20170810 02:57:06.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 02:57:06.573" starttime="20170810 02:57:06.572" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 02:57:06.664">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:06.664" starttime="20170810 02:57:06.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 02:57:06.664" starttime="20170810 02:57:06.664" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 02:57:06.665">Delete All Sessions</msg>
<status endtime="20170810 02:57:06.665" starttime="20170810 02:57:06.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.665">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 02:57:06.665" starttime="20170810 02:57:06.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 02:57:06.666" starttime="20170810 02:57:06.665" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.666">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0a 1a 00 b3 8e 00 00 00 0a 1a 01 d7 13 42 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2b 90 00 00 2b 55 48 00 18 01 00 26 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 2a da 00 48 00 00 00 e0 00 00 0d 00 00 00 00 00 00 20 00 00 00 00 08 00 00 00 08 00 00 00 00 00 11 0d 00 00 42 43 38 41 32 41 44 41 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 06 a8 01 00 2a 00 ed df 01 02 da 02 00 00 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 11 0d 00 00 00 00 00 00 00 02 a8 67 cd f8 00 01 03 80 00 00 08 00 00 00 08 00 00 00 00 00 06 a0 06 28 00 01 06 00 01 28 00 42 45 52 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cc 00 00 00 00 00 00 00 cc 00 00 00 05 00 00 00 00 00 00 00 02 0e c0 af 36 00 00 00 01 00 08 46 54 fe 36 d6 d2 00 00 01 6d 00 00 00 00 00 00 07 d0 00 00 00 24 00 00 00 16 30 e8 88 82 00 00 00 00 00 04 46 54 b3 0e 3f b6 00 00 00 95 00 00 00 00 00 00 00 20 00 00 00 16 31 81 ea ce 00 00 00 00 00 04 46 54 2d 5e d8 74 00 00 04 3d 00 00 08 0f 00 00 00 20 00 00 00 16 31 81 f8 26 00 00 00 00 00 04 46 54 5d ac e6 35 00 00 05 01 00 00 08 00 00 00 00 20 00 00 00 16 31 82 02 fa 00 00 00 00 00 04 46 54 21 0e 9c fc 00 00 05 95 00 00 08 00 00 00 00 20 01 28 00 42 49 4d 50 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 2d 00 00 00 00 00 03 0d d0 cf d8 00 00 00 01 00 04 46 54 e8 cb 8d fb 00 00 06 a8 00 00 00 00 00 00 00 20 00 00 00 03 1c 78 7b 46 00 00 00 01 00 04 46 54 27 4f b9 f0 00 00 08 d9 00 00 00 14 00 00 00 20 00 00 00 03 1c 78 a9 c6 00 00 00 01 00 04 46 54 f4 41 74 7c 00 00 04 a0 00 00 00 00 00 00 00 20 00 00 00 03 1c 7d af 6a 00 00 00 00 00 04 46 54 86 ed 4a 46 00 00 04 d5 00 00 00 01 00 00 00 20 00 00 00 16 18 71 57 b4 00 00 00 00 00 08 46 54 08 1c a1 13 00 00 01 d6 00 00 09 47 00 00 06 fe 00 00 00 24 00 00 00 16 30 de 4c 18 00 00 00 01 00 04 46 54 46 9e d3 b9 00 00 03 ed 00 00 00 01 00 00 00 20 00 00 00 16 30 de 57 e4 00 00 00 01 00 04 46 54 c2 cf d2 29 00 00 00 92 00 00 00 00 00 00 00 20 00 00 00 16 30 de 6a 20 00 00 00 01 00 04 46 54 ba 81 8b 92 00 00 00 9e 00 00 00 01 00 00 00 20 00 00 00 16 30 de 75 9a 00 00 00 01 00 04 46 54 b5 3c be bd 00 00 02 15 00 00 00 00 00 00 00 20 00 00 00 16 30 de 88 8e 00 00 00 01 00 0c 46 54 13 26 d9 b4 00 00 02 7e 00 00 00 65 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 16 30 de de ee 00 00 00 01 00 04 46 54 6d ee 36 d2 00 00 03 05 00 00 00 00 00 00 00 20 00 00 00 16 30 e1 45 24 00 00 00 01 00 04 46 54 8f e0 a2 86 00 00 02 4c 00 00 00 02 00 00 00 20 00 00 00 16 30 e1 50 a4 00 00 00 01 00 04 46 54 db d0 fb 0b 00 00 00 ad 00 00 00 00 00 00 00 20 00 00 00 16 30 e1 ae 1a 00 00 00 01 00 04 46 54 7d 46 50 0c 00 00 02 5b 00 00 00 01 00 00 00 20 00 00 00 16 30 e1 b9 26 00 00 00 01 00 04 46 54 d1 a6 41 80 00 00 03 fc 00 00 00 00 00 00 00 20 00 00 00 16 30 e5 6f f0 00 00 00 00 00 0c 46 54 35 1a 22 28 00 00 00 b3 00 00 00 01 00 80 00 01 00 00 00 80 00 00 00 28 00 00 00 16 30 f0 65 f0 00 00 00 00 00 04 46 54 aa 85 de d7 00 00 00 88 00 00 07 99 00 00 00 20 00 00 00 16 31 1a cb 1a 00 00 00 00 00 04 46 54 52 89 27 b6 00 00 00 a2 00 00 00 03 00 00 00 20 00 00 00 16 31 44 2c b2 00 00 00 00 00 04 46 54 21 48 34 4d 00 00 05 e3 00 00 00 00 00 00 00 20 01 28 00 42 49 4e 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 9a 00 00 00 01 00 00 00 28 00 00 00 58 00 00 00 00 00 a5 90 60 40 00 00 00 00 20 00 00 00 16 18 67 57 b6 00 00 00 01 00 08 46 54 82 f9 8a 2b 00 00 07 86 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 16 30 d4 7e 50 00 00 00 01 00 08 46 54 8d c3 56 a3 00 00 06 10 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 16 30 e8 96 5a 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 07 00 00 00 20 00 00 00 16 30 e9 7c 6c 00 00 00 00 00 08 46 54 d4 f8 58 37 00 00 02 57 ff f9 67 a0 00 00 06 a0 00 00 00 24 00 00 00 16 30 e9 88 a8 00 00 00 00 00 10 46 54 e8 ab b6 e1 00 00 02 5a 00 00 0c 07 00 00 00 05 00 00 00 01 00 00 00 00 00 00 00 2c 00 00 00 16 30 e9 94 4c 00 00 00 00 00 04 46 54 c0 fa a9 38 00 00 00 d2 00 00 00 04 00 00 00 20 00 00 00 16 30 e9 f5 26 00 00 00 01 00 10 46 54 c3 58 71 12 00 00 02 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 16 30 ea 01 be 00 00 00 01 00 08 46 54 f1 ba 3e 82 00 00 02 0d 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 16 30 ea 0e 66 00 00 00 01 00 10 46 54 2f da c9 3b 00 00 02 1c 00 00 00 00 00 00 07 99 00 00 00 00 00 00 07 99 00 00 00 2c 00 00 00 16 30 ea 1b 0a 00 00 00 01 00 10 46 54 72 31 8e 42 00 00 02 20 00 00 00 00 00 00 09 47 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 16 30 ea 27 00 00 00 00 01 00 10 46 54 e0 df 31 f7 00 00 02 24 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 16 31 53 9a 26 00 00 00 00 00 04 46 54 cc 4c c9 f7 00 00 00 c2 00 00 00 ff 00 00 00 20 00 00 00 16 31 82 12 be 00 00 00 00 00 04 46 54 dc 8e 1c 44 00 00 05 1a 00 00 10 00 00 00 00 20 00 00 00 16 31 82 21 3c 00 00 00 00 00 14 46 54 f6 6a b3 d5 00 00 00 cf 00 00 00 00 00 00 07 d0 00 00 00 65 00 00 0c 1c 00 00 00 23 00 00 00 30 00 00 00 16 31 82 2e 52 00 00 00 00 00 10 46 54 3f 7c 1e d4 00 00 00 eb 00 00 07 d0 00 00 0b 22 00 00 0e 64 00 00 02 1e 00 00 00 2c 00 00 00 16 31 82 42 44 00 00 00 00 00 04 46 54 8a 39 16 0d 00 00 01 2c 00 00 00 00 00 00 00 20 01 04 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 44 00 78 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 43 c0 54 00 00 00 00 40 43 fb 24 00 00 00 00 40 43 b3 54 00 00 00 00 40 43 b8 c0 00 00 00 00 40 43 bc d0 00 00 00 00 40 43 be 04 00 00 00 00 40 43 6f a4 00 00 00 00 40 43 82 d4 00 00 00 00 40 43 92 c4 00 00 00 00 40 43 3d 3c 00 00 00 00 40 1a 7d 24 00 00 00 00 00 00 25 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 02:57:06.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 02:57:06.667">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0a 1a 00 b3 8e 00 00 00 0a 1a 01 d7 ...</msg>
<status endtime="20170810 02:57:06.667" starttime="20170810 02:57:06.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.667">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 2a 00 00 00 00 0a 1a 00 b3 8e 00 00 00 0a 1a 01 d7 13 42 00 0...</msg>
<status endtime="20170810 02:57:06.667" starttime="20170810 02:57:06.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.668">Length is 2</msg>
<msg level="INFO" timestamp="20170810 02:57:06.668">${length} = 2</msg>
<status endtime="20170810 02:57:06.668" starttime="20170810 02:57:06.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 02:57:06.669" starttime="20170810 02:57:06.668" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.669">${index} = 1</msg>
<status endtime="20170810 02:57:06.669" starttime="20170810 02:57:06.669" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:06.671">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:06.671" starttime="20170810 02:57:06.670" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.671" starttime="20170810 02:57:06.669" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:06.672">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:06.672" starttime="20170810 02:57:06.671" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.672" starttime="20170810 02:57:06.671" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.672" starttime="20170810 02:57:06.363" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.673">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 02:57:06.673" starttime="20170810 02:57:06.672" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.673" starttime="20170810 02:57:06.672" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.673" starttime="20170810 02:57:05.296" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.678">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 02:57:06.683">${out} = </msg>
<status endtime="20170810 02:57:06.683" starttime="20170810 02:57:06.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 02:57:06.687">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170810 02:57:06.688" starttime="20170810 02:57:06.687" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.688">${status} = False</msg>
<status endtime="20170810 02:57:06.688" starttime="20170810 02:57:06.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:06.689">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 02:57:06.689" starttime="20170810 02:57:06.688" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.689" starttime="20170810 02:57:04.746" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.689" starttime="20170810 02:57:04.722" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.690" starttime="20170810 02:57:04.719" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:06.690" starttime="20170810 02:57:04.719" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:57:06.692" starttime="20170810 02:57:06.692" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:06.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:06.693">${ret_values} = None</msg>
<status endtime="20170810 02:57:06.693" starttime="20170810 02:57:06.692" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:57:06.694" starttime="20170810 02:57:06.693" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.755">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:06.755">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170810 02:57:06.813">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 02:57:06.825">${core_files} = /tmp/core_ipmid.1144
/tmp/core_ipmid.2007
/tmp/core_openpower-occ-c.1098
/tmp/core_openpower-occ-c.1567
/tmp/core_openpower-occ-c.1569
/tmp/core_openpower-occ-c.1571
/tmp/core_openpower-occ-c.1573
/tm...</msg>
<msg level="INFO" timestamp="20170810 02:57:06.825">${stderr} = </msg>
<msg level="INFO" timestamp="20170810 02:57:06.825">${rc} = 0</msg>
<status endtime="20170810 02:57:06.825" starttime="20170810 02:57:06.724" status="PASS"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:06.826">@{core_list} = [ /tmp/core_ipmid.1144 | /tmp/core_ipmid.2007 | /tmp/core_openpower-occ-c.1098 | /tmp/core_openpower-occ-c.1567 | /tmp/core_openpower-occ-c.1569 | /tmp/core_openpower-occ-c.1571 | /tmp/core_openpower-...</msg>
<status endtime="20170810 02:57:06.826" starttime="20170810 02:57:06.825" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170810 02:57:06.844" starttime="20170810 02:57:06.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170810 02:57:07.577" starttime="20170810 02:57:06.846" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:07.577" starttime="20170810 02:57:06.845" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:07.577" starttime="20170810 02:57:06.845" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:07.577" starttime="20170810 02:57:06.835" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:07.577" starttime="20170810 02:57:06.826" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_ipmid.1144" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:07.927" starttime="20170810 02:57:07.578" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:07.960">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:07.961">Executing command 'rm /tmp/core_ipmid.1144'.</msg>
<msg level="INFO" timestamp="20170810 02:57:08.028">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:08.040" starttime="20170810 02:57:07.928" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:08.040" starttime="20170810 02:57:07.578" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_ipmid.2007" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:08.422" starttime="20170810 02:57:08.040" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:08.456">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:08.457">Executing command 'rm /tmp/core_ipmid.2007'.</msg>
<msg level="INFO" timestamp="20170810 02:57:08.504">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:08.516" starttime="20170810 02:57:08.423" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:08.516" starttime="20170810 02:57:08.040" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1098" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:08.806" starttime="20170810 02:57:08.516" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:08.839">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:08.839">Executing command 'rm /tmp/core_openpower-occ-c.1098'.</msg>
<msg level="INFO" timestamp="20170810 02:57:08.886">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:08.898" starttime="20170810 02:57:08.806" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:08.898" starttime="20170810 02:57:08.516" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1567" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:09.270" starttime="20170810 02:57:08.898" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:09.303">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:09.303">Executing command 'rm /tmp/core_openpower-occ-c.1567'.</msg>
<msg level="INFO" timestamp="20170810 02:57:09.400">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:09.412" starttime="20170810 02:57:09.270" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:09.412" starttime="20170810 02:57:08.898" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1569" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:09.711" starttime="20170810 02:57:09.412" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:09.746">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:09.746">Executing command 'rm /tmp/core_openpower-occ-c.1569'.</msg>
<msg level="INFO" timestamp="20170810 02:57:09.815">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:09.827" starttime="20170810 02:57:09.712" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:09.827" starttime="20170810 02:57:09.412" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1571" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:10.190" starttime="20170810 02:57:09.827" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:10.228">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:10.228">Executing command 'rm /tmp/core_openpower-occ-c.1571'.</msg>
<msg level="INFO" timestamp="20170810 02:57:10.297">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:10.309" starttime="20170810 02:57:10.190" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:10.309" starttime="20170810 02:57:09.827" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1573" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:10.576" starttime="20170810 02:57:10.309" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:10.610">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:10.610">Executing command 'rm /tmp/core_openpower-occ-c.1573'.</msg>
<msg level="INFO" timestamp="20170810 02:57:10.658">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:10.669" starttime="20170810 02:57:10.577" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:10.669" starttime="20170810 02:57:10.309" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1575" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:10.920" starttime="20170810 02:57:10.670" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:10.955">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:10.955">Executing command 'rm /tmp/core_openpower-occ-c.1575'.</msg>
<msg level="INFO" timestamp="20170810 02:57:11.003">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:11.015" starttime="20170810 02:57:10.920" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.015" starttime="20170810 02:57:10.669" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1639" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:11.285" starttime="20170810 02:57:11.015" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:11.318">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:11.318">Executing command 'rm /tmp/core_phosphor-hwmon-.1639'.</msg>
<msg level="INFO" timestamp="20170810 02:57:11.429">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:11.441" starttime="20170810 02:57:11.285" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.441" starttime="20170810 02:57:11.015" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1644" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 02:57:11.698" starttime="20170810 02:57:11.442" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:11.735">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:11.735">Executing command 'rm /tmp/core_phosphor-hwmon-.1644'.</msg>
<msg level="INFO" timestamp="20170810 02:57:11.783">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:11.795" starttime="20170810 02:57:11.699" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.795" starttime="20170810 02:57:11.441" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.795" starttime="20170810 02:57:07.577" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.795" starttime="20170810 02:57:06.723" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.795" starttime="20170810 02:57:06.694" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.795" starttime="20170810 02:57:06.690" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.795" starttime="20170810 02:57:06.690" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:57:11.797" starttime="20170810 02:57:11.797" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:11.797">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:11.797">${ret_values} = None</msg>
<status endtime="20170810 02:57:11.797" starttime="20170810 02:57:11.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:57:11.798" starttime="20170810 02:57:11.798" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:11.824">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 02:57:11.824" starttime="20170810 02:57:11.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.824" starttime="20170810 02:57:11.823" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.824" starttime="20170810 02:57:11.798" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.825" starttime="20170810 02:57:11.795" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:11.825" starttime="20170810 02:57:11.795" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:57:11.826" starttime="20170810 02:57:11.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:11.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:11.826">${ret_values} = None</msg>
<status endtime="20170810 02:57:11.827" starttime="20170810 02:57:11.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:57:11.827" starttime="20170810 02:57:11.827" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:11.853">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170810 02:57:11.853" starttime="20170810 02:57:11.852" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:11.854">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | (...</msg>
<status endtime="20170810 02:57:11.854" starttime="20170810 02:57:11.854" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:11.855">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_proc_list.txt</msg>
<status endtime="20170810 02:57:11.855" starttime="20170810 02:57:11.854" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:57:11.856" starttime="20170810 02:57:11.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:11.857">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170810 02:57:11.857" starttime="20170810 02:57:11.857" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:11.926">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:11.927">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170810 02:57:12.235">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:12.236" starttime="20170810 02:57:11.891" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:12.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:12.236">${ret_values} = (u'Mem: 224664K used, 207592K free, 14804K shrd, 30924K buff, 94820K cached\nCPU:  14% usr   7% sys   0% nic  78% idle   0% io   0% irq   0% sirq\nLoad average: 0.75 0.79 0.82 1/158 2041\n  PID  PPID ...</msg>
<status endtime="20170810 02:57:12.236" starttime="20170810 02:57:11.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:12.237">${stdout} = Mem: 224664K used, 207592K free, 14804K shrd, 30924K buff, 94820K cached
CPU:  14% usr   7% sys   0% nic  78% idle   0% io   0% irq   0% sirq
Load average: 0.75 0.79 0.82 1/158 2041
  PID  PPID USER  ...</msg>
<status endtime="20170810 02:57:12.237" starttime="20170810 02:57:12.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:12.238">${stderr} = </msg>
<status endtime="20170810 02:57:12.238" starttime="20170810 02:57:12.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:12.248">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_proc_list.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:12.248" starttime="20170810 02:57:12.247" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:12.248" starttime="20170810 02:57:12.246" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:12.249" starttime="20170810 02:57:12.239" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:12.249" starttime="20170810 02:57:11.855" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:12.249" starttime="20170810 02:57:11.854" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:12.249">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_journalctl.txt</msg>
<status endtime="20170810 02:57:12.249" starttime="20170810 02:57:12.249" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:57:12.251" starttime="20170810 02:57:12.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:12.252">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170810 02:57:12.252" starttime="20170810 02:57:12.251" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:12.318">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:12.319">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170810 02:57:15.105">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:15.107" starttime="20170810 02:57:12.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:15.107">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:15.111">${ret_values} = (u'-- Logs begin at Thu 2017-08-10 02:40:42 UTC, end at Thu 2017-08-10 02:57:12 UTC. --\nAug 10 02:40:42 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 10 02:40:42 witherspoon kernel: Linu...</msg>
<status endtime="20170810 02:57:15.111" starttime="20170810 02:57:12.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.113">${stdout} = -- Logs begin at Thu 2017-08-10 02:40:42 UTC, end at Thu 2017-08-10 02:57:12 UTC. --
Aug 10 02:40:42 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 10 02:40:42 witherspoon kernel: Linux ver...</msg>
<status endtime="20170810 02:57:15.113" starttime="20170810 02:57:15.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.114">${stderr} = </msg>
<status endtime="20170810 02:57:15.114" starttime="20170810 02:57:15.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:15.123">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_journalctl.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:15.123" starttime="20170810 02:57:15.122" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.124" starttime="20170810 02:57:15.120" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.124" starttime="20170810 02:57:15.114" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.124" starttime="20170810 02:57:12.250" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.124" starttime="20170810 02:57:12.249" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.125">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_meminfo.txt</msg>
<status endtime="20170810 02:57:15.125" starttime="20170810 02:57:15.124" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:57:15.126" starttime="20170810 02:57:15.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.127">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170810 02:57:15.127" starttime="20170810 02:57:15.126" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:15.200">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:15.200">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170810 02:57:15.308">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:15.308" starttime="20170810 02:57:15.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:15.308">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:15.308">${ret_values} = (u'MemTotal:         432256 kB\nMemFree:          207600 kB\nMemAvailable:     317872 kB\nBuffers:           30924 kB\nCached:            94820 kB\nSwapCached:            0 kB\nActive:           14275...</msg>
<status endtime="20170810 02:57:15.308" starttime="20170810 02:57:15.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.309">${stdout} = MemTotal:         432256 kB
MemFree:          207600 kB
MemAvailable:     317872 kB
Buffers:           30924 kB
Cached:            94820 kB
SwapCached:            0 kB
Active:           142756 kB
Inac...</msg>
<status endtime="20170810 02:57:15.309" starttime="20170810 02:57:15.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.309">${stderr} = </msg>
<status endtime="20170810 02:57:15.310" starttime="20170810 02:57:15.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:15.317">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_meminfo.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:15.317" starttime="20170810 02:57:15.316" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.317" starttime="20170810 02:57:15.315" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.317" starttime="20170810 02:57:15.310" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.317" starttime="20170810 02:57:15.125" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.317" starttime="20170810 02:57:15.124" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.318">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_dmesg.txt</msg>
<status endtime="20170810 02:57:15.318" starttime="20170810 02:57:15.318" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:57:15.319" starttime="20170810 02:57:15.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.320">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170810 02:57:15.320" starttime="20170810 02:57:15.320" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:15.393">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:15.393">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170810 02:57:15.460">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:15.460" starttime="20170810 02:57:15.357" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:15.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:15.461">${ret_values} = (u'[    0.240000] UDP hash table entries: 256 (order: 0, 4096 bytes)\n[    0.240000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)\n[    0.240000] NET: Registered protocol family 1\n[    0.2...</msg>
<status endtime="20170810 02:57:15.461" starttime="20170810 02:57:15.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.461">${stdout} = [    0.240000] UDP hash table entries: 256 (order: 0, 4096 bytes)
[    0.240000] UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
[    0.240000] NET: Registered protocol family 1
[    0.240000]...</msg>
<status endtime="20170810 02:57:15.461" starttime="20170810 02:57:15.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.462">${stderr} = </msg>
<status endtime="20170810 02:57:15.462" starttime="20170810 02:57:15.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:15.472">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_dmesg.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:15.472" starttime="20170810 02:57:15.471" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.472" starttime="20170810 02:57:15.470" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.472" starttime="20170810 02:57:15.462" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.472" starttime="20170810 02:57:15.318" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:15.472" starttime="20170810 02:57:15.317" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.473">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170810 02:57:15.473" starttime="20170810 02:57:15.472" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:57:15.474" starttime="20170810 02:57:15.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:15.475">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170810 02:57:15.475" starttime="20170810 02:57:15.475" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:15.543">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:15.544">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170810 02:57:16.236">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:16.236" starttime="20170810 02:57:15.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:16.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:16.237">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 10 02:57 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 10 02:57 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170810 02:57:16.237" starttime="20170810 02:57:15.475" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.238">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 10 02:57 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 10 02:57 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170810 02:57:16.238" starttime="20170810 02:57:16.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.239">${stderr} = ls: /proc/2045/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170810 02:57:16.239" starttime="20170810 02:57:16.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.246">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.246" starttime="20170810 02:57:16.245" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.246" starttime="20170810 02:57:16.244" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.246" starttime="20170810 02:57:16.239" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.247" starttime="20170810 02:57:15.473" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.247" starttime="20170810 02:57:15.472" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.247">${logpath} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_procinfo.txt</msg>
<status endtime="20170810 02:57:16.247" starttime="20170810 02:57:16.247" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 02:57:16.249" starttime="20170810 02:57:16.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.249">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170810 02:57:16.249" starttime="20170810 02:57:16.249" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:16.321">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:16.322">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170810 02:57:16.390">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:16.390" starttime="20170810 02:57:16.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:16.390">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:16.390">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170810 02:57:16.390" starttime="20170810 02:57:16.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.391">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170810 02:57:16.391" starttime="20170810 02:57:16.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.391">${stderr} = </msg>
<status endtime="20170810 02:57:16.391" starttime="20170810 02:57:16.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.398">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_procinfo.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.398" starttime="20170810 02:57:16.397" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.398" starttime="20170810 02:57:16.397" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.398" starttime="20170810 02:57:16.392" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.398" starttime="20170810 02:57:16.248" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.398" starttime="20170810 02:57:16.247" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.398" starttime="20170810 02:57:11.854" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.399" starttime="20170810 02:57:11.853" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.399" starttime="20170810 02:57:11.853" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.399" starttime="20170810 02:57:11.853" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.399" starttime="20170810 02:57:11.852" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.399" starttime="20170810 02:57:11.827" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.399" starttime="20170810 02:57:11.825" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.399" starttime="20170810 02:57:11.825" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 02:57:16.401" starttime="20170810 02:57:16.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:16.401">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:16.401">${ret_values} = None</msg>
<status endtime="20170810 02:57:16.401" starttime="20170810 02:57:16.400" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 02:57:16.402" starttime="20170810 02:57:16.402" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.430">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20170810 02:57:16.430" starttime="20170810 02:57:16.430" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.431">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170810 02:57:16.432" starttime="20170810 02:57:16.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:16.437">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170810 02:57:16.437" starttime="20170810 02:57:16.432" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.440">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.440" starttime="20170810 02:57:16.439" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.440" starttime="20170810 02:57:16.439" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.442">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.442" starttime="20170810 02:57:16.441" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.442" starttime="20170810 02:57:16.440" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.443">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.443" starttime="20170810 02:57:16.442" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.443" starttime="20170810 02:57:16.442" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.444">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.444" starttime="20170810 02:57:16.444" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.444" starttime="20170810 02:57:16.443" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.445" starttime="20170810 02:57:16.438" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.445" starttime="20170810 02:57:16.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.445">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170810 02:57:16.445" starttime="20170810 02:57:16.445" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:16.512">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:16.512">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170810 02:57:16.579">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:16.579" starttime="20170810 02:57:16.476" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:16.579">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:16.580">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-209"\nVERSION_ID="v1.99.8-209-g32f034e"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170810 02:57:16.580" starttime="20170810 02:57:16.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.581">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-209"
VERSION_ID="v1.99.8-209-g32f034e"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170810 02:57:16.581" starttime="20170810 02:57:16.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.581">${stderr} = </msg>
<status endtime="20170810 02:57:16.581" starttime="20170810 02:57:16.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.591">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.591" starttime="20170810 02:57:16.590" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.591" starttime="20170810 02:57:16.589" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.591" starttime="20170810 02:57:16.582" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.591" starttime="20170810 02:57:16.437" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.591" starttime="20170810 02:57:16.437" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.591" starttime="20170810 02:57:16.437" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.592" starttime="20170810 02:57:16.431" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.592" starttime="20170810 02:57:16.431" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.593">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170810 02:57:16.593" starttime="20170810 02:57:16.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:16.593">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170810 02:57:16.593" starttime="20170810 02:57:16.593" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.597">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.597" starttime="20170810 02:57:16.596" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.597" starttime="20170810 02:57:16.596" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.598">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.598" starttime="20170810 02:57:16.598" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.598" starttime="20170810 02:57:16.597" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.600">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.600" starttime="20170810 02:57:16.599" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.600" starttime="20170810 02:57:16.598" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.601">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.601" starttime="20170810 02:57:16.601" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.601" starttime="20170810 02:57:16.600" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.601" starttime="20170810 02:57:16.595" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.601" starttime="20170810 02:57:16.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.602">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170810 02:57:16.602" starttime="20170810 02:57:16.602" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:16.675">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:16.676">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170810 02:57:16.732">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:16.733" starttime="20170810 02:57:16.635" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:16.733">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:16.733">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Thu Aug 10 02:12:38 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170810 02:57:16.733" starttime="20170810 02:57:16.602" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.733">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Thu Aug 10 02:12:38 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170810 02:57:16.733" starttime="20170810 02:57:16.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.734">${stderr} = </msg>
<status endtime="20170810 02:57:16.734" starttime="20170810 02:57:16.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.743">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.743" starttime="20170810 02:57:16.743" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.743" starttime="20170810 02:57:16.742" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.744" starttime="20170810 02:57:16.734" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.744" starttime="20170810 02:57:16.594" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.744" starttime="20170810 02:57:16.594" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.747">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.747" starttime="20170810 02:57:16.746" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.747" starttime="20170810 02:57:16.746" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.748">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.748" starttime="20170810 02:57:16.748" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.748" starttime="20170810 02:57:16.747" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.749">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.749" starttime="20170810 02:57:16.749" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.749" starttime="20170810 02:57:16.748" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.751">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.751" starttime="20170810 02:57:16.750" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.751" starttime="20170810 02:57:16.750" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.751" starttime="20170810 02:57:16.745" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.751" starttime="20170810 02:57:16.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.752">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170810 02:57:16.752" starttime="20170810 02:57:16.751" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:16.820">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:16.821">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170810 02:57:16.880">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:16.880" starttime="20170810 02:57:16.785" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:16.880">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:16.880">${ret_values} = (u' 02:57:22 up 16 min,  load average: 0.85, 0.81, 0.82', u'', 0)</msg>
<status endtime="20170810 02:57:16.880" starttime="20170810 02:57:16.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.881">${stdout} =  02:57:22 up 16 min,  load average: 0.85, 0.81, 0.82</msg>
<status endtime="20170810 02:57:16.881" starttime="20170810 02:57:16.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.881">${stderr} = </msg>
<status endtime="20170810 02:57:16.881" starttime="20170810 02:57:16.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.888">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.888" starttime="20170810 02:57:16.887" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.888" starttime="20170810 02:57:16.886" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.888" starttime="20170810 02:57:16.882" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.888" starttime="20170810 02:57:16.744" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.888" starttime="20170810 02:57:16.744" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.891">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.891" starttime="20170810 02:57:16.891" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.891" starttime="20170810 02:57:16.890" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.893">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.893" starttime="20170810 02:57:16.892" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.893" starttime="20170810 02:57:16.891" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.894">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.894" starttime="20170810 02:57:16.894" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.895" starttime="20170810 02:57:16.893" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:16.896">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:16.896" starttime="20170810 02:57:16.895" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.896" starttime="20170810 02:57:16.895" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.896" starttime="20170810 02:57:16.890" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:16.896" starttime="20170810 02:57:16.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:16.897">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170810 02:57:16.897" starttime="20170810 02:57:16.896" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:16.964">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:16.964">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170810 02:57:17.042">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:17.042" starttime="20170810 02:57:16.928" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:17.042">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:17.042">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170810 02:57:17.042" starttime="20170810 02:57:16.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:17.043">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170810 02:57:17.043" starttime="20170810 02:57:17.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:17.043">${stderr} = </msg>
<status endtime="20170810 02:57:17.043" starttime="20170810 02:57:17.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:17.053">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:17.053" starttime="20170810 02:57:17.052" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.053" starttime="20170810 02:57:17.051" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.053" starttime="20170810 02:57:17.044" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.053" starttime="20170810 02:57:16.888" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.053" starttime="20170810 02:57:16.888" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.053" starttime="20170810 02:57:16.593" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.054" starttime="20170810 02:57:16.592" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.054" starttime="20170810 02:57:16.592" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:17.055">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170810 02:57:17.055" starttime="20170810 02:57:17.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:17.055">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170810 02:57:17.055" starttime="20170810 02:57:17.055" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:17.058">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:17.058" starttime="20170810 02:57:17.058" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.059" starttime="20170810 02:57:17.057" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:17.060">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:17.060" starttime="20170810 02:57:17.059" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.060" starttime="20170810 02:57:17.059" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:17.061">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:17.061" starttime="20170810 02:57:17.061" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.061" starttime="20170810 02:57:17.060" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:17.062">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:17.062" starttime="20170810 02:57:17.062" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.063" starttime="20170810 02:57:17.061" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.063" starttime="20170810 02:57:17.057" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:17.063" starttime="20170810 02:57:17.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:17.064">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170810 02:57:17.064" starttime="20170810 02:57:17.063" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:17.132">index=1
timeout=25 seconds
host=9.3.86.161
height=24
encoding=UTF-8
newline=

prompt=# 
width=80
term_type=vt100
alias=bmc_connection
path_separator=/
port=22</msg>
<msg level="INFO" timestamp="20170810 02:57:17.132">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170810 02:57:18.609">Command exited with return code 0.</msg>
<status endtime="20170810 02:57:18.609" starttime="20170810 02:57:17.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:18.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 02:57:18.610">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status endtime="20170810 02:57:18.610" starttime="20170810 02:57:17.064" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.611">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status endtime="20170810 02:57:18.611" starttime="20170810 02:57:18.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.611">${stderr} = </msg>
<status endtime="20170810 02:57:18.611" starttime="20170810 02:57:18.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:18.618">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/20170810025700480517_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:18.617" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:18.616" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:18.611" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:17.056" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:17.056" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:17.055" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:17.054" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:17.054" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:16.430" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:16.429" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.618" starttime="20170810 02:57:16.402" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.619" starttime="20170810 02:57:16.399" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.619" starttime="20170810 02:57:16.399" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.619" starttime="20170810 02:57:00.758" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.619" starttime="20170810 02:57:00.756" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.619" starttime="20170810 02:57:00.755" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.619" starttime="20170810 02:57:00.755" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170810 02:57:18.626" starttime="20170810 02:57:18.626" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.626" starttime="20170810 02:57:18.619" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.626" starttime="20170810 02:57:00.754" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.627" starttime="20170810 02:56:57.384" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.627" starttime="20170810 02:56:57.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 02:57:18.627" starttime="20170810 02:57:18.627" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.637">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 02:57:18.637" starttime="20170810 02:57:18.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.638">${FFDC_DIR_PATH} = /tmp/fspcibld/19025/obmc-robot/logs/20170810025700480517_TestsTestBasicPoweron/20170810025700480517_PowerOnTest/</msg>
<status endtime="20170810 02:57:18.638" starttime="20170810 02:57:18.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170810 02:57:18.638" starttime="20170810 02:57:18.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 02:57:18.639" starttime="20170810 02:57:18.638" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:18.639">Directory '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs"&gt;/tmp/fspcibld/19025/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170810 02:57:18.639" starttime="20170810 02:57:18.639" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:18.640">File '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170810 02:57:18.640" starttime="20170810 02:57:18.640" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:18.640">${exist} = True</msg>
<status endtime="20170810 02:57:18.641" starttime="20170810 02:57:18.640" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170810 02:57:18.641" starttime="20170810 02:57:18.641" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 02:57:18.642" starttime="20170810 02:57:18.641" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.643">${cur_time} = 2017-08-10 02:57:18:642505</msg>
<status endtime="20170810 02:57:18.643" starttime="20170810 02:57:18.642" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.643">${cur_time} = 20170810025718642505</msg>
<status endtime="20170810 02:57:18.643" starttime="20170810 02:57:18.643" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:18.644">${cur_time} = 20170810025718642505</msg>
<status endtime="20170810 02:57:18.644" starttime="20170810 02:57:18.642" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:18.644">Appended to file '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19025/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:18.644" starttime="20170810 02:57:18.644" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.645" starttime="20170810 02:57:18.627" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.645" starttime="20170810 02:56:56.965" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.646">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:57:18.646" starttime="20170810 02:57:18.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.647">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:57:18.647" starttime="20170810 02:57:18.647" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:18.647">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170810 02:57:18.647" starttime="20170810 02:57:18.646" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.648">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 02:57:18.648" starttime="20170810 02:57:18.648" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:57:18.649" starttime="20170810 02:57:18.648" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.654">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 02:57:18.658">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 02:57:18.658">${output} = /tmp/fspcibld/19025/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 02:57:18.658" starttime="20170810 02:57:18.649" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:57:18.662" starttime="20170810 02:57:18.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 02:57:18.663" starttime="20170810 02:57:18.662" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.664">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 02:57:18.664" starttime="20170810 02:57:18.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:18.664">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170810 02:57:18.664" starttime="20170810 02:57:18.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.665">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 02:57:18.665" starttime="20170810 02:57:18.665" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:57:18.666" starttime="20170810 02:57:18.665" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.670">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 02:57:18.687">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 02:57:18.687">${os_con_pid} = </msg>
<status endtime="20170810 02:57:18.687" starttime="20170810 02:57:18.666" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 02:57:18.690" starttime="20170810 02:57:18.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.691">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 02:57:18.691" starttime="20170810 02:57:18.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 02:57:18.694" starttime="20170810 02:57:18.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.695">${rc} = None</msg>
<msg level="INFO" timestamp="20170810 02:57:18.695">${output} = None</msg>
<status endtime="20170810 02:57:18.695" starttime="20170810 02:57:18.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 02:57:18.696" starttime="20170810 02:57:18.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 02:57:18.699">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/19025/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/19025/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 02:57:18.700" starttime="20170810 02:57:18.697" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.700" starttime="20170810 02:57:18.696" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.700" starttime="20170810 02:57:18.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.700">${output} = </msg>
<status endtime="20170810 02:57:18.700" starttime="20170810 02:57:18.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170810 02:57:18.701">${loc_quiet} = 1</msg>
<status endtime="20170810 02:57:18.701" starttime="20170810 02:57:18.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 02:57:18.742" starttime="20170810 02:57:18.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:18.744">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 02:57:18.778">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170810 02:57:18.778" starttime="20170810 02:57:18.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 02:57:18.822">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170810 02:57:18.822" starttime="20170810 02:57:18.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 02:57:18.855">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  3.92173|secure|Booting in non-secure mode.
  3.92174|secure|SecureROM invalid - skipping functionality
  6.31554|ISTEP  6. 5 - host_init_fsi
  6.45201|ISTEP  6. 6 - host_set_ipl_parms
  6.48612|ISTEP  6. 7 - host_discover_targets
 12.06005|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.06006|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.10171|ISTEP  6. 8 - host_update_master_tpm
 12.10910|SECURE|Security Access Bit&gt; 0x0000000000000000
 12.10911|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 12.10922|ISTEP  6. 9 - host_gard
 12.14186|ISTEP  6.10 - host_revert_sbe_mcs_setup
 12.15095|ISTEP  6.11 - host_start_occ_xstop_handler
 12.15172|ISTEP  6.12 - host_voltage_config
 12.18572|ISTEP  7. 2 - mss_volt
 12.91789|ISTEP  7. 3 - mss_freq
 13.23088|ISTEP  7. 4 - mss_eff_config
 16.15155|ISTEP  7. 5 - mss_attr_update
 16.16136|ISTEP  8. 1 - host_slave_sbe_config
 16.19539|ISTEP  8. 2 - host_setup_sbe
 16.20008|ISTEP  8. 3 - host_cbs_start
 16.20612|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 23.41738|ISTEP  8. 5 - host_attnlisten_proc
 23.41871|ISTEP  8. 6 - host_p9_fbc_eff_config
 23.42522|ISTEP  8. 7 - host_p9_eff_config_links
 23.43355|ISTEP  8. 8 - proc_attr_update
 23.43476|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 23.46589|ISTEP  8.10 - proc_xbus_scominit
 25.03062|ISTEP  8.11 - proc_xbus_enable_ridi
 25.03494|ISTEP  9. 1 - fabric_erepair
 25.04262|ISTEP  9. 2 - fabric_io_dccal
 25.71265|ISTEP  9. 3 - fabric_pre_trainadv
 25.71834|ISTEP  9. 4 - fabric_io_run_training
 25.84147|ISTEP  9. 5 - fabric_post_trainadv
 25.84576|ISTEP  9. 6 - proc_smp_link_layer
 25.84965|ISTEP  9. 7 - proc_fab_iovalid
 25.86835|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 25.87530|ISTEP 10. 1 - proc_build_smp
 26.20693|ISTEP 10. 2 - host_slave_sbe_update
124.22770|sbe|System Rebooting To Perform SBE Update

124.23839|================================================
124.24181|Error reported by ipmi (0x2500) PLID 0x90000012
124.24353|  Requested sensor is not present.
124.24354|  ModuleId   0x03 IPMI::MOD_IPMISENSOR
124.24354|  ReasonCode 0x2507 IPMI::RC_SENSOR_NOT_PRESENT
124.24355|  UserData1  BMC IPMI Completion code. : 0x00000000000000cb
124.24356|  UserData2  bytes [0-3]sensor number bytes [4-7]HUID of target. : 0x0000000700000000
124.24356|------------------------------------------------
124.24357|  Callout type             : Procedure Callout
124.24357|  Procedure                : EPUB_PRC_HB_CODE
124.24358|  Priority                 : SRCI_PRIORITY_HIGH
124.24358|------------------------------------------------
124.24359|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
124.24359|================================================
124.24861|IPMI: Initiate power cycle
124.31998|Stopping istep dispatcher
129.33871|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  3.85022|secure|Booting in non-secure mode.
  3.85023|secure|SecureROM invalid - skipping functionality
  4.47688|ERRL|Dumping errors reported prior to registration
  5.03639|ISTEP  6. 5 - host_init_fsi
  5.12030|ISTEP  6. 6 - host_set_ipl_parms
  5.14436|ISTEP  6. 7 - host_discover_targets
  5.56431|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.56432|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.66329|ISTEP  6. 8 - host_update_master_tpm
  5.67148|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.67148|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.67160|ISTEP  6. 9 - host_gard
  5.71162|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.72049|ISTEP  6.11 - host_start_occ_xstop_handler
  5.72144|ISTEP  6.12 - host_voltage_config
  5.75498|ISTEP  7. 2 - mss_volt
  6.06884|ISTEP  7. 3 - mss_freq
  6.17803|ISTEP  7. 4 - mss_eff_config
  9.10670|ISTEP  7. 5 - mss_attr_update
  9.11667|ISTEP  8. 1 - host_slave_sbe_config
  9.14957|ISTEP  8. 2 - host_setup_sbe
  9.15442|ISTEP  8. 3 - host_cbs_start
  9.16064|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 15.77259|ISTEP  8. 5 - host_attnlisten_proc
 15.77376|ISTEP  8. 6 - host_p9_fbc_eff_config
 15.78094|ISTEP  8. 7 - host_p9_eff_config_links
 15.78924|ISTEP  8. 8 - proc_attr_update
 15.79096|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 15.82102|ISTEP  8.10 - proc_xbus_scominit
 17.38105|ISTEP  8.11 - proc_xbus_enable_ridi
 17.38577|ISTEP  9. 1 - fabric_erepair
 17.39369|ISTEP  9. 2 - fabric_io_dccal
 18.06312|ISTEP  9. 3 - fabric_pre_trainadv
 18.06905|ISTEP  9. 4 - fabric_io_run_training
 18.19266|ISTEP  9. 5 - fabric_post_trainadv
 18.19884|ISTEP  9. 6 - proc_smp_link_layer
 18.20322|ISTEP  9. 7 - proc_fab_iovalid
 18.22064|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 18.22878|ISTEP 10. 1 - proc_build_smp
 18.35872|ISTEP 10. 2 - host_slave_sbe_update
 18.94656|ISTEP 10. 3 - host_set_voltages
 19.01502|ISTEP 10. 4 - proc_cen_ref_clk_enable
 19.02465|ISTEP 10. 5 - proc_enable_osclite
 19.02659|ISTEP 10. 6 - proc_chiplet_scominit
 19.07353|ISTEP 10. 7 - proc_abus_scominit
 19.08037|ISTEP 10. 8 - proc_obus_scominit
 19.40363|ISTEP 10. 9 - proc_npu_scominit
 19.42536|ISTEP 10.10 - proc_pcie_scominit
 19.48238|ISTEP 10.11 - proc_scomoverride_chiplets
 19.48376|ISTEP 10.12 - proc_chiplet_enable_ridi
 19.48637|ISTEP 10.13 - host_rng_bist
 19.49225|ISTEP 10.14 - host_update_redundant_tpm
 19.56291|ISTEP 11. 1 - host_prd_hwreconfig
 19.56711|ISTEP 12. 1 - mss_getecid
 19.57272|ISTEP 13. 1 - host_disable_memvolt
 19.66219|ISTEP 13. 2 - mem_pll_reset
 19.67287|ISTEP 13. 3 - mem_pll_initf
 19.70510|ISTEP 13. 4 - mem_pll_setup
 19.72989|ISTEP 13. 6 - mem_startclocks
 19.74713|ISTEP 13. 7 - host_enable_memvolt
 19.74993|ISTEP 13. 8 - mss_scominit
 20.05985|ISTEP 13. 9 - mss_ddr_phy_reset
 20.14955|ISTEP 13.10 - mss_draminit
 20.33047|ISTEP 13.11 - mss_draminit_training
 20.74345|ISTEP 13.12 - mss_draminit_trainadv
 20.74522|ISTEP 13.13 - mss_draminit_mc
 20.76863|ISTEP 14. 1 - mss_memdiag
 41.77957|ISTEP 14. 2 - mss_thermal_init
 41.78670|ISTEP 14. 3 - proc_pcie_config
 41.79797|ISTEP 14. 4 - mss_power_cleanup
 41.79981|ISTEP 14. 5 - proc_setup_bars
 41.83063|ISTEP 14. 6 - proc_htm_setup
 41.83978|ISTEP 14. 7 - proc_exit_cache_contained
 41.85164|ISTEP 15. 1 - host_build_stop_image
 45.51674|ISTEP 15. 2 - proc_set_pba_homer_bar
 45.52053|ISTEP 15. 3 - host_establish_ex_chiplet
 45.53225|ISTEP 15. 4 - host_start_stop_engine
 45.63640|ISTEP 16. 1 - host_activate_master
  0.00716|ISTEP 16. 2 - host_activate_slave_cores
 47.23165|ISTEP 16. 3 - host_secure_rng
 47.25378|ISTEP 16. 4 - mss_scrub
 47.26471|ISTEP 16. 5 - host_ipl_complete
 47.28802|ISTEP 16. 6 - host_load_io_ppe
 47.28965|ISTEP 18.11 - proc_tod_setup
 47.34141|ISTEP 18.12 - proc_tod_init
 47.35263|ISTEP 20. 1 - host_load_payload
 47.66249|ISTEP 20. 2 - host_load_hdat
 51.42663|ISTEP 21. 1 - host_runtime_setup
 84.75290|================================================
 84.75644|Error reported by occc (0x2A00) PLID 0x9000002B
 84.75644|  &lt;none&gt;
 84.75645|  ModuleId   0x0d unknown
 84.75645|  ReasonCode 0x2ada unknown
 84.75823|  UserData1   : 0x0000080000000800
 84.75824|  UserData2   : 0x00000000110d0000
 84.75824|------------------------------------------------
 84.75825|  Callout type             : Procedure Callout
 84.75825|  Procedure                : EPUB_PRC_HB_CODE
 84.75826|  Priority                 : SRCI_PRIORITY_LOW
 84.75826|------------------------------------------------
 84.75827|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 84.75828|================================================
 85.23932|htmgt|OCCs are now running in ACTIVE state
 85.21577|ISTEP 21. 2 - host_verify_hdat
 85.21007|ISTEP 21. 3 - host_start_payload
[  103.331204233,5] OPAL skiboot-07937c7 starting...
[  103.331207047,7] initial console log level: memory 7, driver 5
[  103.331209219,6] CPU: P9 generation processor (max 4 threads/core)
[  103.331211188,7] CPU: Boot CPU PIR is 0x000c PVR is 0x004e1200
[  103.331213293,7] CPU: Initial max PIR set to 0x7fff
[  103.332088338,7] OPAL table: 0x300e3640 .. 0x300e3b80, branch table: 0x30002000
[  103.332091828,7] Assigning physical memory map table for nimbus
[  103.332094527,7] Parsing HDAT...
[  103.332095794,5] SPIRA-S found.
[  103.332098620,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  103.332455706,6] SP Family is ibm,ast2500,openbmc
[  103.332462474,7] LPC: IOPATH chip id = 0
[  103.332463928,7] LPC: FW BAR       = f0000000
[  103.332465569,7] LPC: MEM BAR      = e0000000
[  103.332467139,7] LPC: IO BAR       = d0010000
[  103.332468658,7] LPC: Internal BAR = c0012000
[  103.332481815,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  103.332484750,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  103.333160161,5] UART: Using UART at 0x60300d00103f8
[  103.335737514,3] I2C: HDAT version 2 not supported! THIS IS A BUG
[  103.335995369,3] I2C: HDAT version 2 not supported! THIS IS A BUG
[  103.336593177,5] CHIP: Chip ID 0000 type: P9N DD2.0
[  103.336664072,5] CHIP: Chip ID 0008 type: P9N DD2.0
[  103.336963178,5] SLW: Enabling: stop0_lite
[  103.337019605,5] SLW: Enabling: stop0
[  103.337169761,5] PLAT: Using virtual UART
[  103.337354330,7] LPC: Routing irq 9, policy: 0 (r=1)
[  103.337356305,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[  103.337557244,5] PLAT: Detected Witherspoon platform
[  103.337616149,5] PLAT: Detected BMC platform OpenBMC
[  103.376920782,5] CPU: All 176 processors called in...
[    2.495908887,5] FLASH: Found system flash:  id:0
[    2.496025221,5] BT: Interface initialized, IO 0x00e4
[    2.496090035,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.496091807,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    3.445093612,5] NVRAM: Size is 576 KB
[    4.141157955,3] NVRAM: Partition at offset 0x0 has incorrect 0 length
[    4.141226811,3] NVRAM: Re-initializing (size: 0x00090000)
[    5.011632188,5] STB: secure and trusted boot not supported
[    5.011634394,7] LPC-MBOX: Sending BMC interrupt
[    5.011769242,5] OPAL: Using OPAL UART console
[    5.011813340,7] LPC: Routing irq 4, policy: 0 (r=1)
[    5.011814938,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    5.014411786,5] VAS: Initialized
[    5.014565253,3] NX0: Unknown NX type!
[    5.014605481,3] NX0: ERROR: Unknown NX type!
[    5.014650264,5] Found ibm,power9-nx
[    5.014680902,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    5.014811814,3] NX8: Unknown NX type!
[    5.014861239,3] NX8: ERROR: Unknown NX type!
[    5.014893253,5] Found ibm,power9-nx
[    5.014926950,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    6.432353002,3] FLASH: flash subpartition not found.
[    6.432417097,3] FLASH: FAILED reading subpart info. rc=-10
[    6.434052085,3] CAPP: Error loading ucode lid. index=200d1
[    6.459346288,5] PCI: Resetting PHBs and training links...
[    8.012980860,5] PCI: Probing slots...
[    8.069358074,3] PCI: built-in device not found:  (loc: 100)
[    8.069430973,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    8.069474903,3] PCI: built-in device not found: GPU0 (loc: 400)
[    8.069529722,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    8.069573944,3] PCI: built-in device not found: GPU1 (loc: 500)
[    8.069616415,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    8.069666397,3] PCI: built-in device not found: GPU2 (loc: 600)
[    8.069714828,3] PCI: built-in device not found:  (loc: 100)
[    8.069758926,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    8.069808921,3] PCI: built-in device not found: GPU3 (loc: 300)
[    8.069851122,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    8.069904131,3] PCI: built-in device not found: GPU4 (loc: 400)
[    8.069946304,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    8.069996339,3] PCI: built-in device not found: GPU5 (loc: 500)
[    8.070046311,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.070107373,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.070176840,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    8.070247037,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    8.070303331,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    8.070371436,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    8.070438370,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.070498788,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    8.070560652,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    8.070640752,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    8.070715027,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    8.070801815,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    8.070883099,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    8.070964331,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    8.071036226,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.071107513,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.071178711,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.071243805,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.071311834,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.071374706,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.071437589,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.071517395,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.071596887,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.071673378,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.071750150,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.071826315,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.071952444,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.072028233,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.072110405,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.072186355,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.072262445,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.072344953,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.072421229,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.072491847,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.072546546,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.072601617,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.072662383,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    8.072725020,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    8.072798088,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    8.072867683,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   16.373593601,5] IPMI: Resetting boot count on successful boot
[   16.373657542,5] INIT: Waiting for kernel...
[   16.373730823,5] INIT: 64-bit LE kernel discovered
[   16.373792842,5] OCC: All Chip Rdy after 0 ms
[   16.415431117,5] INIT: Starting kernel at 0x20010000, fdt at 0x309513c8 343552 bytes)
[   17.435387294,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201ffe800000 and radix root for kernel: c000000001420000
[    0.000000] Linux version 4.12.3-openpower1 (fspbld@gfwa125.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Sun Aug 6 21:18:12 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6d6700-0x201fff6dffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6ace00-0x201fff6b66ff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff6a3500-0x201fff6acdff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff699c00-0x201fff6a34ff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff690300-0x201fff699bff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff686a00-0x201fff6902ff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x201fff67d100-0x201fff6869ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 4190720
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1034148(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 267913408K/268435456K available (6144K kernel code, 1088K rwdata, 1968K rodata, 11392K init, 1693K bss, 522048K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000215] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000588] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001080] Console: colour dummy device 80x25
[    0.003582] console [tty0] enabled
[    0.003761] console [hvc0] enabled
[    0.003761] console [hvc0] enabled
[    0.003955] bootconsole [udbg0] disabled
[    0.003955] bootconsole [udbg0] disabled
[    0.004665] pid_max: default: 180224 minimum: 1408
[    0.006262] Security Framework initialized
[    0.010043] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.111656] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.186043] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.186313] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.191886] EEH: PowerNV platform initialized
[    0.192038] POWER9 performance monitor hardware support registered
[    0.193638] smp: Bringing up secondary CPUs ...
[    0.749154] smp: Brought up 8 nodes, 176 CPUs
[    0.749349] numa: Node 0 CPUs: 0-87
[    0.749433] numa: Node 8 CPUs: 88-175
[    0.749518] numa: Node 250 CPUs:
[    0.749610] numa: Node 251 CPUs:
[    0.749690] numa: Node 252 CPUs:
[    0.749758] numa: Node 253 CPUs:
[    0.749825] numa: Node 254 CPUs:
[    0.749892] numa: Node 255 CPUs:
[    0.770793] devtmpfs: initialized
[    0.786001] evm: security.capability
[    0.786784] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.787085] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.788907] NET: Registered protocol family 16
[    0.789697] cpuidle: using governor menu
[    1.858344] PCI: Probing PCI hardware
[    1.858455] PCI host bridge to bus 0000:00
[    1.858531] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.858680] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    1.858819] pci_bus 0000:00: root bus resource [bus 00-ff]
[    1.859003] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.859087] pci 0000:00:00.0: disabling bridge mem windows
[    1.859322] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.859496] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    1.859612] PCI host bridge to bus 0001:00
[    1.859671] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.859823] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    1.859957] pci_bus 0001:00: root bus resource [bus 00-ff]
[    1.860116] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.860205] pci 0001:00:00.0: disabling bridge mem windows
[    1.860611] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    1.860696] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    1.860990] pci 0001:00:00.0: PCI bridge to [bus 01]
[    1.861248] PCI host bridge to bus 0002:00
[    1.861303] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.861452] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    1.861584] pci_bus 0002:00: root bus resource [bus 00-ff]
[    1.861750] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.861846] pci 0002:00:00.0: disabling bridge mem windows
[    1.862246] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    1.862335] pci 0002:01:00.0: disabling bridge mem windows
[    1.862595] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    1.862927] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    1.863161] pci 0002:01:00.0: PCI bridge to [bus 02]
[    1.863316] PCI host bridge to bus 0003:00
[    1.863367] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.863523] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    1.863653] pci_bus 0003:00: root bus resource [bus 00-ff]
[    1.863805] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.863897] pci 0003:00:00.0: disabling bridge mem windows
[    1.864115] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.864286] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    1.864408] PCI host bridge to bus 0004:00
[    1.864468] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.864616] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    1.864744] pci_bus 0004:00: root bus resource [bus 00-ff]
[    1.864899] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.864987] pci 0004:00:00.0: disabling bridge mem windows
[    1.865400] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    1.865490] pci 0004:01:00.0: disabling bridge mem windows
[    1.865943] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    1.866038] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    1.866460] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    1.866558] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    1.866742] random: fast init done
[    1.866949] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    1.867048] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    1.867472] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    1.867555] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    1.867831] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    1.868299] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    1.868394] pci 0004:02:02.0: disabling bridge mem windows
[    1.868802] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    1.868894] pci 0004:02:0a.0: disabling bridge mem windows
[    1.869284] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    1.869378] pci 0004:02:0b.0: disabling bridge mem windows
[    1.869773] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    1.869888] pci 0004:02:0c.0: disabling bridge mem windows
[    1.870165] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    1.872036] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    1.872120] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    1.872392] pci 0004:02:02.0: PCI bridge to [bus 03]
[    1.872583] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    1.872749] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    1.872908] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    1.873088] PCI host bridge to bus 0005:00
[    1.873141] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.873288] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    1.873418] pci_bus 0005:00: root bus resource [bus 00-ff]
[    1.873587] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.873698] pci 0005:00:00.0: disabling bridge mem windows
[    1.874140] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    1.874594] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    1.874878] pci 0005:00:00.0: PCI bridge to [bus 01]
[    1.875089] PCI host bridge to bus 0030:00
[    1.875134] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.875282] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    1.875421] pci_bus 0030:00: root bus resource [bus 00-ff]
[    1.875605] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.875700] pci 0030:00:00.0: disabling bridge mem windows
[    1.875952] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.876123] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    1.876264] PCI host bridge to bus 0033:00
[    1.876307] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.876425] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    1.876575] pci_bus 0033:00: root bus resource [bus 00-ff]
[    1.876772] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.876864] pci 0033:00:00.0: disabling bridge mem windows
[    1.877117] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.877297] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    1.877436] PCI host bridge to bus 0034:00
[    1.877495] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.877647] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    1.877777] pci_bus 0034:00: root bus resource [bus 00-ff]
[    1.877956] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.878049] pci 0034:00:00.0: disabling bridge mem windows
[    1.878307] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.878480] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    1.878622] PCI host bridge to bus 0035:00
[    1.878670] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.878820] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    1.878960] pci_bus 0035:00: root bus resource [bus 00-ff]
[    1.879146] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.879241] pci 0035:00:00.0: disabling bridge mem windows
[    1.879715] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    1.879820] pci 0035:01:00.0: disabling bridge mem windows
[    1.880170] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    1.880531] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    1.880627] pci 0035:02:08.0: disabling bridge mem windows
[    1.881096] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    1.881177] pci 0035:02:0d.0: disabling bridge mem windows
[    1.881497] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    1.882584] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    1.882752] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    1.882933] PCI host bridge to bus 0006:00
[    1.882974] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    1.883077] pci_bus 0006:00: root bus resource [bus 00-ff]
[    1.883253] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.883538] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    1.883810] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    1.884093] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    1.884375] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    1.884663] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    1.885053] PCI host bridge to bus 0007:00
[    1.885096] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    1.885217] pci_bus 0007:00: root bus resource [bus 00-ff]
[    1.885392] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    1.885669] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    1.885941] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    1.886235] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    1.886535] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    1.886817] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    1.887137] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    1.887480] pci 0000:00:00.0: PCI bridge to [bus 01]
[    1.887577] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    1.887699] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    1.887803] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    1.887949] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.888295] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    1.888616] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    1.895786] IOMMU table initialized, virtual merging enabled
[    1.895838] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    1.895942] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    1.896012] pci 0001:00:00.0: PCI bridge to [bus 01]
[    1.896070] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    1.896215] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    1.896319] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    1.896423] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    1.896522] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    1.896623] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    1.896731] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    1.896860] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    1.896949] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    1.897046] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.897398] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    1.897743] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    1.904925] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    1.905004] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    1.905093] pci 0002:01:00.0: PCI bridge to [bus 02]
[    1.905158] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    1.905269] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    1.905596] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    1.905657] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    1.905771] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    1.905943] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    1.906297] pci 0003:00:00.0: PCI bridge to [bus 01]
[    1.906473] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    1.906602] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    1.906697] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    1.906840] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    1.906945] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    1.907069] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    1.907189] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    1.907310] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    1.907432] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    1.907518] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    1.907618] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    1.907688] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    1.907798] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    1.907890] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    1.908030] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    1.908144] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    1.908220] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    1.908308] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    1.908403] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    1.908497] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    1.908621] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    1.908742] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    1.908830] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    1.908924] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    1.909016] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    1.909097] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    1.909191] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    1.909283] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    1.909374] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    1.909469] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    1.909557] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    1.909652] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.909997] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    1.910322] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    1.917496] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    1.917577] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    1.917647] pci 0004:02:02.0: PCI bridge to [bus 03]
[    1.917715] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    1.917841] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    1.917958] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    1.918063] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    1.918169] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    1.918265] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    1.918597] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    1.918652] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    1.918770] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    1.918923] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    1.919265] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    1.926321] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    1.926406] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    1.926492] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    1.926569] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    1.926697] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    1.926837] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    1.927017] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    1.927135] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    1.927291] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    1.927442] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    1.927588] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    1.927729] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    1.927875] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    1.928012] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.928366] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    1.928677] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    1.935740] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    1.935824] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    1.935902] pci 0005:00:00.0: PCI bridge to [bus 01]
[    1.935962] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    1.936130] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    1.936453] pci 0030:00:00.0: PCI bridge to [bus 01]
[    1.936565] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    1.936921] pci 0033:00:00.0: PCI bridge to [bus 01]
[    1.937030] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.937377] pci 0034:00:00.0: PCI bridge to [bus 01]
[    1.937524] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    1.937621] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    1.937748] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.938090] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    1.938171] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    1.938268] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    1.938600] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    1.938681] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    1.939025] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    1.939080] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    1.939208] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    1.939363] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    1.939515] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    1.939675] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    1.939855] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    1.939997] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    1.940164] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    1.940297] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    1.940458] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    1.940611] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    1.940767] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    1.940930] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    1.941093] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    1.941250] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    1.941396] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    1.941566] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    1.941694] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    1.941868] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    1.942035] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    1.942175] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    1.942318] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    1.942472] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    1.942638] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    1.942765] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    1.942950] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    1.943022] pci 0006:00:00.1: Associating to existing PE d
[    1.943101] pci 0006:00:01.0: Associating to existing PE d
[    1.943200] pci 0006:00:01.1: Associating to existing PE d
[    1.943286] pci 0006:00:02.0: Associating to existing PE d
[    1.943369] pci 0006:00:02.1: Associating to existing PE d
[    1.943495] NPU6: Found 1 MMIO ATSD registers
[    1.943501] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    1.943642] pci 0007:00:00.1: Associating to existing PE d
[    1.943719] pci 0007:00:01.0: Associating to existing PE d
[    1.943818] pci 0007:00:01.1: Associating to existing PE d
[    1.943872] pci 0007:00:02.0: Associating to existing PE d
[    1.943946] pci 0007:00:02.1: Associating to existing PE d
[    1.944039] NPU7: Found 1 MMIO ATSD registers
[    1.948206] EEH: PCI Enhanced I/O Error Handling Enabled
[    1.956775] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    1.956894] pci 0002:02:00.0: vgaarb: bridge control possible
[    1.956972] vgaarb: loaded
[    1.957122] SCSI subsystem initialized
[    1.957306] usbcore: registered new interface driver usbfs
[    1.957379] usbcore: registered new interface driver hub
[    1.958019] usbcore: registered new device driver usb
[    1.958119] pps_core: LinuxPPS API ver. 1 registered
[    1.958195] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    1.958305] PTP clock support registered
[    1.959086] clocksource: Switched to clocksource timebase
[    1.962418] NET: Registered protocol family 2
[    1.962765] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    1.965632] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    1.966037] TCP: Hash tables configured (established 524288 bind 65536)
[    1.966356] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.967202] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.968537] NET: Registered protocol family 1
[    1.968614] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    1.968709] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    4.634602] Initialise system trusted keyrings
[    4.634728] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    4.640146] Key type asymmetric registered
[    4.640195] Asymmetric key parser 'x509' registered
[    4.640282] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    4.640381] io scheduler noop registered
[    4.640844] io scheduler cfq registered (default)
[    4.640898] io scheduler mq-deadline registered
[    4.640948] io scheduler kyber registered
[    4.643862] ipmi message handler version 39.2
[    4.643925] ipmi device interface
[    4.644002] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    4.671594] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    4.686262] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    4.686324] hvc0: No interrupts property, using OPAL event
[    4.686734] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    4.687265] [drm] radeon kernel modesetting enabled.
[    4.698556] brd: module loaded
[    4.720498] loop: module loaded
[    4.720667] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    4.720746] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    4.720854] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    4.720949] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    4.721182] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    4.731338] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    4.731421] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    4.732207] scsi host0: ahci
[    4.732467] scsi host1: ahci
[    4.732705] scsi host2: ahci
[    4.732960] scsi host3: ahci
[    4.733088] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    4.733201] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    4.733326] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    4.733437] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    4.733711] libphy: Fixed MDIO Bus: probed
[    4.733780] tg3.c:v3.137 (May 11, 2014)
[    4.733851] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    4.733942] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    4.774327] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    4.774803] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    4.774903] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    4.775062] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    4.775196] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    4.775383] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    4.805782] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    4.806184] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    4.806293] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    4.806435] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    4.806569] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    4.806881] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    4.806948] ehci-pci: EHCI PCI platform driver
[    4.807046] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    4.807147] ohci-pci: OHCI PCI platform driver
[    4.807286] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    4.807398] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    4.807595] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    4.807725] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    4.808588] hub 1-0:1.0: USB hub found
[    4.808648] hub 1-0:1.0: 4 ports detected
[    4.808853] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    4.809017] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    4.809166] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    4.809487] hub 2-0:1.0: USB hub found
[    4.809541] hub 2-0:1.0: 4 ports detected
[    4.809801] usbcore: registered new interface driver usb-storage
[    4.869006] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    4.869073] i2c /dev entries driver
[    4.871026] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    4.871081] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    4.881598] usbcore: registered new interface driver usbhid
[    4.881646] usbhid: USB HID core driver
[    4.882058] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    4.882372] NET: Registered protocol family 17
[    4.882441] Key type dns_resolver registered
[    4.882727] registered taskstats version 1
[    4.882767] Loading compiled-in X.509 certificates
[    4.890148] Loaded X.509 cert 'Build time autogenerated kernel key: 183c9032b7131ce1cb34ae01bff55b10d968c1fb'
[    4.894989] Key type encrypted registered
[    4.895043] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    4.895204] evm: HMAC attrs: 0x1
[    4.949106] rtc-opal opal-rtc: setting system clock to 2017-08-10 02:51:25 UTC (1502333485)
[    5.060297] ata3: SATA link down (SStatus 0 SControl 300)
[    5.060379] ata4: SATA link down (SStatus 0 SControl 300)
[    5.228974] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    5.229071] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    5.229952] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    5.230061] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    5.230317] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    5.230454] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    5.230941] ata2.00: configured for UDMA/133
[    5.231129] ata1.00: configured for UDMA/133
[    5.231811] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    5.233026] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    5.234775] Freeing unused kernel memory: 11392K
[    5.234838] This architecture does not have kernel memory protection.
[    5.254843] udevd[2874]: starting version 3.2.2
[    5.259802] udevd[2875]: starting eudev-3.2.2
[    5.308515] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    5.308609] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    5.308710] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    5.308920] [drm] platform has no IO space, trying MMIO
[    5.308998] [drm] VGA not enabled on entry, requesting chip POST
[    5.309119] [drm] Using P2A bridge for configuration
[    5.309197] [drm] AST 2500 detected
[    5.309257] [drm] Analog VGA only
[    5.309342] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    5.309516] [TTM] Zone  kernel: Available graphics memory: 133962400 kiB
[    5.309606] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    5.309703] [TTM] Initializing pool allocator
[    5.312599] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    5.315887] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    5.316043] scsi 1:0:0:0: Attached scsi generic sg1 type 0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p1b1d3ef)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP Booting in 9 sec: [sda2] Ubuntu   [24;13H8[24;33H[24;13H7[24;33H[24;13H6[24;33H[24;13H5[24;33H[24;13H4[24;33H[24;13H3[24;33H[24;13H2[24;33H[24;13H1[24;33H[24;10HUbuntu                 [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   31.329606] kexec_core: Starting new kernel
[   52.040403083,5] OPAL: Switch to big-endian OS
[   54.162047027,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201ffe800000 and radix root for kernel: c0000000014a0000
[    0.000000] Linux version 4.10.0-26-generic (buildd@bos01-ppc64el-012) (gcc version 6.3.0 20170406 (Ubuntu 6.3.0-12ubuntu2) ) #30-Ubuntu SMP Tue Jun 27 09:29:34 UTC 2017 (Ubuntu 4.10.0-26.30-generic 4.10.17)
[    0.000000] Found initrd at 0xc000000002d70000:0xc00000000531e9f2
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x07fc7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xefc00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 13120 MiB at 0x0000201cc9000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6300-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x201fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff6ef680-0x201fff6f937f]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x201fff6c5980-0x201fff6cf67f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x201fff6bbc80-0x201fff6c597f]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x201fff6b1f80-0x201fff6bbc7f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x201fff6a8280-0x201fff6b1f7f]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x201fff69e580-0x201fff6a827f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x201fff694880-0x201fff69e57f]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000001ff5eb0000 s149272 r0 d47336 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 4190208
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=UUID=728d2189-0c67-4551-8857-40e2845ba17b ro powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 131072 bytes
[    0.000000] log_buf_len: 1048576 bytes
[    0.000000] early log buf free: 115600(88%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 254330816K/268435456K available (11712K kernel code, 1600K rwdata, 3352K rodata, 4416K init, 3045K bss, 669760K reserved, 13434880K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000428] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001166] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001798] Console: colour dummy device 80x25
[    0.002350] console [hvc0] enabled
[    0.002350] console [hvc0] enabled
[    0.002653] bootconsole [udbg0] disabled
[    0.002653] bootconsole [udbg0] disabled
[    0.003282] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003401] pid_max: default: 180224 minimum: 1408
[    0.005484] Security Framework initialized
[    0.005519] Yama: becoming mindful.
[    0.005619] AppArmor: AppArmor initialized
[    0.009073] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098654] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.151834] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.151963] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.155708] ftrace: allocating 30684 entries in 12 pages
[    0.174241] EEH: PowerNV platform initialized
[    0.174296] POWER9 performance monitor hardware support registered
[    0.176611] smp: Bringing up secondary CPUs ...
[    0.656023] smp: Brought up 8 nodes, 176 CPUs
[    0.656081] numa: Node 0 CPUs: 0-87
[    0.656121] numa: Node 8 CPUs: 88-175
[    0.656169] numa: Node 250 CPUs:
[    0.656206] numa: Node 251 CPUs:
[    0.656243] numa: Node 252 CPUs:
[    0.656280] numa: Node 253 CPUs:
[    0.656326] numa: Node 254 CPUs:
[    0.656363] numa: Node 255 CPUs:
[    0.669901] devtmpfs: initialized
[    0.735956] evm: security.selinux
[    0.735994] evm: security.SMACK64
[    0.736029] evm: security.SMACK64EXEC
[    0.736064] evm: security.SMACK64TRANSMUTE
[    0.736117] evm: security.SMACK64MMAP
[    0.736161] evm: security.ima
[    0.736205] evm: security.capability
[    0.737244] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.737424] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.744348] NET: Registered protocol family 16
[    0.762477] cpuidle: using governor ladder
[    0.782492] cpuidle: using governor menu
[    0.782753] pstore: using zlib compression
[    0.782790] pstore: Registered nvram as persistent store backend
[    0.854604] PCI: Probing PCI hardware
[    0.854730] PCI host bridge to bus 0000:00
[    0.854796] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.854930] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.855027] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.855401] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.855533] PCI host bridge to bus 0001:00
[    0.855586] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.855725] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.855839] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.856521] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.856823] PCI host bridge to bus 0002:00
[    0.856856] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.856993] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.857127] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.857760] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.858245] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.858421] PCI host bridge to bus 0003:00
[    0.858457] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.858590] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.858724] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.859082] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.859213] PCI host bridge to bus 0004:00
[    0.859269] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.859407] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.859525] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.861291] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.862851] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.864798] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.864961] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.865110] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.865272] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.865445] PCI host bridge to bus 0005:00
[    0.865488] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.865643] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.865762] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.866845] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.867056] PCI host bridge to bus 0030:00
[    0.867102] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.867218] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.867353] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.867404] random: fast init done
[    0.867817] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.867949] PCI host bridge to bus 0033:00
[    0.868004] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.868150] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.868263] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.868672] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.868807] PCI host bridge to bus 0034:00
[    0.868838] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.868974] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.869104] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.869507] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.869639] PCI host bridge to bus 0035:00
[    0.869699] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.869829] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.869887] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.870689] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.871646] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.872694] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.872856] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.873050] PCI host bridge to bus 0006:00
[    0.873084] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.873186] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.874391] PCI host bridge to bus 0007:00
[    0.874422] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.874502] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.875650] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.875932] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.876017] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.876119] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.876212] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.876333] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.876656] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.876972] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.881674] IOMMU table initialized, virtual merging enabled
[    0.881731] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.881814] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.881919] iommu: Adding device 0001:01:00.0 to group 0
[    0.881993] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.882072] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.882235] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.882341] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.882422] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.882526] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.882622] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.882730] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.882838] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.882922] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.883011] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.883318] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.883605] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.888310] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.888379] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.888463] iommu: Adding device 0002:02:00.0 to group 1
[    0.888516] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.888585] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.888666] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.888968] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.889056] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.889173] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.889322] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.889621] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.889793] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.889904] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.890018] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.890134] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.890236] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.890325] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.890449] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200842000-0x600c200843fff]
[    0.890558] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200844000-0x600c200845fff]
[    0.890662] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200846000-0x600c200847fff]
[    0.890771] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.890863] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.890954] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.891038] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.891133] pci 0004:02:02.0: BAR 15: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.891252] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.891350] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.891420] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.891501] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.891584] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.891639] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.891690] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.891792] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.891866] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.891949] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.892040] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.892140] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.892238] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.892339] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.892430] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.892530] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.892623] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.892722] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.893011] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.893341] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.898028] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.898099] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.898164] iommu: Adding device 0004:03:00.0 to group 2
[    0.898216] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.898294] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.898399] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.898531] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.898614] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.898696] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.898788] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.899108] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.899170] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.899279] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.899410] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.899726] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.904404] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.904472] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.904547] iommu: Adding device 0004:01:00.0 to group 3
[    0.904632] iommu: Adding device 0004:01:00.1 to group 3
[    0.904700] iommu: Adding device 0004:01:00.2 to group 3
[    0.904786] iommu: Adding device 0004:01:00.3 to group 3
[    0.904833] iommu: Adding device 0004:01:00.4 to group 3
[    0.904897] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.904974] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.905086] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.905215] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.905364] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.905491] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.905651] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.905771] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.905887] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.906032] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.906175] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.906312] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.906632] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.906918] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.911599] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.911665] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.911732] iommu: Adding device 0005:01:00.0 to group 4
[    0.911780] iommu: Adding device 0005:01:00.1 to group 4
[    0.911832] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.911911] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.912057] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.912373] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.912458] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.912770] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.912857] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.913178] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.913312] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.913415] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.913502] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.913831] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.913902] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.913978] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.914307] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.914378] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.914698] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.914755] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.914868] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.915032] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.915185] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.915332] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.915471] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.915576] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.915725] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.915888] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.916041] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.916187] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.916314] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.916471] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.916615] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.916760] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.916904] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.917055] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.917165] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.917294] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.917442] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.917586] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.917742] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.917867] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.918027] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.918155] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.918320] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.918407] pci 0006:00:00.1: Associating to existing PE d
[    0.918482] pci 0006:00:01.0: Associating to existing PE d
[    0.918558] pci 0006:00:01.1: Associating to existing PE d
[    0.918634] pci 0006:00:02.0: Associating to existing PE d
[    0.918679] pci 0006:00:02.1: Associating to existing PE d
[    0.918784] NPU6: Found 1 MMIO ATSD registers
[    0.918789] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.918951] pci 0007:00:00.1: Associating to existing PE d
[    0.919037] pci 0007:00:01.0: Associating to existing PE d
[    0.919119] pci 0007:00:01.1: Associating to existing PE d
[    0.919197] pci 0007:00:02.0: Associating to existing PE d
[    0.919274] pci 0007:00:02.1: Associating to existing PE d
[    0.919358] NPU7: Found 1 MMIO ATSD registers
[    0.923067] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.949872] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.949935] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.954187] SCSI subsystem initialized
[    0.954595] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.954685] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.954777] vgaarb: loaded
[    0.954879] usbcore: registered new interface driver usbfs
[    0.954964] usbcore: registered new interface driver hub
[    0.955507] usbcore: registered new device driver usb
[    0.955571] pps_core: LinuxPPS API ver. 1 registered
[    0.955616] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.955717] PTP clock support registered
[    0.956651] NetLabel: Initializing
[    0.956683] NetLabel:  domain hash size = 128
[    0.956735] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.956839] NetLabel:  unlabeled traffic allowed by default
[    0.957781] clocksource: Switched to clocksource timebase
[    0.977140] VFS: Disk quotas dquot_6.6.0
[    0.977427] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.977968] AppArmor: AppArmor Filesystem Enabled
[    0.981666] NET: Registered protocol family 2
[    0.982492] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.984297] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.984654] TCP: Hash tables configured (established 524288 bind 65536)
[    0.984757] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.985497] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.986768] NET: Registered protocol family 1
[    0.987099] Unpacking initramfs...
[    1.926045] Freeing initrd memory: 38528K
[    1.966991] audit: initializing netlink subsys (disabled)
[    1.967100] audit: type=2000 audit(1502333517.956:1): initialized
[    1.974255] Initialise system trusted keyrings
[    1.974952] workingset: timestamp_bits=38 max_order=22 bucket_order=0
[    1.978414] zbud: loaded
[    1.982637] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    1.983462] fuse init (API version 7.26)
[    1.987971] Key type asymmetric registered
[    1.988001] Asymmetric key parser 'x509' registered
[    1.988062] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 246)
[    1.988411] io scheduler noop registered
[    1.988452] io scheduler deadline registered
[    1.988516] io scheduler cfq registered (default)
[    1.991127] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    2.073598] Console: switching to colour frame buffer device 128x48
[    2.155871] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    2.156227] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    2.156308] hvc0: No interrupts property, using OPAL event
[    2.156738] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
[    2.159038] Linux agpgart interface v0.103
[    2.174622] loop: module loaded
[    2.174962] libphy: Fixed MDIO Bus: probed
[    2.175004] tun: Universal TUN/TAP device driver, 1.6
[    2.175047] tun: (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
[    2.175201] PPP generic driver version 2.4.2
[    2.175364] VFIO - User Level meta-driver version: 0.3
[    2.176340] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    2.176417] ehci-pci: EHCI PCI platform driver
[    2.176509] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    2.176594] ohci-pci: OHCI PCI platform driver
[    2.176694] uhci_hcd: USB Universal Host Controller Interface driver
[    2.176900] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.177011] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    2.177189] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    2.177317] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    2.177950] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    2.178007] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.178098] usb usb1: Product: xHCI Host Controller
[    2.178172] usb usb1: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.178273] usb usb1: SerialNumber: 0001:01:00.0
[    2.178525] hub 1-0:1.0: USB hub found
[    2.178572] hub 1-0:1.0: 4 ports detected
[    2.178936] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    2.178987] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    2.179069] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    2.179215] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    2.179301] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    2.179429] usb usb2: Product: xHCI Host Controller
[    2.179507] usb usb2: Manufacturer: Linux 4.10.0-26-generic xhci-hcd
[    2.179601] usb usb2: SerialNumber: 0001:01:00.0
[    2.179828] hub 2-0:1.0: USB hub found
[    2.179875] hub 2-0:1.0: 4 ports detected
[    2.180606] mousedev: PS/2 mouse device common for all mice
[    2.233728] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    2.233793] i2c /dev entries driver
[    2.234111] device-mapper: uevent: version 1.0.3
[    2.234503] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[    2.234593] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    2.248012] ledtrig-cpu: registered to indicate activity on CPUs
[    2.249094] NET: Registered protocol family 10
[    2.256498] Segment Routing with IPv6
[    2.256567] NET: Registered protocol family 17
[    2.256670] Key type dns_resolver registered
[    2.256955] registered taskstats version 1
[    2.256994] Loading compiled-in X.509 certificates
[    2.261314] Loaded X.509 cert 'Build time autogenerated kernel key: 5d3adc177bbb659f71409a29e976c45eb95b6207'
[    2.261619] zswap: loaded using pool lzo/zbud
[    2.264453] Key type big_key registered
[    2.264486] Key type trusted registered
[    2.267020] Key type encrypted registered
[    2.267054] AppArmor: AppArmor sha1 policy hashing enabled
[    2.267100] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    2.267209] evm: HMAC attrs: 0x1
[    2.333792] rtc-opal opal-rtc: setting system clock to 2017-08-10 02:51:58 UTC (1502333518)
[    2.334545] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.334549] Unable to open file: /etc/keys/x509_evm.der (-2)
[    2.335010] Freeing unused kernel memory: 4416K
[    2.335122] This architecture does not have kernel memory protection.
Loading, please wait...
starting version 232
[    2.561511] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.563891] tg3.c:v3.137 (May 11, 2014)
[    2.568462] [drm] Initialized
[    2.571650] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.571715] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    2.572798] scsi host0: ahci
[    2.573070] scsi host1: ahci
[    2.573316] scsi host2: ahci
[    2.573553] scsi host3: ahci
[    2.573695] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    2.573788] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    2.573895] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    2.573981] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    2.582969] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    2.583507] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    2.583600] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.583735] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.583848] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.591453] [drm] platform has no IO space, trying MMIO
[    2.591501] [drm] Using P2A bridge for configuration
[    2.591546] [drm] AST 2500 detected
[    2.591582] [drm] Analog VGA only
[    2.591633] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    2.591755] [TTM] Zone  kernel: Available graphics memory: 133937792 kiB
[    2.591813] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    2.591897] [TTM] Initializing pool allocator
[    2.591972] [TTM] Initializing DMA pool allocator
[    2.595015] fb: switching to astdrmfb from OFfb vga
[    2.595091] Console: switching to colour dummy device 80x25
[    2.603192] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    2.608343] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    2.608379] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.608412] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.608435] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.612939] Console: switching to colour frame buffer device 128x48
[    2.632907] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    2.657672] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    2.676084] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    2.738216] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    2.887823] ata3: SATA link down (SStatus 0 SControl 300)
[    2.887901] ata4: SATA link down (SStatus 0 SControl 300)
[    3.049671] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.049736] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.050680] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.050745] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.051147] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.051206] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.051414] ata2.00: configured for UDMA/133
[    3.051859] ata1.00: configured for UDMA/133
[    3.052598] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.097887] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.097942] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    3.097945] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    3.098084] sd 0:0:0:0: [sda] Write Protect is off
[    3.098168] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.098714] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.139241]  sda: sda1 sda2
[    3.139692] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    3.149906] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.149961] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    3.149968] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    3.150075] sd 1:0:0:0: [sdb] Write Protect is off
[    3.150139] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.164590] sd 1:0:0:0: [sdb] Attached SCSI removable disk
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ... done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/sda2] fsck.ext4 -a -C0 /dev/sda2 
/dev/sda2: clean, 61754/61054976 files, 4970552/244188416 blocks
done.
[    3.611682] EXT4-fs (sda2): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
[    4.608985] ip_tables: (C) 2000-2006 Netfilter Core Team
[    4.650265] systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    4.651021] systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu 17.04[0m!

[    4.676268] systemd[1]: Set hostname to &lt;w54L&gt;.
[    5.200104] random: crng init done
[    5.367233] systemd[1]: Listening on udev Control Socket.
[[0;32m  OK  [0m] Listening on udev Control Socket.
[    5.367645] systemd[1]: Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
[    5.367936] systemd[1]: Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
[    5.368249] systemd[1]: Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[    5.368503] systemd[1]: Listening on Syslog Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
[    5.368749] systemd[1]: Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
[    5.369349] systemd[1]: Set up automount Arbitrary Executable File Formats File System Automount Point.
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
[[0;32m  OK  [0m] Reached target Remote File Systems.
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Created slice User and Session Slice.
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Created slice System Slice.
         Starting Uncomplicated firewall...
[[0;32m  OK  [0m] Reached target Slices.
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
[[0;32m  OK  [0m] Started Read required files in advance.
         Starting Nameserver information manager...
         Starting Journal Service...
         Mounting POSIX Message Queue File System...
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
         Starting Set the console keyboard layout...
         Mounting Debug File System...
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
         Starting Load Kernel Modules...
         Mounting Huge Pages File System...
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Mounting FUSE Control File System...
         Starting Apply Kernel Variables...
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Mounted FUSE Control File System.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting udev Coldplug all Devices...
         Activating swap /swapfile...
         Starting Load/Save Random Seed...
         Starting Flush Journal to Persistent Storage...
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Set console font and keymap...
         Starting AppArmor initialization...
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting Create Volatile Files and Directories...
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Activated swap /swapfile.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Found device NetXtreme BCM5719 Gigabit Ethernet PCIe.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Network Time Synchronization...
         Starting Update UTMP about System Boot/Shutdown...
[[0;32m  OK  [0m] Started AppArmor initialization.
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Listening on Load/Save RF Kill Switch Status /dev/rfkill Watch.
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
         Starting Login Service...
         Starting LSB: daemon to balance interrupts for SMP systems...
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
[[0;32m  OK  [0m] Started Regular background program processing daemon.
         Starting Accounts Service...
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
[[0;32m  OK  [0m] Reached target Timers.
         Starting System Logging Service...
[[0;32m  OK  [0m] Started Login Service.
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting Permit User Sessions...
         Starting OpenBSD Secure Shell server...
         Starting Network Name Resolution...
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Terminate Plymouth Boot Screen...
         Starting Hold until boot process finishes up...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Accounts Service.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu 17.04 w54L hvc0

w54L login: </msg>
<status endtime="20170810 02:57:18.858" starttime="20170810 02:57:18.824" status="PASS"></status>
</kw>
<status endtime="20170810 02:57:18.858" starttime="20170810 02:56:56.964" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170810 02:57:18.858" starttime="20170810 02:46:37.022" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170810 02:57:18.859" starttime="20170810 02:46:36.988" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170810 02:57:18.862" starttime="20170810 02:46:30.507" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" fail="1" id="s1">Tests</stat>
<stat pass="1" name="Security" fail="0" id="s1-s1">Tests.Security</stat>
<stat pass="1" name="Test Ssl" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
