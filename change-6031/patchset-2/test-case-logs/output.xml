<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170817 19:25:15.969" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/23324/obmc-robot/tests" name="Tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:16.574">Dictionary does not contain key 'host'.</msg>
<status starttime="20170817 19:25:16.574" status="FAIL" endtime="20170817 19:25:16.575"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:16.575">${has_host} = False</msg>
<status starttime="20170817 19:25:16.574" status="PASS" endtime="20170817 19:25:16.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170817 19:25:16.575" status="PASS" endtime="20170817 19:25:16.576"></status>
</kw>
<status starttime="20170817 19:25:16.575" status="PASS" endtime="20170817 19:25:16.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:16.577">${port_num} = 22</msg>
<status starttime="20170817 19:25:16.577" status="PASS" endtime="20170817 19:25:16.577"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:16.578">${SSH_PORT} = 22</msg>
<status starttime="20170817 19:25:16.577" status="PASS" endtime="20170817 19:25:16.578"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:16.578">${https_num} = 443</msg>
<status starttime="20170817 19:25:16.578" status="PASS" endtime="20170817 19:25:16.578"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:16.579">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170817 19:25:16.579" status="PASS" endtime="20170817 19:25:16.579"></status>
</kw>
<status starttime="20170817 19:25:16.577" status="PASS" endtime="20170817 19:25:16.579"></status>
</kw>
<status starttime="20170817 19:25:16.576" status="PASS" endtime="20170817 19:25:16.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:16.581">Dictionary does not contain key 'port'.</msg>
<status starttime="20170817 19:25:16.580" status="FAIL" endtime="20170817 19:25:16.581"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:16.581">${has_port} = False</msg>
<status starttime="20170817 19:25:16.580" status="PASS" endtime="20170817 19:25:16.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170817 19:25:16.582" status="PASS" endtime="20170817 19:25:16.582"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170817 19:25:16.583" status="PASS" endtime="20170817 19:25:16.583"></status>
</kw>
<status starttime="20170817 19:25:16.582" status="PASS" endtime="20170817 19:25:16.583"></status>
</kw>
<status starttime="20170817 19:25:16.581" status="PASS" endtime="20170817 19:25:16.583"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:16.584">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170817 19:25:18.284">Read output: root@witherspoon:~#</msg>
<status starttime="20170817 19:25:16.583" status="PASS" endtime="20170817 19:25:18.284"></status>
</kw>
<status starttime="20170817 19:25:16.573" status="PASS" endtime="20170817 19:25:18.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:18.286">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170817 19:25:18.382">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 19:25:18.383">${output} = VERSION_ID="v1.99.8-263-g9505347"</msg>
<msg level="INFO" timestamp="20170817 19:25:18.383">${stderr} = </msg>
<status starttime="20170817 19:25:18.286" status="PASS" endtime="20170817 19:25:18.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:18.383">Length is 0</msg>
<status starttime="20170817 19:25:18.383" status="PASS" endtime="20170817 19:25:18.384"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:18.384">VERSION_ID="v1.99.8-263-g9505347"</msg>
<status starttime="20170817 19:25:18.384" status="PASS" endtime="20170817 19:25:18.384"></status>
</kw>
<status starttime="20170817 19:25:18.285" status="PASS" endtime="20170817 19:25:18.384"></status>
</kw>
<status starttime="20170817 19:25:18.285" status="PASS" endtime="20170817 19:25:18.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:18.386">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170817 19:25:18.452">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170817 19:25:18.452">${stdout} = </msg>
<msg level="INFO" timestamp="20170817 19:25:18.452">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170817 19:25:18.385" status="PASS" endtime="20170817 19:25:18.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:18.453">Length is 105</msg>
<msg level="FAIL" timestamp="20170817 19:25:18.453">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170817 19:25:18.453" status="FAIL" endtime="20170817 19:25:18.453"></status>
</kw>
<status starttime="20170817 19:25:18.385" status="FAIL" endtime="20170817 19:25:18.453"></status>
</kw>
<status starttime="20170817 19:25:18.385" status="FAIL" endtime="20170817 19:25:18.454"></status>
</kw>
<status starttime="20170817 19:25:18.385" status="PASS" endtime="20170817 19:25:18.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:18.843">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:25:18.844">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170817 19:25:19.621">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170817 19:25:19.621">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170817 19:25:19.698">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 19:25:19.708">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170817 19:25:19.708">${stderr} = </msg>
<msg level="INFO" timestamp="20170817 19:25:19.708">${rc} = 0</msg>
<status starttime="20170817 19:25:18.455" status="PASS" endtime="20170817 19:25:19.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:19.709">Length is 0</msg>
<status starttime="20170817 19:25:19.709" status="PASS" endtime="20170817 19:25:19.709"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:19.709">Length is 11</msg>
<status starttime="20170817 19:25:19.709" status="PASS" endtime="20170817 19:25:19.710"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:19.710">${bmc_model} = Witherspoon</msg>
<status starttime="20170817 19:25:18.454" status="PASS" endtime="20170817 19:25:19.710"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:19.710">BMC Model=Witherspoon</msg>
<status starttime="20170817 19:25:19.710" status="PASS" endtime="20170817 19:25:19.710"></status>
</kw>
<status starttime="20170817 19:25:18.454" status="PASS" endtime="20170817 19:25:19.711"></status>
</kw>
<status starttime="20170817 19:25:18.454" status="PASS" endtime="20170817 19:25:19.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:19.713">Dictionary does not contain key 'host'.</msg>
<status starttime="20170817 19:25:19.713" status="FAIL" endtime="20170817 19:25:19.713"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:19.713">${has_host} = False</msg>
<status starttime="20170817 19:25:19.712" status="PASS" endtime="20170817 19:25:19.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170817 19:25:19.714" status="PASS" endtime="20170817 19:25:19.715"></status>
</kw>
<status starttime="20170817 19:25:19.714" status="PASS" endtime="20170817 19:25:19.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:19.717">${port_num} = 22</msg>
<status starttime="20170817 19:25:19.716" status="PASS" endtime="20170817 19:25:19.717"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:19.717">${SSH_PORT} = 22</msg>
<status starttime="20170817 19:25:19.717" status="PASS" endtime="20170817 19:25:19.717"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:19.718">${https_num} = 443</msg>
<status starttime="20170817 19:25:19.717" status="PASS" endtime="20170817 19:25:19.718"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:19.718">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170817 19:25:19.718" status="PASS" endtime="20170817 19:25:19.718"></status>
</kw>
<status starttime="20170817 19:25:19.716" status="PASS" endtime="20170817 19:25:19.718"></status>
</kw>
<status starttime="20170817 19:25:19.715" status="PASS" endtime="20170817 19:25:19.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:19.719">Dictionary does not contain key 'port'.</msg>
<status starttime="20170817 19:25:19.719" status="FAIL" endtime="20170817 19:25:19.720"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:19.720">${has_port} = False</msg>
<status starttime="20170817 19:25:19.719" status="PASS" endtime="20170817 19:25:19.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170817 19:25:19.722" status="PASS" endtime="20170817 19:25:19.723"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170817 19:25:19.723" status="PASS" endtime="20170817 19:25:19.723"></status>
</kw>
<status starttime="20170817 19:25:19.722" status="PASS" endtime="20170817 19:25:19.723"></status>
</kw>
<status starttime="20170817 19:25:19.720" status="PASS" endtime="20170817 19:25:19.723"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:19.724">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170817 19:25:21.377">Read output: root@witherspoon:~#</msg>
<status starttime="20170817 19:25:19.724" status="PASS" endtime="20170817 19:25:21.377"></status>
</kw>
<status starttime="20170817 19:25:19.711" status="PASS" endtime="20170817 19:25:21.377"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.378">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170817 19:25:21.455">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 19:25:21.455">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170817 19:25:21.455">${stderr} = </msg>
<status starttime="20170817 19:25:21.378" status="PASS" endtime="20170817 19:25:21.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.456">Length is 0</msg>
<status starttime="20170817 19:25:21.455" status="PASS" endtime="20170817 19:25:21.456"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:21.456">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170817 19:25:21.377" status="PASS" endtime="20170817 19:25:21.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170817 19:25:21.456" status="PASS" endtime="20170817 19:25:21.456"></status>
</kw>
<status starttime="20170817 19:25:19.711" status="PASS" endtime="20170817 19:25:21.457"></status>
</kw>
<status starttime="20170817 19:25:19.711" status="PASS" endtime="20170817 19:25:21.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170817 19:25:21.457" status="PASS" endtime="20170817 19:25:21.457"></status>
</kw>
<status starttime="20170817 19:25:16.573" status="PASS" endtime="20170817 19:25:21.457"></status>
</kw>
<suite source="/tmp/fspcibld/23324/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/23324/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.540">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:21.540" status="PASS" endtime="20170817 19:25:21.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:21.541" status="PASS" endtime="20170817 19:25:21.541"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.542">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:21.542" status="PASS" endtime="20170817 19:25:21.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.543">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:21.542" status="PASS" endtime="20170817 19:25:21.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.739">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:21.543" status="PASS" endtime="20170817 19:25:21.740"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:21.740">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:21.740">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:21.543" status="PASS" endtime="20170817 19:25:21.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.741">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:21.740" status="PASS" endtime="20170817 19:25:21.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:21.741" status="PASS" endtime="20170817 19:25:21.741"></status>
</kw>
<status starttime="20170817 19:25:21.539" status="PASS" endtime="20170817 19:25:21.741"></status>
</kw>
<status starttime="20170817 19:25:21.539" status="PASS" endtime="20170817 19:25:21.742"></status>
</kw>
<status starttime="20170817 19:25:21.538" status="PASS" endtime="20170817 19:25:21.742"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.746">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:21.746" status="PASS" endtime="20170817 19:25:21.747"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:21.747" status="PASS" endtime="20170817 19:25:21.747"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.748">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:21.748" status="PASS" endtime="20170817 19:25:21.748"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.748">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:21.748" status="PASS" endtime="20170817 19:25:21.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:21.749" status="PASS" endtime="20170817 19:25:21.952"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:21.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:21.952">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:21.749" status="PASS" endtime="20170817 19:25:21.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:21.953" status="PASS" endtime="20170817 19:25:21.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:21.953" status="PASS" endtime="20170817 19:25:21.954"></status>
</kw>
<status starttime="20170817 19:25:21.745" status="PASS" endtime="20170817 19:25:21.954"></status>
</kw>
<status starttime="20170817 19:25:21.745" status="PASS" endtime="20170817 19:25:21.954"></status>
</kw>
<status starttime="20170817 19:25:21.744" status="PASS" endtime="20170817 19:25:21.954"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.955">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:25:21.954" status="PASS" endtime="20170817 19:25:21.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:21.957">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:21.956" status="PASS" endtime="20170817 19:25:21.957"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:21.958">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:21.958" status="PASS" endtime="20170817 19:25:21.958"></status>
</kw>
<status starttime="20170817 19:25:21.957" status="PASS" endtime="20170817 19:25:21.958"></status>
</kw>
<status starttime="20170817 19:25:21.956" status="PASS" endtime="20170817 19:25:21.958"></status>
</kw>
<status starttime="20170817 19:25:21.955" status="PASS" endtime="20170817 19:25:21.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.046">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:22.046">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:21.958" status="PASS" endtime="20170817 19:25:22.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.048">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:22.047" status="PASS" endtime="20170817 19:25:22.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.049">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:22.048" status="PASS" endtime="20170817 19:25:22.049"></status>
</kw>
<status starttime="20170817 19:25:22.048" status="PASS" endtime="20170817 19:25:22.049"></status>
</kw>
<status starttime="20170817 19:25:22.047" status="PASS" endtime="20170817 19:25:22.049"></status>
</kw>
<status starttime="20170817 19:25:22.046" status="PASS" endtime="20170817 19:25:22.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:22.049">Delete All Sessions</msg>
<status starttime="20170817 19:25:22.049" status="PASS" endtime="20170817 19:25:22.050"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:21.744" status="PASS" endtime="20170817 19:25:22.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:22.050" status="PASS" endtime="20170817 19:25:22.051"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.051">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:22.051">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:22.051">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:22.051" status="PASS" endtime="20170817 19:25:22.051"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.052">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170817 19:25:21.743" status="PASS" endtime="20170817 19:25:22.052"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.052">${host_state} = Off</msg>
<status starttime="20170817 19:25:21.743" status="PASS" endtime="20170817 19:25:22.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:22.054">Off != Quiesced</msg>
<status starttime="20170817 19:25:22.053" status="FAIL" endtime="20170817 19:25:22.054"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.054">${status} = False</msg>
<status starttime="20170817 19:25:22.053" status="PASS" endtime="20170817 19:25:22.054"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.055">${status} = False</msg>
<status starttime="20170817 19:25:21.742" status="PASS" endtime="20170817 19:25:22.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170817 19:25:22.055" status="PASS" endtime="20170817 19:25:22.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170817 19:25:22.056" status="PASS" endtime="20170817 19:25:22.056"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.073">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170817 19:25:22.057" status="PASS" endtime="20170817 19:25:22.073"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.088">${FFDC_DIR_PATH} = </msg>
<status starttime="20170817 19:25:22.073" status="PASS" endtime="20170817 19:25:22.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.091">${cur_time} = 2017-08-17 19:25:22:090458</msg>
<status starttime="20170817 19:25:22.090" status="PASS" endtime="20170817 19:25:22.091"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.092">${cur_time} = 20170817192522090458</msg>
<status starttime="20170817 19:25:22.091" status="PASS" endtime="20170817 19:25:22.092"></status>
</kw>
<status starttime="20170817 19:25:22.090" status="PASS" endtime="20170817 19:25:22.092"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.099">${FFDC_TIME} = 20170817192522090458</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.100">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170817 19:25:22.100" status="PASS" endtime="20170817 19:25:22.100"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.101">${suite_name} = 20170817192522090458_TestsSecurityTestSsl</msg>
<status starttime="20170817 19:25:22.101" status="PASS" endtime="20170817 19:25:22.101"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.101">${test_name} = TestSSLConnection</msg>
<status starttime="20170817 19:25:22.101" status="PASS" endtime="20170817 19:25:22.102"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.102">${test_name} = 20170817192522090458_TestSSLConnection</msg>
<status starttime="20170817 19:25:22.102" status="PASS" endtime="20170817 19:25:22.102"></status>
</kw>
<status starttime="20170817 19:25:22.100" status="PASS" endtime="20170817 19:25:22.102"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.103">${FFDC_DIR_PATH} = /tmp/fspcibld/23324/obmc-robot/logs/20170817192522090458_TestsSecurityTestSsl/20170817192522090458_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170817 19:25:22.107">${FFDC_PREFIX} = 20170817192522090458_</msg>
<status starttime="20170817 19:25:22.089" status="PASS" endtime="20170817 19:25:22.107"></status>
</kw>
<status starttime="20170817 19:25:22.088" status="PASS" endtime="20170817 19:25:22.107"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170817 19:25:22.108" status="PASS" endtime="20170817 19:25:22.108"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:25:22.109">Created directory '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs"&gt;/tmp/fspcibld/23324/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170817 19:25:22.108" status="PASS" endtime="20170817 19:25:22.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:22.110">File '/tmp/fspcibld/23324/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170817 19:25:22.109" status="FAIL" endtime="20170817 19:25:22.110"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.110">${exist} = False</msg>
<status starttime="20170817 19:25:22.109" status="PASS" endtime="20170817 19:25:22.110"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:25:22.111">Created file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:25:22.111" status="PASS" endtime="20170817 19:25:22.111"></status>
</kw>
<status starttime="20170817 19:25:22.110" status="PASS" endtime="20170817 19:25:22.111"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170817 19:25:22.112" status="PASS" endtime="20170817 19:25:22.112"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.113">${cur_time} = 2017-08-17 19:25:22:112679</msg>
<status starttime="20170817 19:25:22.113" status="PASS" endtime="20170817 19:25:22.113"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.113">${cur_time} = 20170817192522112679</msg>
<status starttime="20170817 19:25:22.113" status="PASS" endtime="20170817 19:25:22.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.114">${cur_time} = 20170817192522112679</msg>
<status starttime="20170817 19:25:22.112" status="PASS" endtime="20170817 19:25:22.114"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:25:22.114">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:25:22.114" status="PASS" endtime="20170817 19:25:22.115"></status>
</kw>
<status starttime="20170817 19:25:22.057" status="PASS" endtime="20170817 19:25:22.115"></status>
</kw>
<status starttime="20170817 19:25:21.742" status="PASS" endtime="20170817 19:25:22.115"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170817 19:25:21.538" critical="yes" status="PASS" endtime="20170817 19:25:22.115"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:22.116">Delete All Sessions</msg>
<status starttime="20170817 19:25:22.116" status="PASS" endtime="20170817 19:25:22.116"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170817 19:25:21.459" status="PASS" endtime="20170817 19:25:22.116"></status>
</suite>
<status starttime="20170817 19:25:21.457" status="PASS" endtime="20170817 19:25:22.118"></status>
</suite>
<suite source="/tmp/fspcibld/23324/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.159">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:25:22.158" status="PASS" endtime="20170817 19:25:22.159"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.159">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:25:22.159" status="PASS" endtime="20170817 19:25:22.159"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.160">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:25:22.158" status="PASS" endtime="20170817 19:25:22.160"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.161">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:25:22.161" status="PASS" endtime="20170817 19:25:22.161"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.162">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:25:22.161" status="PASS" endtime="20170817 19:25:22.162"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.162">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:25:22.160" status="PASS" endtime="20170817 19:25:22.162"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.163">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170817 19:25:22.163" status="PASS" endtime="20170817 19:25:22.163"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:25:22.163" status="PASS" endtime="20170817 19:25:22.164"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.168">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 19:25:22.171">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 19:25:22.171">${output} = /tmp/fspcibld/23324/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170817 19:25:22.164" status="PASS" endtime="20170817 19:25:22.171"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 19:25:22.173" status="PASS" endtime="20170817 19:25:22.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170817 19:25:22.174" status="PASS" endtime="20170817 19:25:22.174"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.175">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 19:25:22.174" status="PASS" endtime="20170817 19:25:22.175"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.175">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 19:25:22.162" status="PASS" endtime="20170817 19:25:22.175"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.176">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170817 19:25:22.176" status="PASS" endtime="20170817 19:25:22.176"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:25:22.176" status="PASS" endtime="20170817 19:25:22.177"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.186">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 19:25:22.193">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 19:25:22.193">${os_con_pid} = </msg>
<status starttime="20170817 19:25:22.177" status="PASS" endtime="20170817 19:25:22.194"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170817 19:25:22.204" status="PASS" endtime="20170817 19:25:22.206"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.207">${cmd_buf} = kill -9 </msg>
<status starttime="20170817 19:25:22.206" status="PASS" endtime="20170817 19:25:22.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:25:22.207" status="PASS" endtime="20170817 19:25:22.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.209">${rc} = None</msg>
<msg level="INFO" timestamp="20170817 19:25:22.209">${output} = None</msg>
<status starttime="20170817 19:25:22.208" status="PASS" endtime="20170817 19:25:22.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 19:25:22.209" status="PASS" endtime="20170817 19:25:22.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:22.212">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status starttime="20170817 19:25:22.211" status="FAIL" endtime="20170817 19:25:22.212"></status>
</kw>
<status starttime="20170817 19:25:22.210" status="PASS" endtime="20170817 19:25:22.212"></status>
</kw>
<status starttime="20170817 19:25:22.210" status="PASS" endtime="20170817 19:25:22.212"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.213">${output} = </msg>
<status starttime="20170817 19:25:22.213" status="PASS" endtime="20170817 19:25:22.213"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.213">${loc_quiet} = 1</msg>
<status starttime="20170817 19:25:22.213" status="PASS" endtime="20170817 19:25:22.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170817 19:25:22.214" status="PASS" endtime="20170817 19:25:22.272"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.273">${rc} = 1</msg>
<msg level="INFO" timestamp="20170817 19:25:22.273">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170817 19:25:22.214" status="PASS" endtime="20170817 19:25:22.273"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.274">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170817 19:25:22.160" status="PASS" endtime="20170817 19:25:22.274"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:25:22.276">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170817 19:25:22.275" status="PASS" endtime="20170817 19:25:22.276"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.277">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170817 19:25:22.277" status="PASS" endtime="20170817 19:25:22.277"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:25:22.278" status="PASS" endtime="20170817 19:25:22.278"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.281">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 19:25:22.284">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 19:25:22.284">${output} = /tmp/fspcibld/23324/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170817 19:25:22.278" status="PASS" endtime="20170817 19:25:22.285"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 19:25:22.287" status="PASS" endtime="20170817 19:25:22.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170817 19:25:22.288" status="PASS" endtime="20170817 19:25:22.288"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.289">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 19:25:22.289" status="PASS" endtime="20170817 19:25:22.289"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.290">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 19:25:22.276" status="PASS" endtime="20170817 19:25:22.290"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.291">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170817 19:25:22.290" status="PASS" endtime="20170817 19:25:22.291"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:25:22.291" status="PASS" endtime="20170817 19:25:22.291"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.294">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170817 19:25:22.297">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 19:25:22.297">${output} = </msg>
<status starttime="20170817 19:25:22.291" status="PASS" endtime="20170817 19:25:22.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170817 19:25:22.299" status="PASS" endtime="20170817 19:25:22.300"></status>
</kw>
<status starttime="20170817 19:25:22.157" status="PASS" endtime="20170817 19:25:22.300"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.301">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.303">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170817 19:25:22.303" status="PASS" endtime="20170817 19:25:22.303"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.304">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170817 19:25:22.304" status="PASS" endtime="20170817 19:25:22.304"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.310">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:22.309" status="PASS" endtime="20170817 19:25:22.311"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:22.311" status="PASS" endtime="20170817 19:25:22.312"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.312">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:22.312" status="PASS" endtime="20170817 19:25:22.312"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:22.313" status="PASS" endtime="20170817 19:25:22.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.832">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:22.314" status="PASS" endtime="20170817 19:25:22.832"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:22.833">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:22.833">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:22.313" status="PASS" endtime="20170817 19:25:22.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.833">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:22.833" status="PASS" endtime="20170817 19:25:22.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.834">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:22.834" status="PASS" endtime="20170817 19:25:22.834"></status>
</kw>
<status starttime="20170817 19:25:22.308" status="PASS" endtime="20170817 19:25:22.834"></status>
</kw>
<status starttime="20170817 19:25:22.307" status="PASS" endtime="20170817 19:25:22.834"></status>
</kw>
<status starttime="20170817 19:25:22.306" status="PASS" endtime="20170817 19:25:22.834"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.835">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170817 19:25:22.835" status="PASS" endtime="20170817 19:25:22.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:22.835" status="PASS" endtime="20170817 19:25:22.836"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170817 19:25:22.836" status="PASS" endtime="20170817 19:25:22.836"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:22.838">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170817 19:25:22.837" status="PASS" endtime="20170817 19:25:22.838"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:22.839">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170817 19:25:22.838" status="PASS" endtime="20170817 19:25:22.839"></status>
</kw>
<status starttime="20170817 19:25:22.838" status="PASS" endtime="20170817 19:25:22.839"></status>
</kw>
<status starttime="20170817 19:25:22.836" status="PASS" endtime="20170817 19:25:22.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:23.525">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170817 19:25:23.525">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:22.839" status="PASS" endtime="20170817 19:25:23.525"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:23.527">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:23.526" status="PASS" endtime="20170817 19:25:23.527"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:23.527">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:23.527" status="PASS" endtime="20170817 19:25:23.528"></status>
</kw>
<status starttime="20170817 19:25:23.527" status="PASS" endtime="20170817 19:25:23.528"></status>
</kw>
<status starttime="20170817 19:25:23.525" status="PASS" endtime="20170817 19:25:23.528"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:23.528">Delete All Sessions</msg>
<status starttime="20170817 19:25:23.528" status="PASS" endtime="20170817 19:25:23.528"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:23.528">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:22.305" status="PASS" endtime="20170817 19:25:23.529"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:23.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:23.529" status="PASS" endtime="20170817 19:25:23.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:23.530">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:23.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:23.530">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:23.529" status="PASS" endtime="20170817 19:25:23.530"></status>
</kw>
<status starttime="20170817 19:25:22.303" status="PASS" endtime="20170817 19:25:23.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170817 19:25:23.530" status="PASS" endtime="20170817 19:25:23.531"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:23.535">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:23.535" status="PASS" endtime="20170817 19:25:23.536"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:23.536">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:23.536" status="PASS" endtime="20170817 19:25:23.536"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:23.537">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:23.536" status="PASS" endtime="20170817 19:25:23.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:23.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:23.537" status="PASS" endtime="20170817 19:25:23.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:25.057">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:23.538" status="PASS" endtime="20170817 19:25:25.057"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:25.057">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:25.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:23.538" status="PASS" endtime="20170817 19:25:25.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:25.058">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:25.058" status="PASS" endtime="20170817 19:25:25.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:25.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:25.059" status="PASS" endtime="20170817 19:25:25.059"></status>
</kw>
<status starttime="20170817 19:25:23.534" status="PASS" endtime="20170817 19:25:25.059"></status>
</kw>
<status starttime="20170817 19:25:23.534" status="PASS" endtime="20170817 19:25:25.059"></status>
</kw>
<status starttime="20170817 19:25:23.533" status="PASS" endtime="20170817 19:25:25.060"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:25.060">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:25:25.060" status="PASS" endtime="20170817 19:25:25.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:25.062">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:25.062" status="PASS" endtime="20170817 19:25:25.062"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:25.063">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:25.063" status="PASS" endtime="20170817 19:25:25.063"></status>
</kw>
<status starttime="20170817 19:25:25.063" status="PASS" endtime="20170817 19:25:25.064"></status>
</kw>
<status starttime="20170817 19:25:25.061" status="PASS" endtime="20170817 19:25:25.064"></status>
</kw>
<status starttime="20170817 19:25:25.061" status="PASS" endtime="20170817 19:25:25.064"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:28.991">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:28.991">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:25.064" status="PASS" endtime="20170817 19:25:28.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:28.993">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:28.992" status="PASS" endtime="20170817 19:25:28.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:28.994">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:28.994" status="PASS" endtime="20170817 19:25:28.994"></status>
</kw>
<status starttime="20170817 19:25:28.993" status="PASS" endtime="20170817 19:25:28.994"></status>
</kw>
<status starttime="20170817 19:25:28.992" status="PASS" endtime="20170817 19:25:28.994"></status>
</kw>
<status starttime="20170817 19:25:28.991" status="PASS" endtime="20170817 19:25:28.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:28.995">Delete All Sessions</msg>
<status starttime="20170817 19:25:28.995" status="PASS" endtime="20170817 19:25:28.995"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:28.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:23.533" status="PASS" endtime="20170817 19:25:28.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:28.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:28.995" status="PASS" endtime="20170817 19:25:28.996"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:28.996">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:28.996">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:28.996">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:28.996" status="PASS" endtime="20170817 19:25:28.996"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:28.997">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 19:25:23.532" status="PASS" endtime="20170817 19:25:28.997"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:28.997">${power_state} = Off</msg>
<status starttime="20170817 19:25:23.532" status="PASS" endtime="20170817 19:25:28.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:25:28.997" status="PASS" endtime="20170817 19:25:28.998"></status>
</kw>
<status starttime="20170817 19:25:23.532" status="PASS" endtime="20170817 19:25:28.998"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.002">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:29.001" status="PASS" endtime="20170817 19:25:29.002"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.003">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:29.002" status="PASS" endtime="20170817 19:25:29.003"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.003">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:29.003" status="PASS" endtime="20170817 19:25:29.003"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.004">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:29.003" status="PASS" endtime="20170817 19:25:29.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:29.005" status="PASS" endtime="20170817 19:25:29.178"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:29.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:29.178">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:29.004" status="PASS" endtime="20170817 19:25:29.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:29.179" status="PASS" endtime="20170817 19:25:29.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:29.179" status="PASS" endtime="20170817 19:25:29.180"></status>
</kw>
<status starttime="20170817 19:25:29.001" status="PASS" endtime="20170817 19:25:29.180"></status>
</kw>
<status starttime="20170817 19:25:29.000" status="PASS" endtime="20170817 19:25:29.180"></status>
</kw>
<status starttime="20170817 19:25:28.999" status="PASS" endtime="20170817 19:25:29.180"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.181">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:25:29.180" status="PASS" endtime="20170817 19:25:29.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.183">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:29.182" status="PASS" endtime="20170817 19:25:29.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.184">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:29.184" status="PASS" endtime="20170817 19:25:29.184"></status>
</kw>
<status starttime="20170817 19:25:29.183" status="PASS" endtime="20170817 19:25:29.184"></status>
</kw>
<status starttime="20170817 19:25:29.181" status="PASS" endtime="20170817 19:25:29.184"></status>
</kw>
<status starttime="20170817 19:25:29.181" status="PASS" endtime="20170817 19:25:29.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:29.517">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:29.184" status="PASS" endtime="20170817 19:25:29.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.519">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:29.519" status="PASS" endtime="20170817 19:25:29.519"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.520">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:29.520" status="PASS" endtime="20170817 19:25:29.520"></status>
</kw>
<status starttime="20170817 19:25:29.519" status="PASS" endtime="20170817 19:25:29.521"></status>
</kw>
<status starttime="20170817 19:25:29.518" status="PASS" endtime="20170817 19:25:29.521"></status>
</kw>
<status starttime="20170817 19:25:29.518" status="PASS" endtime="20170817 19:25:29.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:29.521">Delete All Sessions</msg>
<status starttime="20170817 19:25:29.521" status="PASS" endtime="20170817 19:25:29.521"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:29.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:28.999" status="PASS" endtime="20170817 19:25:29.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:29.522" status="PASS" endtime="20170817 19:25:29.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.523">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:29.523">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:29.523">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:29.522" status="PASS" endtime="20170817 19:25:29.523"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:29.523">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170817 19:25:28.998" status="PASS" endtime="20170817 19:25:29.523"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:29.523">${host_state} = Off</msg>
<status starttime="20170817 19:25:28.998" status="PASS" endtime="20170817 19:25:29.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:25:29.524" status="PASS" endtime="20170817 19:25:29.524"></status>
</kw>
<status starttime="20170817 19:25:23.531" status="PASS" endtime="20170817 19:25:29.524"></status>
</kw>
<status starttime="20170817 19:25:23.531" status="PASS" endtime="20170817 19:25:29.524"></status>
</kw>
<status starttime="20170817 19:25:22.302" status="PASS" endtime="20170817 19:25:29.524"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.525">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170817 19:25:29.525" status="PASS" endtime="20170817 19:25:29.525"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.526">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170817 19:25:29.526" status="PASS" endtime="20170817 19:25:29.526"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:29.529">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:29.529" status="PASS" endtime="20170817 19:25:29.529"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:29.530" status="PASS" endtime="20170817 19:25:29.530"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.531">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:29.530" status="PASS" endtime="20170817 19:25:29.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:29.531">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:29.531" status="PASS" endtime="20170817 19:25:29.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.152">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:29.532" status="PASS" endtime="20170817 19:25:30.152"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:30.152">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:30.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:29.532" status="PASS" endtime="20170817 19:25:30.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.153">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:30.152" status="PASS" endtime="20170817 19:25:30.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:30.153" status="PASS" endtime="20170817 19:25:30.154"></status>
</kw>
<status starttime="20170817 19:25:29.528" status="PASS" endtime="20170817 19:25:30.154"></status>
</kw>
<status starttime="20170817 19:25:29.528" status="PASS" endtime="20170817 19:25:30.154"></status>
</kw>
<status starttime="20170817 19:25:29.527" status="PASS" endtime="20170817 19:25:30.154"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.154">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170817 19:25:30.154" status="PASS" endtime="20170817 19:25:30.154"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.155">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:30.155" status="PASS" endtime="20170817 19:25:30.155"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170817 19:25:30.155" status="PASS" endtime="20170817 19:25:30.156"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.157">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170817 19:25:30.157" status="PASS" endtime="20170817 19:25:30.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.158">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170817 19:25:30.158" status="PASS" endtime="20170817 19:25:30.159"></status>
</kw>
<status starttime="20170817 19:25:30.158" status="PASS" endtime="20170817 19:25:30.159"></status>
</kw>
<status starttime="20170817 19:25:30.156" status="PASS" endtime="20170817 19:25:30.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.598">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170817 19:25:30.598">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:30.159" status="PASS" endtime="20170817 19:25:30.598"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.599">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:30.599" status="PASS" endtime="20170817 19:25:30.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.600">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:30.600" status="PASS" endtime="20170817 19:25:30.600"></status>
</kw>
<status starttime="20170817 19:25:30.599" status="PASS" endtime="20170817 19:25:30.600"></status>
</kw>
<status starttime="20170817 19:25:30.598" status="PASS" endtime="20170817 19:25:30.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:30.601">Delete All Sessions</msg>
<status starttime="20170817 19:25:30.601" status="PASS" endtime="20170817 19:25:30.601"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:30.601">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:29.527" status="PASS" endtime="20170817 19:25:30.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.602">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:30.602" status="PASS" endtime="20170817 19:25:30.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.603">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:30.603">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:30.603">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:30.602" status="PASS" endtime="20170817 19:25:30.603"></status>
</kw>
<status starttime="20170817 19:25:29.525" status="PASS" endtime="20170817 19:25:30.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170817 19:25:30.603" status="PASS" endtime="20170817 19:25:30.604"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.609">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:30.608" status="PASS" endtime="20170817 19:25:30.609"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.609">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:30.609" status="PASS" endtime="20170817 19:25:30.609"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.610">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:30.610" status="PASS" endtime="20170817 19:25:30.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.611">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:30.610" status="PASS" endtime="20170817 19:25:30.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.976">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:30.611" status="PASS" endtime="20170817 19:25:30.976"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:30.976">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:30.977">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:30.611" status="PASS" endtime="20170817 19:25:30.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.977">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:30.977" status="PASS" endtime="20170817 19:25:30.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:30.978" status="PASS" endtime="20170817 19:25:30.978"></status>
</kw>
<status starttime="20170817 19:25:30.607" status="PASS" endtime="20170817 19:25:30.978"></status>
</kw>
<status starttime="20170817 19:25:30.607" status="PASS" endtime="20170817 19:25:30.978"></status>
</kw>
<status starttime="20170817 19:25:30.606" status="PASS" endtime="20170817 19:25:30.978"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.979">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:25:30.979" status="PASS" endtime="20170817 19:25:30.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:30.981">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:30.980" status="PASS" endtime="20170817 19:25:30.981"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:30.982">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:30.982" status="PASS" endtime="20170817 19:25:30.982"></status>
</kw>
<status starttime="20170817 19:25:30.981" status="PASS" endtime="20170817 19:25:30.982"></status>
</kw>
<status starttime="20170817 19:25:30.980" status="PASS" endtime="20170817 19:25:30.982"></status>
</kw>
<status starttime="20170817 19:25:30.979" status="PASS" endtime="20170817 19:25:30.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:34.054">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:34.054">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:30.983" status="PASS" endtime="20170817 19:25:34.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:34.056">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:34.056" status="PASS" endtime="20170817 19:25:34.056"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:34.057">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:34.057" status="PASS" endtime="20170817 19:25:34.057"></status>
</kw>
<status starttime="20170817 19:25:34.057" status="PASS" endtime="20170817 19:25:34.058"></status>
</kw>
<status starttime="20170817 19:25:34.055" status="PASS" endtime="20170817 19:25:34.058"></status>
</kw>
<status starttime="20170817 19:25:34.055" status="PASS" endtime="20170817 19:25:34.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:34.058">Delete All Sessions</msg>
<status starttime="20170817 19:25:34.058" status="PASS" endtime="20170817 19:25:34.058"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:34.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:30.606" status="PASS" endtime="20170817 19:25:34.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:34.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:34.059" status="PASS" endtime="20170817 19:25:34.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:34.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:34.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:34.060">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:34.059" status="PASS" endtime="20170817 19:25:34.060"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:34.060">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 19:25:30.605" status="PASS" endtime="20170817 19:25:34.060"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:34.060">${power_state} = Off</msg>
<status starttime="20170817 19:25:30.605" status="PASS" endtime="20170817 19:25:34.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:34.061">On != Off</msg>
<status starttime="20170817 19:25:34.061" status="FAIL" endtime="20170817 19:25:34.061"></status>
</kw>
<status starttime="20170817 19:25:30.604" status="FAIL" endtime="20170817 19:25:34.061"></status>
</kw>
<status starttime="20170817 19:25:30.604" status="FAIL" endtime="20170817 19:25:34.061"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:44.067">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:44.067" status="PASS" endtime="20170817 19:25:44.067"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:44.068" status="PASS" endtime="20170817 19:25:44.068"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.069">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:44.068" status="PASS" endtime="20170817 19:25:44.069"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:44.069" status="PASS" endtime="20170817 19:25:44.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:44.575">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:44.070" status="PASS" endtime="20170817 19:25:44.576"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:44.576">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:44.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:44.070" status="PASS" endtime="20170817 19:25:44.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:44.577">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:44.576" status="PASS" endtime="20170817 19:25:44.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:44.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:44.577" status="PASS" endtime="20170817 19:25:44.577"></status>
</kw>
<status starttime="20170817 19:25:44.066" status="PASS" endtime="20170817 19:25:44.577"></status>
</kw>
<status starttime="20170817 19:25:44.066" status="PASS" endtime="20170817 19:25:44.578"></status>
</kw>
<status starttime="20170817 19:25:44.065" status="PASS" endtime="20170817 19:25:44.578"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.578">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:25:44.578" status="PASS" endtime="20170817 19:25:44.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.581">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:44.580" status="PASS" endtime="20170817 19:25:44.581"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:44.582">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:44.581" status="PASS" endtime="20170817 19:25:44.582"></status>
</kw>
<status starttime="20170817 19:25:44.581" status="PASS" endtime="20170817 19:25:44.582"></status>
</kw>
<status starttime="20170817 19:25:44.579" status="PASS" endtime="20170817 19:25:44.582"></status>
</kw>
<status starttime="20170817 19:25:44.579" status="PASS" endtime="20170817 19:25:44.582"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.870">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:44.870">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:44.582" status="PASS" endtime="20170817 19:25:44.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.873">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:44.873" status="PASS" endtime="20170817 19:25:44.873"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:44.875">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:44.874" status="PASS" endtime="20170817 19:25:44.875"></status>
</kw>
<status starttime="20170817 19:25:44.874" status="PASS" endtime="20170817 19:25:44.875"></status>
</kw>
<status starttime="20170817 19:25:44.872" status="PASS" endtime="20170817 19:25:44.875"></status>
</kw>
<status starttime="20170817 19:25:44.871" status="PASS" endtime="20170817 19:25:44.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:44.876">Delete All Sessions</msg>
<status starttime="20170817 19:25:44.876" status="PASS" endtime="20170817 19:25:44.876"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:44.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:44.064" status="PASS" endtime="20170817 19:25:44.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:44.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:44.877" status="PASS" endtime="20170817 19:25:44.878"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:44.878">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:44.879">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:44.879">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:44.878" status="PASS" endtime="20170817 19:25:44.879"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:44.879">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 19:25:44.064" status="PASS" endtime="20170817 19:25:44.879"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:44.880">${power_state} = Off</msg>
<status starttime="20170817 19:25:44.063" status="PASS" endtime="20170817 19:25:44.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:44.881">On != Off</msg>
<status starttime="20170817 19:25:44.880" status="FAIL" endtime="20170817 19:25:44.881"></status>
</kw>
<status starttime="20170817 19:25:44.063" status="FAIL" endtime="20170817 19:25:44.881"></status>
</kw>
<status starttime="20170817 19:25:44.062" status="FAIL" endtime="20170817 19:25:44.881"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:54.890">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:54.889" status="PASS" endtime="20170817 19:25:54.890"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:54.891">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:54.891" status="PASS" endtime="20170817 19:25:54.891"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:54.892">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:54.891" status="PASS" endtime="20170817 19:25:54.892"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:54.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:54.893" status="PASS" endtime="20170817 19:25:54.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.090">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:54.895" status="PASS" endtime="20170817 19:25:55.090"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.090">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:55.090">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:54.894" status="PASS" endtime="20170817 19:25:55.091"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.092">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.091" status="PASS" endtime="20170817 19:25:55.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.092" status="PASS" endtime="20170817 19:25:55.093"></status>
</kw>
<status starttime="20170817 19:25:54.888" status="PASS" endtime="20170817 19:25:55.093"></status>
</kw>
<status starttime="20170817 19:25:54.887" status="PASS" endtime="20170817 19:25:55.093"></status>
</kw>
<status starttime="20170817 19:25:54.886" status="PASS" endtime="20170817 19:25:55.093"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.094">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:25:55.094" status="PASS" endtime="20170817 19:25:55.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.096">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:55.095" status="PASS" endtime="20170817 19:25:55.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.097">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:55.097" status="PASS" endtime="20170817 19:25:55.097"></status>
</kw>
<status starttime="20170817 19:25:55.096" status="PASS" endtime="20170817 19:25:55.097"></status>
</kw>
<status starttime="20170817 19:25:55.095" status="PASS" endtime="20170817 19:25:55.097"></status>
</kw>
<status starttime="20170817 19:25:55.094" status="PASS" endtime="20170817 19:25:55.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.170">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:55.170">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.098" status="PASS" endtime="20170817 19:25:55.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.173">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:55.172" status="PASS" endtime="20170817 19:25:55.173"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.174">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:55.174" status="PASS" endtime="20170817 19:25:55.175"></status>
</kw>
<status starttime="20170817 19:25:55.173" status="PASS" endtime="20170817 19:25:55.175"></status>
</kw>
<status starttime="20170817 19:25:55.171" status="PASS" endtime="20170817 19:25:55.175"></status>
</kw>
<status starttime="20170817 19:25:55.170" status="PASS" endtime="20170817 19:25:55.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:55.176">Delete All Sessions</msg>
<status starttime="20170817 19:25:55.175" status="PASS" endtime="20170817 19:25:55.176"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:54.885" status="PASS" endtime="20170817 19:25:55.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.176" status="PASS" endtime="20170817 19:25:55.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.178">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:55.178">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:55.178">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:55.177" status="PASS" endtime="20170817 19:25:55.178"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.179">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:25:54.884" status="PASS" endtime="20170817 19:25:55.179"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.179">${power_state} = On</msg>
<status starttime="20170817 19:25:54.884" status="PASS" endtime="20170817 19:25:55.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:25:55.179" status="PASS" endtime="20170817 19:25:55.180"></status>
</kw>
<status starttime="20170817 19:25:54.883" status="PASS" endtime="20170817 19:25:55.180"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.186">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:55.185" status="PASS" endtime="20170817 19:25:55.186"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.187">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:55.187" status="PASS" endtime="20170817 19:25:55.187"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.188">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:55.188" status="PASS" endtime="20170817 19:25:55.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:55.189" status="PASS" endtime="20170817 19:25:55.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.369">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:55.191" status="PASS" endtime="20170817 19:25:55.370"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.370">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:55.370">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.190" status="PASS" endtime="20170817 19:25:55.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.371">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.370" status="PASS" endtime="20170817 19:25:55.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.371" status="PASS" endtime="20170817 19:25:55.372"></status>
</kw>
<status starttime="20170817 19:25:55.185" status="PASS" endtime="20170817 19:25:55.372"></status>
</kw>
<status starttime="20170817 19:25:55.184" status="PASS" endtime="20170817 19:25:55.372"></status>
</kw>
<status starttime="20170817 19:25:55.183" status="PASS" endtime="20170817 19:25:55.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.373">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:25:55.373" status="PASS" endtime="20170817 19:25:55.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.375">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:55.375" status="PASS" endtime="20170817 19:25:55.375"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.376">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:25:55.376" status="PASS" endtime="20170817 19:25:55.376"></status>
</kw>
<status starttime="20170817 19:25:55.376" status="PASS" endtime="20170817 19:25:55.377"></status>
</kw>
<status starttime="20170817 19:25:55.374" status="PASS" endtime="20170817 19:25:55.377"></status>
</kw>
<status starttime="20170817 19:25:55.373" status="PASS" endtime="20170817 19:25:55.377"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.465">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:55.466">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.377" status="PASS" endtime="20170817 19:25:55.466"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.469">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:55.468" status="PASS" endtime="20170817 19:25:55.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.470">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:55.470" status="PASS" endtime="20170817 19:25:55.471"></status>
</kw>
<status starttime="20170817 19:25:55.469" status="PASS" endtime="20170817 19:25:55.471"></status>
</kw>
<status starttime="20170817 19:25:55.467" status="PASS" endtime="20170817 19:25:55.471"></status>
</kw>
<status starttime="20170817 19:25:55.466" status="PASS" endtime="20170817 19:25:55.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:55.472">Delete All Sessions</msg>
<status starttime="20170817 19:25:55.471" status="PASS" endtime="20170817 19:25:55.472"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.182" status="PASS" endtime="20170817 19:25:55.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.472" status="PASS" endtime="20170817 19:25:55.473"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.474">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:55.474">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:55.474">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:55.473" status="PASS" endtime="20170817 19:25:55.474"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.474">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:25:55.181" status="PASS" endtime="20170817 19:25:55.474"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.475">${host_state} = Running</msg>
<status starttime="20170817 19:25:55.180" status="PASS" endtime="20170817 19:25:55.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:25:55.475" status="PASS" endtime="20170817 19:25:55.476"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.482">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:55.482" status="PASS" endtime="20170817 19:25:55.483"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.484">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:55.483" status="PASS" endtime="20170817 19:25:55.484"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.485">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:55.484" status="PASS" endtime="20170817 19:25:55.485"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.486">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:55.485" status="PASS" endtime="20170817 19:25:55.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.665">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:55.487" status="PASS" endtime="20170817 19:25:55.666"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.666">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:55.666">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.486" status="PASS" endtime="20170817 19:25:55.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.667">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.666" status="PASS" endtime="20170817 19:25:55.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.667" status="PASS" endtime="20170817 19:25:55.668"></status>
</kw>
<status starttime="20170817 19:25:55.481" status="PASS" endtime="20170817 19:25:55.668"></status>
</kw>
<status starttime="20170817 19:25:55.480" status="PASS" endtime="20170817 19:25:55.669"></status>
</kw>
<status starttime="20170817 19:25:55.480" status="PASS" endtime="20170817 19:25:55.669"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.670">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:25:55.669" status="PASS" endtime="20170817 19:25:55.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.673">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:25:55.672" status="PASS" endtime="20170817 19:25:55.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.674">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:25:55.674" status="PASS" endtime="20170817 19:25:55.674"></status>
</kw>
<status starttime="20170817 19:25:55.673" status="PASS" endtime="20170817 19:25:55.674"></status>
</kw>
<status starttime="20170817 19:25:55.671" status="PASS" endtime="20170817 19:25:55.674"></status>
</kw>
<status starttime="20170817 19:25:55.670" status="PASS" endtime="20170817 19:25:55.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.741">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:55.741">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.675" status="PASS" endtime="20170817 19:25:55.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.744">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:55.743" status="PASS" endtime="20170817 19:25:55.744"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.745">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:55.745" status="PASS" endtime="20170817 19:25:55.746"></status>
</kw>
<status starttime="20170817 19:25:55.744" status="PASS" endtime="20170817 19:25:55.746"></status>
</kw>
<status starttime="20170817 19:25:55.743" status="PASS" endtime="20170817 19:25:55.746"></status>
</kw>
<status starttime="20170817 19:25:55.742" status="PASS" endtime="20170817 19:25:55.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:55.747">Delete All Sessions</msg>
<status starttime="20170817 19:25:55.746" status="PASS" endtime="20170817 19:25:55.747"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.479" status="PASS" endtime="20170817 19:25:55.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:55.747" status="PASS" endtime="20170817 19:25:55.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.749">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:55.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:55.749">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:55.748" status="PASS" endtime="20170817 19:25:55.749"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.750">${state} = Off</msg>
<status starttime="20170817 19:25:55.478" status="PASS" endtime="20170817 19:25:55.750"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.750">${boot_progress} = Off</msg>
<status starttime="20170817 19:25:55.477" status="PASS" endtime="20170817 19:25:55.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:25:55.751">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:25:55.750" status="FAIL" endtime="20170817 19:25:55.751"></status>
</kw>
<status starttime="20170817 19:25:55.477" status="FAIL" endtime="20170817 19:25:55.751"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:55.752">${status} = False</msg>
<status starttime="20170817 19:25:55.477" status="PASS" endtime="20170817 19:25:55.752"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:25:55.752" status="PASS" endtime="20170817 19:25:55.752"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:55.759">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:25:55.758" status="PASS" endtime="20170817 19:25:55.763"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.765">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:25:55.764" status="PASS" endtime="20170817 19:25:55.765"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.766">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:25:55.765" status="PASS" endtime="20170817 19:25:55.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:55.767">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:25:55.767" status="PASS" endtime="20170817 19:25:55.767"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:56.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:25:55.769" status="PASS" endtime="20170817 19:25:56.030"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:56.031">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:25:56.031">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.768" status="PASS" endtime="20170817 19:25:56.031"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:56.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:56.031" status="PASS" endtime="20170817 19:25:56.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:56.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:56.032" status="PASS" endtime="20170817 19:25:56.032"></status>
</kw>
<status starttime="20170817 19:25:55.757" status="PASS" endtime="20170817 19:25:56.032"></status>
</kw>
<status starttime="20170817 19:25:55.757" status="PASS" endtime="20170817 19:25:56.032"></status>
</kw>
<status starttime="20170817 19:25:55.755" status="PASS" endtime="20170817 19:25:56.033"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:56.033">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:25:56.033" status="PASS" endtime="20170817 19:25:56.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:56.035">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:25:56.035" status="PASS" endtime="20170817 19:25:56.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:56.036">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:25:56.036" status="PASS" endtime="20170817 19:25:56.036"></status>
</kw>
<status starttime="20170817 19:25:56.035" status="PASS" endtime="20170817 19:25:56.036"></status>
</kw>
<status starttime="20170817 19:25:56.034" status="PASS" endtime="20170817 19:25:56.037"></status>
</kw>
<status starttime="20170817 19:25:56.033" status="PASS" endtime="20170817 19:25:56.037"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:56.192">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:25:56.192">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:56.037" status="PASS" endtime="20170817 19:25:56.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:56.194">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:56.194" status="PASS" endtime="20170817 19:25:56.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:56.195">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:25:56.195" status="PASS" endtime="20170817 19:25:56.195"></status>
</kw>
<status starttime="20170817 19:25:56.194" status="PASS" endtime="20170817 19:25:56.195"></status>
</kw>
<status starttime="20170817 19:25:56.193" status="PASS" endtime="20170817 19:25:56.195"></status>
</kw>
<status starttime="20170817 19:25:56.193" status="PASS" endtime="20170817 19:25:56.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:25:56.196">Delete All Sessions</msg>
<status starttime="20170817 19:25:56.196" status="PASS" endtime="20170817 19:25:56.196"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:56.196">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:25:55.754" status="PASS" endtime="20170817 19:25:56.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:56.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:25:56.196" status="PASS" endtime="20170817 19:25:56.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:25:56.197">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:25:56.197">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:25:56.197">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:25:56.197" status="PASS" endtime="20170817 19:25:56.197"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:56.198">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:25:55.753" status="PASS" endtime="20170817 19:25:56.198"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:25:56.198">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:25:55.753" status="PASS" endtime="20170817 19:25:56.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:25:56.198">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:25:56.199">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:25:56.198" status="FAIL" endtime="20170817 19:25:56.199"></status>
</kw>
<status starttime="20170817 19:25:55.476" status="FAIL" endtime="20170817 19:25:56.199"></status>
</kw>
<status starttime="20170817 19:25:54.882" status="FAIL" endtime="20170817 19:25:56.199"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.205">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:06.204" status="PASS" endtime="20170817 19:26:06.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:06.205" status="PASS" endtime="20170817 19:26:06.206"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.206">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:06.206" status="PASS" endtime="20170817 19:26:06.206"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.207">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:06.207" status="PASS" endtime="20170817 19:26:06.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:06.208" status="PASS" endtime="20170817 19:26:06.526"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:06.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.207" status="PASS" endtime="20170817 19:26:06.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.527">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:06.527" status="PASS" endtime="20170817 19:26:06.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:06.528" status="PASS" endtime="20170817 19:26:06.528"></status>
</kw>
<status starttime="20170817 19:26:06.204" status="PASS" endtime="20170817 19:26:06.528"></status>
</kw>
<status starttime="20170817 19:26:06.203" status="PASS" endtime="20170817 19:26:06.528"></status>
</kw>
<status starttime="20170817 19:26:06.203" status="PASS" endtime="20170817 19:26:06.528"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.529">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:26:06.529" status="PASS" endtime="20170817 19:26:06.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.531">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:06.530" status="PASS" endtime="20170817 19:26:06.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.532">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:06.532" status="PASS" endtime="20170817 19:26:06.532"></status>
</kw>
<status starttime="20170817 19:26:06.531" status="PASS" endtime="20170817 19:26:06.532"></status>
</kw>
<status starttime="20170817 19:26:06.530" status="PASS" endtime="20170817 19:26:06.532"></status>
</kw>
<status starttime="20170817 19:26:06.529" status="PASS" endtime="20170817 19:26:06.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.597">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:06.597">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.533" status="PASS" endtime="20170817 19:26:06.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.599">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:06.598" status="PASS" endtime="20170817 19:26:06.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.599">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:06.599" status="PASS" endtime="20170817 19:26:06.600"></status>
</kw>
<status starttime="20170817 19:26:06.599" status="PASS" endtime="20170817 19:26:06.600"></status>
</kw>
<status starttime="20170817 19:26:06.598" status="PASS" endtime="20170817 19:26:06.601"></status>
</kw>
<status starttime="20170817 19:26:06.597" status="PASS" endtime="20170817 19:26:06.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:06.602">Delete All Sessions</msg>
<status starttime="20170817 19:26:06.602" status="PASS" endtime="20170817 19:26:06.603"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.603">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.202" status="PASS" endtime="20170817 19:26:06.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:06.604" status="PASS" endtime="20170817 19:26:06.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.605">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:06.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:06.606">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:06.605" status="PASS" endtime="20170817 19:26:06.606"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.606">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:26:06.201" status="PASS" endtime="20170817 19:26:06.607"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.607">${power_state} = On</msg>
<status starttime="20170817 19:26:06.201" status="PASS" endtime="20170817 19:26:06.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:26:06.607" status="PASS" endtime="20170817 19:26:06.607"></status>
</kw>
<status starttime="20170817 19:26:06.200" status="PASS" endtime="20170817 19:26:06.607"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.611">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:06.611" status="PASS" endtime="20170817 19:26:06.611"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.612">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:06.612" status="PASS" endtime="20170817 19:26:06.612"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.612">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:06.612" status="PASS" endtime="20170817 19:26:06.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.613">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:06.613" status="PASS" endtime="20170817 19:26:06.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:06.614" status="PASS" endtime="20170817 19:26:06.793"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.793">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:06.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.613" status="PASS" endtime="20170817 19:26:06.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:06.793" status="PASS" endtime="20170817 19:26:06.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:06.794" status="PASS" endtime="20170817 19:26:06.794"></status>
</kw>
<status starttime="20170817 19:26:06.610" status="PASS" endtime="20170817 19:26:06.795"></status>
</kw>
<status starttime="20170817 19:26:06.610" status="PASS" endtime="20170817 19:26:06.795"></status>
</kw>
<status starttime="20170817 19:26:06.609" status="PASS" endtime="20170817 19:26:06.795"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.796">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:26:06.795" status="PASS" endtime="20170817 19:26:06.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.798">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:06.797" status="PASS" endtime="20170817 19:26:06.798"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.799">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:06.799" status="PASS" endtime="20170817 19:26:06.799"></status>
</kw>
<status starttime="20170817 19:26:06.798" status="PASS" endtime="20170817 19:26:06.799"></status>
</kw>
<status starttime="20170817 19:26:06.797" status="PASS" endtime="20170817 19:26:06.799"></status>
</kw>
<status starttime="20170817 19:26:06.796" status="PASS" endtime="20170817 19:26:06.799"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.888">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:06.888">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.800" status="PASS" endtime="20170817 19:26:06.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.890">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:06.889" status="PASS" endtime="20170817 19:26:06.890"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.892">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:06.892" status="PASS" endtime="20170817 19:26:06.892"></status>
</kw>
<status starttime="20170817 19:26:06.891" status="PASS" endtime="20170817 19:26:06.892"></status>
</kw>
<status starttime="20170817 19:26:06.889" status="PASS" endtime="20170817 19:26:06.893"></status>
</kw>
<status starttime="20170817 19:26:06.888" status="PASS" endtime="20170817 19:26:06.893"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:06.893">Delete All Sessions</msg>
<status starttime="20170817 19:26:06.893" status="PASS" endtime="20170817 19:26:06.893"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.609" status="PASS" endtime="20170817 19:26:06.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:06.894" status="PASS" endtime="20170817 19:26:06.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.895">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:06.895">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:06.895">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:06.894" status="PASS" endtime="20170817 19:26:06.895"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.895">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:26:06.608" status="PASS" endtime="20170817 19:26:06.895"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:06.895">${host_state} = Running</msg>
<status starttime="20170817 19:26:06.608" status="PASS" endtime="20170817 19:26:06.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:26:06.896" status="PASS" endtime="20170817 19:26:06.896"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:06.901">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:06.900" status="PASS" endtime="20170817 19:26:06.901"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.902">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:06.902" status="PASS" endtime="20170817 19:26:06.902"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.902">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:06.902" status="PASS" endtime="20170817 19:26:06.902"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:06.903">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:06.903" status="PASS" endtime="20170817 19:26:06.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.088">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:06.904" status="PASS" endtime="20170817 19:26:07.089"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.089">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:07.089">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.903" status="PASS" endtime="20170817 19:26:07.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.089">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:07.089" status="PASS" endtime="20170817 19:26:07.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:07.090" status="PASS" endtime="20170817 19:26:07.090"></status>
</kw>
<status starttime="20170817 19:26:06.900" status="PASS" endtime="20170817 19:26:07.090"></status>
</kw>
<status starttime="20170817 19:26:06.899" status="PASS" endtime="20170817 19:26:07.090"></status>
</kw>
<status starttime="20170817 19:26:06.899" status="PASS" endtime="20170817 19:26:07.090"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.091">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:26:07.091" status="PASS" endtime="20170817 19:26:07.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.094">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:07.092" status="PASS" endtime="20170817 19:26:07.094"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.095">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:07.095" status="PASS" endtime="20170817 19:26:07.095"></status>
</kw>
<status starttime="20170817 19:26:07.094" status="PASS" endtime="20170817 19:26:07.095"></status>
</kw>
<status starttime="20170817 19:26:07.092" status="PASS" endtime="20170817 19:26:07.095"></status>
</kw>
<status starttime="20170817 19:26:07.091" status="PASS" endtime="20170817 19:26:07.095"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.173">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:07.173">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:07.096" status="PASS" endtime="20170817 19:26:07.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.175">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:07.174" status="PASS" endtime="20170817 19:26:07.175"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.176">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:07.176" status="PASS" endtime="20170817 19:26:07.176"></status>
</kw>
<status starttime="20170817 19:26:07.175" status="PASS" endtime="20170817 19:26:07.176"></status>
</kw>
<status starttime="20170817 19:26:07.174" status="PASS" endtime="20170817 19:26:07.176"></status>
</kw>
<status starttime="20170817 19:26:07.173" status="PASS" endtime="20170817 19:26:07.176"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:07.177">Delete All Sessions</msg>
<status starttime="20170817 19:26:07.177" status="PASS" endtime="20170817 19:26:07.177"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:06.898" status="PASS" endtime="20170817 19:26:07.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:07.179" status="PASS" endtime="20170817 19:26:07.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.180">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:07.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:07.180">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:07.179" status="PASS" endtime="20170817 19:26:07.180"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.180">${state} = Off</msg>
<status starttime="20170817 19:26:06.897" status="PASS" endtime="20170817 19:26:07.180"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.180">${boot_progress} = Off</msg>
<status starttime="20170817 19:26:06.897" status="PASS" endtime="20170817 19:26:07.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:26:07.181">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:26:07.181" status="FAIL" endtime="20170817 19:26:07.181"></status>
</kw>
<status starttime="20170817 19:26:06.897" status="FAIL" endtime="20170817 19:26:07.181"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.182">${status} = False</msg>
<status starttime="20170817 19:26:06.896" status="PASS" endtime="20170817 19:26:07.182"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:26:07.182" status="PASS" endtime="20170817 19:26:07.182"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.187">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:07.187" status="PASS" endtime="20170817 19:26:07.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:07.188" status="PASS" endtime="20170817 19:26:07.188"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.189">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:07.188" status="PASS" endtime="20170817 19:26:07.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:07.189" status="PASS" endtime="20170817 19:26:07.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:07.190" status="PASS" endtime="20170817 19:26:07.365"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.365">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:07.365">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:07.189" status="PASS" endtime="20170817 19:26:07.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.366">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:07.366" status="PASS" endtime="20170817 19:26:07.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:07.366" status="PASS" endtime="20170817 19:26:07.367"></status>
</kw>
<status starttime="20170817 19:26:07.186" status="PASS" endtime="20170817 19:26:07.367"></status>
</kw>
<status starttime="20170817 19:26:07.186" status="PASS" endtime="20170817 19:26:07.367"></status>
</kw>
<status starttime="20170817 19:26:07.185" status="PASS" endtime="20170817 19:26:07.367"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.368">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:26:07.367" status="PASS" endtime="20170817 19:26:07.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.370">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:26:07.369" status="PASS" endtime="20170817 19:26:07.370"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.371">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:26:07.371" status="PASS" endtime="20170817 19:26:07.371"></status>
</kw>
<status starttime="20170817 19:26:07.370" status="PASS" endtime="20170817 19:26:07.371"></status>
</kw>
<status starttime="20170817 19:26:07.368" status="PASS" endtime="20170817 19:26:07.371"></status>
</kw>
<status starttime="20170817 19:26:07.368" status="PASS" endtime="20170817 19:26:07.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.484">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:07.484">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:07.372" status="PASS" endtime="20170817 19:26:07.484"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.487">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:07.485" status="PASS" endtime="20170817 19:26:07.487"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.488">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:07.488" status="PASS" endtime="20170817 19:26:07.488"></status>
</kw>
<status starttime="20170817 19:26:07.487" status="PASS" endtime="20170817 19:26:07.488"></status>
</kw>
<status starttime="20170817 19:26:07.485" status="PASS" endtime="20170817 19:26:07.488"></status>
</kw>
<status starttime="20170817 19:26:07.484" status="PASS" endtime="20170817 19:26:07.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:07.489">Delete All Sessions</msg>
<status starttime="20170817 19:26:07.489" status="PASS" endtime="20170817 19:26:07.489"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.489">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:07.183" status="PASS" endtime="20170817 19:26:07.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:07.489" status="PASS" endtime="20170817 19:26:07.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:07.490">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:07.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:07.490">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:07.490" status="PASS" endtime="20170817 19:26:07.490"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.491">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:07.183" status="PASS" endtime="20170817 19:26:07.491"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:07.491">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:07.182" status="PASS" endtime="20170817 19:26:07.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:07.492">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:26:07.492">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:07.491" status="FAIL" endtime="20170817 19:26:07.492"></status>
</kw>
<status starttime="20170817 19:26:06.896" status="FAIL" endtime="20170817 19:26:07.492"></status>
</kw>
<status starttime="20170817 19:26:06.200" status="FAIL" endtime="20170817 19:26:07.492"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.497">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:17.497" status="PASS" endtime="20170817 19:26:17.498"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.498">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:17.498" status="PASS" endtime="20170817 19:26:17.498"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.499">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:17.499" status="PASS" endtime="20170817 19:26:17.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.500">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:17.499" status="PASS" endtime="20170817 19:26:17.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.682">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:17.500" status="PASS" endtime="20170817 19:26:17.682"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:17.682">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:17.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:17.500" status="PASS" endtime="20170817 19:26:17.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.683">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:17.683" status="PASS" endtime="20170817 19:26:17.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:17.683" status="PASS" endtime="20170817 19:26:17.684"></status>
</kw>
<status starttime="20170817 19:26:17.496" status="PASS" endtime="20170817 19:26:17.684"></status>
</kw>
<status starttime="20170817 19:26:17.496" status="PASS" endtime="20170817 19:26:17.684"></status>
</kw>
<status starttime="20170817 19:26:17.495" status="PASS" endtime="20170817 19:26:17.684"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.685">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:26:17.684" status="PASS" endtime="20170817 19:26:17.685"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.687">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:17.686" status="PASS" endtime="20170817 19:26:17.687"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.688">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:17.687" status="PASS" endtime="20170817 19:26:17.688"></status>
</kw>
<status starttime="20170817 19:26:17.687" status="PASS" endtime="20170817 19:26:17.688"></status>
</kw>
<status starttime="20170817 19:26:17.686" status="PASS" endtime="20170817 19:26:17.688"></status>
</kw>
<status starttime="20170817 19:26:17.685" status="PASS" endtime="20170817 19:26:17.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.761">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:17.761">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:17.688" status="PASS" endtime="20170817 19:26:17.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.763">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:17.763" status="PASS" endtime="20170817 19:26:17.763"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.764">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:17.764" status="PASS" endtime="20170817 19:26:17.764"></status>
</kw>
<status starttime="20170817 19:26:17.763" status="PASS" endtime="20170817 19:26:17.764"></status>
</kw>
<status starttime="20170817 19:26:17.762" status="PASS" endtime="20170817 19:26:17.764"></status>
</kw>
<status starttime="20170817 19:26:17.762" status="PASS" endtime="20170817 19:26:17.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:17.765">Delete All Sessions</msg>
<status starttime="20170817 19:26:17.765" status="PASS" endtime="20170817 19:26:17.765"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:17.765">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:17.495" status="PASS" endtime="20170817 19:26:17.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:17.765" status="PASS" endtime="20170817 19:26:17.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.766">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:17.766">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:17.766">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:17.766" status="PASS" endtime="20170817 19:26:17.766"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:17.767">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:26:17.494" status="PASS" endtime="20170817 19:26:17.767"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:17.767">${power_state} = On</msg>
<status starttime="20170817 19:26:17.494" status="PASS" endtime="20170817 19:26:17.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:26:17.767" status="PASS" endtime="20170817 19:26:17.768"></status>
</kw>
<status starttime="20170817 19:26:17.493" status="PASS" endtime="20170817 19:26:17.768"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.772">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:17.771" status="PASS" endtime="20170817 19:26:17.772"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.772">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:17.772" status="PASS" endtime="20170817 19:26:17.773"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.773">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:17.773" status="PASS" endtime="20170817 19:26:17.773"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.774">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:17.773" status="PASS" endtime="20170817 19:26:17.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.973">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:17.774" status="PASS" endtime="20170817 19:26:17.973"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:17.973">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:17.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:17.774" status="PASS" endtime="20170817 19:26:17.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.974">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:17.973" status="PASS" endtime="20170817 19:26:17.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:17.974" status="PASS" endtime="20170817 19:26:17.975"></status>
</kw>
<status starttime="20170817 19:26:17.770" status="PASS" endtime="20170817 19:26:17.975"></status>
</kw>
<status starttime="20170817 19:26:17.770" status="PASS" endtime="20170817 19:26:17.975"></status>
</kw>
<status starttime="20170817 19:26:17.769" status="PASS" endtime="20170817 19:26:17.975"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.975">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:26:17.975" status="PASS" endtime="20170817 19:26:17.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:17.977">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:17.977" status="PASS" endtime="20170817 19:26:17.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:17.978">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:17.978" status="PASS" endtime="20170817 19:26:17.978"></status>
</kw>
<status starttime="20170817 19:26:17.978" status="PASS" endtime="20170817 19:26:17.979"></status>
</kw>
<status starttime="20170817 19:26:17.976" status="PASS" endtime="20170817 19:26:17.979"></status>
</kw>
<status starttime="20170817 19:26:17.976" status="PASS" endtime="20170817 19:26:17.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.067">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:18.067">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:17.979" status="PASS" endtime="20170817 19:26:18.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.069">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:18.068" status="PASS" endtime="20170817 19:26:18.069"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:18.069" status="PASS" endtime="20170817 19:26:18.070"></status>
</kw>
<status starttime="20170817 19:26:18.069" status="PASS" endtime="20170817 19:26:18.070"></status>
</kw>
<status starttime="20170817 19:26:18.068" status="PASS" endtime="20170817 19:26:18.070"></status>
</kw>
<status starttime="20170817 19:26:18.067" status="PASS" endtime="20170817 19:26:18.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:18.070">Delete All Sessions</msg>
<status starttime="20170817 19:26:18.070" status="PASS" endtime="20170817 19:26:18.070"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.071">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:17.769" status="PASS" endtime="20170817 19:26:18.071"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:18.071" status="PASS" endtime="20170817 19:26:18.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.072">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:18.072">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:18.072">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:18.071" status="PASS" endtime="20170817 19:26:18.072"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.072">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:26:17.768" status="PASS" endtime="20170817 19:26:18.072"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.073">${host_state} = Running</msg>
<status starttime="20170817 19:26:17.768" status="PASS" endtime="20170817 19:26:18.073"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:26:18.073" status="PASS" endtime="20170817 19:26:18.073"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.078">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:18.078" status="PASS" endtime="20170817 19:26:18.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.079">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:18.079" status="PASS" endtime="20170817 19:26:18.079"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.079">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:18.079" status="PASS" endtime="20170817 19:26:18.080"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.080">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:18.080" status="PASS" endtime="20170817 19:26:18.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.360">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:18.081" status="PASS" endtime="20170817 19:26:18.360"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:18.360">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:18.080" status="PASS" endtime="20170817 19:26:18.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.361">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:18.360" status="PASS" endtime="20170817 19:26:18.361"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:18.361" status="PASS" endtime="20170817 19:26:18.362"></status>
</kw>
<status starttime="20170817 19:26:18.077" status="PASS" endtime="20170817 19:26:18.362"></status>
</kw>
<status starttime="20170817 19:26:18.077" status="PASS" endtime="20170817 19:26:18.362"></status>
</kw>
<status starttime="20170817 19:26:18.076" status="PASS" endtime="20170817 19:26:18.362"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.362">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:26:18.362" status="PASS" endtime="20170817 19:26:18.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.365">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:18.364" status="PASS" endtime="20170817 19:26:18.365"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.366">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:18.365" status="PASS" endtime="20170817 19:26:18.366"></status>
</kw>
<status starttime="20170817 19:26:18.365" status="PASS" endtime="20170817 19:26:18.366"></status>
</kw>
<status starttime="20170817 19:26:18.363" status="PASS" endtime="20170817 19:26:18.366"></status>
</kw>
<status starttime="20170817 19:26:18.363" status="PASS" endtime="20170817 19:26:18.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.442">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:18.442">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:18.366" status="PASS" endtime="20170817 19:26:18.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.444">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:18.443" status="PASS" endtime="20170817 19:26:18.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.445">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:18.445" status="PASS" endtime="20170817 19:26:18.445"></status>
</kw>
<status starttime="20170817 19:26:18.444" status="PASS" endtime="20170817 19:26:18.445"></status>
</kw>
<status starttime="20170817 19:26:18.443" status="PASS" endtime="20170817 19:26:18.445"></status>
</kw>
<status starttime="20170817 19:26:18.443" status="PASS" endtime="20170817 19:26:18.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:18.446">Delete All Sessions</msg>
<status starttime="20170817 19:26:18.445" status="PASS" endtime="20170817 19:26:18.446"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.446">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:18.076" status="PASS" endtime="20170817 19:26:18.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:18.446" status="PASS" endtime="20170817 19:26:18.447"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.447">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:18.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:18.447">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:18.447" status="PASS" endtime="20170817 19:26:18.447"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.448">${state} = Off</msg>
<status starttime="20170817 19:26:18.075" status="PASS" endtime="20170817 19:26:18.448"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.448">${boot_progress} = Off</msg>
<status starttime="20170817 19:26:18.075" status="PASS" endtime="20170817 19:26:18.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:26:18.448">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:26:18.448" status="FAIL" endtime="20170817 19:26:18.448"></status>
</kw>
<status starttime="20170817 19:26:18.074" status="FAIL" endtime="20170817 19:26:18.449"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.449">${status} = False</msg>
<status starttime="20170817 19:26:18.074" status="PASS" endtime="20170817 19:26:18.449"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:26:18.449" status="PASS" endtime="20170817 19:26:18.449"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.453">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:18.453" status="PASS" endtime="20170817 19:26:18.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:18.454" status="PASS" endtime="20170817 19:26:18.454"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.455">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:18.455" status="PASS" endtime="20170817 19:26:18.455"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:18.455" status="PASS" endtime="20170817 19:26:18.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.634">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:18.456" status="PASS" endtime="20170817 19:26:18.634"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.634">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:18.634">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:18.456" status="PASS" endtime="20170817 19:26:18.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.635">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:18.634" status="PASS" endtime="20170817 19:26:18.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:18.635" status="PASS" endtime="20170817 19:26:18.635"></status>
</kw>
<status starttime="20170817 19:26:18.452" status="PASS" endtime="20170817 19:26:18.636"></status>
</kw>
<status starttime="20170817 19:26:18.452" status="PASS" endtime="20170817 19:26:18.636"></status>
</kw>
<status starttime="20170817 19:26:18.451" status="PASS" endtime="20170817 19:26:18.636"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.636">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:26:18.636" status="PASS" endtime="20170817 19:26:18.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.638">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:26:18.638" status="PASS" endtime="20170817 19:26:18.638"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.639">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:26:18.639" status="PASS" endtime="20170817 19:26:18.639"></status>
</kw>
<status starttime="20170817 19:26:18.638" status="PASS" endtime="20170817 19:26:18.639"></status>
</kw>
<status starttime="20170817 19:26:18.637" status="PASS" endtime="20170817 19:26:18.640"></status>
</kw>
<status starttime="20170817 19:26:18.637" status="PASS" endtime="20170817 19:26:18.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.734">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:18.735">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:18.640" status="PASS" endtime="20170817 19:26:18.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.736">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:18.736" status="PASS" endtime="20170817 19:26:18.736"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.737">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:18.737" status="PASS" endtime="20170817 19:26:18.737"></status>
</kw>
<status starttime="20170817 19:26:18.737" status="PASS" endtime="20170817 19:26:18.738"></status>
</kw>
<status starttime="20170817 19:26:18.735" status="PASS" endtime="20170817 19:26:18.738"></status>
</kw>
<status starttime="20170817 19:26:18.735" status="PASS" endtime="20170817 19:26:18.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:18.738">Delete All Sessions</msg>
<status starttime="20170817 19:26:18.738" status="PASS" endtime="20170817 19:26:18.738"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.738">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:18.451" status="PASS" endtime="20170817 19:26:18.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:18.739" status="PASS" endtime="20170817 19:26:18.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:18.740">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:18.740">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:18.740">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:18.739" status="PASS" endtime="20170817 19:26:18.740"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.740">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:18.450" status="PASS" endtime="20170817 19:26:18.740"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:18.740">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:18.450" status="PASS" endtime="20170817 19:26:18.740"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:18.741">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:26:18.741">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:18.741" status="FAIL" endtime="20170817 19:26:18.741"></status>
</kw>
<status starttime="20170817 19:26:18.073" status="FAIL" endtime="20170817 19:26:18.741"></status>
</kw>
<status starttime="20170817 19:26:17.493" status="FAIL" endtime="20170817 19:26:18.741"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:28.753">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:28.752" status="PASS" endtime="20170817 19:26:28.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:28.754">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:28.754" status="PASS" endtime="20170817 19:26:28.754"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:28.755">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:28.754" status="PASS" endtime="20170817 19:26:28.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:28.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:28.756" status="PASS" endtime="20170817 19:26:28.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:29.185">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:28.757" status="PASS" endtime="20170817 19:26:29.185"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:29.185">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:29.185">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:28.757" status="PASS" endtime="20170817 19:26:29.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:29.186">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:29.186" status="PASS" endtime="20170817 19:26:29.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:29.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:29.186" status="PASS" endtime="20170817 19:26:29.187"></status>
</kw>
<status starttime="20170817 19:26:28.751" status="PASS" endtime="20170817 19:26:29.187"></status>
</kw>
<status starttime="20170817 19:26:28.750" status="PASS" endtime="20170817 19:26:29.187"></status>
</kw>
<status starttime="20170817 19:26:28.750" status="PASS" endtime="20170817 19:26:29.187"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:29.188">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:26:29.187" status="PASS" endtime="20170817 19:26:29.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:29.190">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:29.189" status="PASS" endtime="20170817 19:26:29.190"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:29.191">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:29.190" status="PASS" endtime="20170817 19:26:29.191"></status>
</kw>
<status starttime="20170817 19:26:29.190" status="PASS" endtime="20170817 19:26:29.191"></status>
</kw>
<status starttime="20170817 19:26:29.188" status="PASS" endtime="20170817 19:26:29.191"></status>
</kw>
<status starttime="20170817 19:26:29.188" status="PASS" endtime="20170817 19:26:29.191"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:30.534">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:30.535">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:29.191" status="PASS" endtime="20170817 19:26:30.535"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:30.537">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:30.536" status="PASS" endtime="20170817 19:26:30.537"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:30.538">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:30.538" status="PASS" endtime="20170817 19:26:30.539"></status>
</kw>
<status starttime="20170817 19:26:30.537" status="PASS" endtime="20170817 19:26:30.539"></status>
</kw>
<status starttime="20170817 19:26:30.536" status="PASS" endtime="20170817 19:26:30.539"></status>
</kw>
<status starttime="20170817 19:26:30.535" status="PASS" endtime="20170817 19:26:30.539"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:30.539">Delete All Sessions</msg>
<status starttime="20170817 19:26:30.539" status="PASS" endtime="20170817 19:26:30.540"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:30.540">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:28.749" status="PASS" endtime="20170817 19:26:30.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:30.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:30.540" status="PASS" endtime="20170817 19:26:30.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:30.541">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:30.541">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:30.541">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:30.541" status="PASS" endtime="20170817 19:26:30.541"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:30.541">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:26:28.744" status="PASS" endtime="20170817 19:26:30.541"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:30.542">${power_state} = On</msg>
<status starttime="20170817 19:26:28.743" status="PASS" endtime="20170817 19:26:30.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:26:30.542" status="PASS" endtime="20170817 19:26:30.542"></status>
</kw>
<status starttime="20170817 19:26:28.743" status="PASS" endtime="20170817 19:26:30.542"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:30.546">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:30.546" status="PASS" endtime="20170817 19:26:30.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:30.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:30.547" status="PASS" endtime="20170817 19:26:30.547"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:30.548">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:30.547" status="PASS" endtime="20170817 19:26:30.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:30.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:30.548" status="PASS" endtime="20170817 19:26:30.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:31.523">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:30.549" status="PASS" endtime="20170817 19:26:31.523"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:31.523">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:31.523">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:30.548" status="PASS" endtime="20170817 19:26:31.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:31.524">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:31.524" status="PASS" endtime="20170817 19:26:31.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:31.525">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:31.524" status="PASS" endtime="20170817 19:26:31.525"></status>
</kw>
<status starttime="20170817 19:26:30.545" status="PASS" endtime="20170817 19:26:31.525"></status>
</kw>
<status starttime="20170817 19:26:30.545" status="PASS" endtime="20170817 19:26:31.525"></status>
</kw>
<status starttime="20170817 19:26:30.544" status="PASS" endtime="20170817 19:26:31.525"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.526">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:26:31.525" status="PASS" endtime="20170817 19:26:31.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.528">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:31.527" status="PASS" endtime="20170817 19:26:31.528"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:31.529">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:31.529" status="PASS" endtime="20170817 19:26:31.529"></status>
</kw>
<status starttime="20170817 19:26:31.528" status="PASS" endtime="20170817 19:26:31.529"></status>
</kw>
<status starttime="20170817 19:26:31.527" status="PASS" endtime="20170817 19:26:31.529"></status>
</kw>
<status starttime="20170817 19:26:31.526" status="PASS" endtime="20170817 19:26:31.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.617">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:31.617">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:31.529" status="PASS" endtime="20170817 19:26:31.617"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.619">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:31.619" status="PASS" endtime="20170817 19:26:31.619"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:31.620">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:31.620" status="PASS" endtime="20170817 19:26:31.620"></status>
</kw>
<status starttime="20170817 19:26:31.619" status="PASS" endtime="20170817 19:26:31.620"></status>
</kw>
<status starttime="20170817 19:26:31.618" status="PASS" endtime="20170817 19:26:31.620"></status>
</kw>
<status starttime="20170817 19:26:31.618" status="PASS" endtime="20170817 19:26:31.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:31.621">Delete All Sessions</msg>
<status starttime="20170817 19:26:31.621" status="PASS" endtime="20170817 19:26:31.621"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:31.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:30.544" status="PASS" endtime="20170817 19:26:31.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:31.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:31.621" status="PASS" endtime="20170817 19:26:31.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.622">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:31.622">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:31.623">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:31.622" status="PASS" endtime="20170817 19:26:31.623"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:31.623">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:26:30.543" status="PASS" endtime="20170817 19:26:31.623"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:31.623">${host_state} = Running</msg>
<status starttime="20170817 19:26:30.543" status="PASS" endtime="20170817 19:26:31.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:26:31.623" status="PASS" endtime="20170817 19:26:31.624"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:31.629">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:31.628" status="PASS" endtime="20170817 19:26:31.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:31.629" status="PASS" endtime="20170817 19:26:31.629"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.630">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:31.630" status="PASS" endtime="20170817 19:26:31.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:31.631">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:31.630" status="PASS" endtime="20170817 19:26:31.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:32.073">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:31.631" status="PASS" endtime="20170817 19:26:32.073"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:32.074">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:32.074">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:31.631" status="PASS" endtime="20170817 19:26:32.074"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:32.075">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:32.074" status="PASS" endtime="20170817 19:26:32.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:32.075">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:32.075" status="PASS" endtime="20170817 19:26:32.075"></status>
</kw>
<status starttime="20170817 19:26:31.628" status="PASS" endtime="20170817 19:26:32.076"></status>
</kw>
<status starttime="20170817 19:26:31.627" status="PASS" endtime="20170817 19:26:32.076"></status>
</kw>
<status starttime="20170817 19:26:31.627" status="PASS" endtime="20170817 19:26:32.076"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.076">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:26:32.076" status="PASS" endtime="20170817 19:26:32.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.078">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:32.078" status="PASS" endtime="20170817 19:26:32.079"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:32.079">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:32.079" status="PASS" endtime="20170817 19:26:32.080"></status>
</kw>
<status starttime="20170817 19:26:32.079" status="PASS" endtime="20170817 19:26:32.080"></status>
</kw>
<status starttime="20170817 19:26:32.077" status="PASS" endtime="20170817 19:26:32.080"></status>
</kw>
<status starttime="20170817 19:26:32.077" status="PASS" endtime="20170817 19:26:32.080"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.181">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:32.181">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:32.080" status="PASS" endtime="20170817 19:26:32.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.183">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:32.182" status="PASS" endtime="20170817 19:26:32.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:32.184">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:32.183" status="PASS" endtime="20170817 19:26:32.184"></status>
</kw>
<status starttime="20170817 19:26:32.183" status="PASS" endtime="20170817 19:26:32.184"></status>
</kw>
<status starttime="20170817 19:26:32.182" status="PASS" endtime="20170817 19:26:32.184"></status>
</kw>
<status starttime="20170817 19:26:32.181" status="PASS" endtime="20170817 19:26:32.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:32.184">Delete All Sessions</msg>
<status starttime="20170817 19:26:32.184" status="PASS" endtime="20170817 19:26:32.185"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:32.185">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:31.626" status="PASS" endtime="20170817 19:26:32.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:32.185">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:32.185" status="PASS" endtime="20170817 19:26:32.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.186">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:32.186">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:32.186">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:32.186" status="PASS" endtime="20170817 19:26:32.186"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:32.186">${state} = Off</msg>
<status starttime="20170817 19:26:31.625" status="PASS" endtime="20170817 19:26:32.186"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:32.187">${boot_progress} = Off</msg>
<status starttime="20170817 19:26:31.625" status="PASS" endtime="20170817 19:26:32.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:26:32.187">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:26:32.187" status="FAIL" endtime="20170817 19:26:32.187"></status>
</kw>
<status starttime="20170817 19:26:31.625" status="FAIL" endtime="20170817 19:26:32.188"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:32.188">${status} = False</msg>
<status starttime="20170817 19:26:31.624" status="PASS" endtime="20170817 19:26:32.188"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:26:32.188" status="PASS" endtime="20170817 19:26:32.188"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:32.192">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:32.191" status="PASS" endtime="20170817 19:26:32.192"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.193">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:32.193" status="PASS" endtime="20170817 19:26:32.193"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.193">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:32.193" status="PASS" endtime="20170817 19:26:32.193"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:32.194">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:32.194" status="PASS" endtime="20170817 19:26:32.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:33.876">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:32.195" status="PASS" endtime="20170817 19:26:33.876"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:33.876">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:33.876">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:32.194" status="PASS" endtime="20170817 19:26:33.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:33.877">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:33.876" status="PASS" endtime="20170817 19:26:33.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:33.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:33.877" status="PASS" endtime="20170817 19:26:33.877"></status>
</kw>
<status starttime="20170817 19:26:32.191" status="PASS" endtime="20170817 19:26:33.878"></status>
</kw>
<status starttime="20170817 19:26:32.191" status="PASS" endtime="20170817 19:26:33.878"></status>
</kw>
<status starttime="20170817 19:26:32.190" status="PASS" endtime="20170817 19:26:33.878"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:33.878">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:26:33.878" status="PASS" endtime="20170817 19:26:33.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:33.880">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:26:33.880" status="PASS" endtime="20170817 19:26:33.880"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:33.881">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:26:33.881" status="PASS" endtime="20170817 19:26:33.881"></status>
</kw>
<status starttime="20170817 19:26:33.881" status="PASS" endtime="20170817 19:26:33.882"></status>
</kw>
<status starttime="20170817 19:26:33.879" status="PASS" endtime="20170817 19:26:33.882"></status>
</kw>
<status starttime="20170817 19:26:33.879" status="PASS" endtime="20170817 19:26:33.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:37.463">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:37.464">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:33.882" status="PASS" endtime="20170817 19:26:37.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:37.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:37.465" status="PASS" endtime="20170817 19:26:37.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:37.466">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:37.466" status="PASS" endtime="20170817 19:26:37.467"></status>
</kw>
<status starttime="20170817 19:26:37.466" status="PASS" endtime="20170817 19:26:37.467"></status>
</kw>
<status starttime="20170817 19:26:37.465" status="PASS" endtime="20170817 19:26:37.467"></status>
</kw>
<status starttime="20170817 19:26:37.464" status="PASS" endtime="20170817 19:26:37.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:37.467">Delete All Sessions</msg>
<status starttime="20170817 19:26:37.467" status="PASS" endtime="20170817 19:26:37.467"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:37.468">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:32.189" status="PASS" endtime="20170817 19:26:37.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:37.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:37.468" status="PASS" endtime="20170817 19:26:37.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:37.469">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:37.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:37.469">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:37.468" status="PASS" endtime="20170817 19:26:37.469"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:37.469">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:32.189" status="PASS" endtime="20170817 19:26:37.469"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:37.470">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:32.188" status="PASS" endtime="20170817 19:26:37.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:37.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:26:37.471">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:37.470" status="FAIL" endtime="20170817 19:26:37.471"></status>
</kw>
<status starttime="20170817 19:26:31.624" status="FAIL" endtime="20170817 19:26:37.471"></status>
</kw>
<status starttime="20170817 19:26:28.742" status="FAIL" endtime="20170817 19:26:37.471"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:47.476">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:47.476" status="PASS" endtime="20170817 19:26:47.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:47.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:47.477" status="PASS" endtime="20170817 19:26:47.478"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:47.478">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:47.478" status="PASS" endtime="20170817 19:26:47.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:47.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:47.478" status="PASS" endtime="20170817 19:26:47.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:48.014">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:47.479" status="PASS" endtime="20170817 19:26:48.014"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:48.014">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:48.014">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:47.479" status="PASS" endtime="20170817 19:26:48.014"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:48.015">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:48.014" status="PASS" endtime="20170817 19:26:48.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:48.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:48.015" status="PASS" endtime="20170817 19:26:48.015"></status>
</kw>
<status starttime="20170817 19:26:47.475" status="PASS" endtime="20170817 19:26:48.015"></status>
</kw>
<status starttime="20170817 19:26:47.475" status="PASS" endtime="20170817 19:26:48.015"></status>
</kw>
<status starttime="20170817 19:26:47.474" status="PASS" endtime="20170817 19:26:48.016"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:48.016">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:26:48.016" status="PASS" endtime="20170817 19:26:48.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:48.018">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:48.018" status="PASS" endtime="20170817 19:26:48.018"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:48.019">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:48.019" status="PASS" endtime="20170817 19:26:48.019"></status>
</kw>
<status starttime="20170817 19:26:48.018" status="PASS" endtime="20170817 19:26:48.019"></status>
</kw>
<status starttime="20170817 19:26:48.017" status="PASS" endtime="20170817 19:26:48.019"></status>
</kw>
<status starttime="20170817 19:26:48.016" status="PASS" endtime="20170817 19:26:48.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:48.940">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:48.940">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:48.020" status="PASS" endtime="20170817 19:26:48.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:48.942">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:48.941" status="PASS" endtime="20170817 19:26:48.942"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:48.943">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:48.943" status="PASS" endtime="20170817 19:26:48.943"></status>
</kw>
<status starttime="20170817 19:26:48.942" status="PASS" endtime="20170817 19:26:48.943"></status>
</kw>
<status starttime="20170817 19:26:48.941" status="PASS" endtime="20170817 19:26:48.944"></status>
</kw>
<status starttime="20170817 19:26:48.941" status="PASS" endtime="20170817 19:26:48.944"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:48.944">Delete All Sessions</msg>
<status starttime="20170817 19:26:48.944" status="PASS" endtime="20170817 19:26:48.944"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:48.944">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:47.474" status="PASS" endtime="20170817 19:26:48.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:48.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:48.945" status="PASS" endtime="20170817 19:26:48.945"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:48.945">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:48.946">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:48.946">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:48.945" status="PASS" endtime="20170817 19:26:48.946"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:48.946">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 19:26:47.473" status="PASS" endtime="20170817 19:26:48.946"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:48.946">${power_state} = Off</msg>
<status starttime="20170817 19:26:47.473" status="PASS" endtime="20170817 19:26:48.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:26:48.947">On != Off</msg>
<status starttime="20170817 19:26:48.947" status="FAIL" endtime="20170817 19:26:48.947"></status>
</kw>
<status starttime="20170817 19:26:47.472" status="FAIL" endtime="20170817 19:26:48.947"></status>
</kw>
<status starttime="20170817 19:26:47.472" status="FAIL" endtime="20170817 19:26:48.947"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:58.952">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:58.952" status="PASS" endtime="20170817 19:26:58.952"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:58.953">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:58.953" status="PASS" endtime="20170817 19:26:58.953"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:58.954">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:58.953" status="PASS" endtime="20170817 19:26:58.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:58.954">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:58.954" status="PASS" endtime="20170817 19:26:58.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.134">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:58.955" status="PASS" endtime="20170817 19:26:59.134"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.134">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:59.134">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:58.955" status="PASS" endtime="20170817 19:26:59.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.135">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.134" status="PASS" endtime="20170817 19:26:59.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.135" status="PASS" endtime="20170817 19:26:59.135"></status>
</kw>
<status starttime="20170817 19:26:58.951" status="PASS" endtime="20170817 19:26:59.136"></status>
</kw>
<status starttime="20170817 19:26:58.951" status="PASS" endtime="20170817 19:26:59.136"></status>
</kw>
<status starttime="20170817 19:26:58.950" status="PASS" endtime="20170817 19:26:59.136"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.136">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:26:59.136" status="PASS" endtime="20170817 19:26:59.136"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.138">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:59.138" status="PASS" endtime="20170817 19:26:59.138"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.139">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:59.139" status="PASS" endtime="20170817 19:26:59.139"></status>
</kw>
<status starttime="20170817 19:26:59.139" status="PASS" endtime="20170817 19:26:59.140"></status>
</kw>
<status starttime="20170817 19:26:59.137" status="PASS" endtime="20170817 19:26:59.140"></status>
</kw>
<status starttime="20170817 19:26:59.137" status="PASS" endtime="20170817 19:26:59.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.214">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:59.214">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.140" status="PASS" endtime="20170817 19:26:59.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.216">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:59.215" status="PASS" endtime="20170817 19:26:59.216"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.217">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:59.216" status="PASS" endtime="20170817 19:26:59.217"></status>
</kw>
<status starttime="20170817 19:26:59.216" status="PASS" endtime="20170817 19:26:59.217"></status>
</kw>
<status starttime="20170817 19:26:59.215" status="PASS" endtime="20170817 19:26:59.217"></status>
</kw>
<status starttime="20170817 19:26:59.214" status="PASS" endtime="20170817 19:26:59.217"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:59.217">Delete All Sessions</msg>
<status starttime="20170817 19:26:59.217" status="PASS" endtime="20170817 19:26:59.217"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.218">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:58.949" status="PASS" endtime="20170817 19:26:59.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.218" status="PASS" endtime="20170817 19:26:59.218"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.219">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:59.219">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:59.219">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:59.219" status="PASS" endtime="20170817 19:26:59.219"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.219">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:26:58.949" status="PASS" endtime="20170817 19:26:59.219"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.220">${power_state} = On</msg>
<status starttime="20170817 19:26:58.949" status="PASS" endtime="20170817 19:26:59.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:26:59.220" status="PASS" endtime="20170817 19:26:59.220"></status>
</kw>
<status starttime="20170817 19:26:58.948" status="PASS" endtime="20170817 19:26:59.220"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.224">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:59.224" status="PASS" endtime="20170817 19:26:59.225"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:59.225" status="PASS" endtime="20170817 19:26:59.225"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.226">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:59.225" status="PASS" endtime="20170817 19:26:59.226"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.226">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:59.226" status="PASS" endtime="20170817 19:26:59.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.409">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:59.227" status="PASS" endtime="20170817 19:26:59.409"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.409">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:59.409">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.227" status="PASS" endtime="20170817 19:26:59.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.410">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.409" status="PASS" endtime="20170817 19:26:59.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.410" status="PASS" endtime="20170817 19:26:59.410"></status>
</kw>
<status starttime="20170817 19:26:59.223" status="PASS" endtime="20170817 19:26:59.410"></status>
</kw>
<status starttime="20170817 19:26:59.223" status="PASS" endtime="20170817 19:26:59.411"></status>
</kw>
<status starttime="20170817 19:26:59.222" status="PASS" endtime="20170817 19:26:59.411"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.411">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:26:59.411" status="PASS" endtime="20170817 19:26:59.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.413">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:59.413" status="PASS" endtime="20170817 19:26:59.413"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.414">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:26:59.414" status="PASS" endtime="20170817 19:26:59.414"></status>
</kw>
<status starttime="20170817 19:26:59.414" status="PASS" endtime="20170817 19:26:59.414"></status>
</kw>
<status starttime="20170817 19:26:59.412" status="PASS" endtime="20170817 19:26:59.415"></status>
</kw>
<status starttime="20170817 19:26:59.412" status="PASS" endtime="20170817 19:26:59.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.503">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:59.503">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.415" status="PASS" endtime="20170817 19:26:59.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.505">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:59.504" status="PASS" endtime="20170817 19:26:59.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.506">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:59.505" status="PASS" endtime="20170817 19:26:59.506"></status>
</kw>
<status starttime="20170817 19:26:59.505" status="PASS" endtime="20170817 19:26:59.506"></status>
</kw>
<status starttime="20170817 19:26:59.504" status="PASS" endtime="20170817 19:26:59.506"></status>
</kw>
<status starttime="20170817 19:26:59.503" status="PASS" endtime="20170817 19:26:59.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:59.506">Delete All Sessions</msg>
<status starttime="20170817 19:26:59.506" status="PASS" endtime="20170817 19:26:59.506"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.507">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.221" status="PASS" endtime="20170817 19:26:59.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.507" status="PASS" endtime="20170817 19:26:59.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.508">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:59.508">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:59.508">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:59.508" status="PASS" endtime="20170817 19:26:59.508"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.508">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:26:59.221" status="PASS" endtime="20170817 19:26:59.508"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.509">${host_state} = Running</msg>
<status starttime="20170817 19:26:59.220" status="PASS" endtime="20170817 19:26:59.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:26:59.509" status="PASS" endtime="20170817 19:26:59.509"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.515">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:59.515" status="PASS" endtime="20170817 19:26:59.515"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:59.516" status="PASS" endtime="20170817 19:26:59.516"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.517">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:59.516" status="PASS" endtime="20170817 19:26:59.517"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:59.517" status="PASS" endtime="20170817 19:26:59.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.696">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:59.518" status="PASS" endtime="20170817 19:26:59.696"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.696">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:26:59.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.518" status="PASS" endtime="20170817 19:26:59.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.697">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.697" status="PASS" endtime="20170817 19:26:59.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.697" status="PASS" endtime="20170817 19:26:59.698"></status>
</kw>
<status starttime="20170817 19:26:59.514" status="PASS" endtime="20170817 19:26:59.698"></status>
</kw>
<status starttime="20170817 19:26:59.514" status="PASS" endtime="20170817 19:26:59.698"></status>
</kw>
<status starttime="20170817 19:26:59.512" status="PASS" endtime="20170817 19:26:59.698"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.699">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:26:59.698" status="PASS" endtime="20170817 19:26:59.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.702">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:59.701" status="PASS" endtime="20170817 19:26:59.702"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.703">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:26:59.703" status="PASS" endtime="20170817 19:26:59.703"></status>
</kw>
<status starttime="20170817 19:26:59.702" status="PASS" endtime="20170817 19:26:59.703"></status>
</kw>
<status starttime="20170817 19:26:59.700" status="PASS" endtime="20170817 19:26:59.703"></status>
</kw>
<status starttime="20170817 19:26:59.699" status="PASS" endtime="20170817 19:26:59.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.781">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:26:59.781">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.704" status="PASS" endtime="20170817 19:26:59.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.783">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:59.782" status="PASS" endtime="20170817 19:26:59.783"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.783">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:26:59.783" status="PASS" endtime="20170817 19:26:59.784"></status>
</kw>
<status starttime="20170817 19:26:59.783" status="PASS" endtime="20170817 19:26:59.784"></status>
</kw>
<status starttime="20170817 19:26:59.781" status="PASS" endtime="20170817 19:26:59.784"></status>
</kw>
<status starttime="20170817 19:26:59.781" status="PASS" endtime="20170817 19:26:59.784"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:26:59.784">Delete All Sessions</msg>
<status starttime="20170817 19:26:59.784" status="PASS" endtime="20170817 19:26:59.784"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.512" status="PASS" endtime="20170817 19:26:59.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:26:59.785" status="PASS" endtime="20170817 19:26:59.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.786">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:26:59.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:26:59.786">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:26:59.785" status="PASS" endtime="20170817 19:26:59.786"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.786">${state} = Off</msg>
<status starttime="20170817 19:26:59.511" status="PASS" endtime="20170817 19:26:59.786"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.786">${boot_progress} = Off</msg>
<status starttime="20170817 19:26:59.511" status="PASS" endtime="20170817 19:26:59.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:26:59.787">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:26:59.787" status="FAIL" endtime="20170817 19:26:59.787"></status>
</kw>
<status starttime="20170817 19:26:59.510" status="FAIL" endtime="20170817 19:26:59.787"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:26:59.787">${status} = False</msg>
<status starttime="20170817 19:26:59.510" status="PASS" endtime="20170817 19:26:59.787"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:26:59.788" status="PASS" endtime="20170817 19:26:59.788"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:26:59.792">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:26:59.791" status="PASS" endtime="20170817 19:26:59.792"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.793">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:26:59.793" status="PASS" endtime="20170817 19:26:59.793"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.793">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:26:59.793" status="PASS" endtime="20170817 19:26:59.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:26:59.794">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:26:59.794" status="PASS" endtime="20170817 19:26:59.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:00.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:26:59.795" status="PASS" endtime="20170817 19:27:00.030"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:00.030">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:00.030">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.794" status="PASS" endtime="20170817 19:27:00.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:00.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:00.030" status="PASS" endtime="20170817 19:27:00.031"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:00.031">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:00.031" status="PASS" endtime="20170817 19:27:00.031"></status>
</kw>
<status starttime="20170817 19:26:59.791" status="PASS" endtime="20170817 19:27:00.031"></status>
</kw>
<status starttime="20170817 19:26:59.790" status="PASS" endtime="20170817 19:27:00.031"></status>
</kw>
<status starttime="20170817 19:26:59.790" status="PASS" endtime="20170817 19:27:00.032"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:00.032">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:27:00.032" status="PASS" endtime="20170817 19:27:00.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:00.034">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:00.034" status="PASS" endtime="20170817 19:27:00.034"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:00.035">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:00.035" status="PASS" endtime="20170817 19:27:00.035"></status>
</kw>
<status starttime="20170817 19:27:00.034" status="PASS" endtime="20170817 19:27:00.035"></status>
</kw>
<status starttime="20170817 19:27:00.033" status="PASS" endtime="20170817 19:27:00.035"></status>
</kw>
<status starttime="20170817 19:27:00.033" status="PASS" endtime="20170817 19:27:00.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:00.172">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:00.172">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:00.036" status="PASS" endtime="20170817 19:27:00.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:00.174">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:00.173" status="PASS" endtime="20170817 19:27:00.174"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:00.175">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:00.175" status="PASS" endtime="20170817 19:27:00.175"></status>
</kw>
<status starttime="20170817 19:27:00.174" status="PASS" endtime="20170817 19:27:00.175"></status>
</kw>
<status starttime="20170817 19:27:00.173" status="PASS" endtime="20170817 19:27:00.175"></status>
</kw>
<status starttime="20170817 19:27:00.173" status="PASS" endtime="20170817 19:27:00.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:00.176">Delete All Sessions</msg>
<status starttime="20170817 19:27:00.175" status="PASS" endtime="20170817 19:27:00.176"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:00.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:26:59.789" status="PASS" endtime="20170817 19:27:00.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:00.176">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:00.176" status="PASS" endtime="20170817 19:27:00.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:00.177">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:00.177">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:00.177">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:00.177" status="PASS" endtime="20170817 19:27:00.177"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:00.177">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:59.789" status="PASS" endtime="20170817 19:27:00.178"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:00.178">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:26:59.788" status="PASS" endtime="20170817 19:27:00.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:00.178">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:27:00.179">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:00.178" status="FAIL" endtime="20170817 19:27:00.179"></status>
</kw>
<status starttime="20170817 19:26:59.509" status="FAIL" endtime="20170817 19:27:00.179"></status>
</kw>
<status starttime="20170817 19:26:58.948" status="FAIL" endtime="20170817 19:27:00.179"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.187">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:10.186" status="PASS" endtime="20170817 19:27:10.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:10.187" status="PASS" endtime="20170817 19:27:10.188"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.188">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:10.188" status="PASS" endtime="20170817 19:27:10.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:10.189" status="PASS" endtime="20170817 19:27:10.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.431">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:10.190" status="PASS" endtime="20170817 19:27:10.431"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.431">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:10.431">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.189" status="PASS" endtime="20170817 19:27:10.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.432">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:10.432" status="PASS" endtime="20170817 19:27:10.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.433">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:10.432" status="PASS" endtime="20170817 19:27:10.433"></status>
</kw>
<status starttime="20170817 19:27:10.186" status="PASS" endtime="20170817 19:27:10.433"></status>
</kw>
<status starttime="20170817 19:27:10.185" status="PASS" endtime="20170817 19:27:10.433"></status>
</kw>
<status starttime="20170817 19:27:10.185" status="PASS" endtime="20170817 19:27:10.433"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.434">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:27:10.433" status="PASS" endtime="20170817 19:27:10.434"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.436">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:10.435" status="PASS" endtime="20170817 19:27:10.436"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.437">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:10.437" status="PASS" endtime="20170817 19:27:10.437"></status>
</kw>
<status starttime="20170817 19:27:10.436" status="PASS" endtime="20170817 19:27:10.437"></status>
</kw>
<status starttime="20170817 19:27:10.434" status="PASS" endtime="20170817 19:27:10.438"></status>
</kw>
<status starttime="20170817 19:27:10.434" status="PASS" endtime="20170817 19:27:10.438"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.501">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:10.501">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.438" status="PASS" endtime="20170817 19:27:10.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.503">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:10.502" status="PASS" endtime="20170817 19:27:10.503"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.504">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:10.504" status="PASS" endtime="20170817 19:27:10.504"></status>
</kw>
<status starttime="20170817 19:27:10.503" status="PASS" endtime="20170817 19:27:10.504"></status>
</kw>
<status starttime="20170817 19:27:10.502" status="PASS" endtime="20170817 19:27:10.504"></status>
</kw>
<status starttime="20170817 19:27:10.502" status="PASS" endtime="20170817 19:27:10.504"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:10.505">Delete All Sessions</msg>
<status starttime="20170817 19:27:10.505" status="PASS" endtime="20170817 19:27:10.505"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.505">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.184" status="PASS" endtime="20170817 19:27:10.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:10.505" status="PASS" endtime="20170817 19:27:10.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.506">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:10.506">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:10.507">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:10.506" status="PASS" endtime="20170817 19:27:10.507"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.507">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:27:10.183" status="PASS" endtime="20170817 19:27:10.507"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.507">${power_state} = On</msg>
<status starttime="20170817 19:27:10.180" status="PASS" endtime="20170817 19:27:10.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:27:10.507" status="PASS" endtime="20170817 19:27:10.508"></status>
</kw>
<status starttime="20170817 19:27:10.180" status="PASS" endtime="20170817 19:27:10.508"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.511">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:10.511" status="PASS" endtime="20170817 19:27:10.512"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.512">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:10.512" status="PASS" endtime="20170817 19:27:10.512"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.513">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:10.512" status="PASS" endtime="20170817 19:27:10.513"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.514">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:10.513" status="PASS" endtime="20170817 19:27:10.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:10.514" status="PASS" endtime="20170817 19:27:10.693"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:10.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.514" status="PASS" endtime="20170817 19:27:10.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:10.694" status="PASS" endtime="20170817 19:27:10.694"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:10.695" status="PASS" endtime="20170817 19:27:10.695"></status>
</kw>
<status starttime="20170817 19:27:10.510" status="PASS" endtime="20170817 19:27:10.696"></status>
</kw>
<status starttime="20170817 19:27:10.510" status="PASS" endtime="20170817 19:27:10.696"></status>
</kw>
<status starttime="20170817 19:27:10.509" status="PASS" endtime="20170817 19:27:10.696"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.697">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:27:10.696" status="PASS" endtime="20170817 19:27:10.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.700">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:10.699" status="PASS" endtime="20170817 19:27:10.700"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.701">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:10.700" status="PASS" endtime="20170817 19:27:10.701"></status>
</kw>
<status starttime="20170817 19:27:10.700" status="PASS" endtime="20170817 19:27:10.701"></status>
</kw>
<status starttime="20170817 19:27:10.698" status="PASS" endtime="20170817 19:27:10.701"></status>
</kw>
<status starttime="20170817 19:27:10.697" status="PASS" endtime="20170817 19:27:10.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.789">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:10.789">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.701" status="PASS" endtime="20170817 19:27:10.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.790">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:10.790" status="PASS" endtime="20170817 19:27:10.790"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.791">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:10.791" status="PASS" endtime="20170817 19:27:10.791"></status>
</kw>
<status starttime="20170817 19:27:10.791" status="PASS" endtime="20170817 19:27:10.792"></status>
</kw>
<status starttime="20170817 19:27:10.789" status="PASS" endtime="20170817 19:27:10.792"></status>
</kw>
<status starttime="20170817 19:27:10.789" status="PASS" endtime="20170817 19:27:10.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:10.792">Delete All Sessions</msg>
<status starttime="20170817 19:27:10.792" status="PASS" endtime="20170817 19:27:10.792"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.792">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.509" status="PASS" endtime="20170817 19:27:10.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:10.793" status="PASS" endtime="20170817 19:27:10.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.794">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:10.794">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:10.794">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:10.794" status="PASS" endtime="20170817 19:27:10.794"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.795">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:27:10.508" status="PASS" endtime="20170817 19:27:10.795"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:10.795">${host_state} = Running</msg>
<status starttime="20170817 19:27:10.508" status="PASS" endtime="20170817 19:27:10.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:27:10.796" status="PASS" endtime="20170817 19:27:10.796"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:10.803">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:10.802" status="PASS" endtime="20170817 19:27:10.803"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:10.804" status="PASS" endtime="20170817 19:27:10.804"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.805">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:10.804" status="PASS" endtime="20170817 19:27:10.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:10.805">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:10.805" status="PASS" endtime="20170817 19:27:10.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.092">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:10.806" status="PASS" endtime="20170817 19:27:11.092"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.092">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:11.092">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.806" status="PASS" endtime="20170817 19:27:11.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.093">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:11.093" status="PASS" endtime="20170817 19:27:11.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.094">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:11.093" status="PASS" endtime="20170817 19:27:11.094"></status>
</kw>
<status starttime="20170817 19:27:10.802" status="PASS" endtime="20170817 19:27:11.094"></status>
</kw>
<status starttime="20170817 19:27:10.801" status="PASS" endtime="20170817 19:27:11.094"></status>
</kw>
<status starttime="20170817 19:27:10.800" status="PASS" endtime="20170817 19:27:11.094"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.095">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:27:11.094" status="PASS" endtime="20170817 19:27:11.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.097">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:27:11.096" status="PASS" endtime="20170817 19:27:11.097"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.098">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:27:11.097" status="PASS" endtime="20170817 19:27:11.098"></status>
</kw>
<status starttime="20170817 19:27:11.097" status="PASS" endtime="20170817 19:27:11.098"></status>
</kw>
<status starttime="20170817 19:27:11.095" status="PASS" endtime="20170817 19:27:11.098"></status>
</kw>
<status starttime="20170817 19:27:11.095" status="PASS" endtime="20170817 19:27:11.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.169">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:11.169">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:11.098" status="PASS" endtime="20170817 19:27:11.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.171">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:11.170" status="PASS" endtime="20170817 19:27:11.171"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.172">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:11.172" status="PASS" endtime="20170817 19:27:11.172"></status>
</kw>
<status starttime="20170817 19:27:11.171" status="PASS" endtime="20170817 19:27:11.172"></status>
</kw>
<status starttime="20170817 19:27:11.170" status="PASS" endtime="20170817 19:27:11.173"></status>
</kw>
<status starttime="20170817 19:27:11.169" status="PASS" endtime="20170817 19:27:11.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:11.173">Delete All Sessions</msg>
<status starttime="20170817 19:27:11.173" status="PASS" endtime="20170817 19:27:11.173"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:10.799" status="PASS" endtime="20170817 19:27:11.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:11.174" status="PASS" endtime="20170817 19:27:11.174"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.175">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:11.175">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:11.175">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:11.174" status="PASS" endtime="20170817 19:27:11.175"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.175">${state} = Off</msg>
<status starttime="20170817 19:27:10.798" status="PASS" endtime="20170817 19:27:11.175"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.175">${boot_progress} = Off</msg>
<status starttime="20170817 19:27:10.798" status="PASS" endtime="20170817 19:27:11.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:27:11.176">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:27:11.175" status="FAIL" endtime="20170817 19:27:11.176"></status>
</kw>
<status starttime="20170817 19:27:10.797" status="FAIL" endtime="20170817 19:27:11.176"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.176">${status} = False</msg>
<status starttime="20170817 19:27:10.797" status="PASS" endtime="20170817 19:27:11.176"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:27:11.176" status="PASS" endtime="20170817 19:27:11.177"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.180">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:11.180" status="PASS" endtime="20170817 19:27:11.181"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:11.181" status="PASS" endtime="20170817 19:27:11.181"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.182">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:11.181" status="PASS" endtime="20170817 19:27:11.182"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:11.182" status="PASS" endtime="20170817 19:27:11.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.390">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:11.183" status="PASS" endtime="20170817 19:27:11.390"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.390">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:11.390">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:11.183" status="PASS" endtime="20170817 19:27:11.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.391">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:11.391" status="PASS" endtime="20170817 19:27:11.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:11.391" status="PASS" endtime="20170817 19:27:11.392"></status>
</kw>
<status starttime="20170817 19:27:11.179" status="PASS" endtime="20170817 19:27:11.392"></status>
</kw>
<status starttime="20170817 19:27:11.179" status="PASS" endtime="20170817 19:27:11.392"></status>
</kw>
<status starttime="20170817 19:27:11.179" status="PASS" endtime="20170817 19:27:11.392"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.393">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:27:11.392" status="PASS" endtime="20170817 19:27:11.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.395">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:11.394" status="PASS" endtime="20170817 19:27:11.395"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.396">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:11.396" status="PASS" endtime="20170817 19:27:11.396"></status>
</kw>
<status starttime="20170817 19:27:11.395" status="PASS" endtime="20170817 19:27:11.396"></status>
</kw>
<status starttime="20170817 19:27:11.393" status="PASS" endtime="20170817 19:27:11.396"></status>
</kw>
<status starttime="20170817 19:27:11.393" status="PASS" endtime="20170817 19:27:11.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.486">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:11.486">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:11.397" status="PASS" endtime="20170817 19:27:11.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.488">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:11.487" status="PASS" endtime="20170817 19:27:11.488"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.489">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:11.488" status="PASS" endtime="20170817 19:27:11.489"></status>
</kw>
<status starttime="20170817 19:27:11.488" status="PASS" endtime="20170817 19:27:11.489"></status>
</kw>
<status starttime="20170817 19:27:11.487" status="PASS" endtime="20170817 19:27:11.489"></status>
</kw>
<status starttime="20170817 19:27:11.486" status="PASS" endtime="20170817 19:27:11.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:11.489">Delete All Sessions</msg>
<status starttime="20170817 19:27:11.489" status="PASS" endtime="20170817 19:27:11.489"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.490">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:11.178" status="PASS" endtime="20170817 19:27:11.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:11.490" status="PASS" endtime="20170817 19:27:11.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:11.491">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:11.491">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:11.491">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:11.491" status="PASS" endtime="20170817 19:27:11.491"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.491">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:11.177" status="PASS" endtime="20170817 19:27:11.491"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:11.492">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:11.177" status="PASS" endtime="20170817 19:27:11.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:11.492">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:27:11.492">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:11.492" status="FAIL" endtime="20170817 19:27:11.492"></status>
</kw>
<status starttime="20170817 19:27:10.796" status="FAIL" endtime="20170817 19:27:11.493"></status>
</kw>
<status starttime="20170817 19:27:10.179" status="FAIL" endtime="20170817 19:27:11.493"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.498">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:21.497" status="PASS" endtime="20170817 19:27:21.498"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:21.498" status="PASS" endtime="20170817 19:27:21.499"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.499">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:21.499" status="PASS" endtime="20170817 19:27:21.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.500">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:21.500" status="PASS" endtime="20170817 19:27:21.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.698">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:21.501" status="PASS" endtime="20170817 19:27:21.698"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:21.698">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:21.698">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:21.500" status="PASS" endtime="20170817 19:27:21.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.699">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:21.698" status="PASS" endtime="20170817 19:27:21.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:21.699" status="PASS" endtime="20170817 19:27:21.699"></status>
</kw>
<status starttime="20170817 19:27:21.497" status="PASS" endtime="20170817 19:27:21.699"></status>
</kw>
<status starttime="20170817 19:27:21.496" status="PASS" endtime="20170817 19:27:21.699"></status>
</kw>
<status starttime="20170817 19:27:21.496" status="PASS" endtime="20170817 19:27:21.700"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.700">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:27:21.700" status="PASS" endtime="20170817 19:27:21.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.702">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:21.702" status="PASS" endtime="20170817 19:27:21.702"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.703">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:21.703" status="PASS" endtime="20170817 19:27:21.703"></status>
</kw>
<status starttime="20170817 19:27:21.702" status="PASS" endtime="20170817 19:27:21.703"></status>
</kw>
<status starttime="20170817 19:27:21.701" status="PASS" endtime="20170817 19:27:21.703"></status>
</kw>
<status starttime="20170817 19:27:21.700" status="PASS" endtime="20170817 19:27:21.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.776">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:21.776">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:21.704" status="PASS" endtime="20170817 19:27:21.776"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.778">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:21.778" status="PASS" endtime="20170817 19:27:21.778"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.779">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:21.779" status="PASS" endtime="20170817 19:27:21.779"></status>
</kw>
<status starttime="20170817 19:27:21.778" status="PASS" endtime="20170817 19:27:21.779"></status>
</kw>
<status starttime="20170817 19:27:21.777" status="PASS" endtime="20170817 19:27:21.779"></status>
</kw>
<status starttime="20170817 19:27:21.777" status="PASS" endtime="20170817 19:27:21.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:21.780">Delete All Sessions</msg>
<status starttime="20170817 19:27:21.780" status="PASS" endtime="20170817 19:27:21.780"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:21.780">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:21.495" status="PASS" endtime="20170817 19:27:21.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:21.780" status="PASS" endtime="20170817 19:27:21.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.781">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:21.781">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:21.781">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:21.781" status="PASS" endtime="20170817 19:27:21.782"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:21.782">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:27:21.495" status="PASS" endtime="20170817 19:27:21.782"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:21.782">${power_state} = On</msg>
<status starttime="20170817 19:27:21.494" status="PASS" endtime="20170817 19:27:21.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:27:21.782" status="PASS" endtime="20170817 19:27:21.783"></status>
</kw>
<status starttime="20170817 19:27:21.494" status="PASS" endtime="20170817 19:27:21.783"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:21.787">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:21.786" status="PASS" endtime="20170817 19:27:21.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:21.787" status="PASS" endtime="20170817 19:27:21.788"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.788">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:21.788" status="PASS" endtime="20170817 19:27:21.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:21.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:21.789" status="PASS" endtime="20170817 19:27:21.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:21.790" status="PASS" endtime="20170817 19:27:22.021"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:22.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:21.789" status="PASS" endtime="20170817 19:27:22.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.022" status="PASS" endtime="20170817 19:27:22.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.022" status="PASS" endtime="20170817 19:27:22.023"></status>
</kw>
<status starttime="20170817 19:27:21.785" status="PASS" endtime="20170817 19:27:22.023"></status>
</kw>
<status starttime="20170817 19:27:21.785" status="PASS" endtime="20170817 19:27:22.023"></status>
</kw>
<status starttime="20170817 19:27:21.784" status="PASS" endtime="20170817 19:27:22.023"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.024">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:27:22.024" status="PASS" endtime="20170817 19:27:22.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.026">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:22.025" status="PASS" endtime="20170817 19:27:22.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.027">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:22.027" status="PASS" endtime="20170817 19:27:22.027"></status>
</kw>
<status starttime="20170817 19:27:22.026" status="PASS" endtime="20170817 19:27:22.027"></status>
</kw>
<status starttime="20170817 19:27:22.025" status="PASS" endtime="20170817 19:27:22.027"></status>
</kw>
<status starttime="20170817 19:27:22.024" status="PASS" endtime="20170817 19:27:22.027"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.158">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:22.158">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:22.027" status="PASS" endtime="20170817 19:27:22.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.160">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:22.160" status="PASS" endtime="20170817 19:27:22.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.161">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:22.161" status="PASS" endtime="20170817 19:27:22.161"></status>
</kw>
<status starttime="20170817 19:27:22.160" status="PASS" endtime="20170817 19:27:22.161"></status>
</kw>
<status starttime="20170817 19:27:22.159" status="PASS" endtime="20170817 19:27:22.161"></status>
</kw>
<status starttime="20170817 19:27:22.159" status="PASS" endtime="20170817 19:27:22.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:22.162">Delete All Sessions</msg>
<status starttime="20170817 19:27:22.162" status="PASS" endtime="20170817 19:27:22.162"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:21.784" status="PASS" endtime="20170817 19:27:22.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.162" status="PASS" endtime="20170817 19:27:22.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.163">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:22.163">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:22.163">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:22.163" status="PASS" endtime="20170817 19:27:22.164"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.164">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:27:21.783" status="PASS" endtime="20170817 19:27:22.164"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.164">${host_state} = Running</msg>
<status starttime="20170817 19:27:21.783" status="PASS" endtime="20170817 19:27:22.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:27:22.164" status="PASS" endtime="20170817 19:27:22.165"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.169">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:22.169" status="PASS" endtime="20170817 19:27:22.170"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.170">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:22.170" status="PASS" endtime="20170817 19:27:22.170"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.171">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:22.171" status="PASS" endtime="20170817 19:27:22.171"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.172">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:22.171" status="PASS" endtime="20170817 19:27:22.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.359">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:22.172" status="PASS" endtime="20170817 19:27:22.359"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.359">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:22.359">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:22.172" status="PASS" endtime="20170817 19:27:22.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.359" status="PASS" endtime="20170817 19:27:22.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.360" status="PASS" endtime="20170817 19:27:22.361"></status>
</kw>
<status starttime="20170817 19:27:22.169" status="PASS" endtime="20170817 19:27:22.361"></status>
</kw>
<status starttime="20170817 19:27:22.168" status="PASS" endtime="20170817 19:27:22.361"></status>
</kw>
<status starttime="20170817 19:27:22.168" status="PASS" endtime="20170817 19:27:22.361"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.362">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:27:22.361" status="PASS" endtime="20170817 19:27:22.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.364">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:27:22.363" status="PASS" endtime="20170817 19:27:22.364"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.365">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:27:22.364" status="PASS" endtime="20170817 19:27:22.365"></status>
</kw>
<status starttime="20170817 19:27:22.364" status="PASS" endtime="20170817 19:27:22.365"></status>
</kw>
<status starttime="20170817 19:27:22.362" status="PASS" endtime="20170817 19:27:22.365"></status>
</kw>
<status starttime="20170817 19:27:22.362" status="PASS" endtime="20170817 19:27:22.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.443">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:22.444">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:22.365" status="PASS" endtime="20170817 19:27:22.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.445">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:22.445" status="PASS" endtime="20170817 19:27:22.445"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.446">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:22.446" status="PASS" endtime="20170817 19:27:22.446"></status>
</kw>
<status starttime="20170817 19:27:22.445" status="PASS" endtime="20170817 19:27:22.446"></status>
</kw>
<status starttime="20170817 19:27:22.444" status="PASS" endtime="20170817 19:27:22.446"></status>
</kw>
<status starttime="20170817 19:27:22.444" status="PASS" endtime="20170817 19:27:22.447"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:22.447">Delete All Sessions</msg>
<status starttime="20170817 19:27:22.447" status="PASS" endtime="20170817 19:27:22.447"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.447">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:22.167" status="PASS" endtime="20170817 19:27:22.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.447" status="PASS" endtime="20170817 19:27:22.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.448">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:22.448">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:22.449">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:22.448" status="PASS" endtime="20170817 19:27:22.449"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.449">${state} = Off</msg>
<status starttime="20170817 19:27:22.166" status="PASS" endtime="20170817 19:27:22.449"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.449">${boot_progress} = Off</msg>
<status starttime="20170817 19:27:22.166" status="PASS" endtime="20170817 19:27:22.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:27:22.450">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:27:22.449" status="FAIL" endtime="20170817 19:27:22.450"></status>
</kw>
<status starttime="20170817 19:27:22.166" status="FAIL" endtime="20170817 19:27:22.450"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.450">${status} = False</msg>
<status starttime="20170817 19:27:22.165" status="PASS" endtime="20170817 19:27:22.450"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:27:22.450" status="PASS" endtime="20170817 19:27:22.451"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.454">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:22.454" status="PASS" endtime="20170817 19:27:22.455"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.456">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:22.455" status="PASS" endtime="20170817 19:27:22.456"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.456">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:22.456" status="PASS" endtime="20170817 19:27:22.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.457">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:22.457" status="PASS" endtime="20170817 19:27:22.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.655">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:22.458" status="PASS" endtime="20170817 19:27:22.655"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.655">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:22.655">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:22.457" status="PASS" endtime="20170817 19:27:22.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.656">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.655" status="PASS" endtime="20170817 19:27:22.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.656" status="PASS" endtime="20170817 19:27:22.657"></status>
</kw>
<status starttime="20170817 19:27:22.453" status="PASS" endtime="20170817 19:27:22.657"></status>
</kw>
<status starttime="20170817 19:27:22.453" status="PASS" endtime="20170817 19:27:22.657"></status>
</kw>
<status starttime="20170817 19:27:22.452" status="PASS" endtime="20170817 19:27:22.657"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.657">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:27:22.657" status="PASS" endtime="20170817 19:27:22.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.659">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:22.659" status="PASS" endtime="20170817 19:27:22.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.660">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:22.660" status="PASS" endtime="20170817 19:27:22.660"></status>
</kw>
<status starttime="20170817 19:27:22.660" status="PASS" endtime="20170817 19:27:22.661"></status>
</kw>
<status starttime="20170817 19:27:22.658" status="PASS" endtime="20170817 19:27:22.661"></status>
</kw>
<status starttime="20170817 19:27:22.658" status="PASS" endtime="20170817 19:27:22.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.749">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:22.749">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:22.661" status="PASS" endtime="20170817 19:27:22.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.751">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:22.750" status="PASS" endtime="20170817 19:27:22.751"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.752">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:22.751" status="PASS" endtime="20170817 19:27:22.752"></status>
</kw>
<status starttime="20170817 19:27:22.751" status="PASS" endtime="20170817 19:27:22.752"></status>
</kw>
<status starttime="20170817 19:27:22.750" status="PASS" endtime="20170817 19:27:22.752"></status>
</kw>
<status starttime="20170817 19:27:22.749" status="PASS" endtime="20170817 19:27:22.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:22.752">Delete All Sessions</msg>
<status starttime="20170817 19:27:22.752" status="PASS" endtime="20170817 19:27:22.753"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:22.452" status="PASS" endtime="20170817 19:27:22.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:22.753" status="PASS" endtime="20170817 19:27:22.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:22.754">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:22.754">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:22.754">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:22.754" status="PASS" endtime="20170817 19:27:22.754"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.755">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:22.451" status="PASS" endtime="20170817 19:27:22.755"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:22.755">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:22.451" status="PASS" endtime="20170817 19:27:22.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:22.755">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:27:22.756">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:22.755" status="FAIL" endtime="20170817 19:27:22.756"></status>
</kw>
<status starttime="20170817 19:27:22.165" status="FAIL" endtime="20170817 19:27:22.756"></status>
</kw>
<status starttime="20170817 19:27:21.493" status="FAIL" endtime="20170817 19:27:22.756"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:32.765">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:32.765" status="PASS" endtime="20170817 19:27:32.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:32.767">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:32.766" status="PASS" endtime="20170817 19:27:32.767"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:32.767">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:32.767" status="PASS" endtime="20170817 19:27:32.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:32.768">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:32.768" status="PASS" endtime="20170817 19:27:32.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:32.948">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:32.770" status="PASS" endtime="20170817 19:27:32.949"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:32.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:32.949">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:32.769" status="PASS" endtime="20170817 19:27:32.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:32.949">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:32.949" status="PASS" endtime="20170817 19:27:32.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:32.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:32.950" status="PASS" endtime="20170817 19:27:32.950"></status>
</kw>
<status starttime="20170817 19:27:32.764" status="PASS" endtime="20170817 19:27:32.950"></status>
</kw>
<status starttime="20170817 19:27:32.764" status="PASS" endtime="20170817 19:27:32.950"></status>
</kw>
<status starttime="20170817 19:27:32.763" status="PASS" endtime="20170817 19:27:32.951"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:32.951">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:27:32.951" status="PASS" endtime="20170817 19:27:32.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:32.953">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:32.953" status="PASS" endtime="20170817 19:27:32.953"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:32.954">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:32.954" status="PASS" endtime="20170817 19:27:32.954"></status>
</kw>
<status starttime="20170817 19:27:32.954" status="PASS" endtime="20170817 19:27:32.955"></status>
</kw>
<status starttime="20170817 19:27:32.952" status="PASS" endtime="20170817 19:27:32.955"></status>
</kw>
<status starttime="20170817 19:27:32.952" status="PASS" endtime="20170817 19:27:32.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.208">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:33.208">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:32.955" status="PASS" endtime="20170817 19:27:33.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.210">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:33.210" status="PASS" endtime="20170817 19:27:33.210"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:33.211">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:33.211" status="PASS" endtime="20170817 19:27:33.211"></status>
</kw>
<status starttime="20170817 19:27:33.210" status="PASS" endtime="20170817 19:27:33.211"></status>
</kw>
<status starttime="20170817 19:27:33.209" status="PASS" endtime="20170817 19:27:33.211"></status>
</kw>
<status starttime="20170817 19:27:33.209" status="PASS" endtime="20170817 19:27:33.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:33.212">Delete All Sessions</msg>
<status starttime="20170817 19:27:33.212" status="PASS" endtime="20170817 19:27:33.212"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:33.212">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:32.762" status="PASS" endtime="20170817 19:27:33.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:33.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:33.212" status="PASS" endtime="20170817 19:27:33.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.214">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:33.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:33.214">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:33.213" status="PASS" endtime="20170817 19:27:33.214"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:33.214">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:27:32.761" status="PASS" endtime="20170817 19:27:33.214"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:33.214">${power_state} = On</msg>
<status starttime="20170817 19:27:32.760" status="PASS" endtime="20170817 19:27:33.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:27:33.215" status="PASS" endtime="20170817 19:27:33.215"></status>
</kw>
<status starttime="20170817 19:27:32.760" status="PASS" endtime="20170817 19:27:33.215"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:33.219">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:33.218" status="PASS" endtime="20170817 19:27:33.219"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:33.219" status="PASS" endtime="20170817 19:27:33.220"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.220">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:33.220" status="PASS" endtime="20170817 19:27:33.220"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:33.221" status="PASS" endtime="20170817 19:27:33.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:33.835">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:33.222" status="PASS" endtime="20170817 19:27:33.835"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:33.836">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:33.836">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:33.222" status="PASS" endtime="20170817 19:27:33.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:33.837">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:33.836" status="PASS" endtime="20170817 19:27:33.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:33.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:33.837" status="PASS" endtime="20170817 19:27:33.838"></status>
</kw>
<status starttime="20170817 19:27:33.218" status="PASS" endtime="20170817 19:27:33.839"></status>
</kw>
<status starttime="20170817 19:27:33.217" status="PASS" endtime="20170817 19:27:33.839"></status>
</kw>
<status starttime="20170817 19:27:33.217" status="PASS" endtime="20170817 19:27:33.839"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.840">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:27:33.839" status="PASS" endtime="20170817 19:27:33.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:33.843">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:33.842" status="PASS" endtime="20170817 19:27:33.843"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:33.844">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:33.844" status="PASS" endtime="20170817 19:27:33.844"></status>
</kw>
<status starttime="20170817 19:27:33.843" status="PASS" endtime="20170817 19:27:33.844"></status>
</kw>
<status starttime="20170817 19:27:33.841" status="PASS" endtime="20170817 19:27:33.844"></status>
</kw>
<status starttime="20170817 19:27:33.840" status="PASS" endtime="20170817 19:27:33.844"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:34.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:33.845" status="PASS" endtime="20170817 19:27:34.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.068">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:34.068" status="PASS" endtime="20170817 19:27:34.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:34.069" status="PASS" endtime="20170817 19:27:34.069"></status>
</kw>
<status starttime="20170817 19:27:34.068" status="PASS" endtime="20170817 19:27:34.069"></status>
</kw>
<status starttime="20170817 19:27:34.067" status="PASS" endtime="20170817 19:27:34.069"></status>
</kw>
<status starttime="20170817 19:27:34.067" status="PASS" endtime="20170817 19:27:34.069"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:34.070">Delete All Sessions</msg>
<status starttime="20170817 19:27:34.070" status="PASS" endtime="20170817 19:27:34.070"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:33.216" status="PASS" endtime="20170817 19:27:34.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:34.070" status="PASS" endtime="20170817 19:27:34.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.071">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:34.071">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:34.071">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:34.071" status="PASS" endtime="20170817 19:27:34.072"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.072">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:27:33.216" status="PASS" endtime="20170817 19:27:34.072"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.072">${host_state} = Running</msg>
<status starttime="20170817 19:27:33.215" status="PASS" endtime="20170817 19:27:34.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:27:34.072" status="PASS" endtime="20170817 19:27:34.073"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.078">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:34.077" status="PASS" endtime="20170817 19:27:34.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.079">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:34.078" status="PASS" endtime="20170817 19:27:34.079"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.079">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:34.079" status="PASS" endtime="20170817 19:27:34.079"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.080">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:34.079" status="PASS" endtime="20170817 19:27:34.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.259">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:34.081" status="PASS" endtime="20170817 19:27:34.259"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.259">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:34.259">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:34.080" status="PASS" endtime="20170817 19:27:34.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.260">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:34.260" status="PASS" endtime="20170817 19:27:34.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:34.260" status="PASS" endtime="20170817 19:27:34.261"></status>
</kw>
<status starttime="20170817 19:27:34.077" status="PASS" endtime="20170817 19:27:34.261"></status>
</kw>
<status starttime="20170817 19:27:34.076" status="PASS" endtime="20170817 19:27:34.261"></status>
</kw>
<status starttime="20170817 19:27:34.075" status="PASS" endtime="20170817 19:27:34.261"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.262">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:27:34.261" status="PASS" endtime="20170817 19:27:34.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.264">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:27:34.263" status="PASS" endtime="20170817 19:27:34.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.265">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:27:34.264" status="PASS" endtime="20170817 19:27:34.265"></status>
</kw>
<status starttime="20170817 19:27:34.264" status="PASS" endtime="20170817 19:27:34.265"></status>
</kw>
<status starttime="20170817 19:27:34.262" status="PASS" endtime="20170817 19:27:34.265"></status>
</kw>
<status starttime="20170817 19:27:34.262" status="PASS" endtime="20170817 19:27:34.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.332">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:34.332">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:34.265" status="PASS" endtime="20170817 19:27:34.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.334">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:34.333" status="PASS" endtime="20170817 19:27:34.334"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.335">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:34.335" status="PASS" endtime="20170817 19:27:34.335"></status>
</kw>
<status starttime="20170817 19:27:34.334" status="PASS" endtime="20170817 19:27:34.335"></status>
</kw>
<status starttime="20170817 19:27:34.333" status="PASS" endtime="20170817 19:27:34.335"></status>
</kw>
<status starttime="20170817 19:27:34.332" status="PASS" endtime="20170817 19:27:34.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:34.336">Delete All Sessions</msg>
<status starttime="20170817 19:27:34.336" status="PASS" endtime="20170817 19:27:34.336"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:34.075" status="PASS" endtime="20170817 19:27:34.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:34.337" status="PASS" endtime="20170817 19:27:34.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.338">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:34.338">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:34.338">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:34.338" status="PASS" endtime="20170817 19:27:34.339"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.339">${state} = Off</msg>
<status starttime="20170817 19:27:34.074" status="PASS" endtime="20170817 19:27:34.339"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.339">${boot_progress} = Off</msg>
<status starttime="20170817 19:27:34.074" status="PASS" endtime="20170817 19:27:34.339"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:27:34.340">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:27:34.340" status="FAIL" endtime="20170817 19:27:34.340"></status>
</kw>
<status starttime="20170817 19:27:34.074" status="FAIL" endtime="20170817 19:27:34.341"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.341">${status} = False</msg>
<status starttime="20170817 19:27:34.073" status="PASS" endtime="20170817 19:27:34.341"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:27:34.341" status="PASS" endtime="20170817 19:27:34.341"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.345">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:34.345" status="PASS" endtime="20170817 19:27:34.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:34.346" status="PASS" endtime="20170817 19:27:34.346"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.347">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:34.347" status="PASS" endtime="20170817 19:27:34.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:34.348" status="PASS" endtime="20170817 19:27:34.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:34.349" status="PASS" endtime="20170817 19:27:34.527"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:34.528">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:34.349" status="PASS" endtime="20170817 19:27:34.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:34.528" status="PASS" endtime="20170817 19:27:34.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:34.529" status="PASS" endtime="20170817 19:27:34.529"></status>
</kw>
<status starttime="20170817 19:27:34.344" status="PASS" endtime="20170817 19:27:34.529"></status>
</kw>
<status starttime="20170817 19:27:34.344" status="PASS" endtime="20170817 19:27:34.529"></status>
</kw>
<status starttime="20170817 19:27:34.343" status="PASS" endtime="20170817 19:27:34.529"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.530">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:27:34.530" status="PASS" endtime="20170817 19:27:34.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.532">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:34.531" status="PASS" endtime="20170817 19:27:34.532"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.533">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:27:34.533" status="PASS" endtime="20170817 19:27:34.533"></status>
</kw>
<status starttime="20170817 19:27:34.532" status="PASS" endtime="20170817 19:27:34.534"></status>
</kw>
<status starttime="20170817 19:27:34.531" status="PASS" endtime="20170817 19:27:34.534"></status>
</kw>
<status starttime="20170817 19:27:34.530" status="PASS" endtime="20170817 19:27:34.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.692">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:34.692">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:34.534" status="PASS" endtime="20170817 19:27:34.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.694">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:34.693" status="PASS" endtime="20170817 19:27:34.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.695">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:34.694" status="PASS" endtime="20170817 19:27:34.695"></status>
</kw>
<status starttime="20170817 19:27:34.694" status="PASS" endtime="20170817 19:27:34.695"></status>
</kw>
<status starttime="20170817 19:27:34.693" status="PASS" endtime="20170817 19:27:34.695"></status>
</kw>
<status starttime="20170817 19:27:34.692" status="PASS" endtime="20170817 19:27:34.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:34.696">Delete All Sessions</msg>
<status starttime="20170817 19:27:34.695" status="PASS" endtime="20170817 19:27:34.696"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:34.342" status="PASS" endtime="20170817 19:27:34.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:34.696" status="PASS" endtime="20170817 19:27:34.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:34.697">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:34.697">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:34.697">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:34.697" status="PASS" endtime="20170817 19:27:34.697"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.698">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:34.342" status="PASS" endtime="20170817 19:27:34.698"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:34.698">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:34.341" status="PASS" endtime="20170817 19:27:34.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:34.698">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:27:34.699">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:27:34.698" status="FAIL" endtime="20170817 19:27:34.699"></status>
</kw>
<status starttime="20170817 19:27:34.073" status="FAIL" endtime="20170817 19:27:34.699"></status>
</kw>
<status starttime="20170817 19:27:32.758" status="FAIL" endtime="20170817 19:27:34.699"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:44.704">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:27:44.704" status="PASS" endtime="20170817 19:27:44.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:44.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:27:44.705" status="PASS" endtime="20170817 19:27:44.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:44.706">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:27:44.705" status="PASS" endtime="20170817 19:27:44.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:44.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:27:44.706" status="PASS" endtime="20170817 19:27:44.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:45.321">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:27:44.707" status="PASS" endtime="20170817 19:27:45.321"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:45.321">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:27:45.321">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:44.707" status="PASS" endtime="20170817 19:27:45.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:45.322">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:45.322" status="PASS" endtime="20170817 19:27:45.322"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:45.323">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:45.322" status="PASS" endtime="20170817 19:27:45.323"></status>
</kw>
<status starttime="20170817 19:27:44.703" status="PASS" endtime="20170817 19:27:45.323"></status>
</kw>
<status starttime="20170817 19:27:44.703" status="PASS" endtime="20170817 19:27:45.323"></status>
</kw>
<status starttime="20170817 19:27:44.702" status="PASS" endtime="20170817 19:27:45.323"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:45.324">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:27:45.323" status="PASS" endtime="20170817 19:27:45.324"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:45.326">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:45.325" status="PASS" endtime="20170817 19:27:45.326"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:45.327">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:27:45.326" status="PASS" endtime="20170817 19:27:45.327"></status>
</kw>
<status starttime="20170817 19:27:45.326" status="PASS" endtime="20170817 19:27:45.327"></status>
</kw>
<status starttime="20170817 19:27:45.324" status="PASS" endtime="20170817 19:27:45.327"></status>
</kw>
<status starttime="20170817 19:27:45.324" status="PASS" endtime="20170817 19:27:45.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:50.790">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:27:50.790">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:45.327" status="PASS" endtime="20170817 19:27:50.790"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:50.793">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:50.792" status="PASS" endtime="20170817 19:27:50.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:50.794">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:27:50.793" status="PASS" endtime="20170817 19:27:50.794"></status>
</kw>
<status starttime="20170817 19:27:50.793" status="PASS" endtime="20170817 19:27:50.794"></status>
</kw>
<status starttime="20170817 19:27:50.792" status="PASS" endtime="20170817 19:27:50.794"></status>
</kw>
<status starttime="20170817 19:27:50.791" status="PASS" endtime="20170817 19:27:50.794"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:27:50.794">Delete All Sessions</msg>
<status starttime="20170817 19:27:50.794" status="PASS" endtime="20170817 19:27:50.795"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:50.795">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:27:44.701" status="PASS" endtime="20170817 19:27:50.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:27:50.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:27:50.795" status="PASS" endtime="20170817 19:27:50.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:27:50.796">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:27:50.796">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:27:50.796">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:27:50.796" status="PASS" endtime="20170817 19:27:50.796"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:50.797">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 19:27:44.701" status="PASS" endtime="20170817 19:27:50.797"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:27:50.797">${power_state} = Off</msg>
<status starttime="20170817 19:27:44.700" status="PASS" endtime="20170817 19:27:50.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:27:50.798">On != Off</msg>
<status starttime="20170817 19:27:50.797" status="FAIL" endtime="20170817 19:27:50.798"></status>
</kw>
<status starttime="20170817 19:27:44.700" status="FAIL" endtime="20170817 19:27:50.798"></status>
</kw>
<status starttime="20170817 19:27:44.699" status="FAIL" endtime="20170817 19:27:50.798"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:00.803">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:00.803" status="PASS" endtime="20170817 19:28:00.804"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:00.805">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:00.804" status="PASS" endtime="20170817 19:28:00.805"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:00.805">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:00.805" status="PASS" endtime="20170817 19:28:00.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:00.806">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:00.805" status="PASS" endtime="20170817 19:28:00.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:00.807" status="PASS" endtime="20170817 19:28:01.235"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:01.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:01.236">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:00.806" status="PASS" endtime="20170817 19:28:01.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:01.236" status="PASS" endtime="20170817 19:28:01.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:01.237" status="PASS" endtime="20170817 19:28:01.237"></status>
</kw>
<status starttime="20170817 19:28:00.803" status="PASS" endtime="20170817 19:28:01.237"></status>
</kw>
<status starttime="20170817 19:28:00.802" status="PASS" endtime="20170817 19:28:01.237"></status>
</kw>
<status starttime="20170817 19:28:00.801" status="PASS" endtime="20170817 19:28:01.237"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.238">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:28:01.238" status="PASS" endtime="20170817 19:28:01.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.240">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:01.240" status="PASS" endtime="20170817 19:28:01.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.241">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:01.241" status="PASS" endtime="20170817 19:28:01.241"></status>
</kw>
<status starttime="20170817 19:28:01.240" status="PASS" endtime="20170817 19:28:01.241"></status>
</kw>
<status starttime="20170817 19:28:01.239" status="PASS" endtime="20170817 19:28:01.241"></status>
</kw>
<status starttime="20170817 19:28:01.238" status="PASS" endtime="20170817 19:28:01.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.667">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:01.667">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:01.242" status="PASS" endtime="20170817 19:28:01.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.669">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:01.668" status="PASS" endtime="20170817 19:28:01.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.670">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:01.670" status="PASS" endtime="20170817 19:28:01.670"></status>
</kw>
<status starttime="20170817 19:28:01.669" status="PASS" endtime="20170817 19:28:01.670"></status>
</kw>
<status starttime="20170817 19:28:01.667" status="PASS" endtime="20170817 19:28:01.670"></status>
</kw>
<status starttime="20170817 19:28:01.667" status="PASS" endtime="20170817 19:28:01.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:01.671">Delete All Sessions</msg>
<status starttime="20170817 19:28:01.671" status="PASS" endtime="20170817 19:28:01.671"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:01.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:00.800" status="PASS" endtime="20170817 19:28:01.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:01.671" status="PASS" endtime="20170817 19:28:01.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.673">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:01.673">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:01.673">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:01.672" status="PASS" endtime="20170817 19:28:01.673"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:01.673">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:28:00.800" status="PASS" endtime="20170817 19:28:01.673"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:01.674">${power_state} = On</msg>
<status starttime="20170817 19:28:00.799" status="PASS" endtime="20170817 19:28:01.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:28:01.674" status="PASS" endtime="20170817 19:28:01.674"></status>
</kw>
<status starttime="20170817 19:28:00.799" status="PASS" endtime="20170817 19:28:01.674"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.678">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:01.677" status="PASS" endtime="20170817 19:28:01.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:01.678" status="PASS" endtime="20170817 19:28:01.679"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.679">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:01.679" status="PASS" endtime="20170817 19:28:01.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:01.680" status="PASS" endtime="20170817 19:28:01.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.972">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:01.681" status="PASS" endtime="20170817 19:28:01.972"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:01.973">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:01.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:01.680" status="PASS" endtime="20170817 19:28:01.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.973">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:01.973" status="PASS" endtime="20170817 19:28:01.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:01.974" status="PASS" endtime="20170817 19:28:01.974"></status>
</kw>
<status starttime="20170817 19:28:01.677" status="PASS" endtime="20170817 19:28:01.974"></status>
</kw>
<status starttime="20170817 19:28:01.677" status="PASS" endtime="20170817 19:28:01.974"></status>
</kw>
<status starttime="20170817 19:28:01.676" status="PASS" endtime="20170817 19:28:01.974"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.975">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:28:01.975" status="PASS" endtime="20170817 19:28:01.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:01.977">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:01.976" status="PASS" endtime="20170817 19:28:01.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:01.978">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:01.978" status="PASS" endtime="20170817 19:28:01.978"></status>
</kw>
<status starttime="20170817 19:28:01.978" status="PASS" endtime="20170817 19:28:01.979"></status>
</kw>
<status starttime="20170817 19:28:01.976" status="PASS" endtime="20170817 19:28:01.979"></status>
</kw>
<status starttime="20170817 19:28:01.975" status="PASS" endtime="20170817 19:28:01.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.328">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:02.328">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:01.979" status="PASS" endtime="20170817 19:28:02.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.330">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:02.330" status="PASS" endtime="20170817 19:28:02.331"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.331">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:02.331" status="PASS" endtime="20170817 19:28:02.332"></status>
</kw>
<status starttime="20170817 19:28:02.331" status="PASS" endtime="20170817 19:28:02.332"></status>
</kw>
<status starttime="20170817 19:28:02.329" status="PASS" endtime="20170817 19:28:02.332"></status>
</kw>
<status starttime="20170817 19:28:02.329" status="PASS" endtime="20170817 19:28:02.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:02.332">Delete All Sessions</msg>
<status starttime="20170817 19:28:02.332" status="PASS" endtime="20170817 19:28:02.332"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.333">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:01.675" status="PASS" endtime="20170817 19:28:02.333"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:02.333" status="PASS" endtime="20170817 19:28:02.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.334">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:02.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:02.334">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:02.333" status="PASS" endtime="20170817 19:28:02.334"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.334">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:28:01.675" status="PASS" endtime="20170817 19:28:02.334"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.335">${host_state} = Running</msg>
<status starttime="20170817 19:28:01.674" status="PASS" endtime="20170817 19:28:02.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:28:02.335" status="PASS" endtime="20170817 19:28:02.335"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.340">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:02.339" status="PASS" endtime="20170817 19:28:02.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.341">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:02.341" status="PASS" endtime="20170817 19:28:02.341"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.341">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:02.341" status="PASS" endtime="20170817 19:28:02.341"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:02.342" status="PASS" endtime="20170817 19:28:02.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.834">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:02.343" status="PASS" endtime="20170817 19:28:02.834"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.834">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:02.834">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:02.342" status="PASS" endtime="20170817 19:28:02.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.835">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:02.835" status="PASS" endtime="20170817 19:28:02.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:02.835" status="PASS" endtime="20170817 19:28:02.836"></status>
</kw>
<status starttime="20170817 19:28:02.339" status="PASS" endtime="20170817 19:28:02.836"></status>
</kw>
<status starttime="20170817 19:28:02.338" status="PASS" endtime="20170817 19:28:02.836"></status>
</kw>
<status starttime="20170817 19:28:02.338" status="PASS" endtime="20170817 19:28:02.836"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.837">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:28:02.837" status="PASS" endtime="20170817 19:28:02.837"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.839">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:02.838" status="PASS" endtime="20170817 19:28:02.839"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.840">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:02.840" status="PASS" endtime="20170817 19:28:02.840"></status>
</kw>
<status starttime="20170817 19:28:02.839" status="PASS" endtime="20170817 19:28:02.840"></status>
</kw>
<status starttime="20170817 19:28:02.838" status="PASS" endtime="20170817 19:28:02.840"></status>
</kw>
<status starttime="20170817 19:28:02.837" status="PASS" endtime="20170817 19:28:02.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.987">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:02.987">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:02.840" status="PASS" endtime="20170817 19:28:02.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.989">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:02.989" status="PASS" endtime="20170817 19:28:02.989"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.990">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:02.990" status="PASS" endtime="20170817 19:28:02.990"></status>
</kw>
<status starttime="20170817 19:28:02.989" status="PASS" endtime="20170817 19:28:02.990"></status>
</kw>
<status starttime="20170817 19:28:02.988" status="PASS" endtime="20170817 19:28:02.990"></status>
</kw>
<status starttime="20170817 19:28:02.988" status="PASS" endtime="20170817 19:28:02.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:02.991">Delete All Sessions</msg>
<status starttime="20170817 19:28:02.991" status="PASS" endtime="20170817 19:28:02.991"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.991">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:02.337" status="PASS" endtime="20170817 19:28:02.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.992">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:02.991" status="PASS" endtime="20170817 19:28:02.992"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:02.992">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:02.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:02.992">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:02.992" status="PASS" endtime="20170817 19:28:02.992"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.993">${state} = Off</msg>
<status starttime="20170817 19:28:02.337" status="PASS" endtime="20170817 19:28:02.993"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.993">${boot_progress} = Off</msg>
<status starttime="20170817 19:28:02.336" status="PASS" endtime="20170817 19:28:02.993"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:28:02.994">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:28:02.993" status="FAIL" endtime="20170817 19:28:02.994"></status>
</kw>
<status starttime="20170817 19:28:02.336" status="FAIL" endtime="20170817 19:28:02.994"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:02.994">${status} = False</msg>
<status starttime="20170817 19:28:02.336" status="PASS" endtime="20170817 19:28:02.994"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:28:02.994" status="PASS" endtime="20170817 19:28:02.995"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:02.999">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:02.998" status="PASS" endtime="20170817 19:28:02.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.000">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:02.999" status="PASS" endtime="20170817 19:28:03.000"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.001">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:03.000" status="PASS" endtime="20170817 19:28:03.001"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.002">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:03.001" status="PASS" endtime="20170817 19:28:03.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:03.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:03.003" status="PASS" endtime="20170817 19:28:03.179"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:03.180">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:03.180">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:03.002" status="PASS" endtime="20170817 19:28:03.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:03.180">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:03.180" status="PASS" endtime="20170817 19:28:03.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:03.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:03.181" status="PASS" endtime="20170817 19:28:03.181"></status>
</kw>
<status starttime="20170817 19:28:02.998" status="PASS" endtime="20170817 19:28:03.181"></status>
</kw>
<status starttime="20170817 19:28:02.997" status="PASS" endtime="20170817 19:28:03.181"></status>
</kw>
<status starttime="20170817 19:28:02.996" status="PASS" endtime="20170817 19:28:03.181"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.182">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:28:03.182" status="PASS" endtime="20170817 19:28:03.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.184">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:03.183" status="PASS" endtime="20170817 19:28:03.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:03.185">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:03.185" status="PASS" endtime="20170817 19:28:03.185"></status>
</kw>
<status starttime="20170817 19:28:03.184" status="PASS" endtime="20170817 19:28:03.185"></status>
</kw>
<status starttime="20170817 19:28:03.183" status="PASS" endtime="20170817 19:28:03.185"></status>
</kw>
<status starttime="20170817 19:28:03.182" status="PASS" endtime="20170817 19:28:03.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.276">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:03.276">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:03.187" status="PASS" endtime="20170817 19:28:03.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.278">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:03.277" status="PASS" endtime="20170817 19:28:03.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:03.279">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:03.279" status="PASS" endtime="20170817 19:28:03.279"></status>
</kw>
<status starttime="20170817 19:28:03.278" status="PASS" endtime="20170817 19:28:03.279"></status>
</kw>
<status starttime="20170817 19:28:03.277" status="PASS" endtime="20170817 19:28:03.279"></status>
</kw>
<status starttime="20170817 19:28:03.276" status="PASS" endtime="20170817 19:28:03.279"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:03.280">Delete All Sessions</msg>
<status starttime="20170817 19:28:03.279" status="PASS" endtime="20170817 19:28:03.280"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:03.280">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:02.996" status="PASS" endtime="20170817 19:28:03.280"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:03.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:03.280" status="PASS" endtime="20170817 19:28:03.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:03.281">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:03.281">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:03.281">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:03.281" status="PASS" endtime="20170817 19:28:03.281"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:03.281">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:02.995" status="PASS" endtime="20170817 19:28:03.282"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:03.282">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:02.995" status="PASS" endtime="20170817 19:28:03.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:03.282">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:28:03.282">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:03.282" status="FAIL" endtime="20170817 19:28:03.283"></status>
</kw>
<status starttime="20170817 19:28:02.335" status="FAIL" endtime="20170817 19:28:03.283"></status>
</kw>
<status starttime="20170817 19:28:00.799" status="FAIL" endtime="20170817 19:28:03.283"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.288">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:13.288" status="PASS" endtime="20170817 19:28:13.289"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.289">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:13.289" status="PASS" endtime="20170817 19:28:13.289"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.290">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:13.289" status="PASS" endtime="20170817 19:28:13.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.290">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:13.290" status="PASS" endtime="20170817 19:28:13.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:13.291" status="PASS" endtime="20170817 19:28:13.552"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:13.553">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.291" status="PASS" endtime="20170817 19:28:13.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.553">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:13.553" status="PASS" endtime="20170817 19:28:13.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:13.554" status="PASS" endtime="20170817 19:28:13.554"></status>
</kw>
<status starttime="20170817 19:28:13.287" status="PASS" endtime="20170817 19:28:13.554"></status>
</kw>
<status starttime="20170817 19:28:13.287" status="PASS" endtime="20170817 19:28:13.554"></status>
</kw>
<status starttime="20170817 19:28:13.286" status="PASS" endtime="20170817 19:28:13.554"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.555">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:28:13.555" status="PASS" endtime="20170817 19:28:13.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.557">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:13.556" status="PASS" endtime="20170817 19:28:13.557"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.558">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:13.558" status="PASS" endtime="20170817 19:28:13.558"></status>
</kw>
<status starttime="20170817 19:28:13.557" status="PASS" endtime="20170817 19:28:13.558"></status>
</kw>
<status starttime="20170817 19:28:13.556" status="PASS" endtime="20170817 19:28:13.558"></status>
</kw>
<status starttime="20170817 19:28:13.555" status="PASS" endtime="20170817 19:28:13.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.651">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:13.651">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.559" status="PASS" endtime="20170817 19:28:13.651"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.653">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:13.652" status="PASS" endtime="20170817 19:28:13.653"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.654">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:13.653" status="PASS" endtime="20170817 19:28:13.654"></status>
</kw>
<status starttime="20170817 19:28:13.653" status="PASS" endtime="20170817 19:28:13.654"></status>
</kw>
<status starttime="20170817 19:28:13.652" status="PASS" endtime="20170817 19:28:13.654"></status>
</kw>
<status starttime="20170817 19:28:13.651" status="PASS" endtime="20170817 19:28:13.654"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:13.654">Delete All Sessions</msg>
<status starttime="20170817 19:28:13.654" status="PASS" endtime="20170817 19:28:13.655"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.655">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.285" status="PASS" endtime="20170817 19:28:13.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:13.655" status="PASS" endtime="20170817 19:28:13.655"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.656">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:13.656">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:13.656">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:13.656" status="PASS" endtime="20170817 19:28:13.656"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.657">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:28:13.285" status="PASS" endtime="20170817 19:28:13.657"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.657">${power_state} = On</msg>
<status starttime="20170817 19:28:13.284" status="PASS" endtime="20170817 19:28:13.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:28:13.657" status="PASS" endtime="20170817 19:28:13.657"></status>
</kw>
<status starttime="20170817 19:28:13.284" status="PASS" endtime="20170817 19:28:13.658"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.661">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:13.661" status="PASS" endtime="20170817 19:28:13.662"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.662">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:13.662" status="PASS" endtime="20170817 19:28:13.662"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.663">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:13.663" status="PASS" endtime="20170817 19:28:13.663"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.664">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:13.663" status="PASS" endtime="20170817 19:28:13.664"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.876">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:13.665" status="PASS" endtime="20170817 19:28:13.876"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.876">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:13.876">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.664" status="PASS" endtime="20170817 19:28:13.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.877">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:13.876" status="PASS" endtime="20170817 19:28:13.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:13.877" status="PASS" endtime="20170817 19:28:13.878"></status>
</kw>
<status starttime="20170817 19:28:13.660" status="PASS" endtime="20170817 19:28:13.878"></status>
</kw>
<status starttime="20170817 19:28:13.660" status="PASS" endtime="20170817 19:28:13.878"></status>
</kw>
<status starttime="20170817 19:28:13.659" status="PASS" endtime="20170817 19:28:13.878"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.878">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:28:13.878" status="PASS" endtime="20170817 19:28:13.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.880">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:13.880" status="PASS" endtime="20170817 19:28:13.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.881">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:13.881" status="PASS" endtime="20170817 19:28:13.882"></status>
</kw>
<status starttime="20170817 19:28:13.881" status="PASS" endtime="20170817 19:28:13.882"></status>
</kw>
<status starttime="20170817 19:28:13.879" status="PASS" endtime="20170817 19:28:13.882"></status>
</kw>
<status starttime="20170817 19:28:13.879" status="PASS" endtime="20170817 19:28:13.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.982">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:13.983">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.882" status="PASS" endtime="20170817 19:28:13.983"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.985">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:13.984" status="PASS" endtime="20170817 19:28:13.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.986">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:13.986" status="PASS" endtime="20170817 19:28:13.986"></status>
</kw>
<status starttime="20170817 19:28:13.985" status="PASS" endtime="20170817 19:28:13.986"></status>
</kw>
<status starttime="20170817 19:28:13.984" status="PASS" endtime="20170817 19:28:13.986"></status>
</kw>
<status starttime="20170817 19:28:13.983" status="PASS" endtime="20170817 19:28:13.986"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:13.987">Delete All Sessions</msg>
<status starttime="20170817 19:28:13.986" status="PASS" endtime="20170817 19:28:13.987"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.987">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.659" status="PASS" endtime="20170817 19:28:13.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:13.987" status="PASS" endtime="20170817 19:28:13.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.988">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:13.988">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:13.988">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:13.988" status="PASS" endtime="20170817 19:28:13.988"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.989">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:28:13.658" status="PASS" endtime="20170817 19:28:13.989"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:13.989">${host_state} = Running</msg>
<status starttime="20170817 19:28:13.658" status="PASS" endtime="20170817 19:28:13.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:28:13.989" status="PASS" endtime="20170817 19:28:13.989"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:13.994">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:13.994" status="PASS" endtime="20170817 19:28:13.995"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.995">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:13.995" status="PASS" endtime="20170817 19:28:13.995"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.996">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:13.996" status="PASS" endtime="20170817 19:28:13.996"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:13.997">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:13.996" status="PASS" endtime="20170817 19:28:13.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:13.997" status="PASS" endtime="20170817 19:28:14.191"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.191">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:14.191">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.997" status="PASS" endtime="20170817 19:28:14.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.191">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:14.191" status="PASS" endtime="20170817 19:28:14.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:14.192" status="PASS" endtime="20170817 19:28:14.192"></status>
</kw>
<status starttime="20170817 19:28:13.993" status="PASS" endtime="20170817 19:28:14.192"></status>
</kw>
<status starttime="20170817 19:28:13.993" status="PASS" endtime="20170817 19:28:14.192"></status>
</kw>
<status starttime="20170817 19:28:13.992" status="PASS" endtime="20170817 19:28:14.192"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.193">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:28:14.193" status="PASS" endtime="20170817 19:28:14.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.195">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:14.194" status="PASS" endtime="20170817 19:28:14.196"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.196">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:14.196" status="PASS" endtime="20170817 19:28:14.197"></status>
</kw>
<status starttime="20170817 19:28:14.196" status="PASS" endtime="20170817 19:28:14.197"></status>
</kw>
<status starttime="20170817 19:28:14.194" status="PASS" endtime="20170817 19:28:14.197"></status>
</kw>
<status starttime="20170817 19:28:14.193" status="PASS" endtime="20170817 19:28:14.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.262">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:14.262">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:14.197" status="PASS" endtime="20170817 19:28:14.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.264">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:14.263" status="PASS" endtime="20170817 19:28:14.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.265">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:14.265" status="PASS" endtime="20170817 19:28:14.265"></status>
</kw>
<status starttime="20170817 19:28:14.264" status="PASS" endtime="20170817 19:28:14.265"></status>
</kw>
<status starttime="20170817 19:28:14.263" status="PASS" endtime="20170817 19:28:14.265"></status>
</kw>
<status starttime="20170817 19:28:14.263" status="PASS" endtime="20170817 19:28:14.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:14.266">Delete All Sessions</msg>
<status starttime="20170817 19:28:14.266" status="PASS" endtime="20170817 19:28:14.266"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:13.992" status="PASS" endtime="20170817 19:28:14.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:14.266" status="PASS" endtime="20170817 19:28:14.267"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.267">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:14.267">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:14.267">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:14.267" status="PASS" endtime="20170817 19:28:14.267"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.268">${state} = Off</msg>
<status starttime="20170817 19:28:13.991" status="PASS" endtime="20170817 19:28:14.268"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.268">${boot_progress} = Off</msg>
<status starttime="20170817 19:28:13.991" status="PASS" endtime="20170817 19:28:14.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:28:14.269">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:28:14.268" status="FAIL" endtime="20170817 19:28:14.269"></status>
</kw>
<status starttime="20170817 19:28:13.990" status="FAIL" endtime="20170817 19:28:14.269"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.269">${status} = False</msg>
<status starttime="20170817 19:28:13.990" status="PASS" endtime="20170817 19:28:14.269"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:28:14.269" status="PASS" endtime="20170817 19:28:14.270"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.273">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:14.273" status="PASS" endtime="20170817 19:28:14.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.274">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:14.274" status="PASS" endtime="20170817 19:28:14.274"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.275">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:14.274" status="PASS" endtime="20170817 19:28:14.275"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:14.275" status="PASS" endtime="20170817 19:28:14.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:14.276" status="PASS" endtime="20170817 19:28:14.506"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.506">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:14.507">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:14.276" status="PASS" endtime="20170817 19:28:14.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.507">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:14.507" status="PASS" endtime="20170817 19:28:14.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:14.507" status="PASS" endtime="20170817 19:28:14.508"></status>
</kw>
<status starttime="20170817 19:28:14.272" status="PASS" endtime="20170817 19:28:14.508"></status>
</kw>
<status starttime="20170817 19:28:14.272" status="PASS" endtime="20170817 19:28:14.508"></status>
</kw>
<status starttime="20170817 19:28:14.271" status="PASS" endtime="20170817 19:28:14.508"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.509">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:28:14.508" status="PASS" endtime="20170817 19:28:14.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.511">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:14.510" status="PASS" endtime="20170817 19:28:14.511"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.512">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:14.512" status="PASS" endtime="20170817 19:28:14.512"></status>
</kw>
<status starttime="20170817 19:28:14.511" status="PASS" endtime="20170817 19:28:14.512"></status>
</kw>
<status starttime="20170817 19:28:14.510" status="PASS" endtime="20170817 19:28:14.512"></status>
</kw>
<status starttime="20170817 19:28:14.509" status="PASS" endtime="20170817 19:28:14.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.658">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:14.658">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:14.512" status="PASS" endtime="20170817 19:28:14.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.660">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:14.659" status="PASS" endtime="20170817 19:28:14.660"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.661">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:14.661" status="PASS" endtime="20170817 19:28:14.661"></status>
</kw>
<status starttime="20170817 19:28:14.660" status="PASS" endtime="20170817 19:28:14.661"></status>
</kw>
<status starttime="20170817 19:28:14.659" status="PASS" endtime="20170817 19:28:14.661"></status>
</kw>
<status starttime="20170817 19:28:14.659" status="PASS" endtime="20170817 19:28:14.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:14.662">Delete All Sessions</msg>
<status starttime="20170817 19:28:14.661" status="PASS" endtime="20170817 19:28:14.662"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.662">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:14.271" status="PASS" endtime="20170817 19:28:14.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:14.662" status="PASS" endtime="20170817 19:28:14.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:14.663">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:14.663">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:14.663">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:14.663" status="PASS" endtime="20170817 19:28:14.663"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.664">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:14.270" status="PASS" endtime="20170817 19:28:14.664"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:14.664">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:14.270" status="PASS" endtime="20170817 19:28:14.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:14.664">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:28:14.665">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:14.664" status="FAIL" endtime="20170817 19:28:14.665"></status>
</kw>
<status starttime="20170817 19:28:13.990" status="FAIL" endtime="20170817 19:28:14.665"></status>
</kw>
<status starttime="20170817 19:28:13.283" status="FAIL" endtime="20170817 19:28:14.665"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:24.670">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:24.670" status="PASS" endtime="20170817 19:28:24.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:24.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:24.671" status="PASS" endtime="20170817 19:28:24.671"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:24.672">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:24.672" status="PASS" endtime="20170817 19:28:24.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:24.673">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:24.672" status="PASS" endtime="20170817 19:28:24.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:24.893">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:24.673" status="PASS" endtime="20170817 19:28:24.893"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:24.893">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:24.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:24.673" status="PASS" endtime="20170817 19:28:24.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:24.894">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:24.893" status="PASS" endtime="20170817 19:28:24.894"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:24.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:24.894" status="PASS" endtime="20170817 19:28:24.894"></status>
</kw>
<status starttime="20170817 19:28:24.669" status="PASS" endtime="20170817 19:28:24.895"></status>
</kw>
<status starttime="20170817 19:28:24.669" status="PASS" endtime="20170817 19:28:24.895"></status>
</kw>
<status starttime="20170817 19:28:24.668" status="PASS" endtime="20170817 19:28:24.895"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:24.895">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:28:24.895" status="PASS" endtime="20170817 19:28:24.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:24.897">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:24.897" status="PASS" endtime="20170817 19:28:24.897"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:24.898">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:24.898" status="PASS" endtime="20170817 19:28:24.898"></status>
</kw>
<status starttime="20170817 19:28:24.898" status="PASS" endtime="20170817 19:28:24.898"></status>
</kw>
<status starttime="20170817 19:28:24.896" status="PASS" endtime="20170817 19:28:24.899"></status>
</kw>
<status starttime="20170817 19:28:24.896" status="PASS" endtime="20170817 19:28:24.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.055">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:25.056">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:24.899" status="PASS" endtime="20170817 19:28:25.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.058">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.057" status="PASS" endtime="20170817 19:28:25.058"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.059">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.058" status="PASS" endtime="20170817 19:28:25.059"></status>
</kw>
<status starttime="20170817 19:28:25.058" status="PASS" endtime="20170817 19:28:25.059"></status>
</kw>
<status starttime="20170817 19:28:25.057" status="PASS" endtime="20170817 19:28:25.059"></status>
</kw>
<status starttime="20170817 19:28:25.056" status="PASS" endtime="20170817 19:28:25.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:25.060">Delete All Sessions</msg>
<status starttime="20170817 19:28:25.059" status="PASS" endtime="20170817 19:28:25.060"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:24.667" status="PASS" endtime="20170817 19:28:25.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.060" status="PASS" endtime="20170817 19:28:25.061"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.061">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:25.061">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:25.061">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:25.061" status="PASS" endtime="20170817 19:28:25.061"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.061">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:28:24.667" status="PASS" endtime="20170817 19:28:25.062"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.062">${power_state} = On</msg>
<status starttime="20170817 19:28:24.666" status="PASS" endtime="20170817 19:28:25.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:28:25.062" status="PASS" endtime="20170817 19:28:25.062"></status>
</kw>
<status starttime="20170817 19:28:24.666" status="PASS" endtime="20170817 19:28:25.062"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.066">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:25.066" status="PASS" endtime="20170817 19:28:25.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.067">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:25.067" status="PASS" endtime="20170817 19:28:25.067"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.068">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:25.067" status="PASS" endtime="20170817 19:28:25.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:25.068" status="PASS" endtime="20170817 19:28:25.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:25.069" status="PASS" endtime="20170817 19:28:25.283"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:25.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.068" status="PASS" endtime="20170817 19:28:25.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.283" status="PASS" endtime="20170817 19:28:25.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.284" status="PASS" endtime="20170817 19:28:25.285"></status>
</kw>
<status starttime="20170817 19:28:25.065" status="PASS" endtime="20170817 19:28:25.285"></status>
</kw>
<status starttime="20170817 19:28:25.065" status="PASS" endtime="20170817 19:28:25.285"></status>
</kw>
<status starttime="20170817 19:28:25.064" status="PASS" endtime="20170817 19:28:25.285"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.286">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:28:25.285" status="PASS" endtime="20170817 19:28:25.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.288">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:25.287" status="PASS" endtime="20170817 19:28:25.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.289">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:25.289" status="PASS" endtime="20170817 19:28:25.289"></status>
</kw>
<status starttime="20170817 19:28:25.288" status="PASS" endtime="20170817 19:28:25.289"></status>
</kw>
<status starttime="20170817 19:28:25.286" status="PASS" endtime="20170817 19:28:25.289"></status>
</kw>
<status starttime="20170817 19:28:25.286" status="PASS" endtime="20170817 19:28:25.289"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.377">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:25.377">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.290" status="PASS" endtime="20170817 19:28:25.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.379">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.379" status="PASS" endtime="20170817 19:28:25.379"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.380">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.380" status="PASS" endtime="20170817 19:28:25.380"></status>
</kw>
<status starttime="20170817 19:28:25.379" status="PASS" endtime="20170817 19:28:25.380"></status>
</kw>
<status starttime="20170817 19:28:25.378" status="PASS" endtime="20170817 19:28:25.380"></status>
</kw>
<status starttime="20170817 19:28:25.378" status="PASS" endtime="20170817 19:28:25.380"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:25.381">Delete All Sessions</msg>
<status starttime="20170817 19:28:25.381" status="PASS" endtime="20170817 19:28:25.381"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.381">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.063" status="PASS" endtime="20170817 19:28:25.381"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.382">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.381" status="PASS" endtime="20170817 19:28:25.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.382">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:25.382">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:25.382">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:25.382" status="PASS" endtime="20170817 19:28:25.383"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.383">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:28:25.063" status="PASS" endtime="20170817 19:28:25.383"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.383">${host_state} = Running</msg>
<status starttime="20170817 19:28:25.063" status="PASS" endtime="20170817 19:28:25.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:28:25.383" status="PASS" endtime="20170817 19:28:25.384"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.390">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:25.389" status="PASS" endtime="20170817 19:28:25.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.391">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:25.391" status="PASS" endtime="20170817 19:28:25.391"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.392">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:25.391" status="PASS" endtime="20170817 19:28:25.392"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.392">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:25.392" status="PASS" endtime="20170817 19:28:25.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.573">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:25.393" status="PASS" endtime="20170817 19:28:25.573"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.573">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:25.573">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.393" status="PASS" endtime="20170817 19:28:25.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.574">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.574" status="PASS" endtime="20170817 19:28:25.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.574" status="PASS" endtime="20170817 19:28:25.575"></status>
</kw>
<status starttime="20170817 19:28:25.389" status="PASS" endtime="20170817 19:28:25.575"></status>
</kw>
<status starttime="20170817 19:28:25.388" status="PASS" endtime="20170817 19:28:25.575"></status>
</kw>
<status starttime="20170817 19:28:25.388" status="PASS" endtime="20170817 19:28:25.575"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.576">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:28:25.575" status="PASS" endtime="20170817 19:28:25.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.578">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:25.577" status="PASS" endtime="20170817 19:28:25.578"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.579">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:25.578" status="PASS" endtime="20170817 19:28:25.579"></status>
</kw>
<status starttime="20170817 19:28:25.578" status="PASS" endtime="20170817 19:28:25.579"></status>
</kw>
<status starttime="20170817 19:28:25.576" status="PASS" endtime="20170817 19:28:25.579"></status>
</kw>
<status starttime="20170817 19:28:25.576" status="PASS" endtime="20170817 19:28:25.579"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.645">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:25.645">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.579" status="PASS" endtime="20170817 19:28:25.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.646">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.646" status="PASS" endtime="20170817 19:28:25.646"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.647">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.647" status="PASS" endtime="20170817 19:28:25.647"></status>
</kw>
<status starttime="20170817 19:28:25.647" status="PASS" endtime="20170817 19:28:25.648"></status>
</kw>
<status starttime="20170817 19:28:25.645" status="PASS" endtime="20170817 19:28:25.648"></status>
</kw>
<status starttime="20170817 19:28:25.645" status="PASS" endtime="20170817 19:28:25.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:25.648">Delete All Sessions</msg>
<status starttime="20170817 19:28:25.648" status="PASS" endtime="20170817 19:28:25.648"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.648">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.387" status="PASS" endtime="20170817 19:28:25.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.649" status="PASS" endtime="20170817 19:28:25.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.650">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:25.650">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:25.650">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:25.649" status="PASS" endtime="20170817 19:28:25.650"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.650">${state} = Off</msg>
<status starttime="20170817 19:28:25.387" status="PASS" endtime="20170817 19:28:25.650"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.650">${boot_progress} = Off</msg>
<status starttime="20170817 19:28:25.385" status="PASS" endtime="20170817 19:28:25.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:28:25.651">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:28:25.651" status="FAIL" endtime="20170817 19:28:25.651"></status>
</kw>
<status starttime="20170817 19:28:25.385" status="FAIL" endtime="20170817 19:28:25.651"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.651">${status} = False</msg>
<status starttime="20170817 19:28:25.384" status="PASS" endtime="20170817 19:28:25.651"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:28:25.652" status="PASS" endtime="20170817 19:28:25.652"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.656">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:25.655" status="PASS" endtime="20170817 19:28:25.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.657">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:25.656" status="PASS" endtime="20170817 19:28:25.657"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.657">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:25.657" status="PASS" endtime="20170817 19:28:25.657"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.658">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:25.658" status="PASS" endtime="20170817 19:28:25.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.836">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:25.659" status="PASS" endtime="20170817 19:28:25.836"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.836">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:25.836">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.658" status="PASS" endtime="20170817 19:28:25.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.837">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.836" status="PASS" endtime="20170817 19:28:25.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.837" status="PASS" endtime="20170817 19:28:25.837"></status>
</kw>
<status starttime="20170817 19:28:25.655" status="PASS" endtime="20170817 19:28:25.838"></status>
</kw>
<status starttime="20170817 19:28:25.655" status="PASS" endtime="20170817 19:28:25.838"></status>
</kw>
<status starttime="20170817 19:28:25.654" status="PASS" endtime="20170817 19:28:25.838"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.838">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:28:25.838" status="PASS" endtime="20170817 19:28:25.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.840">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:25.840" status="PASS" endtime="20170817 19:28:25.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.841">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:25.841" status="PASS" endtime="20170817 19:28:25.841"></status>
</kw>
<status starttime="20170817 19:28:25.841" status="PASS" endtime="20170817 19:28:25.842"></status>
</kw>
<status starttime="20170817 19:28:25.839" status="PASS" endtime="20170817 19:28:25.842"></status>
</kw>
<status starttime="20170817 19:28:25.839" status="PASS" endtime="20170817 19:28:25.842"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.939">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:25.940">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.842" status="PASS" endtime="20170817 19:28:25.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.942">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.941" status="PASS" endtime="20170817 19:28:25.942"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.943">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:25.942" status="PASS" endtime="20170817 19:28:25.943"></status>
</kw>
<status starttime="20170817 19:28:25.942" status="PASS" endtime="20170817 19:28:25.943"></status>
</kw>
<status starttime="20170817 19:28:25.940" status="PASS" endtime="20170817 19:28:25.943"></status>
</kw>
<status starttime="20170817 19:28:25.940" status="PASS" endtime="20170817 19:28:25.943"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:25.943">Delete All Sessions</msg>
<status starttime="20170817 19:28:25.943" status="PASS" endtime="20170817 19:28:25.943"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.944">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:25.653" status="PASS" endtime="20170817 19:28:25.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:25.944" status="PASS" endtime="20170817 19:28:25.945"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:25.945">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:25.945">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:25.945">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:25.945" status="PASS" endtime="20170817 19:28:25.945"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.946">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:25.652" status="PASS" endtime="20170817 19:28:25.946"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:25.946">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:25.652" status="PASS" endtime="20170817 19:28:25.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:25.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:28:25.946">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:25.946" status="FAIL" endtime="20170817 19:28:25.947"></status>
</kw>
<status starttime="20170817 19:28:25.384" status="FAIL" endtime="20170817 19:28:25.947"></status>
</kw>
<status starttime="20170817 19:28:24.665" status="FAIL" endtime="20170817 19:28:25.947"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:35.954">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:35.953" status="PASS" endtime="20170817 19:28:35.954"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:35.955">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:35.955" status="PASS" endtime="20170817 19:28:35.955"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:35.956">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:35.956" status="PASS" endtime="20170817 19:28:35.956"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:35.957">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:35.957" status="PASS" endtime="20170817 19:28:35.957"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:36.514">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:35.958" status="PASS" endtime="20170817 19:28:36.514"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:36.514">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:36.515">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:35.958" status="PASS" endtime="20170817 19:28:36.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:36.515">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:36.515" status="PASS" endtime="20170817 19:28:36.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:36.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:36.516" status="PASS" endtime="20170817 19:28:36.516"></status>
</kw>
<status starttime="20170817 19:28:35.952" status="PASS" endtime="20170817 19:28:36.516"></status>
</kw>
<status starttime="20170817 19:28:35.952" status="PASS" endtime="20170817 19:28:36.516"></status>
</kw>
<status starttime="20170817 19:28:35.951" status="PASS" endtime="20170817 19:28:36.516"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:36.517">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:28:36.516" status="PASS" endtime="20170817 19:28:36.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:36.519">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:36.518" status="PASS" endtime="20170817 19:28:36.519"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:36.520">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:36.520" status="PASS" endtime="20170817 19:28:36.520"></status>
</kw>
<status starttime="20170817 19:28:36.519" status="PASS" endtime="20170817 19:28:36.520"></status>
</kw>
<status starttime="20170817 19:28:36.518" status="PASS" endtime="20170817 19:28:36.520"></status>
</kw>
<status starttime="20170817 19:28:36.517" status="PASS" endtime="20170817 19:28:36.520"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.216">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:39.216">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:36.520" status="PASS" endtime="20170817 19:28:39.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.218">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:39.217" status="PASS" endtime="20170817 19:28:39.218"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:39.219">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:39.219" status="PASS" endtime="20170817 19:28:39.219"></status>
</kw>
<status starttime="20170817 19:28:39.218" status="PASS" endtime="20170817 19:28:39.219"></status>
</kw>
<status starttime="20170817 19:28:39.217" status="PASS" endtime="20170817 19:28:39.219"></status>
</kw>
<status starttime="20170817 19:28:39.216" status="PASS" endtime="20170817 19:28:39.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:39.220">Delete All Sessions</msg>
<status starttime="20170817 19:28:39.219" status="PASS" endtime="20170817 19:28:39.220"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:39.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:35.950" status="PASS" endtime="20170817 19:28:39.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:39.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:39.220" status="PASS" endtime="20170817 19:28:39.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.221">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:39.221">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:39.221">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:39.221" status="PASS" endtime="20170817 19:28:39.221"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:39.222">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:28:35.949" status="PASS" endtime="20170817 19:28:39.222"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:39.222">${power_state} = On</msg>
<status starttime="20170817 19:28:35.948" status="PASS" endtime="20170817 19:28:39.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:28:39.222" status="PASS" endtime="20170817 19:28:39.222"></status>
</kw>
<status starttime="20170817 19:28:35.948" status="PASS" endtime="20170817 19:28:39.223"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:39.226">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:39.226" status="PASS" endtime="20170817 19:28:39.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:39.230" status="PASS" endtime="20170817 19:28:39.230"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.230">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:39.230" status="PASS" endtime="20170817 19:28:39.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:39.231" status="PASS" endtime="20170817 19:28:39.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:39.658">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:39.232" status="PASS" endtime="20170817 19:28:39.658"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:39.658">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:39.658">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:39.232" status="PASS" endtime="20170817 19:28:39.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:39.659">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:39.658" status="PASS" endtime="20170817 19:28:39.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:39.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:39.659" status="PASS" endtime="20170817 19:28:39.659"></status>
</kw>
<status starttime="20170817 19:28:39.225" status="PASS" endtime="20170817 19:28:39.660"></status>
</kw>
<status starttime="20170817 19:28:39.225" status="PASS" endtime="20170817 19:28:39.660"></status>
</kw>
<status starttime="20170817 19:28:39.224" status="PASS" endtime="20170817 19:28:39.660"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.660">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:28:39.660" status="PASS" endtime="20170817 19:28:39.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:39.662">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:39.662" status="PASS" endtime="20170817 19:28:39.662"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:39.663">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:39.663" status="PASS" endtime="20170817 19:28:39.663"></status>
</kw>
<status starttime="20170817 19:28:39.663" status="PASS" endtime="20170817 19:28:39.664"></status>
</kw>
<status starttime="20170817 19:28:39.661" status="PASS" endtime="20170817 19:28:39.664"></status>
</kw>
<status starttime="20170817 19:28:39.661" status="PASS" endtime="20170817 19:28:39.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.215">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:40.215">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:39.664" status="PASS" endtime="20170817 19:28:40.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.217">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:40.217" status="PASS" endtime="20170817 19:28:40.217"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.218">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:40.218" status="PASS" endtime="20170817 19:28:40.218"></status>
</kw>
<status starttime="20170817 19:28:40.217" status="PASS" endtime="20170817 19:28:40.218"></status>
</kw>
<status starttime="20170817 19:28:40.216" status="PASS" endtime="20170817 19:28:40.219"></status>
</kw>
<status starttime="20170817 19:28:40.216" status="PASS" endtime="20170817 19:28:40.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:40.219">Delete All Sessions</msg>
<status starttime="20170817 19:28:40.219" status="PASS" endtime="20170817 19:28:40.219"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.219">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:39.224" status="PASS" endtime="20170817 19:28:40.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:40.220" status="PASS" endtime="20170817 19:28:40.220"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.220">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:40.221">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:40.221">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:40.220" status="PASS" endtime="20170817 19:28:40.221"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.221">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:28:39.223" status="PASS" endtime="20170817 19:28:40.221"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.221">${host_state} = Running</msg>
<status starttime="20170817 19:28:39.223" status="PASS" endtime="20170817 19:28:40.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:28:40.222" status="PASS" endtime="20170817 19:28:40.222"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.227">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:40.226" status="PASS" endtime="20170817 19:28:40.227"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.228">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:40.227" status="PASS" endtime="20170817 19:28:40.228"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.228">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:40.228" status="PASS" endtime="20170817 19:28:40.228"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.229">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:40.228" status="PASS" endtime="20170817 19:28:40.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:40.230" status="PASS" endtime="20170817 19:28:40.538"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:40.538">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:40.229" status="PASS" endtime="20170817 19:28:40.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.539">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:40.539" status="PASS" endtime="20170817 19:28:40.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:40.539" status="PASS" endtime="20170817 19:28:40.540"></status>
</kw>
<status starttime="20170817 19:28:40.226" status="PASS" endtime="20170817 19:28:40.540"></status>
</kw>
<status starttime="20170817 19:28:40.225" status="PASS" endtime="20170817 19:28:40.540"></status>
</kw>
<status starttime="20170817 19:28:40.225" status="PASS" endtime="20170817 19:28:40.540"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.541">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:28:40.540" status="PASS" endtime="20170817 19:28:40.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.543">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:40.542" status="PASS" endtime="20170817 19:28:40.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.544">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:28:40.544" status="PASS" endtime="20170817 19:28:40.544"></status>
</kw>
<status starttime="20170817 19:28:40.543" status="PASS" endtime="20170817 19:28:40.544"></status>
</kw>
<status starttime="20170817 19:28:40.542" status="PASS" endtime="20170817 19:28:40.544"></status>
</kw>
<status starttime="20170817 19:28:40.541" status="PASS" endtime="20170817 19:28:40.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.609">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:40.610">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:40.545" status="PASS" endtime="20170817 19:28:40.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.611">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:40.611" status="PASS" endtime="20170817 19:28:40.611"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.612">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:40.612" status="PASS" endtime="20170817 19:28:40.612"></status>
</kw>
<status starttime="20170817 19:28:40.611" status="PASS" endtime="20170817 19:28:40.612"></status>
</kw>
<status starttime="20170817 19:28:40.610" status="PASS" endtime="20170817 19:28:40.613"></status>
</kw>
<status starttime="20170817 19:28:40.610" status="PASS" endtime="20170817 19:28:40.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:40.613">Delete All Sessions</msg>
<status starttime="20170817 19:28:40.613" status="PASS" endtime="20170817 19:28:40.613"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.613">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:40.224" status="PASS" endtime="20170817 19:28:40.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.614">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:40.614" status="PASS" endtime="20170817 19:28:40.614"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.615">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:40.615">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:40.615">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:40.614" status="PASS" endtime="20170817 19:28:40.615"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.615">${state} = Off</msg>
<status starttime="20170817 19:28:40.224" status="PASS" endtime="20170817 19:28:40.615"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.615">${boot_progress} = Off</msg>
<status starttime="20170817 19:28:40.223" status="PASS" endtime="20170817 19:28:40.615"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:28:40.616">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:28:40.615" status="FAIL" endtime="20170817 19:28:40.616"></status>
</kw>
<status starttime="20170817 19:28:40.223" status="FAIL" endtime="20170817 19:28:40.616"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.616">${status} = False</msg>
<status starttime="20170817 19:28:40.222" status="PASS" endtime="20170817 19:28:40.616"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:28:40.616" status="PASS" endtime="20170817 19:28:40.617"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.621">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:40.620" status="PASS" endtime="20170817 19:28:40.621"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.622">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:40.621" status="PASS" endtime="20170817 19:28:40.622"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.622">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:40.622" status="PASS" endtime="20170817 19:28:40.622"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.623">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:40.623" status="PASS" endtime="20170817 19:28:40.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.801">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:40.624" status="PASS" endtime="20170817 19:28:40.801"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:40.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:40.623" status="PASS" endtime="20170817 19:28:40.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:40.802" status="PASS" endtime="20170817 19:28:40.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:40.803" status="PASS" endtime="20170817 19:28:40.803"></status>
</kw>
<status starttime="20170817 19:28:40.620" status="PASS" endtime="20170817 19:28:40.803"></status>
</kw>
<status starttime="20170817 19:28:40.619" status="PASS" endtime="20170817 19:28:40.803"></status>
</kw>
<status starttime="20170817 19:28:40.619" status="PASS" endtime="20170817 19:28:40.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.804">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:28:40.804" status="PASS" endtime="20170817 19:28:40.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.806">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:40.805" status="PASS" endtime="20170817 19:28:40.806"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.807">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:28:40.807" status="PASS" endtime="20170817 19:28:40.807"></status>
</kw>
<status starttime="20170817 19:28:40.806" status="PASS" endtime="20170817 19:28:40.807"></status>
</kw>
<status starttime="20170817 19:28:40.805" status="PASS" endtime="20170817 19:28:40.807"></status>
</kw>
<status starttime="20170817 19:28:40.804" status="PASS" endtime="20170817 19:28:40.807"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:40.897">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:40.808" status="PASS" endtime="20170817 19:28:40.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.899">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:40.899" status="PASS" endtime="20170817 19:28:40.899"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.900">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:40.900" status="PASS" endtime="20170817 19:28:40.900"></status>
</kw>
<status starttime="20170817 19:28:40.899" status="PASS" endtime="20170817 19:28:40.900"></status>
</kw>
<status starttime="20170817 19:28:40.898" status="PASS" endtime="20170817 19:28:40.900"></status>
</kw>
<status starttime="20170817 19:28:40.898" status="PASS" endtime="20170817 19:28:40.900"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:40.901">Delete All Sessions</msg>
<status starttime="20170817 19:28:40.901" status="PASS" endtime="20170817 19:28:40.901"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:40.618" status="PASS" endtime="20170817 19:28:40.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:40.901" status="PASS" endtime="20170817 19:28:40.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:40.902">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:40.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:40.902">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:40.902" status="PASS" endtime="20170817 19:28:40.902"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.903">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:40.617" status="PASS" endtime="20170817 19:28:40.903"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:40.903">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:40.617" status="PASS" endtime="20170817 19:28:40.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:40.904">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:28:40.904">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:28:40.903" status="FAIL" endtime="20170817 19:28:40.904"></status>
</kw>
<status starttime="20170817 19:28:40.222" status="FAIL" endtime="20170817 19:28:40.904"></status>
</kw>
<status starttime="20170817 19:28:35.947" status="FAIL" endtime="20170817 19:28:40.904"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:50.909">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:28:50.909" status="PASS" endtime="20170817 19:28:50.910"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:50.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:28:50.910" status="PASS" endtime="20170817 19:28:50.910"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:50.911">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:28:50.911" status="PASS" endtime="20170817 19:28:50.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:50.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:28:50.911" status="PASS" endtime="20170817 19:28:50.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:51.610">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:28:50.912" status="PASS" endtime="20170817 19:28:51.610"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:51.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:28:51.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:50.912" status="PASS" endtime="20170817 19:28:51.610"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:51.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:51.610" status="PASS" endtime="20170817 19:28:51.611"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:51.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:51.611" status="PASS" endtime="20170817 19:28:51.611"></status>
</kw>
<status starttime="20170817 19:28:50.908" status="PASS" endtime="20170817 19:28:51.611"></status>
</kw>
<status starttime="20170817 19:28:50.908" status="PASS" endtime="20170817 19:28:51.612"></status>
</kw>
<status starttime="20170817 19:28:50.907" status="PASS" endtime="20170817 19:28:51.612"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:51.612">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:28:51.612" status="PASS" endtime="20170817 19:28:51.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:51.614">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:51.614" status="PASS" endtime="20170817 19:28:51.614"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:51.615">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:28:51.615" status="PASS" endtime="20170817 19:28:51.615"></status>
</kw>
<status starttime="20170817 19:28:51.614" status="PASS" endtime="20170817 19:28:51.615"></status>
</kw>
<status starttime="20170817 19:28:51.613" status="PASS" endtime="20170817 19:28:51.616"></status>
</kw>
<status starttime="20170817 19:28:51.613" status="PASS" endtime="20170817 19:28:51.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:56.792">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:28:56.793">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:51.616" status="PASS" endtime="20170817 19:28:56.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:56.794">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:56.794" status="PASS" endtime="20170817 19:28:56.794"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:56.796">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:28:56.795" status="PASS" endtime="20170817 19:28:56.796"></status>
</kw>
<status starttime="20170817 19:28:56.795" status="PASS" endtime="20170817 19:28:56.796"></status>
</kw>
<status starttime="20170817 19:28:56.793" status="PASS" endtime="20170817 19:28:56.796"></status>
</kw>
<status starttime="20170817 19:28:56.793" status="PASS" endtime="20170817 19:28:56.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:28:56.797">Delete All Sessions</msg>
<status starttime="20170817 19:28:56.796" status="PASS" endtime="20170817 19:28:56.797"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:56.797">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:28:50.906" status="PASS" endtime="20170817 19:28:56.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:28:56.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:28:56.797" status="PASS" endtime="20170817 19:28:56.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:28:56.798">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:28:56.798">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:28:56.798">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:28:56.798" status="PASS" endtime="20170817 19:28:56.798"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:56.799">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 19:28:50.906" status="PASS" endtime="20170817 19:28:56.799"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:28:56.799">${power_state} = Off</msg>
<status starttime="20170817 19:28:50.905" status="PASS" endtime="20170817 19:28:56.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:28:56.800">On != Off</msg>
<status starttime="20170817 19:28:56.799" status="FAIL" endtime="20170817 19:28:56.800"></status>
</kw>
<status starttime="20170817 19:28:50.905" status="FAIL" endtime="20170817 19:28:56.800"></status>
</kw>
<status starttime="20170817 19:28:50.904" status="FAIL" endtime="20170817 19:28:56.800"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:06.805">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:06.804" status="PASS" endtime="20170817 19:29:06.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:06.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:06.805" status="PASS" endtime="20170817 19:29:06.806"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:06.806">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:06.806" status="PASS" endtime="20170817 19:29:06.806"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:06.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:06.807" status="PASS" endtime="20170817 19:29:06.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:07.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:06.808" status="PASS" endtime="20170817 19:29:07.358"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:07.358">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:07.358">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:06.807" status="PASS" endtime="20170817 19:29:07.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:07.359">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:07.359" status="PASS" endtime="20170817 19:29:07.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:07.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:07.359" status="PASS" endtime="20170817 19:29:07.360"></status>
</kw>
<status starttime="20170817 19:29:06.804" status="PASS" endtime="20170817 19:29:07.360"></status>
</kw>
<status starttime="20170817 19:29:06.803" status="PASS" endtime="20170817 19:29:07.360"></status>
</kw>
<status starttime="20170817 19:29:06.803" status="PASS" endtime="20170817 19:29:07.360"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.361">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:29:07.360" status="PASS" endtime="20170817 19:29:07.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.363">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:07.362" status="PASS" endtime="20170817 19:29:07.363"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:07.364">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:07.364" status="PASS" endtime="20170817 19:29:07.364"></status>
</kw>
<status starttime="20170817 19:29:07.363" status="PASS" endtime="20170817 19:29:07.364"></status>
</kw>
<status starttime="20170817 19:29:07.361" status="PASS" endtime="20170817 19:29:07.364"></status>
</kw>
<status starttime="20170817 19:29:07.361" status="PASS" endtime="20170817 19:29:07.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.806">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:07.806">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:07.365" status="PASS" endtime="20170817 19:29:07.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.808">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:07.807" status="PASS" endtime="20170817 19:29:07.808"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:07.809">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:07.808" status="PASS" endtime="20170817 19:29:07.809"></status>
</kw>
<status starttime="20170817 19:29:07.808" status="PASS" endtime="20170817 19:29:07.809"></status>
</kw>
<status starttime="20170817 19:29:07.807" status="PASS" endtime="20170817 19:29:07.809"></status>
</kw>
<status starttime="20170817 19:29:07.806" status="PASS" endtime="20170817 19:29:07.809"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:07.809">Delete All Sessions</msg>
<status starttime="20170817 19:29:07.809" status="PASS" endtime="20170817 19:29:07.810"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:07.810">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:06.802" status="PASS" endtime="20170817 19:29:07.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:07.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:07.810" status="PASS" endtime="20170817 19:29:07.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.811">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:07.811">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:07.811">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:07.811" status="PASS" endtime="20170817 19:29:07.811"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:07.812">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:29:06.802" status="PASS" endtime="20170817 19:29:07.812"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:07.812">${power_state} = On</msg>
<status starttime="20170817 19:29:06.801" status="PASS" endtime="20170817 19:29:07.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:29:07.812" status="PASS" endtime="20170817 19:29:07.812"></status>
</kw>
<status starttime="20170817 19:29:06.801" status="PASS" endtime="20170817 19:29:07.812"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:07.816">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:07.816" status="PASS" endtime="20170817 19:29:07.817"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:07.817" status="PASS" endtime="20170817 19:29:07.817"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.818">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:07.818" status="PASS" endtime="20170817 19:29:07.818"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:07.819">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:07.818" status="PASS" endtime="20170817 19:29:07.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:08.203">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:07.819" status="PASS" endtime="20170817 19:29:08.204"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:08.204">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:08.204">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:07.819" status="PASS" endtime="20170817 19:29:08.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:08.205">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:08.204" status="PASS" endtime="20170817 19:29:08.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:08.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:08.205" status="PASS" endtime="20170817 19:29:08.205"></status>
</kw>
<status starttime="20170817 19:29:07.815" status="PASS" endtime="20170817 19:29:08.205"></status>
</kw>
<status starttime="20170817 19:29:07.815" status="PASS" endtime="20170817 19:29:08.206"></status>
</kw>
<status starttime="20170817 19:29:07.814" status="PASS" endtime="20170817 19:29:08.206"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.206">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:29:08.206" status="PASS" endtime="20170817 19:29:08.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.208">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:08.208" status="PASS" endtime="20170817 19:29:08.208"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:08.209">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:08.209" status="PASS" endtime="20170817 19:29:08.209"></status>
</kw>
<status starttime="20170817 19:29:08.208" status="PASS" endtime="20170817 19:29:08.209"></status>
</kw>
<status starttime="20170817 19:29:08.207" status="PASS" endtime="20170817 19:29:08.210"></status>
</kw>
<status starttime="20170817 19:29:08.207" status="PASS" endtime="20170817 19:29:08.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.703">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:08.703">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:08.210" status="PASS" endtime="20170817 19:29:08.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.705">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:08.705" status="PASS" endtime="20170817 19:29:08.705"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:08.706">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:08.706" status="PASS" endtime="20170817 19:29:08.706"></status>
</kw>
<status starttime="20170817 19:29:08.705" status="PASS" endtime="20170817 19:29:08.706"></status>
</kw>
<status starttime="20170817 19:29:08.704" status="PASS" endtime="20170817 19:29:08.707"></status>
</kw>
<status starttime="20170817 19:29:08.703" status="PASS" endtime="20170817 19:29:08.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:08.707">Delete All Sessions</msg>
<status starttime="20170817 19:29:08.707" status="PASS" endtime="20170817 19:29:08.707"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:08.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:07.814" status="PASS" endtime="20170817 19:29:08.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:08.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:08.708" status="PASS" endtime="20170817 19:29:08.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.708">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:08.709">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:08.709">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:08.708" status="PASS" endtime="20170817 19:29:08.709"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:08.709">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:29:07.813" status="PASS" endtime="20170817 19:29:08.709"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:08.709">${host_state} = Running</msg>
<status starttime="20170817 19:29:07.813" status="PASS" endtime="20170817 19:29:08.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:29:08.710" status="PASS" endtime="20170817 19:29:08.710"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:08.715">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:08.714" status="PASS" endtime="20170817 19:29:08.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.716">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:08.715" status="PASS" endtime="20170817 19:29:08.716"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.716">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:08.716" status="PASS" endtime="20170817 19:29:08.716"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:08.717">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:08.717" status="PASS" endtime="20170817 19:29:08.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:08.718" status="PASS" endtime="20170817 19:29:09.314"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.314">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:09.314">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:08.717" status="PASS" endtime="20170817 19:29:09.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.315">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:09.315" status="PASS" endtime="20170817 19:29:09.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:09.316" status="PASS" endtime="20170817 19:29:09.316"></status>
</kw>
<status starttime="20170817 19:29:08.714" status="PASS" endtime="20170817 19:29:09.316"></status>
</kw>
<status starttime="20170817 19:29:08.713" status="PASS" endtime="20170817 19:29:09.316"></status>
</kw>
<status starttime="20170817 19:29:08.713" status="PASS" endtime="20170817 19:29:09.316"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.317">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:29:09.317" status="PASS" endtime="20170817 19:29:09.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.319">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:29:09.318" status="PASS" endtime="20170817 19:29:09.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.320">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:29:09.320" status="PASS" endtime="20170817 19:29:09.320"></status>
</kw>
<status starttime="20170817 19:29:09.320" status="PASS" endtime="20170817 19:29:09.320"></status>
</kw>
<status starttime="20170817 19:29:09.318" status="PASS" endtime="20170817 19:29:09.321"></status>
</kw>
<status starttime="20170817 19:29:09.317" status="PASS" endtime="20170817 19:29:09.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.386">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:09.386">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:09.321" status="PASS" endtime="20170817 19:29:09.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.388">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:09.387" status="PASS" endtime="20170817 19:29:09.388"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.389">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:09.388" status="PASS" endtime="20170817 19:29:09.389"></status>
</kw>
<status starttime="20170817 19:29:09.388" status="PASS" endtime="20170817 19:29:09.389"></status>
</kw>
<status starttime="20170817 19:29:09.387" status="PASS" endtime="20170817 19:29:09.389"></status>
</kw>
<status starttime="20170817 19:29:09.386" status="PASS" endtime="20170817 19:29:09.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:09.389">Delete All Sessions</msg>
<status starttime="20170817 19:29:09.389" status="PASS" endtime="20170817 19:29:09.389"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.390">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:08.712" status="PASS" endtime="20170817 19:29:09.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:09.390" status="PASS" endtime="20170817 19:29:09.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.391">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:09.391">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:09.391">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:09.391" status="PASS" endtime="20170817 19:29:09.391"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.391">${state} = Off</msg>
<status starttime="20170817 19:29:08.712" status="PASS" endtime="20170817 19:29:09.391"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.392">${boot_progress} = Off</msg>
<status starttime="20170817 19:29:08.711" status="PASS" endtime="20170817 19:29:09.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:29:09.392">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:29:09.392" status="FAIL" endtime="20170817 19:29:09.392"></status>
</kw>
<status starttime="20170817 19:29:08.711" status="FAIL" endtime="20170817 19:29:09.392"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.392">${status} = False</msg>
<status starttime="20170817 19:29:08.710" status="PASS" endtime="20170817 19:29:09.393"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:29:09.393" status="PASS" endtime="20170817 19:29:09.393"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.397">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:09.397" status="PASS" endtime="20170817 19:29:09.398"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:09.398" status="PASS" endtime="20170817 19:29:09.399"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.399">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:09.399" status="PASS" endtime="20170817 19:29:09.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:09.400" status="PASS" endtime="20170817 19:29:09.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.595">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:09.401" status="PASS" endtime="20170817 19:29:09.595"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.595">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:09.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:09.401" status="PASS" endtime="20170817 19:29:09.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.596">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:09.596" status="PASS" endtime="20170817 19:29:09.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:09.596" status="PASS" endtime="20170817 19:29:09.597"></status>
</kw>
<status starttime="20170817 19:29:09.396" status="PASS" endtime="20170817 19:29:09.597"></status>
</kw>
<status starttime="20170817 19:29:09.396" status="PASS" endtime="20170817 19:29:09.597"></status>
</kw>
<status starttime="20170817 19:29:09.395" status="PASS" endtime="20170817 19:29:09.597"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.598">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:29:09.597" status="PASS" endtime="20170817 19:29:09.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.600">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:29:09.599" status="PASS" endtime="20170817 19:29:09.600"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.601">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:29:09.600" status="PASS" endtime="20170817 19:29:09.601"></status>
</kw>
<status starttime="20170817 19:29:09.600" status="PASS" endtime="20170817 19:29:09.601"></status>
</kw>
<status starttime="20170817 19:29:09.598" status="PASS" endtime="20170817 19:29:09.601"></status>
</kw>
<status starttime="20170817 19:29:09.598" status="PASS" endtime="20170817 19:29:09.601"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.704">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:09.704">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:09.601" status="PASS" endtime="20170817 19:29:09.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.706">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:09.706" status="PASS" endtime="20170817 19:29:09.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.707">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:09.707" status="PASS" endtime="20170817 19:29:09.707"></status>
</kw>
<status starttime="20170817 19:29:09.706" status="PASS" endtime="20170817 19:29:09.707"></status>
</kw>
<status starttime="20170817 19:29:09.705" status="PASS" endtime="20170817 19:29:09.707"></status>
</kw>
<status starttime="20170817 19:29:09.705" status="PASS" endtime="20170817 19:29:09.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:09.708">Delete All Sessions</msg>
<status starttime="20170817 19:29:09.708" status="PASS" endtime="20170817 19:29:09.708"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:09.394" status="PASS" endtime="20170817 19:29:09.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:09.708" status="PASS" endtime="20170817 19:29:09.709"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:09.709">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:09.709">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:09.710">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:09.709" status="PASS" endtime="20170817 19:29:09.710"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.710">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:09.394" status="PASS" endtime="20170817 19:29:09.710"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:09.710">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:09.393" status="PASS" endtime="20170817 19:29:09.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:09.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:29:09.711">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:09.710" status="FAIL" endtime="20170817 19:29:09.711"></status>
</kw>
<status starttime="20170817 19:29:08.710" status="FAIL" endtime="20170817 19:29:09.711"></status>
</kw>
<status starttime="20170817 19:29:06.800" status="FAIL" endtime="20170817 19:29:09.711"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:19.717">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:19.717" status="PASS" endtime="20170817 19:29:19.718"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:19.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:19.718" status="PASS" endtime="20170817 19:29:19.718"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:19.719">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:19.719" status="PASS" endtime="20170817 19:29:19.719"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:19.720">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:19.720" status="PASS" endtime="20170817 19:29:19.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:19.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:19.721" status="PASS" endtime="20170817 19:29:19.919"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:19.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:19.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:19.721" status="PASS" endtime="20170817 19:29:19.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:19.920">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:19.920" status="PASS" endtime="20170817 19:29:19.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:19.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:19.920" status="PASS" endtime="20170817 19:29:19.921"></status>
</kw>
<status starttime="20170817 19:29:19.715" status="PASS" endtime="20170817 19:29:19.921"></status>
</kw>
<status starttime="20170817 19:29:19.715" status="PASS" endtime="20170817 19:29:19.921"></status>
</kw>
<status starttime="20170817 19:29:19.714" status="PASS" endtime="20170817 19:29:19.921"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:19.922">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:29:19.921" status="PASS" endtime="20170817 19:29:19.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:19.925">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:19.924" status="PASS" endtime="20170817 19:29:19.925"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:19.926">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:19.926" status="PASS" endtime="20170817 19:29:19.926"></status>
</kw>
<status starttime="20170817 19:29:19.925" status="PASS" endtime="20170817 19:29:19.926"></status>
</kw>
<status starttime="20170817 19:29:19.923" status="PASS" endtime="20170817 19:29:19.926"></status>
</kw>
<status starttime="20170817 19:29:19.922" status="PASS" endtime="20170817 19:29:19.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:19.999">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:20.000">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:19.927" status="PASS" endtime="20170817 19:29:20.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.002">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.001" status="PASS" endtime="20170817 19:29:20.002"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.007">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.002" status="PASS" endtime="20170817 19:29:20.007"></status>
</kw>
<status starttime="20170817 19:29:20.002" status="PASS" endtime="20170817 19:29:20.007"></status>
</kw>
<status starttime="20170817 19:29:20.001" status="PASS" endtime="20170817 19:29:20.007"></status>
</kw>
<status starttime="20170817 19:29:20.000" status="PASS" endtime="20170817 19:29:20.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:20.007">Delete All Sessions</msg>
<status starttime="20170817 19:29:20.007" status="PASS" endtime="20170817 19:29:20.008"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.008">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:19.714" status="PASS" endtime="20170817 19:29:20.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.008" status="PASS" endtime="20170817 19:29:20.008"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.009">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:20.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:20.009">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:20.009" status="PASS" endtime="20170817 19:29:20.009"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.010">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:29:19.713" status="PASS" endtime="20170817 19:29:20.010"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.010">${power_state} = On</msg>
<status starttime="20170817 19:29:19.713" status="PASS" endtime="20170817 19:29:20.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:29:20.010" status="PASS" endtime="20170817 19:29:20.011"></status>
</kw>
<status starttime="20170817 19:29:19.712" status="PASS" endtime="20170817 19:29:20.011"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.014">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:20.014" status="PASS" endtime="20170817 19:29:20.015"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.015">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:20.015" status="PASS" endtime="20170817 19:29:20.015"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.016">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:20.015" status="PASS" endtime="20170817 19:29:20.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.017">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:20.016" status="PASS" endtime="20170817 19:29:20.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.222">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:20.017" status="PASS" endtime="20170817 19:29:20.222"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.222">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:20.222">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.017" status="PASS" endtime="20170817 19:29:20.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.223">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.223" status="PASS" endtime="20170817 19:29:20.223"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.224">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.224" status="PASS" endtime="20170817 19:29:20.224"></status>
</kw>
<status starttime="20170817 19:29:20.013" status="PASS" endtime="20170817 19:29:20.225"></status>
</kw>
<status starttime="20170817 19:29:20.013" status="PASS" endtime="20170817 19:29:20.225"></status>
</kw>
<status starttime="20170817 19:29:20.012" status="PASS" endtime="20170817 19:29:20.225"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.226">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:29:20.225" status="PASS" endtime="20170817 19:29:20.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.229">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:20.228" status="PASS" endtime="20170817 19:29:20.229"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.231">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:20.230" status="PASS" endtime="20170817 19:29:20.231"></status>
</kw>
<status starttime="20170817 19:29:20.229" status="PASS" endtime="20170817 19:29:20.231"></status>
</kw>
<status starttime="20170817 19:29:20.227" status="PASS" endtime="20170817 19:29:20.231"></status>
</kw>
<status starttime="20170817 19:29:20.226" status="PASS" endtime="20170817 19:29:20.231"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.323">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:20.323">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.231" status="PASS" endtime="20170817 19:29:20.323"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.325">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.324" status="PASS" endtime="20170817 19:29:20.325"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.326">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.325" status="PASS" endtime="20170817 19:29:20.326"></status>
</kw>
<status starttime="20170817 19:29:20.325" status="PASS" endtime="20170817 19:29:20.326"></status>
</kw>
<status starttime="20170817 19:29:20.324" status="PASS" endtime="20170817 19:29:20.326"></status>
</kw>
<status starttime="20170817 19:29:20.323" status="PASS" endtime="20170817 19:29:20.326"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:20.326">Delete All Sessions</msg>
<status starttime="20170817 19:29:20.326" status="PASS" endtime="20170817 19:29:20.327"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.327">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.012" status="PASS" endtime="20170817 19:29:20.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.327" status="PASS" endtime="20170817 19:29:20.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.328">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:20.328">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:20.328">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:20.328" status="PASS" endtime="20170817 19:29:20.328"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.328">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:29:20.011" status="PASS" endtime="20170817 19:29:20.328"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.329">${host_state} = Running</msg>
<status starttime="20170817 19:29:20.011" status="PASS" endtime="20170817 19:29:20.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:29:20.329" status="PASS" endtime="20170817 19:29:20.329"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.335">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:20.335" status="PASS" endtime="20170817 19:29:20.336"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:20.337" status="PASS" endtime="20170817 19:29:20.337"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.338">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:20.337" status="PASS" endtime="20170817 19:29:20.338"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.339">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:20.338" status="PASS" endtime="20170817 19:29:20.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.526">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:20.340" status="PASS" endtime="20170817 19:29:20.526"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.526">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:20.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.339" status="PASS" endtime="20170817 19:29:20.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.527">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.527" status="PASS" endtime="20170817 19:29:20.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.527" status="PASS" endtime="20170817 19:29:20.528"></status>
</kw>
<status starttime="20170817 19:29:20.334" status="PASS" endtime="20170817 19:29:20.528"></status>
</kw>
<status starttime="20170817 19:29:20.333" status="PASS" endtime="20170817 19:29:20.528"></status>
</kw>
<status starttime="20170817 19:29:20.333" status="PASS" endtime="20170817 19:29:20.528"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.529">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:29:20.528" status="PASS" endtime="20170817 19:29:20.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.531">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:29:20.530" status="PASS" endtime="20170817 19:29:20.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.532">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:29:20.531" status="PASS" endtime="20170817 19:29:20.532"></status>
</kw>
<status starttime="20170817 19:29:20.531" status="PASS" endtime="20170817 19:29:20.532"></status>
</kw>
<status starttime="20170817 19:29:20.529" status="PASS" endtime="20170817 19:29:20.532"></status>
</kw>
<status starttime="20170817 19:29:20.529" status="PASS" endtime="20170817 19:29:20.532"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.600">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:20.600">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.532" status="PASS" endtime="20170817 19:29:20.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.602">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.601" status="PASS" endtime="20170817 19:29:20.602"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.603">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.602" status="PASS" endtime="20170817 19:29:20.603"></status>
</kw>
<status starttime="20170817 19:29:20.602" status="PASS" endtime="20170817 19:29:20.603"></status>
</kw>
<status starttime="20170817 19:29:20.601" status="PASS" endtime="20170817 19:29:20.603"></status>
</kw>
<status starttime="20170817 19:29:20.600" status="PASS" endtime="20170817 19:29:20.603"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:20.603">Delete All Sessions</msg>
<status starttime="20170817 19:29:20.603" status="PASS" endtime="20170817 19:29:20.604"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.332" status="PASS" endtime="20170817 19:29:20.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.604" status="PASS" endtime="20170817 19:29:20.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.605">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:20.605">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:20.605">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:20.605" status="PASS" endtime="20170817 19:29:20.605"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.606">${state} = Off</msg>
<status starttime="20170817 19:29:20.331" status="PASS" endtime="20170817 19:29:20.606"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.606">${boot_progress} = Off</msg>
<status starttime="20170817 19:29:20.330" status="PASS" endtime="20170817 19:29:20.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:29:20.606">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:29:20.606" status="FAIL" endtime="20170817 19:29:20.607"></status>
</kw>
<status starttime="20170817 19:29:20.330" status="FAIL" endtime="20170817 19:29:20.607"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.607">${status} = False</msg>
<status starttime="20170817 19:29:20.330" status="PASS" endtime="20170817 19:29:20.607"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:29:20.607" status="PASS" endtime="20170817 19:29:20.607"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.611">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:20.611" status="PASS" endtime="20170817 19:29:20.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.612">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:20.612" status="PASS" endtime="20170817 19:29:20.612"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.613">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:20.612" status="PASS" endtime="20170817 19:29:20.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.613">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:20.613" status="PASS" endtime="20170817 19:29:20.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.878">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:20.614" status="PASS" endtime="20170817 19:29:20.878"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.878">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:20.878">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.614" status="PASS" endtime="20170817 19:29:20.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.879">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.878" status="PASS" endtime="20170817 19:29:20.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.879" status="PASS" endtime="20170817 19:29:20.879"></status>
</kw>
<status starttime="20170817 19:29:20.610" status="PASS" endtime="20170817 19:29:20.880"></status>
</kw>
<status starttime="20170817 19:29:20.610" status="PASS" endtime="20170817 19:29:20.880"></status>
</kw>
<status starttime="20170817 19:29:20.609" status="PASS" endtime="20170817 19:29:20.880"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.880">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:29:20.880" status="PASS" endtime="20170817 19:29:20.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.883">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:29:20.882" status="PASS" endtime="20170817 19:29:20.883"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.883">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:29:20.883" status="PASS" endtime="20170817 19:29:20.884"></status>
</kw>
<status starttime="20170817 19:29:20.883" status="PASS" endtime="20170817 19:29:20.884"></status>
</kw>
<status starttime="20170817 19:29:20.881" status="PASS" endtime="20170817 19:29:20.884"></status>
</kw>
<status starttime="20170817 19:29:20.881" status="PASS" endtime="20170817 19:29:20.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.985">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:20.985">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.884" status="PASS" endtime="20170817 19:29:20.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.987">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.986" status="PASS" endtime="20170817 19:29:20.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.988">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:20.988" status="PASS" endtime="20170817 19:29:20.988"></status>
</kw>
<status starttime="20170817 19:29:20.987" status="PASS" endtime="20170817 19:29:20.988"></status>
</kw>
<status starttime="20170817 19:29:20.986" status="PASS" endtime="20170817 19:29:20.988"></status>
</kw>
<status starttime="20170817 19:29:20.985" status="PASS" endtime="20170817 19:29:20.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:20.989">Delete All Sessions</msg>
<status starttime="20170817 19:29:20.989" status="PASS" endtime="20170817 19:29:20.989"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.989">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:20.608" status="PASS" endtime="20170817 19:29:20.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:20.989" status="PASS" endtime="20170817 19:29:20.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:20.990">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:20.990">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:20.990">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:20.990" status="PASS" endtime="20170817 19:29:20.990"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.991">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:20.608" status="PASS" endtime="20170817 19:29:20.991"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:20.991">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:20.607" status="PASS" endtime="20170817 19:29:20.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:20.991">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:29:20.992">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:20.991" status="FAIL" endtime="20170817 19:29:20.992"></status>
</kw>
<status starttime="20170817 19:29:20.329" status="FAIL" endtime="20170817 19:29:20.992"></status>
</kw>
<status starttime="20170817 19:29:19.712" status="FAIL" endtime="20170817 19:29:20.992"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:30.997">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:30.997" status="PASS" endtime="20170817 19:29:30.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:30.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:30.998" status="PASS" endtime="20170817 19:29:30.998"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:30.999">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:30.998" status="PASS" endtime="20170817 19:29:30.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:30.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:30.999" status="PASS" endtime="20170817 19:29:31.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.202">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:31.000" status="PASS" endtime="20170817 19:29:31.202"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.202">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:31.203">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.000" status="PASS" endtime="20170817 19:29:31.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.203">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.203" status="PASS" endtime="20170817 19:29:31.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.203" status="PASS" endtime="20170817 19:29:31.204"></status>
</kw>
<status starttime="20170817 19:29:30.996" status="PASS" endtime="20170817 19:29:31.204"></status>
</kw>
<status starttime="20170817 19:29:30.996" status="PASS" endtime="20170817 19:29:31.204"></status>
</kw>
<status starttime="20170817 19:29:30.995" status="PASS" endtime="20170817 19:29:31.204"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.205">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:29:31.204" status="PASS" endtime="20170817 19:29:31.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.207">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:31.206" status="PASS" endtime="20170817 19:29:31.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.208">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:31.208" status="PASS" endtime="20170817 19:29:31.208"></status>
</kw>
<status starttime="20170817 19:29:31.207" status="PASS" endtime="20170817 19:29:31.208"></status>
</kw>
<status starttime="20170817 19:29:31.206" status="PASS" endtime="20170817 19:29:31.208"></status>
</kw>
<status starttime="20170817 19:29:31.205" status="PASS" endtime="20170817 19:29:31.208"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.270">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:31.271">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.208" status="PASS" endtime="20170817 19:29:31.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.272">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:31.272" status="PASS" endtime="20170817 19:29:31.273"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.273">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:31.273" status="PASS" endtime="20170817 19:29:31.274"></status>
</kw>
<status starttime="20170817 19:29:31.273" status="PASS" endtime="20170817 19:29:31.274"></status>
</kw>
<status starttime="20170817 19:29:31.271" status="PASS" endtime="20170817 19:29:31.274"></status>
</kw>
<status starttime="20170817 19:29:31.271" status="PASS" endtime="20170817 19:29:31.274"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:31.274">Delete All Sessions</msg>
<status starttime="20170817 19:29:31.274" status="PASS" endtime="20170817 19:29:31.274"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.274">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:30.995" status="PASS" endtime="20170817 19:29:31.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.275" status="PASS" endtime="20170817 19:29:31.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.276">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:31.276">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:31.276">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:31.275" status="PASS" endtime="20170817 19:29:31.276"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.276">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:29:30.994" status="PASS" endtime="20170817 19:29:31.276"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.277">${power_state} = On</msg>
<status starttime="20170817 19:29:30.994" status="PASS" endtime="20170817 19:29:31.277"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:29:31.277" status="PASS" endtime="20170817 19:29:31.277"></status>
</kw>
<status starttime="20170817 19:29:30.993" status="PASS" endtime="20170817 19:29:31.277"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.281">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:31.280" status="PASS" endtime="20170817 19:29:31.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:31.282" status="PASS" endtime="20170817 19:29:31.282"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.283">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:31.282" status="PASS" endtime="20170817 19:29:31.283"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.283">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:31.283" status="PASS" endtime="20170817 19:29:31.283"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.476">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:31.284" status="PASS" endtime="20170817 19:29:31.476"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.476">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:31.476">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.284" status="PASS" endtime="20170817 19:29:31.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.477">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.476" status="PASS" endtime="20170817 19:29:31.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.477">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.477" status="PASS" endtime="20170817 19:29:31.477"></status>
</kw>
<status starttime="20170817 19:29:31.280" status="PASS" endtime="20170817 19:29:31.478"></status>
</kw>
<status starttime="20170817 19:29:31.279" status="PASS" endtime="20170817 19:29:31.478"></status>
</kw>
<status starttime="20170817 19:29:31.279" status="PASS" endtime="20170817 19:29:31.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.478">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:29:31.478" status="PASS" endtime="20170817 19:29:31.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.480">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:31.480" status="PASS" endtime="20170817 19:29:31.480"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.481">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:31.481" status="PASS" endtime="20170817 19:29:31.481"></status>
</kw>
<status starttime="20170817 19:29:31.481" status="PASS" endtime="20170817 19:29:31.481"></status>
</kw>
<status starttime="20170817 19:29:31.479" status="PASS" endtime="20170817 19:29:31.482"></status>
</kw>
<status starttime="20170817 19:29:31.479" status="PASS" endtime="20170817 19:29:31.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.581">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:31.581">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.482" status="PASS" endtime="20170817 19:29:31.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.583">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:31.582" status="PASS" endtime="20170817 19:29:31.583"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.584">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:31.584" status="PASS" endtime="20170817 19:29:31.584"></status>
</kw>
<status starttime="20170817 19:29:31.583" status="PASS" endtime="20170817 19:29:31.584"></status>
</kw>
<status starttime="20170817 19:29:31.582" status="PASS" endtime="20170817 19:29:31.585"></status>
</kw>
<status starttime="20170817 19:29:31.582" status="PASS" endtime="20170817 19:29:31.585"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:31.585">Delete All Sessions</msg>
<status starttime="20170817 19:29:31.585" status="PASS" endtime="20170817 19:29:31.585"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.278" status="PASS" endtime="20170817 19:29:31.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.586" status="PASS" endtime="20170817 19:29:31.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.587">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:31.587">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:31.587">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:31.586" status="PASS" endtime="20170817 19:29:31.587"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.587">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 19:29:31.278" status="PASS" endtime="20170817 19:29:31.587"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.587">${host_state} = Running</msg>
<status starttime="20170817 19:29:31.277" status="PASS" endtime="20170817 19:29:31.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:29:31.588" status="PASS" endtime="20170817 19:29:31.588"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.593">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:31.593" status="PASS" endtime="20170817 19:29:31.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:31.594" status="PASS" endtime="20170817 19:29:31.594"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.594">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:31.594" status="PASS" endtime="20170817 19:29:31.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.595">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:31.595" status="PASS" endtime="20170817 19:29:31.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.782">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:31.596" status="PASS" endtime="20170817 19:29:31.782"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.782">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:31.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.595" status="PASS" endtime="20170817 19:29:31.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.783">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.783" status="PASS" endtime="20170817 19:29:31.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.784">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.783" status="PASS" endtime="20170817 19:29:31.784"></status>
</kw>
<status starttime="20170817 19:29:31.592" status="PASS" endtime="20170817 19:29:31.784"></status>
</kw>
<status starttime="20170817 19:29:31.592" status="PASS" endtime="20170817 19:29:31.784"></status>
</kw>
<status starttime="20170817 19:29:31.591" status="PASS" endtime="20170817 19:29:31.784"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.785">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 19:29:31.784" status="PASS" endtime="20170817 19:29:31.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.787">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:29:31.786" status="PASS" endtime="20170817 19:29:31.787"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.788">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 19:29:31.788" status="PASS" endtime="20170817 19:29:31.788"></status>
</kw>
<status starttime="20170817 19:29:31.787" status="PASS" endtime="20170817 19:29:31.788"></status>
</kw>
<status starttime="20170817 19:29:31.785" status="PASS" endtime="20170817 19:29:31.788"></status>
</kw>
<status starttime="20170817 19:29:31.785" status="PASS" endtime="20170817 19:29:31.788"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.854">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:31.854">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.789" status="PASS" endtime="20170817 19:29:31.854"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.856">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:31.856" status="PASS" endtime="20170817 19:29:31.856"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.857">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:31.857" status="PASS" endtime="20170817 19:29:31.857"></status>
</kw>
<status starttime="20170817 19:29:31.856" status="PASS" endtime="20170817 19:29:31.857"></status>
</kw>
<status starttime="20170817 19:29:31.855" status="PASS" endtime="20170817 19:29:31.857"></status>
</kw>
<status starttime="20170817 19:29:31.854" status="PASS" endtime="20170817 19:29:31.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:31.858">Delete All Sessions</msg>
<status starttime="20170817 19:29:31.858" status="PASS" endtime="20170817 19:29:31.858"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.858">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.590" status="PASS" endtime="20170817 19:29:31.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:31.858" status="PASS" endtime="20170817 19:29:31.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.859">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:31.859">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:31.859">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:31.859" status="PASS" endtime="20170817 19:29:31.859"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.860">${state} = Off</msg>
<status starttime="20170817 19:29:31.590" status="PASS" endtime="20170817 19:29:31.860"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.860">${boot_progress} = Off</msg>
<status starttime="20170817 19:29:31.589" status="PASS" endtime="20170817 19:29:31.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:29:31.861">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 19:29:31.860" status="FAIL" endtime="20170817 19:29:31.861"></status>
</kw>
<status starttime="20170817 19:29:31.589" status="FAIL" endtime="20170817 19:29:31.861"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:31.861">${status} = False</msg>
<status starttime="20170817 19:29:31.589" status="PASS" endtime="20170817 19:29:31.861"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 19:29:31.861" status="PASS" endtime="20170817 19:29:31.862"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:31.865">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:31.865" status="PASS" endtime="20170817 19:29:31.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:31.866" status="PASS" endtime="20170817 19:29:31.866"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.867">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:31.866" status="PASS" endtime="20170817 19:29:31.867"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:31.867">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:31.867" status="PASS" endtime="20170817 19:29:31.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:32.101">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:31.868" status="PASS" endtime="20170817 19:29:32.102"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:32.102">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:32.102">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.868" status="PASS" endtime="20170817 19:29:32.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:32.102">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:32.102" status="PASS" endtime="20170817 19:29:32.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:32.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:32.103" status="PASS" endtime="20170817 19:29:32.103"></status>
</kw>
<status starttime="20170817 19:29:31.864" status="PASS" endtime="20170817 19:29:32.103"></status>
</kw>
<status starttime="20170817 19:29:31.864" status="PASS" endtime="20170817 19:29:32.103"></status>
</kw>
<status starttime="20170817 19:29:31.863" status="PASS" endtime="20170817 19:29:32.103"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:32.104">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 19:29:32.104" status="PASS" endtime="20170817 19:29:32.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:32.106">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:29:32.105" status="PASS" endtime="20170817 19:29:32.106"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:32.107">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 19:29:32.107" status="PASS" endtime="20170817 19:29:32.107"></status>
</kw>
<status starttime="20170817 19:29:32.106" status="PASS" endtime="20170817 19:29:32.107"></status>
</kw>
<status starttime="20170817 19:29:32.105" status="PASS" endtime="20170817 19:29:32.107"></status>
</kw>
<status starttime="20170817 19:29:32.104" status="PASS" endtime="20170817 19:29:32.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:32.280">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:32.280">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:32.108" status="PASS" endtime="20170817 19:29:32.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:32.282">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:32.282" status="PASS" endtime="20170817 19:29:32.282"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:32.283">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:32.283" status="PASS" endtime="20170817 19:29:32.283"></status>
</kw>
<status starttime="20170817 19:29:32.282" status="PASS" endtime="20170817 19:29:32.283"></status>
</kw>
<status starttime="20170817 19:29:32.281" status="PASS" endtime="20170817 19:29:32.284"></status>
</kw>
<status starttime="20170817 19:29:32.281" status="PASS" endtime="20170817 19:29:32.284"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:32.284">Delete All Sessions</msg>
<status starttime="20170817 19:29:32.284" status="PASS" endtime="20170817 19:29:32.284"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:32.284">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:31.863" status="PASS" endtime="20170817 19:29:32.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:32.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:32.285" status="PASS" endtime="20170817 19:29:32.285"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:32.286">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:32.286">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:32.286">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:32.285" status="PASS" endtime="20170817 19:29:32.286"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:32.286">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:31.862" status="PASS" endtime="20170817 19:29:32.286"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:32.286">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:31.862" status="PASS" endtime="20170817 19:29:32.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:32.287">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:29:32.287">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 19:29:32.287" status="FAIL" endtime="20170817 19:29:32.287"></status>
</kw>
<status starttime="20170817 19:29:31.588" status="FAIL" endtime="20170817 19:29:32.287"></status>
</kw>
<status starttime="20170817 19:29:30.993" status="FAIL" endtime="20170817 19:29:32.288"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.293">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:42.293" status="PASS" endtime="20170817 19:29:42.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:42.294" status="PASS" endtime="20170817 19:29:42.294"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.294">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:42.294" status="PASS" endtime="20170817 19:29:42.295"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.295">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:42.295" status="PASS" endtime="20170817 19:29:42.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.508">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:42.296" status="PASS" endtime="20170817 19:29:42.509"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.509">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:42.509">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:42.295" status="PASS" endtime="20170817 19:29:42.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:42.510" status="PASS" endtime="20170817 19:29:42.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:42.510" status="PASS" endtime="20170817 19:29:42.511"></status>
</kw>
<status starttime="20170817 19:29:42.292" status="PASS" endtime="20170817 19:29:42.511"></status>
</kw>
<status starttime="20170817 19:29:42.291" status="PASS" endtime="20170817 19:29:42.511"></status>
</kw>
<status starttime="20170817 19:29:42.291" status="PASS" endtime="20170817 19:29:42.511"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.512">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:29:42.511" status="PASS" endtime="20170817 19:29:42.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.514">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:42.513" status="PASS" endtime="20170817 19:29:42.514"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.515">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:42.514" status="PASS" endtime="20170817 19:29:42.515"></status>
</kw>
<status starttime="20170817 19:29:42.514" status="PASS" endtime="20170817 19:29:42.515"></status>
</kw>
<status starttime="20170817 19:29:42.512" status="PASS" endtime="20170817 19:29:42.515"></status>
</kw>
<status starttime="20170817 19:29:42.512" status="PASS" endtime="20170817 19:29:42.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.579">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:42.579">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:42.515" status="PASS" endtime="20170817 19:29:42.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.581">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:42.580" status="PASS" endtime="20170817 19:29:42.581"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.582">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:42.581" status="PASS" endtime="20170817 19:29:42.582"></status>
</kw>
<status starttime="20170817 19:29:42.581" status="PASS" endtime="20170817 19:29:42.582"></status>
</kw>
<status starttime="20170817 19:29:42.580" status="PASS" endtime="20170817 19:29:42.582"></status>
</kw>
<status starttime="20170817 19:29:42.579" status="PASS" endtime="20170817 19:29:42.582"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:42.584">Delete All Sessions</msg>
<status starttime="20170817 19:29:42.583" status="PASS" endtime="20170817 19:29:42.585"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:42.290" status="PASS" endtime="20170817 19:29:42.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:42.585" status="PASS" endtime="20170817 19:29:42.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.586">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:42.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:42.586">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:42.586" status="PASS" endtime="20170817 19:29:42.586"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.587">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:29:42.289" status="PASS" endtime="20170817 19:29:42.587"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.587">${power_state} = On</msg>
<status starttime="20170817 19:29:42.289" status="PASS" endtime="20170817 19:29:42.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:29:42.587" status="PASS" endtime="20170817 19:29:42.587"></status>
</kw>
<status starttime="20170817 19:29:42.289" status="PASS" endtime="20170817 19:29:42.588"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.591">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:42.591" status="PASS" endtime="20170817 19:29:42.591"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.592">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:42.592" status="PASS" endtime="20170817 19:29:42.592"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.593">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:42.592" status="PASS" endtime="20170817 19:29:42.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.593">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:42.593" status="PASS" endtime="20170817 19:29:42.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.790">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:42.594" status="PASS" endtime="20170817 19:29:42.790"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.790">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:42.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:42.594" status="PASS" endtime="20170817 19:29:42.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.791">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:42.790" status="PASS" endtime="20170817 19:29:42.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:42.791" status="PASS" endtime="20170817 19:29:42.791"></status>
</kw>
<status starttime="20170817 19:29:42.590" status="PASS" endtime="20170817 19:29:42.792"></status>
</kw>
<status starttime="20170817 19:29:42.590" status="PASS" endtime="20170817 19:29:42.792"></status>
</kw>
<status starttime="20170817 19:29:42.589" status="PASS" endtime="20170817 19:29:42.792"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.792">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:29:42.792" status="PASS" endtime="20170817 19:29:42.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.798">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:42.794" status="PASS" endtime="20170817 19:29:42.798"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.799">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:42.799" status="PASS" endtime="20170817 19:29:42.799"></status>
</kw>
<status starttime="20170817 19:29:42.799" status="PASS" endtime="20170817 19:29:42.800"></status>
</kw>
<status starttime="20170817 19:29:42.793" status="PASS" endtime="20170817 19:29:42.800"></status>
</kw>
<status starttime="20170817 19:29:42.793" status="PASS" endtime="20170817 19:29:42.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.946">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:42.946">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:42.801" status="PASS" endtime="20170817 19:29:42.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.948">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:42.947" status="PASS" endtime="20170817 19:29:42.948"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.949">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:42.949" status="PASS" endtime="20170817 19:29:42.949"></status>
</kw>
<status starttime="20170817 19:29:42.948" status="PASS" endtime="20170817 19:29:42.949"></status>
</kw>
<status starttime="20170817 19:29:42.947" status="PASS" endtime="20170817 19:29:42.949"></status>
</kw>
<status starttime="20170817 19:29:42.946" status="PASS" endtime="20170817 19:29:42.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:42.950">Delete All Sessions</msg>
<status starttime="20170817 19:29:42.950" status="PASS" endtime="20170817 19:29:42.950"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:42.589" status="PASS" endtime="20170817 19:29:42.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:42.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:42.950" status="PASS" endtime="20170817 19:29:42.951"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:42.951">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:42.951">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:42.951">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:42.951" status="PASS" endtime="20170817 19:29:42.951"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.952">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:29:42.588" status="PASS" endtime="20170817 19:29:42.952"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:42.952">${host_state} = Quiesced</msg>
<status starttime="20170817 19:29:42.588" status="PASS" endtime="20170817 19:29:42.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:29:42.953">Running != Quiesced</msg>
<status starttime="20170817 19:29:42.952" status="FAIL" endtime="20170817 19:29:42.953"></status>
</kw>
<status starttime="20170817 19:29:42.288" status="FAIL" endtime="20170817 19:29:42.953"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:52.958">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:52.957" status="PASS" endtime="20170817 19:29:52.958"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:52.959">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:52.958" status="PASS" endtime="20170817 19:29:52.959"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:52.960">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:52.959" status="PASS" endtime="20170817 19:29:52.960"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:52.960">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:52.960" status="PASS" endtime="20170817 19:29:52.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:52.961" status="PASS" endtime="20170817 19:29:53.153"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.153">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:53.153">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:52.961" status="PASS" endtime="20170817 19:29:53.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:53.154" status="PASS" endtime="20170817 19:29:53.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:53.154" status="PASS" endtime="20170817 19:29:53.155"></status>
</kw>
<status starttime="20170817 19:29:52.957" status="PASS" endtime="20170817 19:29:53.155"></status>
</kw>
<status starttime="20170817 19:29:52.956" status="PASS" endtime="20170817 19:29:53.155"></status>
</kw>
<status starttime="20170817 19:29:52.956" status="PASS" endtime="20170817 19:29:53.155"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.156">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:29:53.156" status="PASS" endtime="20170817 19:29:53.156"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.158">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:53.157" status="PASS" endtime="20170817 19:29:53.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.159">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:53.159" status="PASS" endtime="20170817 19:29:53.159"></status>
</kw>
<status starttime="20170817 19:29:53.158" status="PASS" endtime="20170817 19:29:53.159"></status>
</kw>
<status starttime="20170817 19:29:53.157" status="PASS" endtime="20170817 19:29:53.159"></status>
</kw>
<status starttime="20170817 19:29:53.156" status="PASS" endtime="20170817 19:29:53.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.222">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:53.222">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:53.160" status="PASS" endtime="20170817 19:29:53.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.224">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:53.223" status="PASS" endtime="20170817 19:29:53.224"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.225">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:53.225" status="PASS" endtime="20170817 19:29:53.225"></status>
</kw>
<status starttime="20170817 19:29:53.224" status="PASS" endtime="20170817 19:29:53.225"></status>
</kw>
<status starttime="20170817 19:29:53.223" status="PASS" endtime="20170817 19:29:53.225"></status>
</kw>
<status starttime="20170817 19:29:53.223" status="PASS" endtime="20170817 19:29:53.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:53.226">Delete All Sessions</msg>
<status starttime="20170817 19:29:53.226" status="PASS" endtime="20170817 19:29:53.226"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:52.955" status="PASS" endtime="20170817 19:29:53.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:53.226" status="PASS" endtime="20170817 19:29:53.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.227">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:53.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:53.227">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:53.227" status="PASS" endtime="20170817 19:29:53.228"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.228">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:29:52.955" status="PASS" endtime="20170817 19:29:53.228"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.228">${power_state} = On</msg>
<status starttime="20170817 19:29:52.954" status="PASS" endtime="20170817 19:29:53.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:29:53.228" status="PASS" endtime="20170817 19:29:53.229"></status>
</kw>
<status starttime="20170817 19:29:52.954" status="PASS" endtime="20170817 19:29:53.229"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.233">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:29:53.232" status="PASS" endtime="20170817 19:29:53.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:29:53.233" status="PASS" endtime="20170817 19:29:53.234"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.234">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:29:53.234" status="PASS" endtime="20170817 19:29:53.234"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:29:53.234" status="PASS" endtime="20170817 19:29:53.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:29:53.236" status="PASS" endtime="20170817 19:29:53.422"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:29:53.422">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:53.235" status="PASS" endtime="20170817 19:29:53.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:53.423" status="PASS" endtime="20170817 19:29:53.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:53.423" status="PASS" endtime="20170817 19:29:53.424"></status>
</kw>
<status starttime="20170817 19:29:53.232" status="PASS" endtime="20170817 19:29:53.424"></status>
</kw>
<status starttime="20170817 19:29:53.231" status="PASS" endtime="20170817 19:29:53.424"></status>
</kw>
<status starttime="20170817 19:29:53.230" status="PASS" endtime="20170817 19:29:53.424"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.425">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:29:53.424" status="PASS" endtime="20170817 19:29:53.425"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.427">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:53.426" status="PASS" endtime="20170817 19:29:53.427"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.428">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:29:53.427" status="PASS" endtime="20170817 19:29:53.428"></status>
</kw>
<status starttime="20170817 19:29:53.427" status="PASS" endtime="20170817 19:29:53.428"></status>
</kw>
<status starttime="20170817 19:29:53.425" status="PASS" endtime="20170817 19:29:53.428"></status>
</kw>
<status starttime="20170817 19:29:53.425" status="PASS" endtime="20170817 19:29:53.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:29:53.518">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:53.428" status="PASS" endtime="20170817 19:29:53.518"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.519">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:53.519" status="PASS" endtime="20170817 19:29:53.519"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.521">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:29:53.520" status="PASS" endtime="20170817 19:29:53.521"></status>
</kw>
<status starttime="20170817 19:29:53.520" status="PASS" endtime="20170817 19:29:53.521"></status>
</kw>
<status starttime="20170817 19:29:53.518" status="PASS" endtime="20170817 19:29:53.521"></status>
</kw>
<status starttime="20170817 19:29:53.518" status="PASS" endtime="20170817 19:29:53.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:29:53.521">Delete All Sessions</msg>
<status starttime="20170817 19:29:53.521" status="PASS" endtime="20170817 19:29:53.521"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.522">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:29:53.230" status="PASS" endtime="20170817 19:29:53.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:29:53.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:29:53.522" status="PASS" endtime="20170817 19:29:53.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:29:53.523">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:29:53.523">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:29:53.523">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:29:53.523" status="PASS" endtime="20170817 19:29:53.523"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.523">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:29:53.229" status="PASS" endtime="20170817 19:29:53.523"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:29:53.524">${host_state} = Quiesced</msg>
<status starttime="20170817 19:29:53.229" status="PASS" endtime="20170817 19:29:53.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:29:53.524">Running != Quiesced</msg>
<status starttime="20170817 19:29:53.524" status="FAIL" endtime="20170817 19:29:53.524"></status>
</kw>
<status starttime="20170817 19:29:52.953" status="FAIL" endtime="20170817 19:29:53.525"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.531">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:03.531" status="PASS" endtime="20170817 19:30:03.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:03.532" status="PASS" endtime="20170817 19:30:03.532"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.533">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:03.532" status="PASS" endtime="20170817 19:30:03.533"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:03.533" status="PASS" endtime="20170817 19:30:03.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:03.534" status="PASS" endtime="20170817 19:30:03.795"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:03.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:03.795">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:03.533" status="PASS" endtime="20170817 19:30:03.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:03.795" status="PASS" endtime="20170817 19:30:03.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:03.796" status="PASS" endtime="20170817 19:30:03.796"></status>
</kw>
<status starttime="20170817 19:30:03.530" status="PASS" endtime="20170817 19:30:03.796"></status>
</kw>
<status starttime="20170817 19:30:03.530" status="PASS" endtime="20170817 19:30:03.797"></status>
</kw>
<status starttime="20170817 19:30:03.528" status="PASS" endtime="20170817 19:30:03.797"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.797">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:30:03.797" status="PASS" endtime="20170817 19:30:03.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.800">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:03.799" status="PASS" endtime="20170817 19:30:03.800"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.801">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:03.801" status="PASS" endtime="20170817 19:30:03.802"></status>
</kw>
<status starttime="20170817 19:30:03.800" status="PASS" endtime="20170817 19:30:03.802"></status>
</kw>
<status starttime="20170817 19:30:03.798" status="PASS" endtime="20170817 19:30:03.802"></status>
</kw>
<status starttime="20170817 19:30:03.798" status="PASS" endtime="20170817 19:30:03.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.879">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:03.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:03.802" status="PASS" endtime="20170817 19:30:03.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.881">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:03.881" status="PASS" endtime="20170817 19:30:03.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.882">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:03.882" status="PASS" endtime="20170817 19:30:03.882"></status>
</kw>
<status starttime="20170817 19:30:03.881" status="PASS" endtime="20170817 19:30:03.882"></status>
</kw>
<status starttime="20170817 19:30:03.880" status="PASS" endtime="20170817 19:30:03.882"></status>
</kw>
<status starttime="20170817 19:30:03.880" status="PASS" endtime="20170817 19:30:03.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:03.884">Delete All Sessions</msg>
<status starttime="20170817 19:30:03.883" status="PASS" endtime="20170817 19:30:03.884"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:03.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:03.528" status="PASS" endtime="20170817 19:30:03.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:03.885" status="PASS" endtime="20170817 19:30:03.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.886">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:03.886">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:03.886">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:03.885" status="PASS" endtime="20170817 19:30:03.886"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:03.886">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:30:03.527" status="PASS" endtime="20170817 19:30:03.886"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:03.887">${power_state} = On</msg>
<status starttime="20170817 19:30:03.526" status="PASS" endtime="20170817 19:30:03.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:30:03.887" status="PASS" endtime="20170817 19:30:03.887"></status>
</kw>
<status starttime="20170817 19:30:03.526" status="PASS" endtime="20170817 19:30:03.887"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:03.891">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:03.890" status="PASS" endtime="20170817 19:30:03.891"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:03.892" status="PASS" endtime="20170817 19:30:03.892"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.893">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:03.893" status="PASS" endtime="20170817 19:30:03.893"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:03.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:03.893" status="PASS" endtime="20170817 19:30:03.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:04.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:03.894" status="PASS" endtime="20170817 19:30:04.094"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:04.094">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:04.094">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:03.894" status="PASS" endtime="20170817 19:30:04.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:04.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:04.094" status="PASS" endtime="20170817 19:30:04.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:04.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:04.095" status="PASS" endtime="20170817 19:30:04.095"></status>
</kw>
<status starttime="20170817 19:30:03.890" status="PASS" endtime="20170817 19:30:04.095"></status>
</kw>
<status starttime="20170817 19:30:03.889" status="PASS" endtime="20170817 19:30:04.095"></status>
</kw>
<status starttime="20170817 19:30:03.889" status="PASS" endtime="20170817 19:30:04.096"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:04.096">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:30:04.096" status="PASS" endtime="20170817 19:30:04.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:04.098">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:04.098" status="PASS" endtime="20170817 19:30:04.098"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:04.100">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:04.099" status="PASS" endtime="20170817 19:30:04.100"></status>
</kw>
<status starttime="20170817 19:30:04.099" status="PASS" endtime="20170817 19:30:04.100"></status>
</kw>
<status starttime="20170817 19:30:04.097" status="PASS" endtime="20170817 19:30:04.100"></status>
</kw>
<status starttime="20170817 19:30:04.097" status="PASS" endtime="20170817 19:30:04.100"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:04.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:04.189">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:04.100" status="PASS" endtime="20170817 19:30:04.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:04.191">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:04.191" status="PASS" endtime="20170817 19:30:04.191"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:04.192">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:04.192" status="PASS" endtime="20170817 19:30:04.192"></status>
</kw>
<status starttime="20170817 19:30:04.191" status="PASS" endtime="20170817 19:30:04.192"></status>
</kw>
<status starttime="20170817 19:30:04.190" status="PASS" endtime="20170817 19:30:04.192"></status>
</kw>
<status starttime="20170817 19:30:04.190" status="PASS" endtime="20170817 19:30:04.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:04.193">Delete All Sessions</msg>
<status starttime="20170817 19:30:04.193" status="PASS" endtime="20170817 19:30:04.193"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:04.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:03.888" status="PASS" endtime="20170817 19:30:04.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:04.194">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:04.193" status="PASS" endtime="20170817 19:30:04.194"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:04.194">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:04.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:04.195">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:04.194" status="PASS" endtime="20170817 19:30:04.195"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:04.195">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:30:03.888" status="PASS" endtime="20170817 19:30:04.195"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:04.195">${host_state} = Quiesced</msg>
<status starttime="20170817 19:30:03.887" status="PASS" endtime="20170817 19:30:04.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:30:04.196">Running != Quiesced</msg>
<status starttime="20170817 19:30:04.195" status="FAIL" endtime="20170817 19:30:04.196"></status>
</kw>
<status starttime="20170817 19:30:03.525" status="FAIL" endtime="20170817 19:30:04.196"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.202">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:14.202" status="PASS" endtime="20170817 19:30:14.202"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.203">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:14.203" status="PASS" endtime="20170817 19:30:14.203"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.203">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:14.203" status="PASS" endtime="20170817 19:30:14.203"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.204">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:14.204" status="PASS" endtime="20170817 19:30:14.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:14.205" status="PASS" endtime="20170817 19:30:14.496"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.496">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:14.496">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:14.204" status="PASS" endtime="20170817 19:30:14.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.497">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:14.496" status="PASS" endtime="20170817 19:30:14.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:14.497" status="PASS" endtime="20170817 19:30:14.497"></status>
</kw>
<status starttime="20170817 19:30:14.201" status="PASS" endtime="20170817 19:30:14.497"></status>
</kw>
<status starttime="20170817 19:30:14.201" status="PASS" endtime="20170817 19:30:14.498"></status>
</kw>
<status starttime="20170817 19:30:14.200" status="PASS" endtime="20170817 19:30:14.498"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.498">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:30:14.498" status="PASS" endtime="20170817 19:30:14.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.500">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:14.500" status="PASS" endtime="20170817 19:30:14.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.501">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:14.501" status="PASS" endtime="20170817 19:30:14.502"></status>
</kw>
<status starttime="20170817 19:30:14.500" status="PASS" endtime="20170817 19:30:14.502"></status>
</kw>
<status starttime="20170817 19:30:14.499" status="PASS" endtime="20170817 19:30:14.502"></status>
</kw>
<status starttime="20170817 19:30:14.499" status="PASS" endtime="20170817 19:30:14.502"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.565">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:14.565">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:14.502" status="PASS" endtime="20170817 19:30:14.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.567">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:14.566" status="PASS" endtime="20170817 19:30:14.567"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.568">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:14.567" status="PASS" endtime="20170817 19:30:14.568"></status>
</kw>
<status starttime="20170817 19:30:14.567" status="PASS" endtime="20170817 19:30:14.568"></status>
</kw>
<status starttime="20170817 19:30:14.566" status="PASS" endtime="20170817 19:30:14.568"></status>
</kw>
<status starttime="20170817 19:30:14.565" status="PASS" endtime="20170817 19:30:14.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:14.568">Delete All Sessions</msg>
<status starttime="20170817 19:30:14.568" status="PASS" endtime="20170817 19:30:14.568"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.569">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:14.199" status="PASS" endtime="20170817 19:30:14.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:14.569" status="PASS" endtime="20170817 19:30:14.569"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.570">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:14.570">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:14.570">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:14.570" status="PASS" endtime="20170817 19:30:14.570"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.571">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:30:14.198" status="PASS" endtime="20170817 19:30:14.571"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.571">${power_state} = On</msg>
<status starttime="20170817 19:30:14.198" status="PASS" endtime="20170817 19:30:14.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:30:14.571" status="PASS" endtime="20170817 19:30:14.571"></status>
</kw>
<status starttime="20170817 19:30:14.197" status="PASS" endtime="20170817 19:30:14.572"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.575">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:14.575" status="PASS" endtime="20170817 19:30:14.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.576">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:14.576" status="PASS" endtime="20170817 19:30:14.576"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.577">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:14.576" status="PASS" endtime="20170817 19:30:14.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.577">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:14.577" status="PASS" endtime="20170817 19:30:14.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.755">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:14.578" status="PASS" endtime="20170817 19:30:14.755"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:14.755">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:14.577" status="PASS" endtime="20170817 19:30:14.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.756">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:14.756" status="PASS" endtime="20170817 19:30:14.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.757">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:14.757" status="PASS" endtime="20170817 19:30:14.757"></status>
</kw>
<status starttime="20170817 19:30:14.574" status="PASS" endtime="20170817 19:30:14.757"></status>
</kw>
<status starttime="20170817 19:30:14.574" status="PASS" endtime="20170817 19:30:14.757"></status>
</kw>
<status starttime="20170817 19:30:14.573" status="PASS" endtime="20170817 19:30:14.757"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.758">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:30:14.757" status="PASS" endtime="20170817 19:30:14.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.760">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:14.759" status="PASS" endtime="20170817 19:30:14.760"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.761">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:14.761" status="PASS" endtime="20170817 19:30:14.761"></status>
</kw>
<status starttime="20170817 19:30:14.760" status="PASS" endtime="20170817 19:30:14.761"></status>
</kw>
<status starttime="20170817 19:30:14.759" status="PASS" endtime="20170817 19:30:14.761"></status>
</kw>
<status starttime="20170817 19:30:14.758" status="PASS" endtime="20170817 19:30:14.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.850">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:14.850">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:14.761" status="PASS" endtime="20170817 19:30:14.850"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.852">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:14.852" status="PASS" endtime="20170817 19:30:14.852"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.853">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:14.853" status="PASS" endtime="20170817 19:30:14.853"></status>
</kw>
<status starttime="20170817 19:30:14.853" status="PASS" endtime="20170817 19:30:14.854"></status>
</kw>
<status starttime="20170817 19:30:14.851" status="PASS" endtime="20170817 19:30:14.854"></status>
</kw>
<status starttime="20170817 19:30:14.850" status="PASS" endtime="20170817 19:30:14.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:14.854">Delete All Sessions</msg>
<status starttime="20170817 19:30:14.854" status="PASS" endtime="20170817 19:30:14.854"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.854">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:14.573" status="PASS" endtime="20170817 19:30:14.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:14.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:14.855" status="PASS" endtime="20170817 19:30:14.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:14.856">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:14.856">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:14.856">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:14.855" status="PASS" endtime="20170817 19:30:14.856"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.856">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:30:14.572" status="PASS" endtime="20170817 19:30:14.856"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:14.856">${host_state} = Quiesced</msg>
<status starttime="20170817 19:30:14.572" status="PASS" endtime="20170817 19:30:14.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:30:14.857">Running != Quiesced</msg>
<status starttime="20170817 19:30:14.857" status="FAIL" endtime="20170817 19:30:14.857"></status>
</kw>
<status starttime="20170817 19:30:14.197" status="FAIL" endtime="20170817 19:30:14.857"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:24.862">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:24.862" status="PASS" endtime="20170817 19:30:24.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:24.863">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:24.863" status="PASS" endtime="20170817 19:30:24.863"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:24.864">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:24.864" status="PASS" endtime="20170817 19:30:24.864"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:24.865">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:24.864" status="PASS" endtime="20170817 19:30:24.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.046">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:24.865" status="PASS" endtime="20170817 19:30:25.046"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.046">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:25.047">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:24.865" status="PASS" endtime="20170817 19:30:25.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.047">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:25.047" status="PASS" endtime="20170817 19:30:25.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:25.047" status="PASS" endtime="20170817 19:30:25.048"></status>
</kw>
<status starttime="20170817 19:30:24.861" status="PASS" endtime="20170817 19:30:25.048"></status>
</kw>
<status starttime="20170817 19:30:24.861" status="PASS" endtime="20170817 19:30:25.048"></status>
</kw>
<status starttime="20170817 19:30:24.860" status="PASS" endtime="20170817 19:30:25.048"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.049">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:30:25.048" status="PASS" endtime="20170817 19:30:25.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.051">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:25.050" status="PASS" endtime="20170817 19:30:25.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.052">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:25.052" status="PASS" endtime="20170817 19:30:25.052"></status>
</kw>
<status starttime="20170817 19:30:25.051" status="PASS" endtime="20170817 19:30:25.052"></status>
</kw>
<status starttime="20170817 19:30:25.050" status="PASS" endtime="20170817 19:30:25.052"></status>
</kw>
<status starttime="20170817 19:30:25.049" status="PASS" endtime="20170817 19:30:25.052"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.114">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:25.114">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:25.052" status="PASS" endtime="20170817 19:30:25.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.116">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:25.115" status="PASS" endtime="20170817 19:30:25.116"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.117">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:25.117" status="PASS" endtime="20170817 19:30:25.117"></status>
</kw>
<status starttime="20170817 19:30:25.116" status="PASS" endtime="20170817 19:30:25.117"></status>
</kw>
<status starttime="20170817 19:30:25.115" status="PASS" endtime="20170817 19:30:25.117"></status>
</kw>
<status starttime="20170817 19:30:25.114" status="PASS" endtime="20170817 19:30:25.117"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:25.118">Delete All Sessions</msg>
<status starttime="20170817 19:30:25.118" status="PASS" endtime="20170817 19:30:25.118"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.118">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:24.859" status="PASS" endtime="20170817 19:30:25.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:25.118" status="PASS" endtime="20170817 19:30:25.119"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.119">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:25.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:25.120">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:25.119" status="PASS" endtime="20170817 19:30:25.120"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.120">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:30:24.859" status="PASS" endtime="20170817 19:30:25.120"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.120">${power_state} = On</msg>
<status starttime="20170817 19:30:24.859" status="PASS" endtime="20170817 19:30:25.120"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:30:25.120" status="PASS" endtime="20170817 19:30:25.121"></status>
</kw>
<status starttime="20170817 19:30:24.858" status="PASS" endtime="20170817 19:30:25.121"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.124">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:25.124" status="PASS" endtime="20170817 19:30:25.125"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:25.125" status="PASS" endtime="20170817 19:30:25.125"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.126">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:25.125" status="PASS" endtime="20170817 19:30:25.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:25.126" status="PASS" endtime="20170817 19:30:25.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.343">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:25.127" status="PASS" endtime="20170817 19:30:25.343"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.343">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:25.344">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:25.127" status="PASS" endtime="20170817 19:30:25.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.344">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:25.344" status="PASS" endtime="20170817 19:30:25.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.345">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:25.344" status="PASS" endtime="20170817 19:30:25.345"></status>
</kw>
<status starttime="20170817 19:30:25.123" status="PASS" endtime="20170817 19:30:25.345"></status>
</kw>
<status starttime="20170817 19:30:25.123" status="PASS" endtime="20170817 19:30:25.345"></status>
</kw>
<status starttime="20170817 19:30:25.122" status="PASS" endtime="20170817 19:30:25.345"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.346">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:30:25.345" status="PASS" endtime="20170817 19:30:25.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.348">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:25.347" status="PASS" endtime="20170817 19:30:25.348"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.349">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:25.349" status="PASS" endtime="20170817 19:30:25.349"></status>
</kw>
<status starttime="20170817 19:30:25.349" status="PASS" endtime="20170817 19:30:25.349"></status>
</kw>
<status starttime="20170817 19:30:25.347" status="PASS" endtime="20170817 19:30:25.350"></status>
</kw>
<status starttime="20170817 19:30:25.346" status="PASS" endtime="20170817 19:30:25.350"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.448">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:25.448">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:25.350" status="PASS" endtime="20170817 19:30:25.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.450">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:25.449" status="PASS" endtime="20170817 19:30:25.450"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.451">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:25.450" status="PASS" endtime="20170817 19:30:25.451"></status>
</kw>
<status starttime="20170817 19:30:25.450" status="PASS" endtime="20170817 19:30:25.451"></status>
</kw>
<status starttime="20170817 19:30:25.449" status="PASS" endtime="20170817 19:30:25.451"></status>
</kw>
<status starttime="20170817 19:30:25.448" status="PASS" endtime="20170817 19:30:25.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:25.451">Delete All Sessions</msg>
<status starttime="20170817 19:30:25.451" status="PASS" endtime="20170817 19:30:25.452"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.452">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:25.122" status="PASS" endtime="20170817 19:30:25.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:25.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:25.452" status="PASS" endtime="20170817 19:30:25.452"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:25.453">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:25.453">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:25.453">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:25.453" status="PASS" endtime="20170817 19:30:25.453"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.453">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:30:25.121" status="PASS" endtime="20170817 19:30:25.453"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:25.454">${host_state} = Quiesced</msg>
<status starttime="20170817 19:30:25.121" status="PASS" endtime="20170817 19:30:25.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:30:25.454">Running != Quiesced</msg>
<status starttime="20170817 19:30:25.454" status="FAIL" endtime="20170817 19:30:25.454"></status>
</kw>
<status starttime="20170817 19:30:24.858" status="FAIL" endtime="20170817 19:30:25.455"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.460">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:35.460" status="PASS" endtime="20170817 19:30:35.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:35.461" status="PASS" endtime="20170817 19:30:35.461"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.466">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:35.462" status="PASS" endtime="20170817 19:30:35.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:35.466" status="PASS" endtime="20170817 19:30:35.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.670">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:35.467" status="PASS" endtime="20170817 19:30:35.670"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:35.670">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:35.670">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:35.467" status="PASS" endtime="20170817 19:30:35.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.671">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:35.670" status="PASS" endtime="20170817 19:30:35.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:35.671" status="PASS" endtime="20170817 19:30:35.671"></status>
</kw>
<status starttime="20170817 19:30:35.459" status="PASS" endtime="20170817 19:30:35.672"></status>
</kw>
<status starttime="20170817 19:30:35.459" status="PASS" endtime="20170817 19:30:35.672"></status>
</kw>
<status starttime="20170817 19:30:35.458" status="PASS" endtime="20170817 19:30:35.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.672">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:30:35.672" status="PASS" endtime="20170817 19:30:35.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.674">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:35.674" status="PASS" endtime="20170817 19:30:35.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.675">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:35.675" status="PASS" endtime="20170817 19:30:35.675"></status>
</kw>
<status starttime="20170817 19:30:35.674" status="PASS" endtime="20170817 19:30:35.675"></status>
</kw>
<status starttime="20170817 19:30:35.673" status="PASS" endtime="20170817 19:30:35.676"></status>
</kw>
<status starttime="20170817 19:30:35.673" status="PASS" endtime="20170817 19:30:35.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:35.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:35.676" status="PASS" endtime="20170817 19:30:35.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.759">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:35.758" status="PASS" endtime="20170817 19:30:35.759"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.760">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:35.759" status="PASS" endtime="20170817 19:30:35.760"></status>
</kw>
<status starttime="20170817 19:30:35.759" status="PASS" endtime="20170817 19:30:35.760"></status>
</kw>
<status starttime="20170817 19:30:35.758" status="PASS" endtime="20170817 19:30:35.760"></status>
</kw>
<status starttime="20170817 19:30:35.757" status="PASS" endtime="20170817 19:30:35.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:35.760">Delete All Sessions</msg>
<status starttime="20170817 19:30:35.760" status="PASS" endtime="20170817 19:30:35.760"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:35.761">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:35.457" status="PASS" endtime="20170817 19:30:35.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:35.761" status="PASS" endtime="20170817 19:30:35.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.762">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:35.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:35.762">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:35.762" status="PASS" endtime="20170817 19:30:35.762"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:35.762">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:30:35.457" status="PASS" endtime="20170817 19:30:35.762"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:35.763">${power_state} = On</msg>
<status starttime="20170817 19:30:35.456" status="PASS" endtime="20170817 19:30:35.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:30:35.763" status="PASS" endtime="20170817 19:30:35.763"></status>
</kw>
<status starttime="20170817 19:30:35.456" status="PASS" endtime="20170817 19:30:35.763"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.767">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:35.767" status="PASS" endtime="20170817 19:30:35.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:35.768" status="PASS" endtime="20170817 19:30:35.768"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.769">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:35.768" status="PASS" endtime="20170817 19:30:35.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:35.769" status="PASS" endtime="20170817 19:30:35.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:35.770" status="PASS" endtime="20170817 19:30:35.957"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:35.957">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:35.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:35.770" status="PASS" endtime="20170817 19:30:35.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.958">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:35.958" status="PASS" endtime="20170817 19:30:35.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:35.958" status="PASS" endtime="20170817 19:30:35.959"></status>
</kw>
<status starttime="20170817 19:30:35.766" status="PASS" endtime="20170817 19:30:35.959"></status>
</kw>
<status starttime="20170817 19:30:35.766" status="PASS" endtime="20170817 19:30:35.959"></status>
</kw>
<status starttime="20170817 19:30:35.765" status="PASS" endtime="20170817 19:30:35.959"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.960">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:30:35.960" status="PASS" endtime="20170817 19:30:35.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:35.962">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:35.961" status="PASS" endtime="20170817 19:30:35.962"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:35.963">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:35.963" status="PASS" endtime="20170817 19:30:35.963"></status>
</kw>
<status starttime="20170817 19:30:35.962" status="PASS" endtime="20170817 19:30:35.963"></status>
</kw>
<status starttime="20170817 19:30:35.961" status="PASS" endtime="20170817 19:30:35.963"></status>
</kw>
<status starttime="20170817 19:30:35.960" status="PASS" endtime="20170817 19:30:35.963"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:36.075">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:36.075">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:35.963" status="PASS" endtime="20170817 19:30:36.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:36.077">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:36.076" status="PASS" endtime="20170817 19:30:36.077"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:36.078">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:36.078" status="PASS" endtime="20170817 19:30:36.078"></status>
</kw>
<status starttime="20170817 19:30:36.077" status="PASS" endtime="20170817 19:30:36.078"></status>
</kw>
<status starttime="20170817 19:30:36.076" status="PASS" endtime="20170817 19:30:36.078"></status>
</kw>
<status starttime="20170817 19:30:36.075" status="PASS" endtime="20170817 19:30:36.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:36.079">Delete All Sessions</msg>
<status starttime="20170817 19:30:36.079" status="PASS" endtime="20170817 19:30:36.079"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:36.079">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:35.764" status="PASS" endtime="20170817 19:30:36.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:36.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:36.079" status="PASS" endtime="20170817 19:30:36.080"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:36.080">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:36.080">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:36.081">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:36.080" status="PASS" endtime="20170817 19:30:36.081"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:36.081">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:30:35.764" status="PASS" endtime="20170817 19:30:36.081"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:36.081">${host_state} = Quiesced</msg>
<status starttime="20170817 19:30:35.763" status="PASS" endtime="20170817 19:30:36.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:30:36.082">Running != Quiesced</msg>
<status starttime="20170817 19:30:36.081" status="FAIL" endtime="20170817 19:30:36.082"></status>
</kw>
<status starttime="20170817 19:30:35.455" status="FAIL" endtime="20170817 19:30:36.082"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.087">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:46.087" status="PASS" endtime="20170817 19:30:46.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:46.088" status="PASS" endtime="20170817 19:30:46.088"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.088">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:46.088" status="PASS" endtime="20170817 19:30:46.089"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:46.089" status="PASS" endtime="20170817 19:30:46.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:46.090" status="PASS" endtime="20170817 19:30:46.289"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.289">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:46.289">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:46.089" status="PASS" endtime="20170817 19:30:46.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.290">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:46.290" status="PASS" endtime="20170817 19:30:46.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:46.290" status="PASS" endtime="20170817 19:30:46.291"></status>
</kw>
<status starttime="20170817 19:30:46.086" status="PASS" endtime="20170817 19:30:46.291"></status>
</kw>
<status starttime="20170817 19:30:46.086" status="PASS" endtime="20170817 19:30:46.291"></status>
</kw>
<status starttime="20170817 19:30:46.085" status="PASS" endtime="20170817 19:30:46.291"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.292">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:30:46.291" status="PASS" endtime="20170817 19:30:46.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.294">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:46.293" status="PASS" endtime="20170817 19:30:46.294"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.295">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:46.294" status="PASS" endtime="20170817 19:30:46.295"></status>
</kw>
<status starttime="20170817 19:30:46.294" status="PASS" endtime="20170817 19:30:46.295"></status>
</kw>
<status starttime="20170817 19:30:46.292" status="PASS" endtime="20170817 19:30:46.295"></status>
</kw>
<status starttime="20170817 19:30:46.292" status="PASS" endtime="20170817 19:30:46.295"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.357">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:46.357">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:46.295" status="PASS" endtime="20170817 19:30:46.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.359">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:46.359" status="PASS" endtime="20170817 19:30:46.359"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.360">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:46.360" status="PASS" endtime="20170817 19:30:46.360"></status>
</kw>
<status starttime="20170817 19:30:46.359" status="PASS" endtime="20170817 19:30:46.360"></status>
</kw>
<status starttime="20170817 19:30:46.358" status="PASS" endtime="20170817 19:30:46.360"></status>
</kw>
<status starttime="20170817 19:30:46.358" status="PASS" endtime="20170817 19:30:46.361"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:46.361">Delete All Sessions</msg>
<status starttime="20170817 19:30:46.361" status="PASS" endtime="20170817 19:30:46.361"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.361">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:46.084" status="PASS" endtime="20170817 19:30:46.361"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:46.361" status="PASS" endtime="20170817 19:30:46.362"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.362">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:46.362">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:46.363">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:46.362" status="PASS" endtime="20170817 19:30:46.363"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.363">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:30:46.084" status="PASS" endtime="20170817 19:30:46.363"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.363">${power_state} = On</msg>
<status starttime="20170817 19:30:46.083" status="PASS" endtime="20170817 19:30:46.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:30:46.363" status="PASS" endtime="20170817 19:30:46.364"></status>
</kw>
<status starttime="20170817 19:30:46.083" status="PASS" endtime="20170817 19:30:46.364"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.367">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:46.367" status="PASS" endtime="20170817 19:30:46.368"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:46.369" status="PASS" endtime="20170817 19:30:46.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.370">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:46.369" status="PASS" endtime="20170817 19:30:46.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.370">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:46.370" status="PASS" endtime="20170817 19:30:46.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:46.371" status="PASS" endtime="20170817 19:30:46.563"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.563">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:46.563">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:46.370" status="PASS" endtime="20170817 19:30:46.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.564">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:46.563" status="PASS" endtime="20170817 19:30:46.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:46.564" status="PASS" endtime="20170817 19:30:46.564"></status>
</kw>
<status starttime="20170817 19:30:46.367" status="PASS" endtime="20170817 19:30:46.565"></status>
</kw>
<status starttime="20170817 19:30:46.366" status="PASS" endtime="20170817 19:30:46.565"></status>
</kw>
<status starttime="20170817 19:30:46.365" status="PASS" endtime="20170817 19:30:46.565"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.565">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:30:46.565" status="PASS" endtime="20170817 19:30:46.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.567">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:46.567" status="PASS" endtime="20170817 19:30:46.567"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.568">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:46.568" status="PASS" endtime="20170817 19:30:46.568"></status>
</kw>
<status starttime="20170817 19:30:46.568" status="PASS" endtime="20170817 19:30:46.568"></status>
</kw>
<status starttime="20170817 19:30:46.566" status="PASS" endtime="20170817 19:30:46.569"></status>
</kw>
<status starttime="20170817 19:30:46.566" status="PASS" endtime="20170817 19:30:46.569"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.657">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:46.657">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:46.569" status="PASS" endtime="20170817 19:30:46.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.659">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:46.658" status="PASS" endtime="20170817 19:30:46.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.660">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:46.659" status="PASS" endtime="20170817 19:30:46.660"></status>
</kw>
<status starttime="20170817 19:30:46.659" status="PASS" endtime="20170817 19:30:46.660"></status>
</kw>
<status starttime="20170817 19:30:46.658" status="PASS" endtime="20170817 19:30:46.660"></status>
</kw>
<status starttime="20170817 19:30:46.657" status="PASS" endtime="20170817 19:30:46.660"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:46.661">Delete All Sessions</msg>
<status starttime="20170817 19:30:46.660" status="PASS" endtime="20170817 19:30:46.661"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.661">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:46.365" status="PASS" endtime="20170817 19:30:46.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:46.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:46.661" status="PASS" endtime="20170817 19:30:46.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:46.662">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:46.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:46.662">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:46.662" status="PASS" endtime="20170817 19:30:46.662"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.662">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:30:46.364" status="PASS" endtime="20170817 19:30:46.662"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:46.664">${host_state} = Quiesced</msg>
<status starttime="20170817 19:30:46.364" status="PASS" endtime="20170817 19:30:46.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:30:46.664">Running != Quiesced</msg>
<status starttime="20170817 19:30:46.664" status="FAIL" endtime="20170817 19:30:46.664"></status>
</kw>
<status starttime="20170817 19:30:46.082" status="FAIL" endtime="20170817 19:30:46.664"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.670">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:56.670" status="PASS" endtime="20170817 19:30:56.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:56.671" status="PASS" endtime="20170817 19:30:56.672"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.673">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:56.672" status="PASS" endtime="20170817 19:30:56.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:56.673" status="PASS" endtime="20170817 19:30:56.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:56.675" status="PASS" endtime="20170817 19:30:56.875"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:56.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:56.875">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:56.674" status="PASS" endtime="20170817 19:30:56.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:56.875" status="PASS" endtime="20170817 19:30:56.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:56.876" status="PASS" endtime="20170817 19:30:56.877"></status>
</kw>
<status starttime="20170817 19:30:56.669" status="PASS" endtime="20170817 19:30:56.877"></status>
</kw>
<status starttime="20170817 19:30:56.669" status="PASS" endtime="20170817 19:30:56.877"></status>
</kw>
<status starttime="20170817 19:30:56.668" status="PASS" endtime="20170817 19:30:56.877"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.878">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:30:56.878" status="PASS" endtime="20170817 19:30:56.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.881">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:56.880" status="PASS" endtime="20170817 19:30:56.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.882">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:56.881" status="PASS" endtime="20170817 19:30:56.882"></status>
</kw>
<status starttime="20170817 19:30:56.881" status="PASS" endtime="20170817 19:30:56.882"></status>
</kw>
<status starttime="20170817 19:30:56.879" status="PASS" endtime="20170817 19:30:56.882"></status>
</kw>
<status starttime="20170817 19:30:56.879" status="PASS" endtime="20170817 19:30:56.883"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.979">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:56.979">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:56.883" status="PASS" endtime="20170817 19:30:56.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.982">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:56.981" status="PASS" endtime="20170817 19:30:56.982"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.983">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:56.983" status="PASS" endtime="20170817 19:30:56.983"></status>
</kw>
<status starttime="20170817 19:30:56.982" status="PASS" endtime="20170817 19:30:56.983"></status>
</kw>
<status starttime="20170817 19:30:56.980" status="PASS" endtime="20170817 19:30:56.984"></status>
</kw>
<status starttime="20170817 19:30:56.980" status="PASS" endtime="20170817 19:30:56.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:56.984">Delete All Sessions</msg>
<status starttime="20170817 19:30:56.984" status="PASS" endtime="20170817 19:30:56.984"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:56.984">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:56.667" status="PASS" endtime="20170817 19:30:56.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:56.985" status="PASS" endtime="20170817 19:30:56.985"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.986">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:56.986">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:56.986">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:56.985" status="PASS" endtime="20170817 19:30:56.986"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:56.986">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:30:56.666" status="PASS" endtime="20170817 19:30:56.986"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:56.986">${power_state} = On</msg>
<status starttime="20170817 19:30:56.666" status="PASS" endtime="20170817 19:30:56.986"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:30:56.987" status="PASS" endtime="20170817 19:30:56.987"></status>
</kw>
<status starttime="20170817 19:30:56.665" status="PASS" endtime="20170817 19:30:56.987"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:56.990">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:30:56.990" status="PASS" endtime="20170817 19:30:56.991"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.991">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:30:56.991" status="PASS" endtime="20170817 19:30:56.991"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.992">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:30:56.992" status="PASS" endtime="20170817 19:30:56.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:56.993">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:30:56.992" status="PASS" endtime="20170817 19:30:56.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:57.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:30:56.993" status="PASS" endtime="20170817 19:30:57.221"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:57.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:30:57.221">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:56.993" status="PASS" endtime="20170817 19:30:57.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:57.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:57.222" status="PASS" endtime="20170817 19:30:57.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:57.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:57.222" status="PASS" endtime="20170817 19:30:57.223"></status>
</kw>
<status starttime="20170817 19:30:56.990" status="PASS" endtime="20170817 19:30:57.223"></status>
</kw>
<status starttime="20170817 19:30:56.989" status="PASS" endtime="20170817 19:30:57.223"></status>
</kw>
<status starttime="20170817 19:30:56.989" status="PASS" endtime="20170817 19:30:57.223"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:57.224">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:30:57.223" status="PASS" endtime="20170817 19:30:57.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:57.226">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:57.225" status="PASS" endtime="20170817 19:30:57.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:57.227">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:30:57.226" status="PASS" endtime="20170817 19:30:57.227"></status>
</kw>
<status starttime="20170817 19:30:57.226" status="PASS" endtime="20170817 19:30:57.227"></status>
</kw>
<status starttime="20170817 19:30:57.224" status="PASS" endtime="20170817 19:30:57.227"></status>
</kw>
<status starttime="20170817 19:30:57.224" status="PASS" endtime="20170817 19:30:57.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:57.317">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:30:57.317">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:57.227" status="PASS" endtime="20170817 19:30:57.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:57.319">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:57.318" status="PASS" endtime="20170817 19:30:57.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:57.319">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:30:57.319" status="PASS" endtime="20170817 19:30:57.320"></status>
</kw>
<status starttime="20170817 19:30:57.319" status="PASS" endtime="20170817 19:30:57.320"></status>
</kw>
<status starttime="20170817 19:30:57.318" status="PASS" endtime="20170817 19:30:57.320"></status>
</kw>
<status starttime="20170817 19:30:57.317" status="PASS" endtime="20170817 19:30:57.320"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:30:57.320">Delete All Sessions</msg>
<status starttime="20170817 19:30:57.320" status="PASS" endtime="20170817 19:30:57.320"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:57.321">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:30:56.988" status="PASS" endtime="20170817 19:30:57.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:30:57.321">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:30:57.321" status="PASS" endtime="20170817 19:30:57.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:30:57.322">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:30:57.322">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:30:57.322">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:30:57.322" status="PASS" endtime="20170817 19:30:57.322"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:57.322">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:30:56.988" status="PASS" endtime="20170817 19:30:57.322"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:30:57.323">${host_state} = Quiesced</msg>
<status starttime="20170817 19:30:56.987" status="PASS" endtime="20170817 19:30:57.323"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:30:57.323">Running != Quiesced</msg>
<status starttime="20170817 19:30:57.323" status="FAIL" endtime="20170817 19:30:57.323"></status>
</kw>
<status starttime="20170817 19:30:56.665" status="FAIL" endtime="20170817 19:30:57.323"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.329">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:07.329" status="PASS" endtime="20170817 19:31:07.329"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.330">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:07.330" status="PASS" endtime="20170817 19:31:07.330"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.331">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:07.330" status="PASS" endtime="20170817 19:31:07.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.331">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:07.331" status="PASS" endtime="20170817 19:31:07.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.510">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:07.332" status="PASS" endtime="20170817 19:31:07.510"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.510">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:07.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:07.332" status="PASS" endtime="20170817 19:31:07.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.511">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:07.511" status="PASS" endtime="20170817 19:31:07.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:07.511" status="PASS" endtime="20170817 19:31:07.512"></status>
</kw>
<status starttime="20170817 19:31:07.328" status="PASS" endtime="20170817 19:31:07.512"></status>
</kw>
<status starttime="20170817 19:31:07.327" status="PASS" endtime="20170817 19:31:07.512"></status>
</kw>
<status starttime="20170817 19:31:07.327" status="PASS" endtime="20170817 19:31:07.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.513">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:31:07.512" status="PASS" endtime="20170817 19:31:07.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.515">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:07.514" status="PASS" endtime="20170817 19:31:07.515"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.516">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:07.515" status="PASS" endtime="20170817 19:31:07.516"></status>
</kw>
<status starttime="20170817 19:31:07.515" status="PASS" endtime="20170817 19:31:07.516"></status>
</kw>
<status starttime="20170817 19:31:07.513" status="PASS" endtime="20170817 19:31:07.516"></status>
</kw>
<status starttime="20170817 19:31:07.513" status="PASS" endtime="20170817 19:31:07.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.581">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:07.581">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:07.516" status="PASS" endtime="20170817 19:31:07.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.583">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:07.582" status="PASS" endtime="20170817 19:31:07.583"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.584">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:07.584" status="PASS" endtime="20170817 19:31:07.584"></status>
</kw>
<status starttime="20170817 19:31:07.583" status="PASS" endtime="20170817 19:31:07.584"></status>
</kw>
<status starttime="20170817 19:31:07.582" status="PASS" endtime="20170817 19:31:07.584"></status>
</kw>
<status starttime="20170817 19:31:07.581" status="PASS" endtime="20170817 19:31:07.584"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:07.585">Delete All Sessions</msg>
<status starttime="20170817 19:31:07.585" status="PASS" endtime="20170817 19:31:07.585"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:07.326" status="PASS" endtime="20170817 19:31:07.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:07.586" status="PASS" endtime="20170817 19:31:07.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.587">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:07.587">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:07.587">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:07.587" status="PASS" endtime="20170817 19:31:07.587"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.588">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:31:07.325" status="PASS" endtime="20170817 19:31:07.588"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.588">${power_state} = On</msg>
<status starttime="20170817 19:31:07.325" status="PASS" endtime="20170817 19:31:07.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:31:07.589" status="PASS" endtime="20170817 19:31:07.589"></status>
</kw>
<status starttime="20170817 19:31:07.325" status="PASS" endtime="20170817 19:31:07.589"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.594">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:07.594" status="PASS" endtime="20170817 19:31:07.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:07.595" status="PASS" endtime="20170817 19:31:07.596"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.596">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:07.596" status="PASS" endtime="20170817 19:31:07.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.597">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:07.597" status="PASS" endtime="20170817 19:31:07.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:07.598" status="PASS" endtime="20170817 19:31:07.888"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.889">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:07.889">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:07.597" status="PASS" endtime="20170817 19:31:07.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.889">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:07.889" status="PASS" endtime="20170817 19:31:07.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:07.890" status="PASS" endtime="20170817 19:31:07.890"></status>
</kw>
<status starttime="20170817 19:31:07.593" status="PASS" endtime="20170817 19:31:07.890"></status>
</kw>
<status starttime="20170817 19:31:07.593" status="PASS" endtime="20170817 19:31:07.890"></status>
</kw>
<status starttime="20170817 19:31:07.592" status="PASS" endtime="20170817 19:31:07.890"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.891">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:31:07.891" status="PASS" endtime="20170817 19:31:07.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.893">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:07.892" status="PASS" endtime="20170817 19:31:07.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.894">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:07.894" status="PASS" endtime="20170817 19:31:07.894"></status>
</kw>
<status starttime="20170817 19:31:07.894" status="PASS" endtime="20170817 19:31:07.894"></status>
</kw>
<status starttime="20170817 19:31:07.892" status="PASS" endtime="20170817 19:31:07.895"></status>
</kw>
<status starttime="20170817 19:31:07.891" status="PASS" endtime="20170817 19:31:07.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.992">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:07.992">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:07.895" status="PASS" endtime="20170817 19:31:07.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.994">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:07.993" status="PASS" endtime="20170817 19:31:07.994"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.995">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:07.995" status="PASS" endtime="20170817 19:31:07.995"></status>
</kw>
<status starttime="20170817 19:31:07.994" status="PASS" endtime="20170817 19:31:07.995"></status>
</kw>
<status starttime="20170817 19:31:07.993" status="PASS" endtime="20170817 19:31:07.995"></status>
</kw>
<status starttime="20170817 19:31:07.992" status="PASS" endtime="20170817 19:31:07.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:07.996">Delete All Sessions</msg>
<status starttime="20170817 19:31:07.995" status="PASS" endtime="20170817 19:31:07.996"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.996">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:07.591" status="PASS" endtime="20170817 19:31:07.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:07.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:07.996" status="PASS" endtime="20170817 19:31:07.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:07.998">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:07.998">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:07.998">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:07.997" status="PASS" endtime="20170817 19:31:07.998"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.998">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:31:07.590" status="PASS" endtime="20170817 19:31:07.998"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:07.999">${host_state} = Quiesced</msg>
<status starttime="20170817 19:31:07.589" status="PASS" endtime="20170817 19:31:07.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:31:08.000">Running != Quiesced</msg>
<status starttime="20170817 19:31:07.999" status="FAIL" endtime="20170817 19:31:08.000"></status>
</kw>
<status starttime="20170817 19:31:07.324" status="FAIL" endtime="20170817 19:31:08.000"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.005">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:18.005" status="PASS" endtime="20170817 19:31:18.005"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:18.006" status="PASS" endtime="20170817 19:31:18.006"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.006">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:18.006" status="PASS" endtime="20170817 19:31:18.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:18.007" status="PASS" endtime="20170817 19:31:18.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.224">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:18.009" status="PASS" endtime="20170817 19:31:18.224"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.224">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:18.224">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:18.008" status="PASS" endtime="20170817 19:31:18.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.225">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:18.224" status="PASS" endtime="20170817 19:31:18.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:18.225" status="PASS" endtime="20170817 19:31:18.225"></status>
</kw>
<status starttime="20170817 19:31:18.004" status="PASS" endtime="20170817 19:31:18.225"></status>
</kw>
<status starttime="20170817 19:31:18.004" status="PASS" endtime="20170817 19:31:18.226"></status>
</kw>
<status starttime="20170817 19:31:18.003" status="PASS" endtime="20170817 19:31:18.226"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.226">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:31:18.226" status="PASS" endtime="20170817 19:31:18.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.229">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:18.228" status="PASS" endtime="20170817 19:31:18.229"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.229">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:18.229" status="PASS" endtime="20170817 19:31:18.230"></status>
</kw>
<status starttime="20170817 19:31:18.229" status="PASS" endtime="20170817 19:31:18.230"></status>
</kw>
<status starttime="20170817 19:31:18.227" status="PASS" endtime="20170817 19:31:18.230"></status>
</kw>
<status starttime="20170817 19:31:18.227" status="PASS" endtime="20170817 19:31:18.230"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.292">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:18.293">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:18.230" status="PASS" endtime="20170817 19:31:18.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.294">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:18.294" status="PASS" endtime="20170817 19:31:18.294"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.295">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:18.295" status="PASS" endtime="20170817 19:31:18.295"></status>
</kw>
<status starttime="20170817 19:31:18.294" status="PASS" endtime="20170817 19:31:18.295"></status>
</kw>
<status starttime="20170817 19:31:18.293" status="PASS" endtime="20170817 19:31:18.296"></status>
</kw>
<status starttime="20170817 19:31:18.293" status="PASS" endtime="20170817 19:31:18.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:18.296">Delete All Sessions</msg>
<status starttime="20170817 19:31:18.296" status="PASS" endtime="20170817 19:31:18.296"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:18.002" status="PASS" endtime="20170817 19:31:18.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:18.297" status="PASS" endtime="20170817 19:31:18.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.298">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:18.298">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:18.298">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:18.297" status="PASS" endtime="20170817 19:31:18.298"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.298">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:31:18.002" status="PASS" endtime="20170817 19:31:18.298"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.298">${power_state} = On</msg>
<status starttime="20170817 19:31:18.001" status="PASS" endtime="20170817 19:31:18.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:31:18.299" status="PASS" endtime="20170817 19:31:18.299"></status>
</kw>
<status starttime="20170817 19:31:18.001" status="PASS" endtime="20170817 19:31:18.299"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.307">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:18.306" status="PASS" endtime="20170817 19:31:18.307"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.308">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:18.307" status="PASS" endtime="20170817 19:31:18.308"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:18.308" status="PASS" endtime="20170817 19:31:18.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.309">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:18.309" status="PASS" endtime="20170817 19:31:18.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.504">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:18.310" status="PASS" endtime="20170817 19:31:18.504"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.504">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:18.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:18.309" status="PASS" endtime="20170817 19:31:18.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.505">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:18.504" status="PASS" endtime="20170817 19:31:18.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:18.505" status="PASS" endtime="20170817 19:31:18.505"></status>
</kw>
<status starttime="20170817 19:31:18.306" status="PASS" endtime="20170817 19:31:18.505"></status>
</kw>
<status starttime="20170817 19:31:18.301" status="PASS" endtime="20170817 19:31:18.506"></status>
</kw>
<status starttime="20170817 19:31:18.301" status="PASS" endtime="20170817 19:31:18.506"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.506">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:31:18.506" status="PASS" endtime="20170817 19:31:18.506"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.508">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:18.508" status="PASS" endtime="20170817 19:31:18.508"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.509">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:18.509" status="PASS" endtime="20170817 19:31:18.509"></status>
</kw>
<status starttime="20170817 19:31:18.509" status="PASS" endtime="20170817 19:31:18.509"></status>
</kw>
<status starttime="20170817 19:31:18.507" status="PASS" endtime="20170817 19:31:18.510"></status>
</kw>
<status starttime="20170817 19:31:18.507" status="PASS" endtime="20170817 19:31:18.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.635">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:18.635">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:18.510" status="PASS" endtime="20170817 19:31:18.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.637">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:18.636" status="PASS" endtime="20170817 19:31:18.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.638">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:18.638" status="PASS" endtime="20170817 19:31:18.638"></status>
</kw>
<status starttime="20170817 19:31:18.637" status="PASS" endtime="20170817 19:31:18.638"></status>
</kw>
<status starttime="20170817 19:31:18.636" status="PASS" endtime="20170817 19:31:18.638"></status>
</kw>
<status starttime="20170817 19:31:18.635" status="PASS" endtime="20170817 19:31:18.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:18.639">Delete All Sessions</msg>
<status starttime="20170817 19:31:18.639" status="PASS" endtime="20170817 19:31:18.639"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.639">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:18.300" status="PASS" endtime="20170817 19:31:18.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:18.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:18.639" status="PASS" endtime="20170817 19:31:18.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:18.640">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:18.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:18.641">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:18.640" status="PASS" endtime="20170817 19:31:18.641"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.641">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:31:18.300" status="PASS" endtime="20170817 19:31:18.641"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:18.641">${host_state} = Quiesced</msg>
<status starttime="20170817 19:31:18.299" status="PASS" endtime="20170817 19:31:18.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:31:18.642">Running != Quiesced</msg>
<status starttime="20170817 19:31:18.641" status="FAIL" endtime="20170817 19:31:18.642"></status>
</kw>
<status starttime="20170817 19:31:18.001" status="FAIL" endtime="20170817 19:31:18.642"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.647">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:28.647" status="PASS" endtime="20170817 19:31:28.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:28.648" status="PASS" endtime="20170817 19:31:28.649"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.649">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:28.649" status="PASS" endtime="20170817 19:31:28.649"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:28.650" status="PASS" endtime="20170817 19:31:28.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.831">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:28.651" status="PASS" endtime="20170817 19:31:28.831"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:28.831">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:28.831">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:28.650" status="PASS" endtime="20170817 19:31:28.831"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.832">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:28.832" status="PASS" endtime="20170817 19:31:28.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:28.832" status="PASS" endtime="20170817 19:31:28.833"></status>
</kw>
<status starttime="20170817 19:31:28.646" status="PASS" endtime="20170817 19:31:28.833"></status>
</kw>
<status starttime="20170817 19:31:28.646" status="PASS" endtime="20170817 19:31:28.833"></status>
</kw>
<status starttime="20170817 19:31:28.645" status="PASS" endtime="20170817 19:31:28.833"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.834">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:31:28.833" status="PASS" endtime="20170817 19:31:28.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.836">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:28.835" status="PASS" endtime="20170817 19:31:28.836"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.837">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:28.837" status="PASS" endtime="20170817 19:31:28.837"></status>
</kw>
<status starttime="20170817 19:31:28.836" status="PASS" endtime="20170817 19:31:28.837"></status>
</kw>
<status starttime="20170817 19:31:28.834" status="PASS" endtime="20170817 19:31:28.837"></status>
</kw>
<status starttime="20170817 19:31:28.834" status="PASS" endtime="20170817 19:31:28.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.900">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:28.901">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:28.838" status="PASS" endtime="20170817 19:31:28.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.902">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:28.902" status="PASS" endtime="20170817 19:31:28.902"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.903">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:28.903" status="PASS" endtime="20170817 19:31:28.903"></status>
</kw>
<status starttime="20170817 19:31:28.903" status="PASS" endtime="20170817 19:31:28.904"></status>
</kw>
<status starttime="20170817 19:31:28.901" status="PASS" endtime="20170817 19:31:28.904"></status>
</kw>
<status starttime="20170817 19:31:28.901" status="PASS" endtime="20170817 19:31:28.904"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:28.904">Delete All Sessions</msg>
<status starttime="20170817 19:31:28.904" status="PASS" endtime="20170817 19:31:28.904"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:28.904">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:28.645" status="PASS" endtime="20170817 19:31:28.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:28.905" status="PASS" endtime="20170817 19:31:28.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.906">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:28.906">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:28.906">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:28.905" status="PASS" endtime="20170817 19:31:28.906"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:28.906">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:31:28.644" status="PASS" endtime="20170817 19:31:28.906"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:28.906">${power_state} = On</msg>
<status starttime="20170817 19:31:28.643" status="PASS" endtime="20170817 19:31:28.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:31:28.907" status="PASS" endtime="20170817 19:31:28.907"></status>
</kw>
<status starttime="20170817 19:31:28.643" status="PASS" endtime="20170817 19:31:28.907"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:28.911">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:28.910" status="PASS" endtime="20170817 19:31:28.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.912">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:28.912" status="PASS" endtime="20170817 19:31:28.912"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.913">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:28.912" status="PASS" endtime="20170817 19:31:28.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:28.913">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:28.913" status="PASS" endtime="20170817 19:31:28.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:29.116">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:28.914" status="PASS" endtime="20170817 19:31:29.116"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:29.116">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:29.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:28.914" status="PASS" endtime="20170817 19:31:29.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:29.117">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:29.117" status="PASS" endtime="20170817 19:31:29.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:29.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:29.117" status="PASS" endtime="20170817 19:31:29.118"></status>
</kw>
<status starttime="20170817 19:31:28.910" status="PASS" endtime="20170817 19:31:29.118"></status>
</kw>
<status starttime="20170817 19:31:28.909" status="PASS" endtime="20170817 19:31:29.118"></status>
</kw>
<status starttime="20170817 19:31:28.909" status="PASS" endtime="20170817 19:31:29.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:29.119">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:31:29.118" status="PASS" endtime="20170817 19:31:29.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:29.121">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:29.120" status="PASS" endtime="20170817 19:31:29.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:29.122">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:29.122" status="PASS" endtime="20170817 19:31:29.122"></status>
</kw>
<status starttime="20170817 19:31:29.121" status="PASS" endtime="20170817 19:31:29.122"></status>
</kw>
<status starttime="20170817 19:31:29.120" status="PASS" endtime="20170817 19:31:29.122"></status>
</kw>
<status starttime="20170817 19:31:29.119" status="PASS" endtime="20170817 19:31:29.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:29.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:29.235">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:29.122" status="PASS" endtime="20170817 19:31:29.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:29.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:29.236" status="PASS" endtime="20170817 19:31:29.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:29.238">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:29.238" status="PASS" endtime="20170817 19:31:29.238"></status>
</kw>
<status starttime="20170817 19:31:29.237" status="PASS" endtime="20170817 19:31:29.238"></status>
</kw>
<status starttime="20170817 19:31:29.236" status="PASS" endtime="20170817 19:31:29.238"></status>
</kw>
<status starttime="20170817 19:31:29.235" status="PASS" endtime="20170817 19:31:29.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:29.239">Delete All Sessions</msg>
<status starttime="20170817 19:31:29.239" status="PASS" endtime="20170817 19:31:29.239"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:29.239">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:28.908" status="PASS" endtime="20170817 19:31:29.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:29.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:29.240" status="PASS" endtime="20170817 19:31:29.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:29.241">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:29.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:29.241">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:29.240" status="PASS" endtime="20170817 19:31:29.241"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:29.241">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:31:28.908" status="PASS" endtime="20170817 19:31:29.241"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:29.241">${host_state} = Quiesced</msg>
<status starttime="20170817 19:31:28.907" status="PASS" endtime="20170817 19:31:29.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:31:29.242">Running != Quiesced</msg>
<status starttime="20170817 19:31:29.242" status="FAIL" endtime="20170817 19:31:29.242"></status>
</kw>
<status starttime="20170817 19:31:28.643" status="FAIL" endtime="20170817 19:31:29.242"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.248">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:39.247" status="PASS" endtime="20170817 19:31:39.248"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:39.248" status="PASS" endtime="20170817 19:31:39.249"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.249">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:39.249" status="PASS" endtime="20170817 19:31:39.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:39.249" status="PASS" endtime="20170817 19:31:39.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:39.250" status="PASS" endtime="20170817 19:31:39.429"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.429">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:39.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:39.250" status="PASS" endtime="20170817 19:31:39.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.430">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:39.429" status="PASS" endtime="20170817 19:31:39.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:39.430" status="PASS" endtime="20170817 19:31:39.430"></status>
</kw>
<status starttime="20170817 19:31:39.247" status="PASS" endtime="20170817 19:31:39.430"></status>
</kw>
<status starttime="20170817 19:31:39.246" status="PASS" endtime="20170817 19:31:39.431"></status>
</kw>
<status starttime="20170817 19:31:39.246" status="PASS" endtime="20170817 19:31:39.431"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.431">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:31:39.431" status="PASS" endtime="20170817 19:31:39.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.434">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:39.433" status="PASS" endtime="20170817 19:31:39.434"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.434">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:39.434" status="PASS" endtime="20170817 19:31:39.435"></status>
</kw>
<status starttime="20170817 19:31:39.434" status="PASS" endtime="20170817 19:31:39.435"></status>
</kw>
<status starttime="20170817 19:31:39.432" status="PASS" endtime="20170817 19:31:39.435"></status>
</kw>
<status starttime="20170817 19:31:39.432" status="PASS" endtime="20170817 19:31:39.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.498">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:39.498">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:39.435" status="PASS" endtime="20170817 19:31:39.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.500">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:39.499" status="PASS" endtime="20170817 19:31:39.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.501">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:39.501" status="PASS" endtime="20170817 19:31:39.501"></status>
</kw>
<status starttime="20170817 19:31:39.500" status="PASS" endtime="20170817 19:31:39.501"></status>
</kw>
<status starttime="20170817 19:31:39.499" status="PASS" endtime="20170817 19:31:39.501"></status>
</kw>
<status starttime="20170817 19:31:39.498" status="PASS" endtime="20170817 19:31:39.501"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:39.502">Delete All Sessions</msg>
<status starttime="20170817 19:31:39.501" status="PASS" endtime="20170817 19:31:39.502"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.502">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:39.245" status="PASS" endtime="20170817 19:31:39.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:39.502" status="PASS" endtime="20170817 19:31:39.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.503">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:39.503">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:39.504">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:39.503" status="PASS" endtime="20170817 19:31:39.504"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.504">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:31:39.244" status="PASS" endtime="20170817 19:31:39.504"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.504">${power_state} = On</msg>
<status starttime="20170817 19:31:39.244" status="PASS" endtime="20170817 19:31:39.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:31:39.505" status="PASS" endtime="20170817 19:31:39.505"></status>
</kw>
<status starttime="20170817 19:31:39.243" status="PASS" endtime="20170817 19:31:39.505"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.509">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:39.508" status="PASS" endtime="20170817 19:31:39.509"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.509">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:39.509" status="PASS" endtime="20170817 19:31:39.509"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.510">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:39.510" status="PASS" endtime="20170817 19:31:39.510"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.511">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:39.510" status="PASS" endtime="20170817 19:31:39.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:39.511" status="PASS" endtime="20170817 19:31:39.725"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:39.725">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:39.511" status="PASS" endtime="20170817 19:31:39.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.725">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:39.725" status="PASS" endtime="20170817 19:31:39.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:39.726" status="PASS" endtime="20170817 19:31:39.726"></status>
</kw>
<status starttime="20170817 19:31:39.508" status="PASS" endtime="20170817 19:31:39.726"></status>
</kw>
<status starttime="20170817 19:31:39.507" status="PASS" endtime="20170817 19:31:39.726"></status>
</kw>
<status starttime="20170817 19:31:39.507" status="PASS" endtime="20170817 19:31:39.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.727">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:31:39.727" status="PASS" endtime="20170817 19:31:39.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.729">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:39.728" status="PASS" endtime="20170817 19:31:39.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.730">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:39.730" status="PASS" endtime="20170817 19:31:39.730"></status>
</kw>
<status starttime="20170817 19:31:39.729" status="PASS" endtime="20170817 19:31:39.730"></status>
</kw>
<status starttime="20170817 19:31:39.728" status="PASS" endtime="20170817 19:31:39.730"></status>
</kw>
<status starttime="20170817 19:31:39.727" status="PASS" endtime="20170817 19:31:39.731"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.829">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:39.829">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:39.731" status="PASS" endtime="20170817 19:31:39.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.831">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:39.830" status="PASS" endtime="20170817 19:31:39.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.832">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:39.831" status="PASS" endtime="20170817 19:31:39.832"></status>
</kw>
<status starttime="20170817 19:31:39.831" status="PASS" endtime="20170817 19:31:39.832"></status>
</kw>
<status starttime="20170817 19:31:39.830" status="PASS" endtime="20170817 19:31:39.832"></status>
</kw>
<status starttime="20170817 19:31:39.829" status="PASS" endtime="20170817 19:31:39.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:39.832">Delete All Sessions</msg>
<status starttime="20170817 19:31:39.832" status="PASS" endtime="20170817 19:31:39.833"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.833">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:39.506" status="PASS" endtime="20170817 19:31:39.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:39.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:39.833" status="PASS" endtime="20170817 19:31:39.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:39.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:39.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:39.834">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:39.834" status="PASS" endtime="20170817 19:31:39.834"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.834">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:31:39.506" status="PASS" endtime="20170817 19:31:39.834"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:39.835">${host_state} = Quiesced</msg>
<status starttime="20170817 19:31:39.505" status="PASS" endtime="20170817 19:31:39.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:31:39.835">Running != Quiesced</msg>
<status starttime="20170817 19:31:39.835" status="FAIL" endtime="20170817 19:31:39.835"></status>
</kw>
<status starttime="20170817 19:31:39.243" status="FAIL" endtime="20170817 19:31:39.836"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:49.841">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:49.841" status="PASS" endtime="20170817 19:31:49.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:49.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:49.842" status="PASS" endtime="20170817 19:31:49.842"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:49.843">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:49.842" status="PASS" endtime="20170817 19:31:49.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:49.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:49.843" status="PASS" endtime="20170817 19:31:49.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:49.844" status="PASS" endtime="20170817 19:31:50.135"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.136">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:50.136">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:49.844" status="PASS" endtime="20170817 19:31:50.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:50.136" status="PASS" endtime="20170817 19:31:50.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:50.137" status="PASS" endtime="20170817 19:31:50.137"></status>
</kw>
<status starttime="20170817 19:31:49.840" status="PASS" endtime="20170817 19:31:50.137"></status>
</kw>
<status starttime="20170817 19:31:49.839" status="PASS" endtime="20170817 19:31:50.137"></status>
</kw>
<status starttime="20170817 19:31:49.839" status="PASS" endtime="20170817 19:31:50.137"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.138">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:31:50.138" status="PASS" endtime="20170817 19:31:50.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.140">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:50.139" status="PASS" endtime="20170817 19:31:50.140"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.141">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:50.141" status="PASS" endtime="20170817 19:31:50.141"></status>
</kw>
<status starttime="20170817 19:31:50.140" status="PASS" endtime="20170817 19:31:50.141"></status>
</kw>
<status starttime="20170817 19:31:50.139" status="PASS" endtime="20170817 19:31:50.141"></status>
</kw>
<status starttime="20170817 19:31:50.138" status="PASS" endtime="20170817 19:31:50.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.203">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:50.204">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:50.142" status="PASS" endtime="20170817 19:31:50.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.205">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:50.205" status="PASS" endtime="20170817 19:31:50.205"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.207">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:50.206" status="PASS" endtime="20170817 19:31:50.207"></status>
</kw>
<status starttime="20170817 19:31:50.206" status="PASS" endtime="20170817 19:31:50.207"></status>
</kw>
<status starttime="20170817 19:31:50.204" status="PASS" endtime="20170817 19:31:50.207"></status>
</kw>
<status starttime="20170817 19:31:50.204" status="PASS" endtime="20170817 19:31:50.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:50.207">Delete All Sessions</msg>
<status starttime="20170817 19:31:50.207" status="PASS" endtime="20170817 19:31:50.208"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.208">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:49.838" status="PASS" endtime="20170817 19:31:50.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:50.208" status="PASS" endtime="20170817 19:31:50.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.209">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:50.209">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:50.209">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:50.209" status="PASS" endtime="20170817 19:31:50.209"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.210">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:31:49.838" status="PASS" endtime="20170817 19:31:50.210"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.210">${power_state} = On</msg>
<status starttime="20170817 19:31:49.837" status="PASS" endtime="20170817 19:31:50.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:31:50.210" status="PASS" endtime="20170817 19:31:50.210"></status>
</kw>
<status starttime="20170817 19:31:49.837" status="PASS" endtime="20170817 19:31:50.211"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.214">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:31:50.214" status="PASS" endtime="20170817 19:31:50.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:31:50.215" status="PASS" endtime="20170817 19:31:50.215"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.215">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:31:50.215" status="PASS" endtime="20170817 19:31:50.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.216">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:31:50.216" status="PASS" endtime="20170817 19:31:50.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.414">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:31:50.217" status="PASS" endtime="20170817 19:31:50.414"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:31:50.414">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:50.216" status="PASS" endtime="20170817 19:31:50.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.415">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:50.415" status="PASS" endtime="20170817 19:31:50.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:50.415" status="PASS" endtime="20170817 19:31:50.416"></status>
</kw>
<status starttime="20170817 19:31:50.213" status="PASS" endtime="20170817 19:31:50.416"></status>
</kw>
<status starttime="20170817 19:31:50.213" status="PASS" endtime="20170817 19:31:50.416"></status>
</kw>
<status starttime="20170817 19:31:50.212" status="PASS" endtime="20170817 19:31:50.416"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.417">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:31:50.416" status="PASS" endtime="20170817 19:31:50.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.419">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:50.418" status="PASS" endtime="20170817 19:31:50.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.420">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:31:50.420" status="PASS" endtime="20170817 19:31:50.420"></status>
</kw>
<status starttime="20170817 19:31:50.419" status="PASS" endtime="20170817 19:31:50.420"></status>
</kw>
<status starttime="20170817 19:31:50.418" status="PASS" endtime="20170817 19:31:50.421"></status>
</kw>
<status starttime="20170817 19:31:50.417" status="PASS" endtime="20170817 19:31:50.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.511">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:31:50.511">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:50.421" status="PASS" endtime="20170817 19:31:50.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.513">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:50.512" status="PASS" endtime="20170817 19:31:50.513"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.513">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:31:50.513" status="PASS" endtime="20170817 19:31:50.514"></status>
</kw>
<status starttime="20170817 19:31:50.513" status="PASS" endtime="20170817 19:31:50.514"></status>
</kw>
<status starttime="20170817 19:31:50.512" status="PASS" endtime="20170817 19:31:50.514"></status>
</kw>
<status starttime="20170817 19:31:50.511" status="PASS" endtime="20170817 19:31:50.514"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:31:50.514">Delete All Sessions</msg>
<status starttime="20170817 19:31:50.514" status="PASS" endtime="20170817 19:31:50.514"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.515">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:31:50.212" status="PASS" endtime="20170817 19:31:50.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:31:50.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:31:50.515" status="PASS" endtime="20170817 19:31:50.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:31:50.516">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:31:50.516">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:31:50.516">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:31:50.515" status="PASS" endtime="20170817 19:31:50.516"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.516">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:31:50.211" status="PASS" endtime="20170817 19:31:50.516"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:31:50.517">${host_state} = Quiesced</msg>
<status starttime="20170817 19:31:50.211" status="PASS" endtime="20170817 19:31:50.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:31:50.517">Running != Quiesced</msg>
<status starttime="20170817 19:31:50.517" status="FAIL" endtime="20170817 19:31:50.517"></status>
</kw>
<status starttime="20170817 19:31:49.836" status="FAIL" endtime="20170817 19:31:50.517"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.522">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:00.522" status="PASS" endtime="20170817 19:32:00.523"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.523">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:00.523" status="PASS" endtime="20170817 19:32:00.523"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.524">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:00.523" status="PASS" endtime="20170817 19:32:00.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.525">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:00.524" status="PASS" endtime="20170817 19:32:00.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.718">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:00.526" status="PASS" endtime="20170817 19:32:00.718"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:00.718">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:00.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:00.525" status="PASS" endtime="20170817 19:32:00.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.719">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:00.718" status="PASS" endtime="20170817 19:32:00.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:00.719" status="PASS" endtime="20170817 19:32:00.719"></status>
</kw>
<status starttime="20170817 19:32:00.521" status="PASS" endtime="20170817 19:32:00.719"></status>
</kw>
<status starttime="20170817 19:32:00.521" status="PASS" endtime="20170817 19:32:00.720"></status>
</kw>
<status starttime="20170817 19:32:00.520" status="PASS" endtime="20170817 19:32:00.720"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.720">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:32:00.720" status="PASS" endtime="20170817 19:32:00.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.722">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:00.722" status="PASS" endtime="20170817 19:32:00.722"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.723">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:00.723" status="PASS" endtime="20170817 19:32:00.723"></status>
</kw>
<status starttime="20170817 19:32:00.723" status="PASS" endtime="20170817 19:32:00.724"></status>
</kw>
<status starttime="20170817 19:32:00.721" status="PASS" endtime="20170817 19:32:00.724"></status>
</kw>
<status starttime="20170817 19:32:00.721" status="PASS" endtime="20170817 19:32:00.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.809">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:00.809">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:00.724" status="PASS" endtime="20170817 19:32:00.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.810">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:00.810" status="PASS" endtime="20170817 19:32:00.810"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.811">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:00.811" status="PASS" endtime="20170817 19:32:00.811"></status>
</kw>
<status starttime="20170817 19:32:00.811" status="PASS" endtime="20170817 19:32:00.812"></status>
</kw>
<status starttime="20170817 19:32:00.809" status="PASS" endtime="20170817 19:32:00.812"></status>
</kw>
<status starttime="20170817 19:32:00.809" status="PASS" endtime="20170817 19:32:00.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:00.812">Delete All Sessions</msg>
<status starttime="20170817 19:32:00.812" status="PASS" endtime="20170817 19:32:00.812"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:00.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:00.520" status="PASS" endtime="20170817 19:32:00.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:00.813" status="PASS" endtime="20170817 19:32:00.813"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.814">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:00.814">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:00.814">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:00.813" status="PASS" endtime="20170817 19:32:00.814"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:00.814">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:32:00.519" status="PASS" endtime="20170817 19:32:00.814"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:00.814">${power_state} = On</msg>
<status starttime="20170817 19:32:00.519" status="PASS" endtime="20170817 19:32:00.814"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:32:00.815" status="PASS" endtime="20170817 19:32:00.815"></status>
</kw>
<status starttime="20170817 19:32:00.518" status="PASS" endtime="20170817 19:32:00.815"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:00.819">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:00.819" status="PASS" endtime="20170817 19:32:00.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.820">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:00.820" status="PASS" endtime="20170817 19:32:00.820"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.821">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:00.820" status="PASS" endtime="20170817 19:32:00.821"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:00.821">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:00.821" status="PASS" endtime="20170817 19:32:00.821"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:01.088">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:00.822" status="PASS" endtime="20170817 19:32:01.088"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:01.088">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:01.088">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:00.822" status="PASS" endtime="20170817 19:32:01.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:01.089">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:01.088" status="PASS" endtime="20170817 19:32:01.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:01.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:01.089" status="PASS" endtime="20170817 19:32:01.096"></status>
</kw>
<status starttime="20170817 19:32:00.818" status="PASS" endtime="20170817 19:32:01.096"></status>
</kw>
<status starttime="20170817 19:32:00.817" status="PASS" endtime="20170817 19:32:01.096"></status>
</kw>
<status starttime="20170817 19:32:00.817" status="PASS" endtime="20170817 19:32:01.096"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:01.097">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:32:01.096" status="PASS" endtime="20170817 19:32:01.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:01.099">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:01.098" status="PASS" endtime="20170817 19:32:01.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:01.099">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:01.099" status="PASS" endtime="20170817 19:32:01.100"></status>
</kw>
<status starttime="20170817 19:32:01.099" status="PASS" endtime="20170817 19:32:01.100"></status>
</kw>
<status starttime="20170817 19:32:01.097" status="PASS" endtime="20170817 19:32:01.100"></status>
</kw>
<status starttime="20170817 19:32:01.097" status="PASS" endtime="20170817 19:32:01.100"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:01.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:01.190">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:01.100" status="PASS" endtime="20170817 19:32:01.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:01.195">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:01.191" status="PASS" endtime="20170817 19:32:01.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:01.196">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:01.196" status="PASS" endtime="20170817 19:32:01.196"></status>
</kw>
<status starttime="20170817 19:32:01.195" status="PASS" endtime="20170817 19:32:01.196"></status>
</kw>
<status starttime="20170817 19:32:01.190" status="PASS" endtime="20170817 19:32:01.196"></status>
</kw>
<status starttime="20170817 19:32:01.190" status="PASS" endtime="20170817 19:32:01.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:01.197">Delete All Sessions</msg>
<status starttime="20170817 19:32:01.196" status="PASS" endtime="20170817 19:32:01.197"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:01.197">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:00.816" status="PASS" endtime="20170817 19:32:01.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:01.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:01.197" status="PASS" endtime="20170817 19:32:01.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:01.198">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:01.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:01.198">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:01.198" status="PASS" endtime="20170817 19:32:01.198"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:01.199">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:32:00.816" status="PASS" endtime="20170817 19:32:01.199"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:01.199">${host_state} = Quiesced</msg>
<status starttime="20170817 19:32:00.815" status="PASS" endtime="20170817 19:32:01.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:32:01.200">Running != Quiesced</msg>
<status starttime="20170817 19:32:01.199" status="FAIL" endtime="20170817 19:32:01.200"></status>
</kw>
<status starttime="20170817 19:32:00.518" status="FAIL" endtime="20170817 19:32:01.201"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.205">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:11.205" status="PASS" endtime="20170817 19:32:11.206"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:11.206" status="PASS" endtime="20170817 19:32:11.206"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.207">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:11.207" status="PASS" endtime="20170817 19:32:11.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:11.207" status="PASS" endtime="20170817 19:32:11.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.402">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:11.208" status="PASS" endtime="20170817 19:32:11.402"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.402">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:11.402">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:11.208" status="PASS" endtime="20170817 19:32:11.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.403">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:11.403" status="PASS" endtime="20170817 19:32:11.403"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.404">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:11.403" status="PASS" endtime="20170817 19:32:11.404"></status>
</kw>
<status starttime="20170817 19:32:11.204" status="PASS" endtime="20170817 19:32:11.404"></status>
</kw>
<status starttime="20170817 19:32:11.204" status="PASS" endtime="20170817 19:32:11.404"></status>
</kw>
<status starttime="20170817 19:32:11.203" status="PASS" endtime="20170817 19:32:11.404"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.405">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:32:11.404" status="PASS" endtime="20170817 19:32:11.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.407">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:11.406" status="PASS" endtime="20170817 19:32:11.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.408">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:11.407" status="PASS" endtime="20170817 19:32:11.408"></status>
</kw>
<status starttime="20170817 19:32:11.407" status="PASS" endtime="20170817 19:32:11.408"></status>
</kw>
<status starttime="20170817 19:32:11.405" status="PASS" endtime="20170817 19:32:11.408"></status>
</kw>
<status starttime="20170817 19:32:11.405" status="PASS" endtime="20170817 19:32:11.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.479">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:11.479">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:11.408" status="PASS" endtime="20170817 19:32:11.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.481">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:11.480" status="PASS" endtime="20170817 19:32:11.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.482">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:11.481" status="PASS" endtime="20170817 19:32:11.482"></status>
</kw>
<status starttime="20170817 19:32:11.481" status="PASS" endtime="20170817 19:32:11.482"></status>
</kw>
<status starttime="20170817 19:32:11.479" status="PASS" endtime="20170817 19:32:11.482"></status>
</kw>
<status starttime="20170817 19:32:11.479" status="PASS" endtime="20170817 19:32:11.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:11.483">Delete All Sessions</msg>
<status starttime="20170817 19:32:11.483" status="PASS" endtime="20170817 19:32:11.483"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.483">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:11.203" status="PASS" endtime="20170817 19:32:11.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:11.484" status="PASS" endtime="20170817 19:32:11.484"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:11.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:11.485">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:11.485" status="PASS" endtime="20170817 19:32:11.485"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.486">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:32:11.202" status="PASS" endtime="20170817 19:32:11.486"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.486">${power_state} = On</msg>
<status starttime="20170817 19:32:11.202" status="PASS" endtime="20170817 19:32:11.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:32:11.486" status="PASS" endtime="20170817 19:32:11.487"></status>
</kw>
<status starttime="20170817 19:32:11.201" status="PASS" endtime="20170817 19:32:11.487"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.492">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:11.492" status="PASS" endtime="20170817 19:32:11.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:11.493" status="PASS" endtime="20170817 19:32:11.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.495">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:11.494" status="PASS" endtime="20170817 19:32:11.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.496">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:11.495" status="PASS" endtime="20170817 19:32:11.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.777">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:11.497" status="PASS" endtime="20170817 19:32:11.778"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.778">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:11.778">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:11.496" status="PASS" endtime="20170817 19:32:11.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.778">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:11.778" status="PASS" endtime="20170817 19:32:11.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.779">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:11.779" status="PASS" endtime="20170817 19:32:11.779"></status>
</kw>
<status starttime="20170817 19:32:11.491" status="PASS" endtime="20170817 19:32:11.779"></status>
</kw>
<status starttime="20170817 19:32:11.490" status="PASS" endtime="20170817 19:32:11.779"></status>
</kw>
<status starttime="20170817 19:32:11.489" status="PASS" endtime="20170817 19:32:11.780"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.780">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:32:11.780" status="PASS" endtime="20170817 19:32:11.780"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.782">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:11.782" status="PASS" endtime="20170817 19:32:11.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.784">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:11.783" status="PASS" endtime="20170817 19:32:11.784"></status>
</kw>
<status starttime="20170817 19:32:11.783" status="PASS" endtime="20170817 19:32:11.784"></status>
</kw>
<status starttime="20170817 19:32:11.781" status="PASS" endtime="20170817 19:32:11.784"></status>
</kw>
<status starttime="20170817 19:32:11.780" status="PASS" endtime="20170817 19:32:11.784"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.872">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:11.872">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:11.784" status="PASS" endtime="20170817 19:32:11.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.874">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:11.873" status="PASS" endtime="20170817 19:32:11.874"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.875">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:11.875" status="PASS" endtime="20170817 19:32:11.875"></status>
</kw>
<status starttime="20170817 19:32:11.874" status="PASS" endtime="20170817 19:32:11.875"></status>
</kw>
<status starttime="20170817 19:32:11.873" status="PASS" endtime="20170817 19:32:11.875"></status>
</kw>
<status starttime="20170817 19:32:11.873" status="PASS" endtime="20170817 19:32:11.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:11.876">Delete All Sessions</msg>
<status starttime="20170817 19:32:11.876" status="PASS" endtime="20170817 19:32:11.876"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.876">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:11.489" status="PASS" endtime="20170817 19:32:11.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:11.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:11.877" status="PASS" endtime="20170817 19:32:11.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:11.878">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:11.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:11.878">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:11.877" status="PASS" endtime="20170817 19:32:11.878"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.878">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:32:11.488" status="PASS" endtime="20170817 19:32:11.878"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:11.878">${host_state} = Quiesced</msg>
<status starttime="20170817 19:32:11.487" status="PASS" endtime="20170817 19:32:11.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:32:11.879">Running != Quiesced</msg>
<status starttime="20170817 19:32:11.879" status="FAIL" endtime="20170817 19:32:11.879"></status>
</kw>
<status starttime="20170817 19:32:11.201" status="FAIL" endtime="20170817 19:32:11.879"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:21.886">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:21.885" status="PASS" endtime="20170817 19:32:21.886"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:21.887">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:21.886" status="PASS" endtime="20170817 19:32:21.887"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:21.887">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:21.887" status="PASS" endtime="20170817 19:32:21.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:21.888">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:21.888" status="PASS" endtime="20170817 19:32:21.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.065">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:21.889" status="PASS" endtime="20170817 19:32:22.065"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:22.065">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:21.888" status="PASS" endtime="20170817 19:32:22.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.066">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:22.066" status="PASS" endtime="20170817 19:32:22.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:22.066" status="PASS" endtime="20170817 19:32:22.067"></status>
</kw>
<status starttime="20170817 19:32:21.885" status="PASS" endtime="20170817 19:32:22.067"></status>
</kw>
<status starttime="20170817 19:32:21.884" status="PASS" endtime="20170817 19:32:22.067"></status>
</kw>
<status starttime="20170817 19:32:21.884" status="PASS" endtime="20170817 19:32:22.067"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.068">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:32:22.067" status="PASS" endtime="20170817 19:32:22.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.070">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:22.069" status="PASS" endtime="20170817 19:32:22.070"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.070">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:22.070" status="PASS" endtime="20170817 19:32:22.071"></status>
</kw>
<status starttime="20170817 19:32:22.070" status="PASS" endtime="20170817 19:32:22.071"></status>
</kw>
<status starttime="20170817 19:32:22.068" status="PASS" endtime="20170817 19:32:22.071"></status>
</kw>
<status starttime="20170817 19:32:22.068" status="PASS" endtime="20170817 19:32:22.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.134">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:22.134">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:22.071" status="PASS" endtime="20170817 19:32:22.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.136">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:22.135" status="PASS" endtime="20170817 19:32:22.136"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.137">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:22.136" status="PASS" endtime="20170817 19:32:22.137"></status>
</kw>
<status starttime="20170817 19:32:22.136" status="PASS" endtime="20170817 19:32:22.137"></status>
</kw>
<status starttime="20170817 19:32:22.135" status="PASS" endtime="20170817 19:32:22.137"></status>
</kw>
<status starttime="20170817 19:32:22.134" status="PASS" endtime="20170817 19:32:22.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:22.138">Delete All Sessions</msg>
<status starttime="20170817 19:32:22.137" status="PASS" endtime="20170817 19:32:22.138"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:21.883" status="PASS" endtime="20170817 19:32:22.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:22.138" status="PASS" endtime="20170817 19:32:22.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.139">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:22.139">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:22.139">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:22.139" status="PASS" endtime="20170817 19:32:22.139"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.139">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:32:21.882" status="PASS" endtime="20170817 19:32:22.140"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.140">${power_state} = On</msg>
<status starttime="20170817 19:32:21.882" status="PASS" endtime="20170817 19:32:22.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:32:22.140" status="PASS" endtime="20170817 19:32:22.140"></status>
</kw>
<status starttime="20170817 19:32:21.881" status="PASS" endtime="20170817 19:32:22.140"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.144">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:22.144" status="PASS" endtime="20170817 19:32:22.144"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.145">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:22.145" status="PASS" endtime="20170817 19:32:22.145"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.145">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:22.145" status="PASS" endtime="20170817 19:32:22.145"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:22.146" status="PASS" endtime="20170817 19:32:22.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:22.147" status="PASS" endtime="20170817 19:32:22.368"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:22.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:22.146" status="PASS" endtime="20170817 19:32:22.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:22.368" status="PASS" endtime="20170817 19:32:22.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:22.369" status="PASS" endtime="20170817 19:32:22.370"></status>
</kw>
<status starttime="20170817 19:32:22.143" status="PASS" endtime="20170817 19:32:22.370"></status>
</kw>
<status starttime="20170817 19:32:22.143" status="PASS" endtime="20170817 19:32:22.370"></status>
</kw>
<status starttime="20170817 19:32:22.142" status="PASS" endtime="20170817 19:32:22.370"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.371">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:32:22.370" status="PASS" endtime="20170817 19:32:22.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.373">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:22.372" status="PASS" endtime="20170817 19:32:22.373"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.374">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:22.373" status="PASS" endtime="20170817 19:32:22.374"></status>
</kw>
<status starttime="20170817 19:32:22.373" status="PASS" endtime="20170817 19:32:22.374"></status>
</kw>
<status starttime="20170817 19:32:22.371" status="PASS" endtime="20170817 19:32:22.374"></status>
</kw>
<status starttime="20170817 19:32:22.371" status="PASS" endtime="20170817 19:32:22.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.554">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:22.555">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:22.374" status="PASS" endtime="20170817 19:32:22.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.556">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:22.556" status="PASS" endtime="20170817 19:32:22.556"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.557">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:22.557" status="PASS" endtime="20170817 19:32:22.557"></status>
</kw>
<status starttime="20170817 19:32:22.557" status="PASS" endtime="20170817 19:32:22.558"></status>
</kw>
<status starttime="20170817 19:32:22.555" status="PASS" endtime="20170817 19:32:22.558"></status>
</kw>
<status starttime="20170817 19:32:22.555" status="PASS" endtime="20170817 19:32:22.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:22.558">Delete All Sessions</msg>
<status starttime="20170817 19:32:22.558" status="PASS" endtime="20170817 19:32:22.558"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.558">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:22.142" status="PASS" endtime="20170817 19:32:22.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:22.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:22.559" status="PASS" endtime="20170817 19:32:22.559"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:22.560">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:22.560">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:22.560">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:22.559" status="PASS" endtime="20170817 19:32:22.560"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.560">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:32:22.141" status="PASS" endtime="20170817 19:32:22.560"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:22.560">${host_state} = Quiesced</msg>
<status starttime="20170817 19:32:22.141" status="PASS" endtime="20170817 19:32:22.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:32:22.561">Running != Quiesced</msg>
<status starttime="20170817 19:32:22.561" status="FAIL" endtime="20170817 19:32:22.561"></status>
</kw>
<status starttime="20170817 19:32:21.880" status="FAIL" endtime="20170817 19:32:22.561"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.567">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:32.567" status="PASS" endtime="20170817 19:32:32.567"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.568">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:32.568" status="PASS" endtime="20170817 19:32:32.568"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.569">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:32.568" status="PASS" endtime="20170817 19:32:32.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.569">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:32.569" status="PASS" endtime="20170817 19:32:32.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:32.570" status="PASS" endtime="20170817 19:32:32.781"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:32.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:32.781">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:32.570" status="PASS" endtime="20170817 19:32:32.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:32.782" status="PASS" endtime="20170817 19:32:32.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:32.782" status="PASS" endtime="20170817 19:32:32.783"></status>
</kw>
<status starttime="20170817 19:32:32.566" status="PASS" endtime="20170817 19:32:32.783"></status>
</kw>
<status starttime="20170817 19:32:32.565" status="PASS" endtime="20170817 19:32:32.783"></status>
</kw>
<status starttime="20170817 19:32:32.565" status="PASS" endtime="20170817 19:32:32.783"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.783">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:32:32.783" status="PASS" endtime="20170817 19:32:32.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.786">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:32.785" status="PASS" endtime="20170817 19:32:32.786"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.787">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:32.786" status="PASS" endtime="20170817 19:32:32.787"></status>
</kw>
<status starttime="20170817 19:32:32.786" status="PASS" endtime="20170817 19:32:32.787"></status>
</kw>
<status starttime="20170817 19:32:32.784" status="PASS" endtime="20170817 19:32:32.787"></status>
</kw>
<status starttime="20170817 19:32:32.784" status="PASS" endtime="20170817 19:32:32.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.863">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:32.863">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:32.787" status="PASS" endtime="20170817 19:32:32.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.865">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:32.865" status="PASS" endtime="20170817 19:32:32.865"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.866">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:32.866" status="PASS" endtime="20170817 19:32:32.867"></status>
</kw>
<status starttime="20170817 19:32:32.865" status="PASS" endtime="20170817 19:32:32.867"></status>
</kw>
<status starttime="20170817 19:32:32.864" status="PASS" endtime="20170817 19:32:32.867"></status>
</kw>
<status starttime="20170817 19:32:32.864" status="PASS" endtime="20170817 19:32:32.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:32.867">Delete All Sessions</msg>
<status starttime="20170817 19:32:32.867" status="PASS" endtime="20170817 19:32:32.867"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:32.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:32.564" status="PASS" endtime="20170817 19:32:32.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:32.868" status="PASS" endtime="20170817 19:32:32.868"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.869">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:32.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:32.869">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:32.868" status="PASS" endtime="20170817 19:32:32.869"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:32.869">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:32:32.563" status="PASS" endtime="20170817 19:32:32.869"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:32.870">${power_state} = On</msg>
<status starttime="20170817 19:32:32.563" status="PASS" endtime="20170817 19:32:32.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:32:32.870" status="PASS" endtime="20170817 19:32:32.870"></status>
</kw>
<status starttime="20170817 19:32:32.563" status="PASS" endtime="20170817 19:32:32.870"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:32.874">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:32.873" status="PASS" endtime="20170817 19:32:32.874"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:32.874" status="PASS" endtime="20170817 19:32:32.875"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.875">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:32.875" status="PASS" endtime="20170817 19:32:32.875"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:32.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:32.876" status="PASS" endtime="20170817 19:32:32.876"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:33.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:32.877" status="PASS" endtime="20170817 19:32:33.059"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:33.059">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:33.059">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:32.876" status="PASS" endtime="20170817 19:32:33.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:33.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:33.060" status="PASS" endtime="20170817 19:32:33.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:33.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:33.060" status="PASS" endtime="20170817 19:32:33.061"></status>
</kw>
<status starttime="20170817 19:32:32.873" status="PASS" endtime="20170817 19:32:33.061"></status>
</kw>
<status starttime="20170817 19:32:32.872" status="PASS" endtime="20170817 19:32:33.061"></status>
</kw>
<status starttime="20170817 19:32:32.872" status="PASS" endtime="20170817 19:32:33.061"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:33.062">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:32:33.061" status="PASS" endtime="20170817 19:32:33.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:33.064">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:33.063" status="PASS" endtime="20170817 19:32:33.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:33.065">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:33.065" status="PASS" endtime="20170817 19:32:33.065"></status>
</kw>
<status starttime="20170817 19:32:33.064" status="PASS" endtime="20170817 19:32:33.065"></status>
</kw>
<status starttime="20170817 19:32:33.062" status="PASS" endtime="20170817 19:32:33.065"></status>
</kw>
<status starttime="20170817 19:32:33.062" status="PASS" endtime="20170817 19:32:33.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:33.176">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:33.176">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:33.065" status="PASS" endtime="20170817 19:32:33.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:33.178">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:33.177" status="PASS" endtime="20170817 19:32:33.178"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:33.179">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:33.179" status="PASS" endtime="20170817 19:32:33.179"></status>
</kw>
<status starttime="20170817 19:32:33.178" status="PASS" endtime="20170817 19:32:33.179"></status>
</kw>
<status starttime="20170817 19:32:33.177" status="PASS" endtime="20170817 19:32:33.179"></status>
</kw>
<status starttime="20170817 19:32:33.176" status="PASS" endtime="20170817 19:32:33.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:33.180">Delete All Sessions</msg>
<status starttime="20170817 19:32:33.179" status="PASS" endtime="20170817 19:32:33.180"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:33.180">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:32.871" status="PASS" endtime="20170817 19:32:33.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:33.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:33.180" status="PASS" endtime="20170817 19:32:33.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:33.181">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:33.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:33.181">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:33.181" status="PASS" endtime="20170817 19:32:33.181"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:33.182">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:32:32.871" status="PASS" endtime="20170817 19:32:33.182"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:33.182">${host_state} = Quiesced</msg>
<status starttime="20170817 19:32:32.870" status="PASS" endtime="20170817 19:32:33.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:32:33.183">Running != Quiesced</msg>
<status starttime="20170817 19:32:33.182" status="FAIL" endtime="20170817 19:32:33.183"></status>
</kw>
<status starttime="20170817 19:32:32.562" status="FAIL" endtime="20170817 19:32:33.183"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.188">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:43.187" status="PASS" endtime="20170817 19:32:43.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:43.188" status="PASS" endtime="20170817 19:32:43.189"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.189">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:43.189" status="PASS" endtime="20170817 19:32:43.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:43.189" status="PASS" endtime="20170817 19:32:43.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.369">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:43.191" status="PASS" endtime="20170817 19:32:43.370"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.370">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:43.370">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:43.191" status="PASS" endtime="20170817 19:32:43.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.370">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:43.370" status="PASS" endtime="20170817 19:32:43.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:43.371" status="PASS" endtime="20170817 19:32:43.371"></status>
</kw>
<status starttime="20170817 19:32:43.187" status="PASS" endtime="20170817 19:32:43.371"></status>
</kw>
<status starttime="20170817 19:32:43.186" status="PASS" endtime="20170817 19:32:43.371"></status>
</kw>
<status starttime="20170817 19:32:43.186" status="PASS" endtime="20170817 19:32:43.372"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.372">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:32:43.372" status="PASS" endtime="20170817 19:32:43.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.376">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:43.375" status="PASS" endtime="20170817 19:32:43.376"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.377">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:43.377" status="PASS" endtime="20170817 19:32:43.377"></status>
</kw>
<status starttime="20170817 19:32:43.376" status="PASS" endtime="20170817 19:32:43.377"></status>
</kw>
<status starttime="20170817 19:32:43.373" status="PASS" endtime="20170817 19:32:43.377"></status>
</kw>
<status starttime="20170817 19:32:43.372" status="PASS" endtime="20170817 19:32:43.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.452">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:43.452">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:43.378" status="PASS" endtime="20170817 19:32:43.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.454">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:43.454" status="PASS" endtime="20170817 19:32:43.454"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.455">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:43.455" status="PASS" endtime="20170817 19:32:43.455"></status>
</kw>
<status starttime="20170817 19:32:43.454" status="PASS" endtime="20170817 19:32:43.455"></status>
</kw>
<status starttime="20170817 19:32:43.453" status="PASS" endtime="20170817 19:32:43.455"></status>
</kw>
<status starttime="20170817 19:32:43.453" status="PASS" endtime="20170817 19:32:43.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:43.456">Delete All Sessions</msg>
<status starttime="20170817 19:32:43.456" status="PASS" endtime="20170817 19:32:43.456"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.456">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:43.185" status="PASS" endtime="20170817 19:32:43.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:43.456" status="PASS" endtime="20170817 19:32:43.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.457">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:43.457">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:43.457">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:43.457" status="PASS" endtime="20170817 19:32:43.458"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.458">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:32:43.185" status="PASS" endtime="20170817 19:32:43.458"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.458">${power_state} = On</msg>
<status starttime="20170817 19:32:43.184" status="PASS" endtime="20170817 19:32:43.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:32:43.458" status="PASS" endtime="20170817 19:32:43.459"></status>
</kw>
<status starttime="20170817 19:32:43.184" status="PASS" endtime="20170817 19:32:43.459"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.463">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:43.462" status="PASS" endtime="20170817 19:32:43.463"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.464">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:43.463" status="PASS" endtime="20170817 19:32:43.464"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.464">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:43.464" status="PASS" endtime="20170817 19:32:43.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.465">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:43.465" status="PASS" endtime="20170817 19:32:43.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.663">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:43.466" status="PASS" endtime="20170817 19:32:43.663"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.663">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:43.663">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:43.465" status="PASS" endtime="20170817 19:32:43.663"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.664">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:43.664" status="PASS" endtime="20170817 19:32:43.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:43.664" status="PASS" endtime="20170817 19:32:43.665"></status>
</kw>
<status starttime="20170817 19:32:43.462" status="PASS" endtime="20170817 19:32:43.665"></status>
</kw>
<status starttime="20170817 19:32:43.461" status="PASS" endtime="20170817 19:32:43.665"></status>
</kw>
<status starttime="20170817 19:32:43.461" status="PASS" endtime="20170817 19:32:43.665"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.666">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:32:43.665" status="PASS" endtime="20170817 19:32:43.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.668">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:43.667" status="PASS" endtime="20170817 19:32:43.668"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.669">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:43.669" status="PASS" endtime="20170817 19:32:43.669"></status>
</kw>
<status starttime="20170817 19:32:43.668" status="PASS" endtime="20170817 19:32:43.669"></status>
</kw>
<status starttime="20170817 19:32:43.667" status="PASS" endtime="20170817 19:32:43.669"></status>
</kw>
<status starttime="20170817 19:32:43.666" status="PASS" endtime="20170817 19:32:43.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.759">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:43.759">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:43.670" status="PASS" endtime="20170817 19:32:43.759"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.762">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:43.761" status="PASS" endtime="20170817 19:32:43.762"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.762">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:43.762" status="PASS" endtime="20170817 19:32:43.763"></status>
</kw>
<status starttime="20170817 19:32:43.762" status="PASS" endtime="20170817 19:32:43.763"></status>
</kw>
<status starttime="20170817 19:32:43.760" status="PASS" endtime="20170817 19:32:43.763"></status>
</kw>
<status starttime="20170817 19:32:43.760" status="PASS" endtime="20170817 19:32:43.763"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:43.763">Delete All Sessions</msg>
<status starttime="20170817 19:32:43.763" status="PASS" endtime="20170817 19:32:43.763"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.764">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:43.460" status="PASS" endtime="20170817 19:32:43.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:43.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:43.764" status="PASS" endtime="20170817 19:32:43.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:43.765">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:43.765">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:43.765">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:43.765" status="PASS" endtime="20170817 19:32:43.765"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.765">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:32:43.459" status="PASS" endtime="20170817 19:32:43.765"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:43.766">${host_state} = Quiesced</msg>
<status starttime="20170817 19:32:43.459" status="PASS" endtime="20170817 19:32:43.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:32:43.766">Running != Quiesced</msg>
<status starttime="20170817 19:32:43.766" status="FAIL" endtime="20170817 19:32:43.766"></status>
</kw>
<status starttime="20170817 19:32:43.183" status="FAIL" endtime="20170817 19:32:43.766"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:53.772">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:53.771" status="PASS" endtime="20170817 19:32:53.772"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:53.773">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:53.772" status="PASS" endtime="20170817 19:32:53.773"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:53.773">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:53.773" status="PASS" endtime="20170817 19:32:53.773"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:53.775">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:53.773" status="PASS" endtime="20170817 19:32:53.775"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.032">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:53.776" status="PASS" endtime="20170817 19:32:54.032"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.032">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:54.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:53.776" status="PASS" endtime="20170817 19:32:54.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.033">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:54.032" status="PASS" endtime="20170817 19:32:54.033"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:54.033" status="PASS" endtime="20170817 19:32:54.033"></status>
</kw>
<status starttime="20170817 19:32:53.771" status="PASS" endtime="20170817 19:32:54.034"></status>
</kw>
<status starttime="20170817 19:32:53.770" status="PASS" endtime="20170817 19:32:54.034"></status>
</kw>
<status starttime="20170817 19:32:53.770" status="PASS" endtime="20170817 19:32:54.034"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.034">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:32:54.034" status="PASS" endtime="20170817 19:32:54.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.036">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:54.036" status="PASS" endtime="20170817 19:32:54.037"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.037">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:54.037" status="PASS" endtime="20170817 19:32:54.037"></status>
</kw>
<status starttime="20170817 19:32:54.037" status="PASS" endtime="20170817 19:32:54.038"></status>
</kw>
<status starttime="20170817 19:32:54.035" status="PASS" endtime="20170817 19:32:54.038"></status>
</kw>
<status starttime="20170817 19:32:54.035" status="PASS" endtime="20170817 19:32:54.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.118">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:54.118">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:54.039" status="PASS" endtime="20170817 19:32:54.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.120">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:54.120" status="PASS" endtime="20170817 19:32:54.120"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.121">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:54.121" status="PASS" endtime="20170817 19:32:54.121"></status>
</kw>
<status starttime="20170817 19:32:54.120" status="PASS" endtime="20170817 19:32:54.121"></status>
</kw>
<status starttime="20170817 19:32:54.119" status="PASS" endtime="20170817 19:32:54.121"></status>
</kw>
<status starttime="20170817 19:32:54.119" status="PASS" endtime="20170817 19:32:54.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:54.122">Delete All Sessions</msg>
<status starttime="20170817 19:32:54.122" status="PASS" endtime="20170817 19:32:54.122"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:53.769" status="PASS" endtime="20170817 19:32:54.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:54.122" status="PASS" endtime="20170817 19:32:54.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.123">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:54.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:54.123">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:54.123" status="PASS" endtime="20170817 19:32:54.123"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.124">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:32:53.769" status="PASS" endtime="20170817 19:32:54.124"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.124">${power_state} = On</msg>
<status starttime="20170817 19:32:53.768" status="PASS" endtime="20170817 19:32:54.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:32:54.124" status="PASS" endtime="20170817 19:32:54.125"></status>
</kw>
<status starttime="20170817 19:32:53.768" status="PASS" endtime="20170817 19:32:54.125"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.128">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:32:54.128" status="PASS" endtime="20170817 19:32:54.129"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:32:54.129" status="PASS" endtime="20170817 19:32:54.130"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.130">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:32:54.130" status="PASS" endtime="20170817 19:32:54.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.131">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:32:54.131" status="PASS" endtime="20170817 19:32:54.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:32:54.132" status="PASS" endtime="20170817 19:32:54.377"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:32:54.377">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:54.131" status="PASS" endtime="20170817 19:32:54.377"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:54.377" status="PASS" endtime="20170817 19:32:54.378"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:54.378" status="PASS" endtime="20170817 19:32:54.378"></status>
</kw>
<status starttime="20170817 19:32:54.128" status="PASS" endtime="20170817 19:32:54.379"></status>
</kw>
<status starttime="20170817 19:32:54.127" status="PASS" endtime="20170817 19:32:54.379"></status>
</kw>
<status starttime="20170817 19:32:54.126" status="PASS" endtime="20170817 19:32:54.379"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.379">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:32:54.379" status="PASS" endtime="20170817 19:32:54.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.381">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:54.381" status="PASS" endtime="20170817 19:32:54.381"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.382">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:32:54.382" status="PASS" endtime="20170817 19:32:54.382"></status>
</kw>
<status starttime="20170817 19:32:54.382" status="PASS" endtime="20170817 19:32:54.383"></status>
</kw>
<status starttime="20170817 19:32:54.380" status="PASS" endtime="20170817 19:32:54.383"></status>
</kw>
<status starttime="20170817 19:32:54.380" status="PASS" endtime="20170817 19:32:54.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.472">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:32:54.472">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:54.383" status="PASS" endtime="20170817 19:32:54.472"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.475">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:54.475" status="PASS" endtime="20170817 19:32:54.475"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.476">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:32:54.476" status="PASS" endtime="20170817 19:32:54.476"></status>
</kw>
<status starttime="20170817 19:32:54.476" status="PASS" endtime="20170817 19:32:54.477"></status>
</kw>
<status starttime="20170817 19:32:54.473" status="PASS" endtime="20170817 19:32:54.477"></status>
</kw>
<status starttime="20170817 19:32:54.473" status="PASS" endtime="20170817 19:32:54.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:32:54.477">Delete All Sessions</msg>
<status starttime="20170817 19:32:54.477" status="PASS" endtime="20170817 19:32:54.477"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.477">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:32:54.126" status="PASS" endtime="20170817 19:32:54.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:32:54.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:32:54.478" status="PASS" endtime="20170817 19:32:54.478"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:32:54.479">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:32:54.479">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:32:54.479">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:32:54.478" status="PASS" endtime="20170817 19:32:54.479"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.479">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:32:54.125" status="PASS" endtime="20170817 19:32:54.479"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:32:54.479">${host_state} = Quiesced</msg>
<status starttime="20170817 19:32:54.125" status="PASS" endtime="20170817 19:32:54.480"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:32:54.480">Running != Quiesced</msg>
<status starttime="20170817 19:32:54.480" status="FAIL" endtime="20170817 19:32:54.480"></status>
</kw>
<status starttime="20170817 19:32:53.767" status="FAIL" endtime="20170817 19:32:54.480"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.487">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:04.487" status="PASS" endtime="20170817 19:33:04.488"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:04.488" status="PASS" endtime="20170817 19:33:04.489"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.489">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:04.489" status="PASS" endtime="20170817 19:33:04.490"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.490">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:04.490" status="PASS" endtime="20170817 19:33:04.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.670">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:04.491" status="PASS" endtime="20170817 19:33:04.670"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:04.670">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:04.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:04.491" status="PASS" endtime="20170817 19:33:04.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.671">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:04.671" status="PASS" endtime="20170817 19:33:04.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:04.672" status="PASS" endtime="20170817 19:33:04.672"></status>
</kw>
<status starttime="20170817 19:33:04.486" status="PASS" endtime="20170817 19:33:04.672"></status>
</kw>
<status starttime="20170817 19:33:04.485" status="PASS" endtime="20170817 19:33:04.673"></status>
</kw>
<status starttime="20170817 19:33:04.484" status="PASS" endtime="20170817 19:33:04.673"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.674">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:33:04.673" status="PASS" endtime="20170817 19:33:04.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.676">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:04.676" status="PASS" endtime="20170817 19:33:04.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.677">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:04.677" status="PASS" endtime="20170817 19:33:04.678"></status>
</kw>
<status starttime="20170817 19:33:04.677" status="PASS" endtime="20170817 19:33:04.678"></status>
</kw>
<status starttime="20170817 19:33:04.675" status="PASS" endtime="20170817 19:33:04.678"></status>
</kw>
<status starttime="20170817 19:33:04.675" status="PASS" endtime="20170817 19:33:04.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:04.741">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:04.678" status="PASS" endtime="20170817 19:33:04.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.742">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:04.742" status="PASS" endtime="20170817 19:33:04.743"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.743">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:04.743" status="PASS" endtime="20170817 19:33:04.743"></status>
</kw>
<status starttime="20170817 19:33:04.743" status="PASS" endtime="20170817 19:33:04.744"></status>
</kw>
<status starttime="20170817 19:33:04.742" status="PASS" endtime="20170817 19:33:04.744"></status>
</kw>
<status starttime="20170817 19:33:04.741" status="PASS" endtime="20170817 19:33:04.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:04.744">Delete All Sessions</msg>
<status starttime="20170817 19:33:04.744" status="PASS" endtime="20170817 19:33:04.744"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:04.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:04.483" status="PASS" endtime="20170817 19:33:04.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:04.745" status="PASS" endtime="20170817 19:33:04.745"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.746">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:04.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:04.746">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:04.745" status="PASS" endtime="20170817 19:33:04.746"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:04.746">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:33:04.482" status="PASS" endtime="20170817 19:33:04.746"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:04.746">${power_state} = On</msg>
<status starttime="20170817 19:33:04.482" status="PASS" endtime="20170817 19:33:04.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:33:04.747" status="PASS" endtime="20170817 19:33:04.747"></status>
</kw>
<status starttime="20170817 19:33:04.481" status="PASS" endtime="20170817 19:33:04.747"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:04.751">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:04.750" status="PASS" endtime="20170817 19:33:04.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:04.751" status="PASS" endtime="20170817 19:33:04.752"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.752">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:04.752" status="PASS" endtime="20170817 19:33:04.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:04.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:04.753" status="PASS" endtime="20170817 19:33:04.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:05.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:04.754" status="PASS" endtime="20170817 19:33:05.023"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:05.024">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:05.024">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:04.753" status="PASS" endtime="20170817 19:33:05.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:05.024">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:05.024" status="PASS" endtime="20170817 19:33:05.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:05.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:05.025" status="PASS" endtime="20170817 19:33:05.025"></status>
</kw>
<status starttime="20170817 19:33:04.750" status="PASS" endtime="20170817 19:33:05.025"></status>
</kw>
<status starttime="20170817 19:33:04.749" status="PASS" endtime="20170817 19:33:05.025"></status>
</kw>
<status starttime="20170817 19:33:04.749" status="PASS" endtime="20170817 19:33:05.025"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:05.026">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:33:05.026" status="PASS" endtime="20170817 19:33:05.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:05.028">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:05.027" status="PASS" endtime="20170817 19:33:05.028"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:05.029">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:05.029" status="PASS" endtime="20170817 19:33:05.029"></status>
</kw>
<status starttime="20170817 19:33:05.028" status="PASS" endtime="20170817 19:33:05.029"></status>
</kw>
<status starttime="20170817 19:33:05.027" status="PASS" endtime="20170817 19:33:05.029"></status>
</kw>
<status starttime="20170817 19:33:05.026" status="PASS" endtime="20170817 19:33:05.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:05.186">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:05.186">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:05.030" status="PASS" endtime="20170817 19:33:05.186"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:05.188">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:05.187" status="PASS" endtime="20170817 19:33:05.188"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:05.189">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:05.188" status="PASS" endtime="20170817 19:33:05.189"></status>
</kw>
<status starttime="20170817 19:33:05.188" status="PASS" endtime="20170817 19:33:05.189"></status>
</kw>
<status starttime="20170817 19:33:05.187" status="PASS" endtime="20170817 19:33:05.189"></status>
</kw>
<status starttime="20170817 19:33:05.186" status="PASS" endtime="20170817 19:33:05.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:05.189">Delete All Sessions</msg>
<status starttime="20170817 19:33:05.189" status="PASS" endtime="20170817 19:33:05.189"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:05.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:04.748" status="PASS" endtime="20170817 19:33:05.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:05.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:05.190" status="PASS" endtime="20170817 19:33:05.190"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:05.191">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:05.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:05.191">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:05.191" status="PASS" endtime="20170817 19:33:05.191"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:05.191">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:33:04.748" status="PASS" endtime="20170817 19:33:05.191"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:05.192">${host_state} = Quiesced</msg>
<status starttime="20170817 19:33:04.747" status="PASS" endtime="20170817 19:33:05.192"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:33:05.192">Running != Quiesced</msg>
<status starttime="20170817 19:33:05.192" status="FAIL" endtime="20170817 19:33:05.192"></status>
</kw>
<status starttime="20170817 19:33:04.481" status="FAIL" endtime="20170817 19:33:05.193"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.198">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:15.197" status="PASS" endtime="20170817 19:33:15.198"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:15.199" status="PASS" endtime="20170817 19:33:15.199"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.199">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:15.199" status="PASS" endtime="20170817 19:33:15.199"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.200">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:15.200" status="PASS" endtime="20170817 19:33:15.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.392">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:15.201" status="PASS" endtime="20170817 19:33:15.392"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.392">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:15.392">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:15.200" status="PASS" endtime="20170817 19:33:15.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.393">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:15.393" status="PASS" endtime="20170817 19:33:15.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.394">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:15.393" status="PASS" endtime="20170817 19:33:15.394"></status>
</kw>
<status starttime="20170817 19:33:15.197" status="PASS" endtime="20170817 19:33:15.394"></status>
</kw>
<status starttime="20170817 19:33:15.196" status="PASS" endtime="20170817 19:33:15.394"></status>
</kw>
<status starttime="20170817 19:33:15.195" status="PASS" endtime="20170817 19:33:15.394"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.395">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:33:15.394" status="PASS" endtime="20170817 19:33:15.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.397">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:15.396" status="PASS" endtime="20170817 19:33:15.397"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.397">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:15.397" status="PASS" endtime="20170817 19:33:15.398"></status>
</kw>
<status starttime="20170817 19:33:15.397" status="PASS" endtime="20170817 19:33:15.398"></status>
</kw>
<status starttime="20170817 19:33:15.395" status="PASS" endtime="20170817 19:33:15.398"></status>
</kw>
<status starttime="20170817 19:33:15.395" status="PASS" endtime="20170817 19:33:15.398"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.460">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:15.461">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:15.398" status="PASS" endtime="20170817 19:33:15.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.462">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:15.462" status="PASS" endtime="20170817 19:33:15.462"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.464">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:15.463" status="PASS" endtime="20170817 19:33:15.464"></status>
</kw>
<status starttime="20170817 19:33:15.462" status="PASS" endtime="20170817 19:33:15.464"></status>
</kw>
<status starttime="20170817 19:33:15.461" status="PASS" endtime="20170817 19:33:15.464"></status>
</kw>
<status starttime="20170817 19:33:15.461" status="PASS" endtime="20170817 19:33:15.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:15.464">Delete All Sessions</msg>
<status starttime="20170817 19:33:15.464" status="PASS" endtime="20170817 19:33:15.464"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:15.195" status="PASS" endtime="20170817 19:33:15.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:15.465" status="PASS" endtime="20170817 19:33:15.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.466">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:15.466">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:15.466">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:15.466" status="PASS" endtime="20170817 19:33:15.466"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.466">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:33:15.194" status="PASS" endtime="20170817 19:33:15.466"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.467">${power_state} = On</msg>
<status starttime="20170817 19:33:15.194" status="PASS" endtime="20170817 19:33:15.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:33:15.467" status="PASS" endtime="20170817 19:33:15.467"></status>
</kw>
<status starttime="20170817 19:33:15.194" status="PASS" endtime="20170817 19:33:15.467"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.472">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:15.472" status="PASS" endtime="20170817 19:33:15.473"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.474">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:15.473" status="PASS" endtime="20170817 19:33:15.474"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.475">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:15.474" status="PASS" endtime="20170817 19:33:15.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.476">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:15.475" status="PASS" endtime="20170817 19:33:15.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.660">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:15.477" status="PASS" endtime="20170817 19:33:15.660"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.660">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:15.661">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:15.476" status="PASS" endtime="20170817 19:33:15.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.661">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:15.661" status="PASS" endtime="20170817 19:33:15.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:15.662" status="PASS" endtime="20170817 19:33:15.662"></status>
</kw>
<status starttime="20170817 19:33:15.471" status="PASS" endtime="20170817 19:33:15.662"></status>
</kw>
<status starttime="20170817 19:33:15.471" status="PASS" endtime="20170817 19:33:15.662"></status>
</kw>
<status starttime="20170817 19:33:15.470" status="PASS" endtime="20170817 19:33:15.662"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.663">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:33:15.662" status="PASS" endtime="20170817 19:33:15.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.665">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:15.664" status="PASS" endtime="20170817 19:33:15.665"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.666">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:15.666" status="PASS" endtime="20170817 19:33:15.666"></status>
</kw>
<status starttime="20170817 19:33:15.666" status="PASS" endtime="20170817 19:33:15.666"></status>
</kw>
<status starttime="20170817 19:33:15.664" status="PASS" endtime="20170817 19:33:15.667"></status>
</kw>
<status starttime="20170817 19:33:15.663" status="PASS" endtime="20170817 19:33:15.667"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.789">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:15.789">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:15.667" status="PASS" endtime="20170817 19:33:15.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.791">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:15.791" status="PASS" endtime="20170817 19:33:15.791"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.792">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:15.792" status="PASS" endtime="20170817 19:33:15.792"></status>
</kw>
<status starttime="20170817 19:33:15.791" status="PASS" endtime="20170817 19:33:15.792"></status>
</kw>
<status starttime="20170817 19:33:15.790" status="PASS" endtime="20170817 19:33:15.792"></status>
</kw>
<status starttime="20170817 19:33:15.790" status="PASS" endtime="20170817 19:33:15.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:15.793">Delete All Sessions</msg>
<status starttime="20170817 19:33:15.793" status="PASS" endtime="20170817 19:33:15.793"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:15.469" status="PASS" endtime="20170817 19:33:15.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:15.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:15.793" status="PASS" endtime="20170817 19:33:15.794"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:15.794">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:15.794">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:15.795">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:15.794" status="PASS" endtime="20170817 19:33:15.795"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.795">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:33:15.468" status="PASS" endtime="20170817 19:33:15.795"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:15.795">${host_state} = Quiesced</msg>
<status starttime="20170817 19:33:15.467" status="PASS" endtime="20170817 19:33:15.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:33:15.796">Running != Quiesced</msg>
<status starttime="20170817 19:33:15.795" status="FAIL" endtime="20170817 19:33:15.796"></status>
</kw>
<status starttime="20170817 19:33:15.193" status="FAIL" endtime="20170817 19:33:15.796"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:25.801">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:25.801" status="PASS" endtime="20170817 19:33:25.801"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:25.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:25.802" status="PASS" endtime="20170817 19:33:25.802"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:25.803">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:25.802" status="PASS" endtime="20170817 19:33:25.803"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:25.804">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:25.803" status="PASS" endtime="20170817 19:33:25.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:25.982">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:25.804" status="PASS" endtime="20170817 19:33:25.982"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:25.982">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:25.982">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:25.804" status="PASS" endtime="20170817 19:33:25.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:25.983">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:25.983" status="PASS" endtime="20170817 19:33:25.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:25.984">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:25.983" status="PASS" endtime="20170817 19:33:25.984"></status>
</kw>
<status starttime="20170817 19:33:25.800" status="PASS" endtime="20170817 19:33:25.984"></status>
</kw>
<status starttime="20170817 19:33:25.800" status="PASS" endtime="20170817 19:33:25.984"></status>
</kw>
<status starttime="20170817 19:33:25.799" status="PASS" endtime="20170817 19:33:25.984"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:25.985">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:33:25.984" status="PASS" endtime="20170817 19:33:25.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:25.987">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:25.986" status="PASS" endtime="20170817 19:33:25.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:25.989">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:25.988" status="PASS" endtime="20170817 19:33:25.989"></status>
</kw>
<status starttime="20170817 19:33:25.987" status="PASS" endtime="20170817 19:33:25.989"></status>
</kw>
<status starttime="20170817 19:33:25.985" status="PASS" endtime="20170817 19:33:25.989"></status>
</kw>
<status starttime="20170817 19:33:25.985" status="PASS" endtime="20170817 19:33:25.989"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:26.053">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:25.989" status="PASS" endtime="20170817 19:33:26.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:26.055" status="PASS" endtime="20170817 19:33:26.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:26.056" status="PASS" endtime="20170817 19:33:26.056"></status>
</kw>
<status starttime="20170817 19:33:26.055" status="PASS" endtime="20170817 19:33:26.056"></status>
</kw>
<status starttime="20170817 19:33:26.054" status="PASS" endtime="20170817 19:33:26.056"></status>
</kw>
<status starttime="20170817 19:33:26.054" status="PASS" endtime="20170817 19:33:26.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:26.057">Delete All Sessions</msg>
<status starttime="20170817 19:33:26.057" status="PASS" endtime="20170817 19:33:26.057"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:26.057">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:25.798" status="PASS" endtime="20170817 19:33:26.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:26.058" status="PASS" endtime="20170817 19:33:26.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.059">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:26.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:26.059">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:26.058" status="PASS" endtime="20170817 19:33:26.059"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:26.059">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:33:25.798" status="PASS" endtime="20170817 19:33:26.059"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:26.059">${power_state} = On</msg>
<status starttime="20170817 19:33:25.797" status="PASS" endtime="20170817 19:33:26.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:33:26.060" status="PASS" endtime="20170817 19:33:26.060"></status>
</kw>
<status starttime="20170817 19:33:25.797" status="PASS" endtime="20170817 19:33:26.060"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.064">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:26.064" status="PASS" endtime="20170817 19:33:26.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:26.064" status="PASS" endtime="20170817 19:33:26.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.065">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:26.065" status="PASS" endtime="20170817 19:33:26.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.066">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:26.066" status="PASS" endtime="20170817 19:33:26.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:26.067" status="PASS" endtime="20170817 19:33:26.257"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:26.257">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:26.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:26.066" status="PASS" endtime="20170817 19:33:26.257"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.258">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:26.258" status="PASS" endtime="20170817 19:33:26.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:26.258" status="PASS" endtime="20170817 19:33:26.259"></status>
</kw>
<status starttime="20170817 19:33:26.063" status="PASS" endtime="20170817 19:33:26.259"></status>
</kw>
<status starttime="20170817 19:33:26.062" status="PASS" endtime="20170817 19:33:26.259"></status>
</kw>
<status starttime="20170817 19:33:26.062" status="PASS" endtime="20170817 19:33:26.259"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.260">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:33:26.259" status="PASS" endtime="20170817 19:33:26.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.262">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:26.261" status="PASS" endtime="20170817 19:33:26.262"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.263">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:26.262" status="PASS" endtime="20170817 19:33:26.263"></status>
</kw>
<status starttime="20170817 19:33:26.262" status="PASS" endtime="20170817 19:33:26.263"></status>
</kw>
<status starttime="20170817 19:33:26.260" status="PASS" endtime="20170817 19:33:26.263"></status>
</kw>
<status starttime="20170817 19:33:26.260" status="PASS" endtime="20170817 19:33:26.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.351">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:26.351">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:26.263" status="PASS" endtime="20170817 19:33:26.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.353">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:26.352" status="PASS" endtime="20170817 19:33:26.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.354">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:26.354" status="PASS" endtime="20170817 19:33:26.354"></status>
</kw>
<status starttime="20170817 19:33:26.353" status="PASS" endtime="20170817 19:33:26.354"></status>
</kw>
<status starttime="20170817 19:33:26.352" status="PASS" endtime="20170817 19:33:26.354"></status>
</kw>
<status starttime="20170817 19:33:26.351" status="PASS" endtime="20170817 19:33:26.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:26.355">Delete All Sessions</msg>
<status starttime="20170817 19:33:26.354" status="PASS" endtime="20170817 19:33:26.355"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:26.355">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:26.061" status="PASS" endtime="20170817 19:33:26.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:26.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:26.355" status="PASS" endtime="20170817 19:33:26.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:26.356">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:26.356">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:26.356">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:26.356" status="PASS" endtime="20170817 19:33:26.356"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:26.357">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:33:26.061" status="PASS" endtime="20170817 19:33:26.357"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:26.357">${host_state} = Quiesced</msg>
<status starttime="20170817 19:33:26.060" status="PASS" endtime="20170817 19:33:26.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:33:26.358">Running != Quiesced</msg>
<status starttime="20170817 19:33:26.357" status="FAIL" endtime="20170817 19:33:26.358"></status>
</kw>
<status starttime="20170817 19:33:25.796" status="FAIL" endtime="20170817 19:33:26.358"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.363">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:36.362" status="PASS" endtime="20170817 19:33:36.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.364">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:36.363" status="PASS" endtime="20170817 19:33:36.364"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.364">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:36.364" status="PASS" endtime="20170817 19:33:36.364"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.365">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:36.365" status="PASS" endtime="20170817 19:33:36.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:36.366" status="PASS" endtime="20170817 19:33:36.622"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:36.622">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:36.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:36.365" status="PASS" endtime="20170817 19:33:36.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.622">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:36.622" status="PASS" endtime="20170817 19:33:36.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:36.623" status="PASS" endtime="20170817 19:33:36.623"></status>
</kw>
<status starttime="20170817 19:33:36.362" status="PASS" endtime="20170817 19:33:36.623"></status>
</kw>
<status starttime="20170817 19:33:36.361" status="PASS" endtime="20170817 19:33:36.623"></status>
</kw>
<status starttime="20170817 19:33:36.361" status="PASS" endtime="20170817 19:33:36.624"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.624">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:33:36.624" status="PASS" endtime="20170817 19:33:36.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.626">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:36.625" status="PASS" endtime="20170817 19:33:36.626"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.627">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:36.627" status="PASS" endtime="20170817 19:33:36.627"></status>
</kw>
<status starttime="20170817 19:33:36.626" status="PASS" endtime="20170817 19:33:36.627"></status>
</kw>
<status starttime="20170817 19:33:36.625" status="PASS" endtime="20170817 19:33:36.627"></status>
</kw>
<status starttime="20170817 19:33:36.624" status="PASS" endtime="20170817 19:33:36.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.692">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:36.692">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:36.628" status="PASS" endtime="20170817 19:33:36.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.694">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:36.693" status="PASS" endtime="20170817 19:33:36.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.695">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:36.694" status="PASS" endtime="20170817 19:33:36.695"></status>
</kw>
<status starttime="20170817 19:33:36.694" status="PASS" endtime="20170817 19:33:36.695"></status>
</kw>
<status starttime="20170817 19:33:36.693" status="PASS" endtime="20170817 19:33:36.695"></status>
</kw>
<status starttime="20170817 19:33:36.692" status="PASS" endtime="20170817 19:33:36.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:36.695">Delete All Sessions</msg>
<status starttime="20170817 19:33:36.695" status="PASS" endtime="20170817 19:33:36.696"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:36.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:36.360" status="PASS" endtime="20170817 19:33:36.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:36.696" status="PASS" endtime="20170817 19:33:36.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.697">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:36.697">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:36.697">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:36.697" status="PASS" endtime="20170817 19:33:36.697"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:36.697">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:33:36.359" status="PASS" endtime="20170817 19:33:36.698"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:36.698">${power_state} = On</msg>
<status starttime="20170817 19:33:36.359" status="PASS" endtime="20170817 19:33:36.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:33:36.698" status="PASS" endtime="20170817 19:33:36.698"></status>
</kw>
<status starttime="20170817 19:33:36.359" status="PASS" endtime="20170817 19:33:36.699"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.702">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:36.702" status="PASS" endtime="20170817 19:33:36.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:36.706" status="PASS" endtime="20170817 19:33:36.706"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.707">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:36.707" status="PASS" endtime="20170817 19:33:36.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.708">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:36.708" status="PASS" endtime="20170817 19:33:36.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.930">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:36.710" status="PASS" endtime="20170817 19:33:36.930"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:36.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:36.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:36.709" status="PASS" endtime="20170817 19:33:36.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.931">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:36.931" status="PASS" endtime="20170817 19:33:36.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:36.931" status="PASS" endtime="20170817 19:33:36.932"></status>
</kw>
<status starttime="20170817 19:33:36.701" status="PASS" endtime="20170817 19:33:36.932"></status>
</kw>
<status starttime="20170817 19:33:36.701" status="PASS" endtime="20170817 19:33:36.932"></status>
</kw>
<status starttime="20170817 19:33:36.700" status="PASS" endtime="20170817 19:33:36.932"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.933">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:33:36.932" status="PASS" endtime="20170817 19:33:36.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:36.936">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:36.935" status="PASS" endtime="20170817 19:33:36.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:36.937">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:36.937" status="PASS" endtime="20170817 19:33:36.937"></status>
</kw>
<status starttime="20170817 19:33:36.936" status="PASS" endtime="20170817 19:33:36.937"></status>
</kw>
<status starttime="20170817 19:33:36.934" status="PASS" endtime="20170817 19:33:36.937"></status>
</kw>
<status starttime="20170817 19:33:36.933" status="PASS" endtime="20170817 19:33:36.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:37.040">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:37.040">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:36.938" status="PASS" endtime="20170817 19:33:37.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:37.042">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:37.041" status="PASS" endtime="20170817 19:33:37.042"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:37.043">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:37.042" status="PASS" endtime="20170817 19:33:37.043"></status>
</kw>
<status starttime="20170817 19:33:37.042" status="PASS" endtime="20170817 19:33:37.043"></status>
</kw>
<status starttime="20170817 19:33:37.041" status="PASS" endtime="20170817 19:33:37.043"></status>
</kw>
<status starttime="20170817 19:33:37.040" status="PASS" endtime="20170817 19:33:37.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:37.043">Delete All Sessions</msg>
<status starttime="20170817 19:33:37.043" status="PASS" endtime="20170817 19:33:37.043"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:37.044">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:36.700" status="PASS" endtime="20170817 19:33:37.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:37.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:37.044" status="PASS" endtime="20170817 19:33:37.044"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:37.045">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:37.045">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:37.045">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:37.045" status="PASS" endtime="20170817 19:33:37.045"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:37.045">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:33:36.699" status="PASS" endtime="20170817 19:33:37.045"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:37.046">${host_state} = Quiesced</msg>
<status starttime="20170817 19:33:36.699" status="PASS" endtime="20170817 19:33:37.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:33:37.046">Running != Quiesced</msg>
<status starttime="20170817 19:33:37.046" status="FAIL" endtime="20170817 19:33:37.046"></status>
</kw>
<status starttime="20170817 19:33:36.358" status="FAIL" endtime="20170817 19:33:37.047"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.053">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:47.053" status="PASS" endtime="20170817 19:33:47.054"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.054">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:47.054" status="PASS" endtime="20170817 19:33:47.055"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.055">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:47.055" status="PASS" endtime="20170817 19:33:47.055"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.056">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:47.056" status="PASS" endtime="20170817 19:33:47.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.329">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:47.057" status="PASS" endtime="20170817 19:33:47.330"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.330">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:47.330">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:47.057" status="PASS" endtime="20170817 19:33:47.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.330">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:47.330" status="PASS" endtime="20170817 19:33:47.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:47.331" status="PASS" endtime="20170817 19:33:47.331"></status>
</kw>
<status starttime="20170817 19:33:47.052" status="PASS" endtime="20170817 19:33:47.331"></status>
</kw>
<status starttime="20170817 19:33:47.051" status="PASS" endtime="20170817 19:33:47.331"></status>
</kw>
<status starttime="20170817 19:33:47.050" status="PASS" endtime="20170817 19:33:47.332"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.332">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:33:47.332" status="PASS" endtime="20170817 19:33:47.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.334">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:47.333" status="PASS" endtime="20170817 19:33:47.334"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.335">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:47.335" status="PASS" endtime="20170817 19:33:47.335"></status>
</kw>
<status starttime="20170817 19:33:47.334" status="PASS" endtime="20170817 19:33:47.336"></status>
</kw>
<status starttime="20170817 19:33:47.333" status="PASS" endtime="20170817 19:33:47.336"></status>
</kw>
<status starttime="20170817 19:33:47.332" status="PASS" endtime="20170817 19:33:47.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.417">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:47.417">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:47.336" status="PASS" endtime="20170817 19:33:47.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.418">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:47.418" status="PASS" endtime="20170817 19:33:47.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.419">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:47.419" status="PASS" endtime="20170817 19:33:47.420"></status>
</kw>
<status starttime="20170817 19:33:47.419" status="PASS" endtime="20170817 19:33:47.420"></status>
</kw>
<status starttime="20170817 19:33:47.418" status="PASS" endtime="20170817 19:33:47.420"></status>
</kw>
<status starttime="20170817 19:33:47.417" status="PASS" endtime="20170817 19:33:47.420"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:47.420">Delete All Sessions</msg>
<status starttime="20170817 19:33:47.420" status="PASS" endtime="20170817 19:33:47.420"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.421">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:47.050" status="PASS" endtime="20170817 19:33:47.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:47.421" status="PASS" endtime="20170817 19:33:47.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.422">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:47.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:47.422">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:47.421" status="PASS" endtime="20170817 19:33:47.422"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.422">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:33:47.048" status="PASS" endtime="20170817 19:33:47.422"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.423">${power_state} = On</msg>
<status starttime="20170817 19:33:47.048" status="PASS" endtime="20170817 19:33:47.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:33:47.423" status="PASS" endtime="20170817 19:33:47.423"></status>
</kw>
<status starttime="20170817 19:33:47.048" status="PASS" endtime="20170817 19:33:47.423"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.428">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:47.427" status="PASS" endtime="20170817 19:33:47.428"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:47.429" status="PASS" endtime="20170817 19:33:47.429"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.430">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:47.430" status="PASS" endtime="20170817 19:33:47.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.431">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:47.431" status="PASS" endtime="20170817 19:33:47.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:47.432" status="PASS" endtime="20170817 19:33:47.622"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.622">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:47.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:47.432" status="PASS" endtime="20170817 19:33:47.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.623">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:47.622" status="PASS" endtime="20170817 19:33:47.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:47.623" status="PASS" endtime="20170817 19:33:47.624"></status>
</kw>
<status starttime="20170817 19:33:47.427" status="PASS" endtime="20170817 19:33:47.624"></status>
</kw>
<status starttime="20170817 19:33:47.426" status="PASS" endtime="20170817 19:33:47.624"></status>
</kw>
<status starttime="20170817 19:33:47.425" status="PASS" endtime="20170817 19:33:47.624"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.624">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:33:47.624" status="PASS" endtime="20170817 19:33:47.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.626">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:47.626" status="PASS" endtime="20170817 19:33:47.626"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.627">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:47.627" status="PASS" endtime="20170817 19:33:47.627"></status>
</kw>
<status starttime="20170817 19:33:47.627" status="PASS" endtime="20170817 19:33:47.628"></status>
</kw>
<status starttime="20170817 19:33:47.625" status="PASS" endtime="20170817 19:33:47.628"></status>
</kw>
<status starttime="20170817 19:33:47.625" status="PASS" endtime="20170817 19:33:47.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.716">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:47.717">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:47.628" status="PASS" endtime="20170817 19:33:47.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.718">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:47.718" status="PASS" endtime="20170817 19:33:47.718"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.719">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:47.719" status="PASS" endtime="20170817 19:33:47.719"></status>
</kw>
<status starttime="20170817 19:33:47.718" status="PASS" endtime="20170817 19:33:47.719"></status>
</kw>
<status starttime="20170817 19:33:47.717" status="PASS" endtime="20170817 19:33:47.720"></status>
</kw>
<status starttime="20170817 19:33:47.717" status="PASS" endtime="20170817 19:33:47.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:47.720">Delete All Sessions</msg>
<status starttime="20170817 19:33:47.720" status="PASS" endtime="20170817 19:33:47.720"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:47.424" status="PASS" endtime="20170817 19:33:47.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:47.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:47.721" status="PASS" endtime="20170817 19:33:47.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:47.721">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:47.722">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:47.722">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:47.721" status="PASS" endtime="20170817 19:33:47.722"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.722">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:33:47.424" status="PASS" endtime="20170817 19:33:47.722"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:47.722">${host_state} = Quiesced</msg>
<status starttime="20170817 19:33:47.423" status="PASS" endtime="20170817 19:33:47.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:33:47.723">Running != Quiesced</msg>
<status starttime="20170817 19:33:47.723" status="FAIL" endtime="20170817 19:33:47.723"></status>
</kw>
<status starttime="20170817 19:33:47.047" status="FAIL" endtime="20170817 19:33:47.723"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:57.729">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:57.728" status="PASS" endtime="20170817 19:33:57.729"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:57.730">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:57.729" status="PASS" endtime="20170817 19:33:57.730"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:57.730">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:57.730" status="PASS" endtime="20170817 19:33:57.730"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:57.731">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:57.731" status="PASS" endtime="20170817 19:33:57.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:57.920">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:57.732" status="PASS" endtime="20170817 19:33:57.920"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:57.920">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:57.920">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:57.731" status="PASS" endtime="20170817 19:33:57.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:57.921">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:57.920" status="PASS" endtime="20170817 19:33:57.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:57.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:57.921" status="PASS" endtime="20170817 19:33:57.921"></status>
</kw>
<status starttime="20170817 19:33:57.727" status="PASS" endtime="20170817 19:33:57.921"></status>
</kw>
<status starttime="20170817 19:33:57.727" status="PASS" endtime="20170817 19:33:57.922"></status>
</kw>
<status starttime="20170817 19:33:57.726" status="PASS" endtime="20170817 19:33:57.922"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:57.922">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:33:57.922" status="PASS" endtime="20170817 19:33:57.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:57.924">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:57.924" status="PASS" endtime="20170817 19:33:57.924"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:57.925">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:57.925" status="PASS" endtime="20170817 19:33:57.925"></status>
</kw>
<status starttime="20170817 19:33:57.924" status="PASS" endtime="20170817 19:33:57.925"></status>
</kw>
<status starttime="20170817 19:33:57.923" status="PASS" endtime="20170817 19:33:57.926"></status>
</kw>
<status starttime="20170817 19:33:57.923" status="PASS" endtime="20170817 19:33:57.926"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:57.995">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:57.995">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:57.926" status="PASS" endtime="20170817 19:33:57.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:57.997">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:57.997" status="PASS" endtime="20170817 19:33:57.997"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:57.998">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:57.998" status="PASS" endtime="20170817 19:33:57.998"></status>
</kw>
<status starttime="20170817 19:33:57.997" status="PASS" endtime="20170817 19:33:57.999"></status>
</kw>
<status starttime="20170817 19:33:57.996" status="PASS" endtime="20170817 19:33:57.999"></status>
</kw>
<status starttime="20170817 19:33:57.996" status="PASS" endtime="20170817 19:33:57.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:57.999">Delete All Sessions</msg>
<status starttime="20170817 19:33:57.999" status="PASS" endtime="20170817 19:33:57.999"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:57.999">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:57.726" status="PASS" endtime="20170817 19:33:57.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:58.000" status="PASS" endtime="20170817 19:33:58.000"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.001">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:58.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:58.001">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:58.000" status="PASS" endtime="20170817 19:33:58.001"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:58.001">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:33:57.725" status="PASS" endtime="20170817 19:33:58.001"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:58.001">${power_state} = On</msg>
<status starttime="20170817 19:33:57.725" status="PASS" endtime="20170817 19:33:58.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:33:58.002" status="PASS" endtime="20170817 19:33:58.002"></status>
</kw>
<status starttime="20170817 19:33:57.724" status="PASS" endtime="20170817 19:33:58.002"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.006">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:33:58.005" status="PASS" endtime="20170817 19:33:58.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:33:58.006" status="PASS" endtime="20170817 19:33:58.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.007">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:33:58.007" status="PASS" endtime="20170817 19:33:58.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:33:58.007" status="PASS" endtime="20170817 19:33:58.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:33:58.009" status="PASS" endtime="20170817 19:33:58.214"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:58.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:33:58.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:58.008" status="PASS" endtime="20170817 19:33:58.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.215">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:58.214" status="PASS" endtime="20170817 19:33:58.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:58.215" status="PASS" endtime="20170817 19:33:58.215"></status>
</kw>
<status starttime="20170817 19:33:58.005" status="PASS" endtime="20170817 19:33:58.216"></status>
</kw>
<status starttime="20170817 19:33:58.004" status="PASS" endtime="20170817 19:33:58.216"></status>
</kw>
<status starttime="20170817 19:33:58.004" status="PASS" endtime="20170817 19:33:58.216"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.216">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:33:58.216" status="PASS" endtime="20170817 19:33:58.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.219">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:58.218" status="PASS" endtime="20170817 19:33:58.219"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.220">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:33:58.219" status="PASS" endtime="20170817 19:33:58.220"></status>
</kw>
<status starttime="20170817 19:33:58.219" status="PASS" endtime="20170817 19:33:58.220"></status>
</kw>
<status starttime="20170817 19:33:58.217" status="PASS" endtime="20170817 19:33:58.220"></status>
</kw>
<status starttime="20170817 19:33:58.217" status="PASS" endtime="20170817 19:33:58.220"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.348">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:33:58.348">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:58.220" status="PASS" endtime="20170817 19:33:58.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.350">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:58.349" status="PASS" endtime="20170817 19:33:58.350"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.351">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:33:58.351" status="PASS" endtime="20170817 19:33:58.351"></status>
</kw>
<status starttime="20170817 19:33:58.350" status="PASS" endtime="20170817 19:33:58.351"></status>
</kw>
<status starttime="20170817 19:33:58.349" status="PASS" endtime="20170817 19:33:58.351"></status>
</kw>
<status starttime="20170817 19:33:58.348" status="PASS" endtime="20170817 19:33:58.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:33:58.352">Delete All Sessions</msg>
<status starttime="20170817 19:33:58.351" status="PASS" endtime="20170817 19:33:58.352"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:58.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:33:58.003" status="PASS" endtime="20170817 19:33:58.352"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:33:58.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:33:58.352" status="PASS" endtime="20170817 19:33:58.353"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:33:58.353">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:33:58.353">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:33:58.353">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:33:58.353" status="PASS" endtime="20170817 19:33:58.353"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:58.354">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:33:58.003" status="PASS" endtime="20170817 19:33:58.354"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:33:58.354">${host_state} = Quiesced</msg>
<status starttime="20170817 19:33:58.002" status="PASS" endtime="20170817 19:33:58.354"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:33:58.355">Running != Quiesced</msg>
<status starttime="20170817 19:33:58.354" status="FAIL" endtime="20170817 19:33:58.355"></status>
</kw>
<status starttime="20170817 19:33:57.724" status="FAIL" endtime="20170817 19:33:58.355"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.360">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:08.360" status="PASS" endtime="20170817 19:34:08.360"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:08.361" status="PASS" endtime="20170817 19:34:08.361"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.362">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:08.362" status="PASS" endtime="20170817 19:34:08.362"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.363">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:08.363" status="PASS" endtime="20170817 19:34:08.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.545">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:08.365" status="PASS" endtime="20170817 19:34:08.545"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.545">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:08.545">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:08.364" status="PASS" endtime="20170817 19:34:08.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.546">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:08.545" status="PASS" endtime="20170817 19:34:08.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.546">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:08.546" status="PASS" endtime="20170817 19:34:08.546"></status>
</kw>
<status starttime="20170817 19:34:08.359" status="PASS" endtime="20170817 19:34:08.547"></status>
</kw>
<status starttime="20170817 19:34:08.359" status="PASS" endtime="20170817 19:34:08.547"></status>
</kw>
<status starttime="20170817 19:34:08.358" status="PASS" endtime="20170817 19:34:08.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.547">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:34:08.547" status="PASS" endtime="20170817 19:34:08.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.550">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:08.549" status="PASS" endtime="20170817 19:34:08.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.550">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:08.550" status="PASS" endtime="20170817 19:34:08.551"></status>
</kw>
<status starttime="20170817 19:34:08.550" status="PASS" endtime="20170817 19:34:08.551"></status>
</kw>
<status starttime="20170817 19:34:08.548" status="PASS" endtime="20170817 19:34:08.551"></status>
</kw>
<status starttime="20170817 19:34:08.548" status="PASS" endtime="20170817 19:34:08.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.617">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:08.617">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:08.551" status="PASS" endtime="20170817 19:34:08.617"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.619">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:08.618" status="PASS" endtime="20170817 19:34:08.619"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.620">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:08.619" status="PASS" endtime="20170817 19:34:08.620"></status>
</kw>
<status starttime="20170817 19:34:08.619" status="PASS" endtime="20170817 19:34:08.620"></status>
</kw>
<status starttime="20170817 19:34:08.618" status="PASS" endtime="20170817 19:34:08.620"></status>
</kw>
<status starttime="20170817 19:34:08.617" status="PASS" endtime="20170817 19:34:08.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:08.620">Delete All Sessions</msg>
<status starttime="20170817 19:34:08.620" status="PASS" endtime="20170817 19:34:08.621"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:08.357" status="PASS" endtime="20170817 19:34:08.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:08.621" status="PASS" endtime="20170817 19:34:08.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.622">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:08.622">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:08.622">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:08.622" status="PASS" endtime="20170817 19:34:08.622"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.622">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:34:08.357" status="PASS" endtime="20170817 19:34:08.622"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.623">${power_state} = On</msg>
<status starttime="20170817 19:34:08.356" status="PASS" endtime="20170817 19:34:08.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:34:08.623" status="PASS" endtime="20170817 19:34:08.623"></status>
</kw>
<status starttime="20170817 19:34:08.356" status="PASS" endtime="20170817 19:34:08.623"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.627">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:08.627" status="PASS" endtime="20170817 19:34:08.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.628">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:08.628" status="PASS" endtime="20170817 19:34:08.628"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.629">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:08.628" status="PASS" endtime="20170817 19:34:08.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.629">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:08.629" status="PASS" endtime="20170817 19:34:08.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:08.630" status="PASS" endtime="20170817 19:34:08.812"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:08.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:08.630" status="PASS" endtime="20170817 19:34:08.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:08.812" status="PASS" endtime="20170817 19:34:08.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:08.813" status="PASS" endtime="20170817 19:34:08.814"></status>
</kw>
<status starttime="20170817 19:34:08.626" status="PASS" endtime="20170817 19:34:08.814"></status>
</kw>
<status starttime="20170817 19:34:08.626" status="PASS" endtime="20170817 19:34:08.814"></status>
</kw>
<status starttime="20170817 19:34:08.625" status="PASS" endtime="20170817 19:34:08.814"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.814">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:34:08.814" status="PASS" endtime="20170817 19:34:08.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.816">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:08.816" status="PASS" endtime="20170817 19:34:08.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.817">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:08.817" status="PASS" endtime="20170817 19:34:08.817"></status>
</kw>
<status starttime="20170817 19:34:08.817" status="PASS" endtime="20170817 19:34:08.818"></status>
</kw>
<status starttime="20170817 19:34:08.815" status="PASS" endtime="20170817 19:34:08.818"></status>
</kw>
<status starttime="20170817 19:34:08.815" status="PASS" endtime="20170817 19:34:08.818"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.914">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:08.914">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:08.818" status="PASS" endtime="20170817 19:34:08.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.916">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:08.915" status="PASS" endtime="20170817 19:34:08.916"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.917">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:08.917" status="PASS" endtime="20170817 19:34:08.917"></status>
</kw>
<status starttime="20170817 19:34:08.916" status="PASS" endtime="20170817 19:34:08.917"></status>
</kw>
<status starttime="20170817 19:34:08.915" status="PASS" endtime="20170817 19:34:08.917"></status>
</kw>
<status starttime="20170817 19:34:08.914" status="PASS" endtime="20170817 19:34:08.917"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:08.918">Delete All Sessions</msg>
<status starttime="20170817 19:34:08.918" status="PASS" endtime="20170817 19:34:08.918"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.918">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:08.624" status="PASS" endtime="20170817 19:34:08.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:08.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:08.918" status="PASS" endtime="20170817 19:34:08.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:08.919">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:08.919">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:08.919">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:08.919" status="PASS" endtime="20170817 19:34:08.920"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.920">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:34:08.624" status="PASS" endtime="20170817 19:34:08.920"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:08.920">${host_state} = Quiesced</msg>
<status starttime="20170817 19:34:08.623" status="PASS" endtime="20170817 19:34:08.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:34:08.921">Running != Quiesced</msg>
<status starttime="20170817 19:34:08.920" status="FAIL" endtime="20170817 19:34:08.921"></status>
</kw>
<status starttime="20170817 19:34:08.355" status="FAIL" endtime="20170817 19:34:08.921"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:18.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:18.925" status="PASS" endtime="20170817 19:34:18.926"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:18.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:18.926" status="PASS" endtime="20170817 19:34:18.927"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:18.927">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:18.927" status="PASS" endtime="20170817 19:34:18.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:18.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:18.927" status="PASS" endtime="20170817 19:34:18.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.117">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:18.929" status="PASS" endtime="20170817 19:34:19.118"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.118">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:19.118">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:18.928" status="PASS" endtime="20170817 19:34:19.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.118">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:19.118" status="PASS" endtime="20170817 19:34:19.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:19.119" status="PASS" endtime="20170817 19:34:19.119"></status>
</kw>
<status starttime="20170817 19:34:18.925" status="PASS" endtime="20170817 19:34:19.119"></status>
</kw>
<status starttime="20170817 19:34:18.924" status="PASS" endtime="20170817 19:34:19.119"></status>
</kw>
<status starttime="20170817 19:34:18.924" status="PASS" endtime="20170817 19:34:19.120"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.120">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:34:19.120" status="PASS" endtime="20170817 19:34:19.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.122">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:19.122" status="PASS" endtime="20170817 19:34:19.122"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.123">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:19.123" status="PASS" endtime="20170817 19:34:19.123"></status>
</kw>
<status starttime="20170817 19:34:19.122" status="PASS" endtime="20170817 19:34:19.123"></status>
</kw>
<status starttime="20170817 19:34:19.121" status="PASS" endtime="20170817 19:34:19.123"></status>
</kw>
<status starttime="20170817 19:34:19.121" status="PASS" endtime="20170817 19:34:19.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.198">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:19.198">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:19.124" status="PASS" endtime="20170817 19:34:19.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.201">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:19.200" status="PASS" endtime="20170817 19:34:19.201"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.202">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:19.202" status="PASS" endtime="20170817 19:34:19.202"></status>
</kw>
<status starttime="20170817 19:34:19.201" status="PASS" endtime="20170817 19:34:19.202"></status>
</kw>
<status starttime="20170817 19:34:19.199" status="PASS" endtime="20170817 19:34:19.202"></status>
</kw>
<status starttime="20170817 19:34:19.198" status="PASS" endtime="20170817 19:34:19.202"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:19.203">Delete All Sessions</msg>
<status starttime="20170817 19:34:19.203" status="PASS" endtime="20170817 19:34:19.203"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.203">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:18.923" status="PASS" endtime="20170817 19:34:19.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:19.203" status="PASS" endtime="20170817 19:34:19.204"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.204">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:19.204">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:19.204">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:19.204" status="PASS" endtime="20170817 19:34:19.205"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.205">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:34:18.923" status="PASS" endtime="20170817 19:34:19.205"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.205">${power_state} = On</msg>
<status starttime="20170817 19:34:18.922" status="PASS" endtime="20170817 19:34:19.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:34:19.205" status="PASS" endtime="20170817 19:34:19.206"></status>
</kw>
<status starttime="20170817 19:34:18.922" status="PASS" endtime="20170817 19:34:19.206"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.209">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:19.209" status="PASS" endtime="20170817 19:34:19.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:19.210" status="PASS" endtime="20170817 19:34:19.211"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.211">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:19.211" status="PASS" endtime="20170817 19:34:19.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.212">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:19.212" status="PASS" endtime="20170817 19:34:19.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.406">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:19.213" status="PASS" endtime="20170817 19:34:19.406"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:19.406">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:19.212" status="PASS" endtime="20170817 19:34:19.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.407">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:19.407" status="PASS" endtime="20170817 19:34:19.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.408">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:19.407" status="PASS" endtime="20170817 19:34:19.408"></status>
</kw>
<status starttime="20170817 19:34:19.208" status="PASS" endtime="20170817 19:34:19.408"></status>
</kw>
<status starttime="20170817 19:34:19.208" status="PASS" endtime="20170817 19:34:19.408"></status>
</kw>
<status starttime="20170817 19:34:19.208" status="PASS" endtime="20170817 19:34:19.408"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.409">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:34:19.408" status="PASS" endtime="20170817 19:34:19.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.411">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:19.410" status="PASS" endtime="20170817 19:34:19.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.412">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:19.412" status="PASS" endtime="20170817 19:34:19.412"></status>
</kw>
<status starttime="20170817 19:34:19.411" status="PASS" endtime="20170817 19:34:19.412"></status>
</kw>
<status starttime="20170817 19:34:19.410" status="PASS" endtime="20170817 19:34:19.412"></status>
</kw>
<status starttime="20170817 19:34:19.409" status="PASS" endtime="20170817 19:34:19.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.512">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:19.512">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:19.412" status="PASS" endtime="20170817 19:34:19.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.514">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:19.513" status="PASS" endtime="20170817 19:34:19.514"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.515">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:19.515" status="PASS" endtime="20170817 19:34:19.515"></status>
</kw>
<status starttime="20170817 19:34:19.514" status="PASS" endtime="20170817 19:34:19.515"></status>
</kw>
<status starttime="20170817 19:34:19.513" status="PASS" endtime="20170817 19:34:19.515"></status>
</kw>
<status starttime="20170817 19:34:19.512" status="PASS" endtime="20170817 19:34:19.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:19.516">Delete All Sessions</msg>
<status starttime="20170817 19:34:19.515" status="PASS" endtime="20170817 19:34:19.516"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.516">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:19.207" status="PASS" endtime="20170817 19:34:19.516"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:19.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:19.516" status="PASS" endtime="20170817 19:34:19.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:19.517">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:19.517">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:19.517">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:19.517" status="PASS" endtime="20170817 19:34:19.517"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.517">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:34:19.206" status="PASS" endtime="20170817 19:34:19.518"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:19.518">${host_state} = Quiesced</msg>
<status starttime="20170817 19:34:19.206" status="PASS" endtime="20170817 19:34:19.518"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:34:19.518">Running != Quiesced</msg>
<status starttime="20170817 19:34:19.518" status="FAIL" endtime="20170817 19:34:19.519"></status>
</kw>
<status starttime="20170817 19:34:18.921" status="FAIL" endtime="20170817 19:34:19.519"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.528">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:29.528" status="PASS" endtime="20170817 19:34:29.528"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.529">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:29.529" status="PASS" endtime="20170817 19:34:29.529"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.530">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:29.529" status="PASS" endtime="20170817 19:34:29.530"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.530">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:29.530" status="PASS" endtime="20170817 19:34:29.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.807">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:29.531" status="PASS" endtime="20170817 19:34:29.807"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:29.807">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:29.807">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:29.531" status="PASS" endtime="20170817 19:34:29.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.808">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:29.807" status="PASS" endtime="20170817 19:34:29.808"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:29.808" status="PASS" endtime="20170817 19:34:29.809"></status>
</kw>
<status starttime="20170817 19:34:29.527" status="PASS" endtime="20170817 19:34:29.809"></status>
</kw>
<status starttime="20170817 19:34:29.527" status="PASS" endtime="20170817 19:34:29.809"></status>
</kw>
<status starttime="20170817 19:34:29.526" status="PASS" endtime="20170817 19:34:29.809"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.810">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:34:29.809" status="PASS" endtime="20170817 19:34:29.810"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.812">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:29.811" status="PASS" endtime="20170817 19:34:29.812"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.813">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:29.813" status="PASS" endtime="20170817 19:34:29.813"></status>
</kw>
<status starttime="20170817 19:34:29.812" status="PASS" endtime="20170817 19:34:29.813"></status>
</kw>
<status starttime="20170817 19:34:29.810" status="PASS" endtime="20170817 19:34:29.813"></status>
</kw>
<status starttime="20170817 19:34:29.810" status="PASS" endtime="20170817 19:34:29.813"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.887">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:29.887">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:29.814" status="PASS" endtime="20170817 19:34:29.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.889">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:29.888" status="PASS" endtime="20170817 19:34:29.889"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.890">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:29.889" status="PASS" endtime="20170817 19:34:29.890"></status>
</kw>
<status starttime="20170817 19:34:29.889" status="PASS" endtime="20170817 19:34:29.890"></status>
</kw>
<status starttime="20170817 19:34:29.888" status="PASS" endtime="20170817 19:34:29.890"></status>
</kw>
<status starttime="20170817 19:34:29.887" status="PASS" endtime="20170817 19:34:29.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:29.890">Delete All Sessions</msg>
<status starttime="20170817 19:34:29.890" status="PASS" endtime="20170817 19:34:29.890"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:29.891">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:29.525" status="PASS" endtime="20170817 19:34:29.891"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:29.891" status="PASS" endtime="20170817 19:34:29.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.892">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:29.892">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:29.892">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:29.892" status="PASS" endtime="20170817 19:34:29.892"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:29.892">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:34:29.525" status="PASS" endtime="20170817 19:34:29.892"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:29.893">${power_state} = On</msg>
<status starttime="20170817 19:34:29.520" status="PASS" endtime="20170817 19:34:29.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:34:29.893" status="PASS" endtime="20170817 19:34:29.893"></status>
</kw>
<status starttime="20170817 19:34:29.520" status="PASS" endtime="20170817 19:34:29.893"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:29.897">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:29.897" status="PASS" endtime="20170817 19:34:29.898"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.899">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:29.898" status="PASS" endtime="20170817 19:34:29.899"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.900">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:29.899" status="PASS" endtime="20170817 19:34:29.900"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:29.901">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:29.900" status="PASS" endtime="20170817 19:34:29.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:30.076">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:29.901" status="PASS" endtime="20170817 19:34:30.076"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:30.076">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:30.076">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:29.901" status="PASS" endtime="20170817 19:34:30.077"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:30.077">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:30.077" status="PASS" endtime="20170817 19:34:30.077"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:30.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:30.077" status="PASS" endtime="20170817 19:34:30.078"></status>
</kw>
<status starttime="20170817 19:34:29.896" status="PASS" endtime="20170817 19:34:30.078"></status>
</kw>
<status starttime="20170817 19:34:29.896" status="PASS" endtime="20170817 19:34:30.078"></status>
</kw>
<status starttime="20170817 19:34:29.895" status="PASS" endtime="20170817 19:34:30.078"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:30.079">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:34:30.078" status="PASS" endtime="20170817 19:34:30.079"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:30.081">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:30.080" status="PASS" endtime="20170817 19:34:30.081"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:30.082">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:30.082" status="PASS" endtime="20170817 19:34:30.082"></status>
</kw>
<status starttime="20170817 19:34:30.081" status="PASS" endtime="20170817 19:34:30.082"></status>
</kw>
<status starttime="20170817 19:34:30.080" status="PASS" endtime="20170817 19:34:30.082"></status>
</kw>
<status starttime="20170817 19:34:30.079" status="PASS" endtime="20170817 19:34:30.082"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:30.182">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:30.182">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:30.082" status="PASS" endtime="20170817 19:34:30.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:30.184">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:30.184" status="PASS" endtime="20170817 19:34:30.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:30.185">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:30.185" status="PASS" endtime="20170817 19:34:30.185"></status>
</kw>
<status starttime="20170817 19:34:30.184" status="PASS" endtime="20170817 19:34:30.185"></status>
</kw>
<status starttime="20170817 19:34:30.183" status="PASS" endtime="20170817 19:34:30.185"></status>
</kw>
<status starttime="20170817 19:34:30.183" status="PASS" endtime="20170817 19:34:30.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:30.186">Delete All Sessions</msg>
<status starttime="20170817 19:34:30.186" status="PASS" endtime="20170817 19:34:30.186"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:30.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:29.894" status="PASS" endtime="20170817 19:34:30.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:30.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:30.186" status="PASS" endtime="20170817 19:34:30.187"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:30.187">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:30.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:30.187">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:30.187" status="PASS" endtime="20170817 19:34:30.187"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:30.188">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:34:29.894" status="PASS" endtime="20170817 19:34:30.188"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:30.188">${host_state} = Quiesced</msg>
<status starttime="20170817 19:34:29.893" status="PASS" endtime="20170817 19:34:30.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:34:30.189">Running != Quiesced</msg>
<status starttime="20170817 19:34:30.188" status="FAIL" endtime="20170817 19:34:30.189"></status>
</kw>
<status starttime="20170817 19:34:29.519" status="FAIL" endtime="20170817 19:34:30.189"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.194">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:40.194" status="PASS" endtime="20170817 19:34:40.195"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:40.195" status="PASS" endtime="20170817 19:34:40.195"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.196">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:40.196" status="PASS" endtime="20170817 19:34:40.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:40.196" status="PASS" endtime="20170817 19:34:40.197"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.449">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:40.197" status="PASS" endtime="20170817 19:34:40.449"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.449">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:40.450">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:40.197" status="PASS" endtime="20170817 19:34:40.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.450">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:40.450" status="PASS" endtime="20170817 19:34:40.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:40.451" status="PASS" endtime="20170817 19:34:40.451"></status>
</kw>
<status starttime="20170817 19:34:40.193" status="PASS" endtime="20170817 19:34:40.451"></status>
</kw>
<status starttime="20170817 19:34:40.193" status="PASS" endtime="20170817 19:34:40.451"></status>
</kw>
<status starttime="20170817 19:34:40.192" status="PASS" endtime="20170817 19:34:40.451"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.452">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:34:40.452" status="PASS" endtime="20170817 19:34:40.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.454">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:40.453" status="PASS" endtime="20170817 19:34:40.454"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.455">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:40.455" status="PASS" endtime="20170817 19:34:40.455"></status>
</kw>
<status starttime="20170817 19:34:40.454" status="PASS" endtime="20170817 19:34:40.455"></status>
</kw>
<status starttime="20170817 19:34:40.453" status="PASS" endtime="20170817 19:34:40.455"></status>
</kw>
<status starttime="20170817 19:34:40.452" status="PASS" endtime="20170817 19:34:40.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:40.530">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:40.455" status="PASS" endtime="20170817 19:34:40.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.532">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:40.532" status="PASS" endtime="20170817 19:34:40.532"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.534">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:40.534" status="PASS" endtime="20170817 19:34:40.534"></status>
</kw>
<status starttime="20170817 19:34:40.533" status="PASS" endtime="20170817 19:34:40.534"></status>
</kw>
<status starttime="20170817 19:34:40.531" status="PASS" endtime="20170817 19:34:40.534"></status>
</kw>
<status starttime="20170817 19:34:40.530" status="PASS" endtime="20170817 19:34:40.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:40.535">Delete All Sessions</msg>
<status starttime="20170817 19:34:40.535" status="PASS" endtime="20170817 19:34:40.535"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:40.191" status="PASS" endtime="20170817 19:34:40.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:40.535" status="PASS" endtime="20170817 19:34:40.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.536">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:40.536">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:40.536">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:40.536" status="PASS" endtime="20170817 19:34:40.537"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.537">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:34:40.191" status="PASS" endtime="20170817 19:34:40.537"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.537">${power_state} = On</msg>
<status starttime="20170817 19:34:40.190" status="PASS" endtime="20170817 19:34:40.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:34:40.537" status="PASS" endtime="20170817 19:34:40.538"></status>
</kw>
<status starttime="20170817 19:34:40.190" status="PASS" endtime="20170817 19:34:40.538"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.541">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:40.541" status="PASS" endtime="20170817 19:34:40.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.542">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:40.542" status="PASS" endtime="20170817 19:34:40.542"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.543">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:40.543" status="PASS" endtime="20170817 19:34:40.543"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.544">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:40.543" status="PASS" endtime="20170817 19:34:40.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.734">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:40.544" status="PASS" endtime="20170817 19:34:40.734"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.734">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:40.734">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:40.544" status="PASS" endtime="20170817 19:34:40.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.735">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:40.734" status="PASS" endtime="20170817 19:34:40.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:40.735" status="PASS" endtime="20170817 19:34:40.736"></status>
</kw>
<status starttime="20170817 19:34:40.541" status="PASS" endtime="20170817 19:34:40.736"></status>
</kw>
<status starttime="20170817 19:34:40.540" status="PASS" endtime="20170817 19:34:40.736"></status>
</kw>
<status starttime="20170817 19:34:40.540" status="PASS" endtime="20170817 19:34:40.736"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.737">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:34:40.737" status="PASS" endtime="20170817 19:34:40.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.741">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:40.739" status="PASS" endtime="20170817 19:34:40.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.742">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:40.742" status="PASS" endtime="20170817 19:34:40.742"></status>
</kw>
<status starttime="20170817 19:34:40.741" status="PASS" endtime="20170817 19:34:40.742"></status>
</kw>
<status starttime="20170817 19:34:40.738" status="PASS" endtime="20170817 19:34:40.743"></status>
</kw>
<status starttime="20170817 19:34:40.738" status="PASS" endtime="20170817 19:34:40.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.844">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:40.844">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:40.743" status="PASS" endtime="20170817 19:34:40.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.846">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:40.845" status="PASS" endtime="20170817 19:34:40.846"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.846">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:40.846" status="PASS" endtime="20170817 19:34:40.847"></status>
</kw>
<status starttime="20170817 19:34:40.846" status="PASS" endtime="20170817 19:34:40.847"></status>
</kw>
<status starttime="20170817 19:34:40.845" status="PASS" endtime="20170817 19:34:40.847"></status>
</kw>
<status starttime="20170817 19:34:40.844" status="PASS" endtime="20170817 19:34:40.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:40.847">Delete All Sessions</msg>
<status starttime="20170817 19:34:40.847" status="PASS" endtime="20170817 19:34:40.847"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.848">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:40.539" status="PASS" endtime="20170817 19:34:40.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:40.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:40.848" status="PASS" endtime="20170817 19:34:40.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:40.849">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:40.849">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:40.849">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:40.848" status="PASS" endtime="20170817 19:34:40.849"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.849">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:34:40.538" status="PASS" endtime="20170817 19:34:40.849"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:40.850">${host_state} = Quiesced</msg>
<status starttime="20170817 19:34:40.538" status="PASS" endtime="20170817 19:34:40.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:34:40.850">Running != Quiesced</msg>
<status starttime="20170817 19:34:40.850" status="FAIL" endtime="20170817 19:34:40.850"></status>
</kw>
<status starttime="20170817 19:34:40.189" status="FAIL" endtime="20170817 19:34:40.851"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:50.857">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:50.857" status="PASS" endtime="20170817 19:34:50.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:50.859">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:50.858" status="PASS" endtime="20170817 19:34:50.859"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:50.860">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:50.860" status="PASS" endtime="20170817 19:34:50.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:50.862">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:50.861" status="PASS" endtime="20170817 19:34:50.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.113">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:50.862" status="PASS" endtime="20170817 19:34:51.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.114">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:51.114">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:50.862" status="PASS" endtime="20170817 19:34:51.114"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:51.114" status="PASS" endtime="20170817 19:34:51.115"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:51.115" status="PASS" endtime="20170817 19:34:51.116"></status>
</kw>
<status starttime="20170817 19:34:50.856" status="PASS" endtime="20170817 19:34:51.116"></status>
</kw>
<status starttime="20170817 19:34:50.855" status="PASS" endtime="20170817 19:34:51.116"></status>
</kw>
<status starttime="20170817 19:34:50.855" status="PASS" endtime="20170817 19:34:51.116"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.117">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:34:51.117" status="PASS" endtime="20170817 19:34:51.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.119">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:51.118" status="PASS" endtime="20170817 19:34:51.119"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.120">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:51.120" status="PASS" endtime="20170817 19:34:51.121"></status>
</kw>
<status starttime="20170817 19:34:51.119" status="PASS" endtime="20170817 19:34:51.121"></status>
</kw>
<status starttime="20170817 19:34:51.118" status="PASS" endtime="20170817 19:34:51.121"></status>
</kw>
<status starttime="20170817 19:34:51.117" status="PASS" endtime="20170817 19:34:51.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.216">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:51.216">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:51.121" status="PASS" endtime="20170817 19:34:51.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.218">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:51.217" status="PASS" endtime="20170817 19:34:51.218"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.219">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:51.219" status="PASS" endtime="20170817 19:34:51.219"></status>
</kw>
<status starttime="20170817 19:34:51.218" status="PASS" endtime="20170817 19:34:51.219"></status>
</kw>
<status starttime="20170817 19:34:51.217" status="PASS" endtime="20170817 19:34:51.219"></status>
</kw>
<status starttime="20170817 19:34:51.216" status="PASS" endtime="20170817 19:34:51.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:51.220">Delete All Sessions</msg>
<status starttime="20170817 19:34:51.219" status="PASS" endtime="20170817 19:34:51.220"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:50.854" status="PASS" endtime="20170817 19:34:51.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:51.220" status="PASS" endtime="20170817 19:34:51.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.221">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:51.221">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:51.221">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:51.221" status="PASS" endtime="20170817 19:34:51.222"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.222">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:34:50.853" status="PASS" endtime="20170817 19:34:51.222"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.222">${power_state} = On</msg>
<status starttime="20170817 19:34:50.852" status="PASS" endtime="20170817 19:34:51.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:34:51.222" status="PASS" endtime="20170817 19:34:51.223"></status>
</kw>
<status starttime="20170817 19:34:50.852" status="PASS" endtime="20170817 19:34:51.223"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.227">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:34:51.226" status="PASS" endtime="20170817 19:34:51.227"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.228">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:34:51.227" status="PASS" endtime="20170817 19:34:51.228"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.229">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:34:51.228" status="PASS" endtime="20170817 19:34:51.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.230">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:34:51.229" status="PASS" endtime="20170817 19:34:51.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:34:51.231" status="PASS" endtime="20170817 19:34:51.408"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:34:51.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:51.230" status="PASS" endtime="20170817 19:34:51.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.409">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:51.409" status="PASS" endtime="20170817 19:34:51.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:51.409" status="PASS" endtime="20170817 19:34:51.410"></status>
</kw>
<status starttime="20170817 19:34:51.226" status="PASS" endtime="20170817 19:34:51.410"></status>
</kw>
<status starttime="20170817 19:34:51.225" status="PASS" endtime="20170817 19:34:51.410"></status>
</kw>
<status starttime="20170817 19:34:51.224" status="PASS" endtime="20170817 19:34:51.410"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.411">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:34:51.410" status="PASS" endtime="20170817 19:34:51.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.413">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:51.412" status="PASS" endtime="20170817 19:34:51.413"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.414">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:34:51.413" status="PASS" endtime="20170817 19:34:51.414"></status>
</kw>
<status starttime="20170817 19:34:51.413" status="PASS" endtime="20170817 19:34:51.414"></status>
</kw>
<status starttime="20170817 19:34:51.411" status="PASS" endtime="20170817 19:34:51.414"></status>
</kw>
<status starttime="20170817 19:34:51.411" status="PASS" endtime="20170817 19:34:51.414"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.501">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:34:51.501">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:51.414" status="PASS" endtime="20170817 19:34:51.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.503">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:51.503" status="PASS" endtime="20170817 19:34:51.503"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.505">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:34:51.504" status="PASS" endtime="20170817 19:34:51.505"></status>
</kw>
<status starttime="20170817 19:34:51.503" status="PASS" endtime="20170817 19:34:51.505"></status>
</kw>
<status starttime="20170817 19:34:51.502" status="PASS" endtime="20170817 19:34:51.505"></status>
</kw>
<status starttime="20170817 19:34:51.502" status="PASS" endtime="20170817 19:34:51.505"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:34:51.505">Delete All Sessions</msg>
<status starttime="20170817 19:34:51.505" status="PASS" endtime="20170817 19:34:51.505"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.506">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:34:51.224" status="PASS" endtime="20170817 19:34:51.506"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:34:51.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:34:51.506" status="PASS" endtime="20170817 19:34:51.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:34:51.507">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:34:51.507">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:34:51.507">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:34:51.507" status="PASS" endtime="20170817 19:34:51.507"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.507">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:34:51.223" status="PASS" endtime="20170817 19:34:51.507"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:34:51.508">${host_state} = Quiesced</msg>
<status starttime="20170817 19:34:51.223" status="PASS" endtime="20170817 19:34:51.508"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:34:51.508">Running != Quiesced</msg>
<status starttime="20170817 19:34:51.508" status="FAIL" endtime="20170817 19:34:51.508"></status>
</kw>
<status starttime="20170817 19:34:50.851" status="FAIL" endtime="20170817 19:34:51.508"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.527">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:01.526" status="PASS" endtime="20170817 19:35:01.528"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.529">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:01.528" status="PASS" endtime="20170817 19:35:01.529"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.529">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:01.529" status="PASS" endtime="20170817 19:35:01.529"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.530">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:01.530" status="PASS" endtime="20170817 19:35:01.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.718">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:01.531" status="PASS" endtime="20170817 19:35:01.718"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:01.719">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:01.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:01.531" status="PASS" endtime="20170817 19:35:01.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:01.719" status="PASS" endtime="20170817 19:35:01.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:01.720" status="PASS" endtime="20170817 19:35:01.721"></status>
</kw>
<status starttime="20170817 19:35:01.526" status="PASS" endtime="20170817 19:35:01.721"></status>
</kw>
<status starttime="20170817 19:35:01.525" status="PASS" endtime="20170817 19:35:01.721"></status>
</kw>
<status starttime="20170817 19:35:01.524" status="PASS" endtime="20170817 19:35:01.721"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.722">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:35:01.721" status="PASS" endtime="20170817 19:35:01.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.724">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:01.723" status="PASS" endtime="20170817 19:35:01.724"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.725">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:01.725" status="PASS" endtime="20170817 19:35:01.725"></status>
</kw>
<status starttime="20170817 19:35:01.724" status="PASS" endtime="20170817 19:35:01.725"></status>
</kw>
<status starttime="20170817 19:35:01.723" status="PASS" endtime="20170817 19:35:01.725"></status>
</kw>
<status starttime="20170817 19:35:01.722" status="PASS" endtime="20170817 19:35:01.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.798">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:01.798">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:01.726" status="PASS" endtime="20170817 19:35:01.798"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.801">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:01.800" status="PASS" endtime="20170817 19:35:01.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.802">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:01.802" status="PASS" endtime="20170817 19:35:01.802"></status>
</kw>
<status starttime="20170817 19:35:01.801" status="PASS" endtime="20170817 19:35:01.803"></status>
</kw>
<status starttime="20170817 19:35:01.799" status="PASS" endtime="20170817 19:35:01.803"></status>
</kw>
<status starttime="20170817 19:35:01.799" status="PASS" endtime="20170817 19:35:01.803"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:01.803">Delete All Sessions</msg>
<status starttime="20170817 19:35:01.803" status="PASS" endtime="20170817 19:35:01.804"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:01.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:01.523" status="PASS" endtime="20170817 19:35:01.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:01.804" status="PASS" endtime="20170817 19:35:01.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.805">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:01.806">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:01.806">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:01.805" status="PASS" endtime="20170817 19:35:01.806"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:01.806">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:35:01.522" status="PASS" endtime="20170817 19:35:01.806"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:01.807">${power_state} = On</msg>
<status starttime="20170817 19:35:01.522" status="PASS" endtime="20170817 19:35:01.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:35:01.807" status="PASS" endtime="20170817 19:35:01.807"></status>
</kw>
<status starttime="20170817 19:35:01.521" status="PASS" endtime="20170817 19:35:01.808"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:01.813">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:01.812" status="PASS" endtime="20170817 19:35:01.815"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:01.815" status="PASS" endtime="20170817 19:35:01.815"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.816">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:01.816" status="PASS" endtime="20170817 19:35:01.816"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:01.817">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:01.817" status="PASS" endtime="20170817 19:35:01.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:02.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:01.818" status="PASS" endtime="20170817 19:35:02.049"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:02.049">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:02.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:01.818" status="PASS" endtime="20170817 19:35:02.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:02.051">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:02.050" status="PASS" endtime="20170817 19:35:02.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:02.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:02.051" status="PASS" endtime="20170817 19:35:02.052"></status>
</kw>
<status starttime="20170817 19:35:01.811" status="PASS" endtime="20170817 19:35:02.052"></status>
</kw>
<status starttime="20170817 19:35:01.811" status="PASS" endtime="20170817 19:35:02.053"></status>
</kw>
<status starttime="20170817 19:35:01.810" status="PASS" endtime="20170817 19:35:02.053"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:02.054">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:35:02.053" status="PASS" endtime="20170817 19:35:02.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:02.057">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:02.056" status="PASS" endtime="20170817 19:35:02.057"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:02.059">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:02.058" status="PASS" endtime="20170817 19:35:02.059"></status>
</kw>
<status starttime="20170817 19:35:02.057" status="PASS" endtime="20170817 19:35:02.059"></status>
</kw>
<status starttime="20170817 19:35:02.055" status="PASS" endtime="20170817 19:35:02.059"></status>
</kw>
<status starttime="20170817 19:35:02.054" status="PASS" endtime="20170817 19:35:02.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:02.229">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:02.229">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:02.060" status="PASS" endtime="20170817 19:35:02.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:02.232">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:02.231" status="PASS" endtime="20170817 19:35:02.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:02.233">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:02.232" status="PASS" endtime="20170817 19:35:02.233"></status>
</kw>
<status starttime="20170817 19:35:02.232" status="PASS" endtime="20170817 19:35:02.233"></status>
</kw>
<status starttime="20170817 19:35:02.230" status="PASS" endtime="20170817 19:35:02.233"></status>
</kw>
<status starttime="20170817 19:35:02.230" status="PASS" endtime="20170817 19:35:02.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:02.233">Delete All Sessions</msg>
<status starttime="20170817 19:35:02.233" status="PASS" endtime="20170817 19:35:02.234"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:02.234">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:01.809" status="PASS" endtime="20170817 19:35:02.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:02.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:02.234" status="PASS" endtime="20170817 19:35:02.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:02.235">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:02.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:02.235">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:02.235" status="PASS" endtime="20170817 19:35:02.235"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:02.235">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:35:01.808" status="PASS" endtime="20170817 19:35:02.235"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:02.236">${host_state} = Quiesced</msg>
<status starttime="20170817 19:35:01.808" status="PASS" endtime="20170817 19:35:02.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:35:02.236">Running != Quiesced</msg>
<status starttime="20170817 19:35:02.236" status="FAIL" endtime="20170817 19:35:02.237"></status>
</kw>
<status starttime="20170817 19:35:01.520" status="FAIL" endtime="20170817 19:35:02.237"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.243">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:12.243" status="PASS" endtime="20170817 19:35:12.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.244">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:12.244" status="PASS" endtime="20170817 19:35:12.244"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.245">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:12.244" status="PASS" endtime="20170817 19:35:12.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.245">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:12.245" status="PASS" endtime="20170817 19:35:12.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.454">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:12.246" status="PASS" endtime="20170817 19:35:12.454"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.454">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:12.454">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:12.246" status="PASS" endtime="20170817 19:35:12.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.455">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:12.455" status="PASS" endtime="20170817 19:35:12.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:12.456" status="PASS" endtime="20170817 19:35:12.457"></status>
</kw>
<status starttime="20170817 19:35:12.242" status="PASS" endtime="20170817 19:35:12.457"></status>
</kw>
<status starttime="20170817 19:35:12.242" status="PASS" endtime="20170817 19:35:12.457"></status>
</kw>
<status starttime="20170817 19:35:12.241" status="PASS" endtime="20170817 19:35:12.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.458">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:35:12.457" status="PASS" endtime="20170817 19:35:12.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.461">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:12.460" status="PASS" endtime="20170817 19:35:12.461"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.467">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:12.462" status="PASS" endtime="20170817 19:35:12.467"></status>
</kw>
<status starttime="20170817 19:35:12.461" status="PASS" endtime="20170817 19:35:12.467"></status>
</kw>
<status starttime="20170817 19:35:12.459" status="PASS" endtime="20170817 19:35:12.467"></status>
</kw>
<status starttime="20170817 19:35:12.458" status="PASS" endtime="20170817 19:35:12.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.551">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:12.551">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:12.468" status="PASS" endtime="20170817 19:35:12.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.555">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:12.554" status="PASS" endtime="20170817 19:35:12.555"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.556">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:12.555" status="PASS" endtime="20170817 19:35:12.556"></status>
</kw>
<status starttime="20170817 19:35:12.555" status="PASS" endtime="20170817 19:35:12.556"></status>
</kw>
<status starttime="20170817 19:35:12.553" status="PASS" endtime="20170817 19:35:12.556"></status>
</kw>
<status starttime="20170817 19:35:12.552" status="PASS" endtime="20170817 19:35:12.556"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:12.557">Delete All Sessions</msg>
<status starttime="20170817 19:35:12.557" status="PASS" endtime="20170817 19:35:12.557"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:12.240" status="PASS" endtime="20170817 19:35:12.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:12.558" status="PASS" endtime="20170817 19:35:12.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.559">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:12.559">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:12.559">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:12.559" status="PASS" endtime="20170817 19:35:12.559"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.559">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:35:12.239" status="PASS" endtime="20170817 19:35:12.560"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.560">${power_state} = On</msg>
<status starttime="20170817 19:35:12.239" status="PASS" endtime="20170817 19:35:12.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:35:12.561" status="PASS" endtime="20170817 19:35:12.561"></status>
</kw>
<status starttime="20170817 19:35:12.238" status="PASS" endtime="20170817 19:35:12.561"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.566">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:12.566" status="PASS" endtime="20170817 19:35:12.567"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.568">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:12.567" status="PASS" endtime="20170817 19:35:12.568"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.569">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:12.568" status="PASS" endtime="20170817 19:35:12.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:12.569" status="PASS" endtime="20170817 19:35:12.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.845">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:12.571" status="PASS" endtime="20170817 19:35:12.845"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:12.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:12.570" status="PASS" endtime="20170817 19:35:12.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.846">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:12.846" status="PASS" endtime="20170817 19:35:12.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:12.847" status="PASS" endtime="20170817 19:35:12.848"></status>
</kw>
<status starttime="20170817 19:35:12.565" status="PASS" endtime="20170817 19:35:12.848"></status>
</kw>
<status starttime="20170817 19:35:12.564" status="PASS" endtime="20170817 19:35:12.848"></status>
</kw>
<status starttime="20170817 19:35:12.564" status="PASS" endtime="20170817 19:35:12.848"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.849">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:35:12.848" status="PASS" endtime="20170817 19:35:12.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.852">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:12.851" status="PASS" endtime="20170817 19:35:12.852"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.853">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:12.853" status="PASS" endtime="20170817 19:35:12.853"></status>
</kw>
<status starttime="20170817 19:35:12.852" status="PASS" endtime="20170817 19:35:12.854"></status>
</kw>
<status starttime="20170817 19:35:12.850" status="PASS" endtime="20170817 19:35:12.854"></status>
</kw>
<status starttime="20170817 19:35:12.849" status="PASS" endtime="20170817 19:35:12.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.948">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:12.948">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:12.854" status="PASS" endtime="20170817 19:35:12.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.951">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:12.950" status="PASS" endtime="20170817 19:35:12.951"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.952">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:12.952" status="PASS" endtime="20170817 19:35:12.952"></status>
</kw>
<status starttime="20170817 19:35:12.951" status="PASS" endtime="20170817 19:35:12.952"></status>
</kw>
<status starttime="20170817 19:35:12.950" status="PASS" endtime="20170817 19:35:12.952"></status>
</kw>
<status starttime="20170817 19:35:12.949" status="PASS" endtime="20170817 19:35:12.952"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:12.953">Delete All Sessions</msg>
<status starttime="20170817 19:35:12.952" status="PASS" endtime="20170817 19:35:12.953"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.953">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:12.563" status="PASS" endtime="20170817 19:35:12.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:12.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:12.953" status="PASS" endtime="20170817 19:35:12.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:12.954">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:12.954">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:12.954">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:12.954" status="PASS" endtime="20170817 19:35:12.954"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.955">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:35:12.562" status="PASS" endtime="20170817 19:35:12.955"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:12.955">${host_state} = Quiesced</msg>
<status starttime="20170817 19:35:12.561" status="PASS" endtime="20170817 19:35:12.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:35:12.956">Running != Quiesced</msg>
<status starttime="20170817 19:35:12.955" status="FAIL" endtime="20170817 19:35:12.956"></status>
</kw>
<status starttime="20170817 19:35:12.237" status="FAIL" endtime="20170817 19:35:12.956"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:22.962">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:22.961" status="PASS" endtime="20170817 19:35:22.962"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:22.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:22.962" status="PASS" endtime="20170817 19:35:22.963"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:22.963">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:22.963" status="PASS" endtime="20170817 19:35:22.963"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:22.964">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:22.964" status="PASS" endtime="20170817 19:35:22.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.151">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:22.965" status="PASS" endtime="20170817 19:35:23.151"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.151">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:23.151">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:22.964" status="PASS" endtime="20170817 19:35:23.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.152">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:23.151" status="PASS" endtime="20170817 19:35:23.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:23.152" status="PASS" endtime="20170817 19:35:23.152"></status>
</kw>
<status starttime="20170817 19:35:22.960" status="PASS" endtime="20170817 19:35:23.153"></status>
</kw>
<status starttime="20170817 19:35:22.960" status="PASS" endtime="20170817 19:35:23.153"></status>
</kw>
<status starttime="20170817 19:35:22.959" status="PASS" endtime="20170817 19:35:23.153"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.153">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:35:23.153" status="PASS" endtime="20170817 19:35:23.153"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.157">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:23.155" status="PASS" endtime="20170817 19:35:23.157"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.158">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:23.157" status="PASS" endtime="20170817 19:35:23.158"></status>
</kw>
<status starttime="20170817 19:35:23.157" status="PASS" endtime="20170817 19:35:23.158"></status>
</kw>
<status starttime="20170817 19:35:23.154" status="PASS" endtime="20170817 19:35:23.158"></status>
</kw>
<status starttime="20170817 19:35:23.154" status="PASS" endtime="20170817 19:35:23.158"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:23.236">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:23.158" status="PASS" endtime="20170817 19:35:23.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.238">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:23.237" status="PASS" endtime="20170817 19:35:23.238"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.239">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:23.239" status="PASS" endtime="20170817 19:35:23.240"></status>
</kw>
<status starttime="20170817 19:35:23.238" status="PASS" endtime="20170817 19:35:23.240"></status>
</kw>
<status starttime="20170817 19:35:23.237" status="PASS" endtime="20170817 19:35:23.240"></status>
</kw>
<status starttime="20170817 19:35:23.237" status="PASS" endtime="20170817 19:35:23.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:23.240">Delete All Sessions</msg>
<status starttime="20170817 19:35:23.240" status="PASS" endtime="20170817 19:35:23.240"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.241">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:22.958" status="PASS" endtime="20170817 19:35:23.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:23.241" status="PASS" endtime="20170817 19:35:23.241"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.242">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:23.242">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:23.242">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:23.241" status="PASS" endtime="20170817 19:35:23.242"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.242">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:35:22.958" status="PASS" endtime="20170817 19:35:23.242"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.243">${power_state} = On</msg>
<status starttime="20170817 19:35:22.957" status="PASS" endtime="20170817 19:35:23.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:35:23.243" status="PASS" endtime="20170817 19:35:23.243"></status>
</kw>
<status starttime="20170817 19:35:22.957" status="PASS" endtime="20170817 19:35:23.243"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.247">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:23.246" status="PASS" endtime="20170817 19:35:23.247"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:23.247" status="PASS" endtime="20170817 19:35:23.248"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.248">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:23.248" status="PASS" endtime="20170817 19:35:23.248"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.249">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:23.249" status="PASS" endtime="20170817 19:35:23.249"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:23.250" status="PASS" endtime="20170817 19:35:23.425"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.425">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:23.425">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:23.249" status="PASS" endtime="20170817 19:35:23.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.425">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:23.425" status="PASS" endtime="20170817 19:35:23.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:23.426" status="PASS" endtime="20170817 19:35:23.426"></status>
</kw>
<status starttime="20170817 19:35:23.246" status="PASS" endtime="20170817 19:35:23.426"></status>
</kw>
<status starttime="20170817 19:35:23.245" status="PASS" endtime="20170817 19:35:23.426"></status>
</kw>
<status starttime="20170817 19:35:23.245" status="PASS" endtime="20170817 19:35:23.426"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.427">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:35:23.427" status="PASS" endtime="20170817 19:35:23.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.429">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:23.428" status="PASS" endtime="20170817 19:35:23.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.430">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:23.430" status="PASS" endtime="20170817 19:35:23.431"></status>
</kw>
<status starttime="20170817 19:35:23.430" status="PASS" endtime="20170817 19:35:23.431"></status>
</kw>
<status starttime="20170817 19:35:23.428" status="PASS" endtime="20170817 19:35:23.431"></status>
</kw>
<status starttime="20170817 19:35:23.427" status="PASS" endtime="20170817 19:35:23.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.531">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:23.531">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:23.431" status="PASS" endtime="20170817 19:35:23.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.533">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:23.533" status="PASS" endtime="20170817 19:35:23.533"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.534">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:23.534" status="PASS" endtime="20170817 19:35:23.534"></status>
</kw>
<status starttime="20170817 19:35:23.533" status="PASS" endtime="20170817 19:35:23.534"></status>
</kw>
<status starttime="20170817 19:35:23.532" status="PASS" endtime="20170817 19:35:23.534"></status>
</kw>
<status starttime="20170817 19:35:23.532" status="PASS" endtime="20170817 19:35:23.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:23.535">Delete All Sessions</msg>
<status starttime="20170817 19:35:23.535" status="PASS" endtime="20170817 19:35:23.535"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:23.244" status="PASS" endtime="20170817 19:35:23.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:23.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:23.535" status="PASS" endtime="20170817 19:35:23.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:23.536">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:23.536">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:23.536">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:23.536" status="PASS" endtime="20170817 19:35:23.537"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.538">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:35:23.244" status="PASS" endtime="20170817 19:35:23.538"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:23.539">${host_state} = Quiesced</msg>
<status starttime="20170817 19:35:23.243" status="PASS" endtime="20170817 19:35:23.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:35:23.539">Running != Quiesced</msg>
<status starttime="20170817 19:35:23.539" status="FAIL" endtime="20170817 19:35:23.539"></status>
</kw>
<status starttime="20170817 19:35:22.956" status="FAIL" endtime="20170817 19:35:23.539"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.544">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:33.544" status="PASS" endtime="20170817 19:35:33.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.545">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:33.545" status="PASS" endtime="20170817 19:35:33.546"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.546">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:33.546" status="PASS" endtime="20170817 19:35:33.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.547">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:33.546" status="PASS" endtime="20170817 19:35:33.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:33.548" status="PASS" endtime="20170817 19:35:33.804"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:33.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:33.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:33.548" status="PASS" endtime="20170817 19:35:33.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:33.805" status="PASS" endtime="20170817 19:35:33.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:33.805" status="PASS" endtime="20170817 19:35:33.806"></status>
</kw>
<status starttime="20170817 19:35:33.544" status="PASS" endtime="20170817 19:35:33.806"></status>
</kw>
<status starttime="20170817 19:35:33.543" status="PASS" endtime="20170817 19:35:33.806"></status>
</kw>
<status starttime="20170817 19:35:33.543" status="PASS" endtime="20170817 19:35:33.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.807">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:35:33.806" status="PASS" endtime="20170817 19:35:33.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.809">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:33.808" status="PASS" endtime="20170817 19:35:33.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.810">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:33.810" status="PASS" endtime="20170817 19:35:33.810"></status>
</kw>
<status starttime="20170817 19:35:33.809" status="PASS" endtime="20170817 19:35:33.810"></status>
</kw>
<status starttime="20170817 19:35:33.807" status="PASS" endtime="20170817 19:35:33.810"></status>
</kw>
<status starttime="20170817 19:35:33.807" status="PASS" endtime="20170817 19:35:33.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.873">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:33.874">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:33.811" status="PASS" endtime="20170817 19:35:33.874"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.875">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:33.875" status="PASS" endtime="20170817 19:35:33.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.876">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:33.876" status="PASS" endtime="20170817 19:35:33.876"></status>
</kw>
<status starttime="20170817 19:35:33.876" status="PASS" endtime="20170817 19:35:33.877"></status>
</kw>
<status starttime="20170817 19:35:33.874" status="PASS" endtime="20170817 19:35:33.877"></status>
</kw>
<status starttime="20170817 19:35:33.874" status="PASS" endtime="20170817 19:35:33.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:33.877">Delete All Sessions</msg>
<status starttime="20170817 19:35:33.877" status="PASS" endtime="20170817 19:35:33.877"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:33.877">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:33.542" status="PASS" endtime="20170817 19:35:33.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:33.878" status="PASS" endtime="20170817 19:35:33.878"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.879">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:33.879">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:33.879">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:33.878" status="PASS" endtime="20170817 19:35:33.879"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:33.879">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:35:33.541" status="PASS" endtime="20170817 19:35:33.879"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:33.879">${power_state} = On</msg>
<status starttime="20170817 19:35:33.541" status="PASS" endtime="20170817 19:35:33.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:35:33.880" status="PASS" endtime="20170817 19:35:33.880"></status>
</kw>
<status starttime="20170817 19:35:33.541" status="PASS" endtime="20170817 19:35:33.880"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:33.884">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:33.884" status="PASS" endtime="20170817 19:35:33.885"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.885">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:33.885" status="PASS" endtime="20170817 19:35:33.885"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.886">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:33.885" status="PASS" endtime="20170817 19:35:33.886"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:33.886">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:33.886" status="PASS" endtime="20170817 19:35:33.886"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.088">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:33.887" status="PASS" endtime="20170817 19:35:34.088"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.088">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:34.088">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:33.887" status="PASS" endtime="20170817 19:35:34.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.089">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:34.088" status="PASS" endtime="20170817 19:35:34.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.089">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:34.089" status="PASS" endtime="20170817 19:35:34.090"></status>
</kw>
<status starttime="20170817 19:35:33.883" status="PASS" endtime="20170817 19:35:34.090"></status>
</kw>
<status starttime="20170817 19:35:33.882" status="PASS" endtime="20170817 19:35:34.090"></status>
</kw>
<status starttime="20170817 19:35:33.882" status="PASS" endtime="20170817 19:35:34.090"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.091">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:35:34.090" status="PASS" endtime="20170817 19:35:34.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.093">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:34.092" status="PASS" endtime="20170817 19:35:34.093"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.093">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:34.093" status="PASS" endtime="20170817 19:35:34.094"></status>
</kw>
<status starttime="20170817 19:35:34.093" status="PASS" endtime="20170817 19:35:34.094"></status>
</kw>
<status starttime="20170817 19:35:34.091" status="PASS" endtime="20170817 19:35:34.094"></status>
</kw>
<status starttime="20170817 19:35:34.091" status="PASS" endtime="20170817 19:35:34.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.183">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:34.183">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:34.094" status="PASS" endtime="20170817 19:35:34.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.185">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:34.184" status="PASS" endtime="20170817 19:35:34.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.186">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:34.186" status="PASS" endtime="20170817 19:35:34.186"></status>
</kw>
<status starttime="20170817 19:35:34.185" status="PASS" endtime="20170817 19:35:34.186"></status>
</kw>
<status starttime="20170817 19:35:34.184" status="PASS" endtime="20170817 19:35:34.186"></status>
</kw>
<status starttime="20170817 19:35:34.183" status="PASS" endtime="20170817 19:35:34.187"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:34.187">Delete All Sessions</msg>
<status starttime="20170817 19:35:34.187" status="PASS" endtime="20170817 19:35:34.187"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.187">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:33.881" status="PASS" endtime="20170817 19:35:34.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:34.187" status="PASS" endtime="20170817 19:35:34.188"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.189">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:34.189">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:34.189">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:34.188" status="PASS" endtime="20170817 19:35:34.189"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.189">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:35:33.881" status="PASS" endtime="20170817 19:35:34.189"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.189">${host_state} = Quiesced</msg>
<status starttime="20170817 19:35:33.880" status="PASS" endtime="20170817 19:35:34.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:35:34.190">Running != Quiesced</msg>
<status starttime="20170817 19:35:34.190" status="FAIL" endtime="20170817 19:35:34.190"></status>
</kw>
<status starttime="20170817 19:35:33.540" status="FAIL" endtime="20170817 19:35:34.190"></status>
</kw>
<msg level="FAIL" timestamp="20170817 19:35:34.190">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status starttime="20170817 19:25:30.604" status="FAIL" endtime="20170817 19:35:34.190"></status>
</kw>
<status starttime="20170817 19:25:29.524" status="FAIL" endtime="20170817 19:35:34.191"></status>
</kw>
<status starttime="20170817 19:25:22.301" status="FAIL" endtime="20170817 19:35:34.191"></status>
</kw>
<status starttime="20170817 19:25:22.301" status="FAIL" endtime="20170817 19:35:34.191"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.196">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:34.195" status="PASS" endtime="20170817 19:35:34.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.197">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:34.196" status="PASS" endtime="20170817 19:35:34.197"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.197">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:34.197" status="PASS" endtime="20170817 19:35:34.197"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.198">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:34.198" status="PASS" endtime="20170817 19:35:34.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.401">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:34.199" status="PASS" endtime="20170817 19:35:34.401"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.401">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:34.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:34.198" status="PASS" endtime="20170817 19:35:34.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.402">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:34.402" status="PASS" endtime="20170817 19:35:34.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:34.402" status="PASS" endtime="20170817 19:35:34.403"></status>
</kw>
<status starttime="20170817 19:35:34.195" status="PASS" endtime="20170817 19:35:34.403"></status>
</kw>
<status starttime="20170817 19:35:34.195" status="PASS" endtime="20170817 19:35:34.403"></status>
</kw>
<status starttime="20170817 19:35:34.194" status="PASS" endtime="20170817 19:35:34.403"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.404">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:35:34.403" status="PASS" endtime="20170817 19:35:34.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.406">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:34.405" status="PASS" endtime="20170817 19:35:34.406"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.407">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:34.407" status="PASS" endtime="20170817 19:35:34.407"></status>
</kw>
<status starttime="20170817 19:35:34.406" status="PASS" endtime="20170817 19:35:34.407"></status>
</kw>
<status starttime="20170817 19:35:34.404" status="PASS" endtime="20170817 19:35:34.407"></status>
</kw>
<status starttime="20170817 19:35:34.404" status="PASS" endtime="20170817 19:35:34.407"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:34.509">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:34.407" status="PASS" endtime="20170817 19:35:34.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.512">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:34.511" status="PASS" endtime="20170817 19:35:34.512"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.513">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:34.513" status="PASS" endtime="20170817 19:35:34.513"></status>
</kw>
<status starttime="20170817 19:35:34.512" status="PASS" endtime="20170817 19:35:34.513"></status>
</kw>
<status starttime="20170817 19:35:34.510" status="PASS" endtime="20170817 19:35:34.513"></status>
</kw>
<status starttime="20170817 19:35:34.509" status="PASS" endtime="20170817 19:35:34.513"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:34.514">Delete All Sessions</msg>
<status starttime="20170817 19:35:34.514" status="PASS" endtime="20170817 19:35:34.514"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.514">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:34.193" status="PASS" endtime="20170817 19:35:34.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:34.515" status="PASS" endtime="20170817 19:35:34.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.516">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:34.516">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:34.516">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:34.516" status="PASS" endtime="20170817 19:35:34.516"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.517">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:35:34.193" status="PASS" endtime="20170817 19:35:34.517"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.517">${host_state} = Quiesced</msg>
<status starttime="20170817 19:35:34.192" status="PASS" endtime="20170817 19:35:34.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170817 19:35:34.518" status="PASS" endtime="20170817 19:35:34.519"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.519">${status} = True</msg>
<status starttime="20170817 19:35:34.518" status="PASS" endtime="20170817 19:35:34.519"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:34.519">${status} = True</msg>
<status starttime="20170817 19:35:34.192" status="PASS" endtime="20170817 19:35:34.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:34.558">Length is 12</msg>
<status starttime="20170817 19:35:34.558" status="PASS" endtime="20170817 19:35:34.558"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:34.564">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 19:35:37.567">${RC} = 0</msg>
<msg level="INFO" timestamp="20170817 19:35:37.567">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.793 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.764 ms
64 bytes from 9.41.166.16...</msg>
<status starttime="20170817 19:35:34.559" status="PASS" endtime="20170817 19:35:37.567"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:37.570">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.793 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.764 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.577 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.585 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.577/0.679/0.793/0.104 ms</msg>
<status starttime="20170817 19:35:37.569" status="PASS" endtime="20170817 19:35:37.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170817 19:35:37.571" status="PASS" endtime="20170817 19:35:37.571"></status>
</kw>
<status starttime="20170817 19:35:34.557" status="PASS" endtime="20170817 19:35:37.571"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.589">${cur_time} = 2017-08-17 19:35:37:588786</msg>
<status starttime="20170817 19:35:37.589" status="PASS" endtime="20170817 19:35:37.589"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.590">${cur_time} = 20170817193537588786</msg>
<status starttime="20170817 19:35:37.589" status="PASS" endtime="20170817 19:35:37.590"></status>
</kw>
<status starttime="20170817 19:35:37.588" status="PASS" endtime="20170817 19:35:37.590"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:37.590">${FFDC_TIME} = 20170817193537588786</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.602">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170817 19:35:37.602" status="PASS" endtime="20170817 19:35:37.602"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.603">${suite_name} = 20170817193537588786_TestsTestBasicPoweron</msg>
<status starttime="20170817 19:35:37.602" status="PASS" endtime="20170817 19:35:37.603"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.603">${test_name} = PowerOnTest</msg>
<status starttime="20170817 19:35:37.603" status="PASS" endtime="20170817 19:35:37.603"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.604">${test_name} = 20170817193537588786_PowerOnTest</msg>
<status starttime="20170817 19:35:37.604" status="PASS" endtime="20170817 19:35:37.604"></status>
</kw>
<status starttime="20170817 19:35:37.600" status="PASS" endtime="20170817 19:35:37.604"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:37.605">${FFDC_DIR_PATH} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170817 19:35:37.605">${FFDC_PREFIX} = 20170817193537588786_</msg>
<msg level="INFO" timestamp="20170817 19:35:37.636">${LOG_PREFIX} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.637">Created directory '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.636" status="PASS" endtime="20170817 19:35:37.637"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:37.644">${FFDC_FILE_PATH} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.675">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.675" status="PASS" endtime="20170817 19:35:37.675"></status>
</kw>
<status starttime="20170817 19:35:37.674" status="PASS" endtime="20170817 19:35:37.675"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.676">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.676" status="PASS" endtime="20170817 19:35:37.677"></status>
</kw>
<status starttime="20170817 19:35:37.675" status="PASS" endtime="20170817 19:35:37.677"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.678">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.677" status="PASS" endtime="20170817 19:35:37.678"></status>
</kw>
<status starttime="20170817 19:35:37.677" status="PASS" endtime="20170817 19:35:37.678"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.680">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.679" status="PASS" endtime="20170817 19:35:37.680"></status>
</kw>
<status starttime="20170817 19:35:37.679" status="PASS" endtime="20170817 19:35:37.680"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.683">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.682" status="PASS" endtime="20170817 19:35:37.683"></status>
</kw>
<status starttime="20170817 19:35:37.680" status="PASS" endtime="20170817 19:35:37.683"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.684">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.684" status="PASS" endtime="20170817 19:35:37.684"></status>
</kw>
<status starttime="20170817 19:35:37.683" status="PASS" endtime="20170817 19:35:37.684"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.685">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.685" status="PASS" endtime="20170817 19:35:37.686"></status>
</kw>
<status starttime="20170817 19:35:37.685" status="PASS" endtime="20170817 19:35:37.686"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.687">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.686" status="PASS" endtime="20170817 19:35:37.687"></status>
</kw>
<status starttime="20170817 19:35:37.686" status="PASS" endtime="20170817 19:35:37.687"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.689">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.688" status="PASS" endtime="20170817 19:35:37.689"></status>
</kw>
<status starttime="20170817 19:35:37.687" status="PASS" endtime="20170817 19:35:37.689"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.691">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.691" status="PASS" endtime="20170817 19:35:37.692"></status>
</kw>
<status starttime="20170817 19:35:37.690" status="PASS" endtime="20170817 19:35:37.692"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.693">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.693" status="PASS" endtime="20170817 19:35:37.693"></status>
</kw>
<status starttime="20170817 19:35:37.692" status="PASS" endtime="20170817 19:35:37.694"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.695">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.695" status="PASS" endtime="20170817 19:35:37.695"></status>
</kw>
<status starttime="20170817 19:35:37.694" status="PASS" endtime="20170817 19:35:37.695"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.697">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.697" status="PASS" endtime="20170817 19:35:37.697"></status>
</kw>
<status starttime="20170817 19:35:37.696" status="PASS" endtime="20170817 19:35:37.697"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.747">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:37.748">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170817 19:35:37.827">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 19:35:37.844">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170817 19:35:37.844">${stderr} = </msg>
<msg level="INFO" timestamp="20170817 19:35:37.844">${rc} = 0</msg>
<status starttime="20170817 19:35:37.698" status="PASS" endtime="20170817 19:35:37.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:37.845">Length is 0</msg>
<status starttime="20170817 19:35:37.845" status="PASS" endtime="20170817 19:35:37.845"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:37.845">Length is 11</msg>
<status starttime="20170817 19:35:37.845" status="PASS" endtime="20170817 19:35:37.846"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:37.846">${model_name} = Witherspoon</msg>
<status starttime="20170817 19:35:37.698" status="PASS" endtime="20170817 19:35:37.846"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.847">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.847" status="PASS" endtime="20170817 19:35:37.847"></status>
</kw>
<status starttime="20170817 19:35:37.846" status="PASS" endtime="20170817 19:35:37.847"></status>
</kw>
<status starttime="20170817 19:35:37.689" status="PASS" endtime="20170817 19:35:37.847"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.849">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.848" status="PASS" endtime="20170817 19:35:37.849"></status>
</kw>
<status starttime="20170817 19:35:37.848" status="PASS" endtime="20170817 19:35:37.849"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.849">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170817 19:35:37.849" status="PASS" endtime="20170817 19:35:37.849"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.851">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.851" status="PASS" endtime="20170817 19:35:37.851"></status>
</kw>
<status starttime="20170817 19:35:37.850" status="PASS" endtime="20170817 19:35:37.852"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.853">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.852" status="PASS" endtime="20170817 19:35:37.853"></status>
</kw>
<status starttime="20170817 19:35:37.852" status="PASS" endtime="20170817 19:35:37.853"></status>
</kw>
<status starttime="20170817 19:35:37.850" status="PASS" endtime="20170817 19:35:37.853"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.854">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.854" status="PASS" endtime="20170817 19:35:37.854"></status>
</kw>
<status starttime="20170817 19:35:37.853" status="PASS" endtime="20170817 19:35:37.854"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.855">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.855" status="PASS" endtime="20170817 19:35:37.855"></status>
</kw>
<status starttime="20170817 19:35:37.854" status="PASS" endtime="20170817 19:35:37.856"></status>
</kw>
<status starttime="20170817 19:35:37.853" status="PASS" endtime="20170817 19:35:37.856"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.859">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.858" status="PASS" endtime="20170817 19:35:37.859"></status>
</kw>
<status starttime="20170817 19:35:37.856" status="PASS" endtime="20170817 19:35:37.859"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.860">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.860" status="PASS" endtime="20170817 19:35:37.860"></status>
</kw>
<status starttime="20170817 19:35:37.859" status="PASS" endtime="20170817 19:35:37.860"></status>
</kw>
<status starttime="20170817 19:35:37.856" status="PASS" endtime="20170817 19:35:37.860"></status>
</kw>
<status starttime="20170817 19:35:37.849" status="PASS" endtime="20170817 19:35:37.860"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:37.861">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:37.861" status="PASS" endtime="20170817 19:35:37.862"></status>
</kw>
<status starttime="20170817 19:35:37.861" status="PASS" endtime="20170817 19:35:37.862"></status>
</kw>
<status starttime="20170817 19:35:37.673" status="PASS" endtime="20170817 19:35:37.862"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.872">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170817 19:35:37.872" status="PASS" endtime="20170817 19:35:37.872"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:37.874">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Req...</msg>
<status starttime="20170817 19:35:37.874" status="PASS" endtime="20170817 19:35:37.874"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170817 19:35:37.875" status="PASS" endtime="20170817 19:35:37.875"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:37.875">@{ffdc_function_list} = [ OS FFDC | Core Files | BMC Specific Files | FFDC Generic Report | Get Request FFDC | SEL Log ]</msg>
<status starttime="20170817 19:35:37.874" status="PASS" endtime="20170817 19:35:37.875"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 19:35:37.877" status="PASS" endtime="20170817 19:35:37.877"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:37.878">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:37.878">${ret_values} = None</msg>
<status starttime="20170817 19:35:37.877" status="PASS" endtime="20170817 19:35:37.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 19:35:37.878" status="PASS" endtime="20170817 19:35:37.878"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:37.924">Returning from the enclosing user keyword.</msg>
<status starttime="20170817 19:35:37.923" status="PASS" endtime="20170817 19:35:37.924"></status>
</kw>
<status starttime="20170817 19:35:37.922" status="PASS" endtime="20170817 19:35:37.924"></status>
</kw>
<status starttime="20170817 19:35:37.878" status="PASS" endtime="20170817 19:35:37.924"></status>
</kw>
<status starttime="20170817 19:35:37.876" status="PASS" endtime="20170817 19:35:37.924"></status>
</kw>
<status starttime="20170817 19:35:37.876" status="PASS" endtime="20170817 19:35:37.924"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 19:35:37.926" status="PASS" endtime="20170817 19:35:37.926"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:37.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:37.926">${ret_values} = None</msg>
<status starttime="20170817 19:35:37.925" status="PASS" endtime="20170817 19:35:37.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 19:35:37.927" status="PASS" endtime="20170817 19:35:37.927"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:38.035">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:38.035">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170817 19:35:38.092">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 19:35:38.115">${core_files} = /tmp/core_phosphor-hwmon-.2640</msg>
<msg level="INFO" timestamp="20170817 19:35:38.115">${stderr} = </msg>
<msg level="INFO" timestamp="20170817 19:35:38.115">${rc} = 0</msg>
<status starttime="20170817 19:35:37.972" status="PASS" endtime="20170817 19:35:38.115"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:38.116">@{core_list} = [ /tmp/core_phosphor-hwmon-.2640 ]</msg>
<status starttime="20170817 19:35:38.115" status="PASS" endtime="20170817 19:35:38.116"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170817 19:35:38.136" status="PASS" endtime="20170817 19:35:38.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170817 19:35:38.147" status="PASS" endtime="20170817 19:35:38.914"></status>
</kw>
<status starttime="20170817 19:35:38.147" status="PASS" endtime="20170817 19:35:38.914"></status>
</kw>
<status starttime="20170817 19:35:38.146" status="PASS" endtime="20170817 19:35:38.915"></status>
</kw>
<status starttime="20170817 19:35:38.136" status="PASS" endtime="20170817 19:35:38.915"></status>
</kw>
<status starttime="20170817 19:35:38.117" status="PASS" endtime="20170817 19:35:38.915"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2640">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170817 19:35:38.915" status="PASS" endtime="20170817 19:35:39.164"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:39.215">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:39.215">Executing command 'rm /tmp/core_phosphor-hwmon-.2640'.</msg>
<msg level="INFO" timestamp="20170817 19:35:39.273">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:39.165" status="PASS" endtime="20170817 19:35:39.291"></status>
</kw>
<status starttime="20170817 19:35:38.915" status="PASS" endtime="20170817 19:35:39.291"></status>
</kw>
<status starttime="20170817 19:35:38.915" status="PASS" endtime="20170817 19:35:39.291"></status>
</kw>
<status starttime="20170817 19:35:37.971" status="PASS" endtime="20170817 19:35:39.291"></status>
</kw>
<status starttime="20170817 19:35:37.927" status="PASS" endtime="20170817 19:35:39.291"></status>
</kw>
<status starttime="20170817 19:35:37.925" status="PASS" endtime="20170817 19:35:39.291"></status>
</kw>
<status starttime="20170817 19:35:37.924" status="PASS" endtime="20170817 19:35:39.291"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 19:35:39.294" status="PASS" endtime="20170817 19:35:39.294"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:39.294">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:39.294">${ret_values} = None</msg>
<status starttime="20170817 19:35:39.293" status="PASS" endtime="20170817 19:35:39.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 19:35:39.295" status="PASS" endtime="20170817 19:35:39.295"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.340">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170817 19:35:39.340" status="PASS" endtime="20170817 19:35:39.340"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.341">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd...</msg>
<status starttime="20170817 19:35:39.341" status="PASS" endtime="20170817 19:35:39.341"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.342">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_proc_list.txt</msg>
<status starttime="20170817 19:35:39.342" status="PASS" endtime="20170817 19:35:39.342"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 19:35:39.343" status="PASS" endtime="20170817 19:35:39.343"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.344">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170817 19:35:39.344" status="PASS" endtime="20170817 19:35:39.344"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:39.463">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:39.463">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170817 19:35:39.832">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:39.397" status="PASS" endtime="20170817 19:35:39.832"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:39.833">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:39.833">${ret_values} = (u'Mem: 160500K used, 271748K free, 14696K shrd, 11572K buff, 52944K cached\nCPU:  36% usr  18% sys   0% nic  45% idle   0% io   0% irq   0% sirq\nLoad average: 0.64 1.01 0.95 1/154 3032\n  PID  PPID ...</msg>
<status starttime="20170817 19:35:39.345" status="PASS" endtime="20170817 19:35:39.833"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.834">${stdout} = Mem: 160500K used, 271748K free, 14696K shrd, 11572K buff, 52944K cached
CPU:  36% usr  18% sys   0% nic  45% idle   0% io   0% irq   0% sirq
Load average: 0.64 1.01 0.95 1/154 3032
  PID  PPID USER  ...</msg>
<status starttime="20170817 19:35:39.833" status="PASS" endtime="20170817 19:35:39.834"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.834">${stderr} = </msg>
<status starttime="20170817 19:35:39.834" status="PASS" endtime="20170817 19:35:39.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:39.841">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_proc_list.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:39.841" status="PASS" endtime="20170817 19:35:39.841"></status>
</kw>
<status starttime="20170817 19:35:39.840" status="PASS" endtime="20170817 19:35:39.841"></status>
</kw>
<status starttime="20170817 19:35:39.835" status="PASS" endtime="20170817 19:35:39.842"></status>
</kw>
<status starttime="20170817 19:35:39.342" status="PASS" endtime="20170817 19:35:39.842"></status>
</kw>
<status starttime="20170817 19:35:39.341" status="PASS" endtime="20170817 19:35:39.842"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.842">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_journalctl.txt</msg>
<status starttime="20170817 19:35:39.842" status="PASS" endtime="20170817 19:35:39.842"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 19:35:39.843" status="PASS" endtime="20170817 19:35:39.844"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:39.844">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170817 19:35:39.844" status="PASS" endtime="20170817 19:35:39.845"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:39.961">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:39.962">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170817 19:35:42.554">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:39.899" status="PASS" endtime="20170817 19:35:42.555"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:42.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:42.559">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:56:26 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status starttime="20170817 19:35:39.845" status="PASS" endtime="20170817 19:35:42.559"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.561">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:56:26 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status starttime="20170817 19:35:42.559" status="PASS" endtime="20170817 19:35:42.561"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.561">${stderr} = </msg>
<status starttime="20170817 19:35:42.561" status="PASS" endtime="20170817 19:35:42.561"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:42.570">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_journalctl.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:42.569" status="PASS" endtime="20170817 19:35:42.570"></status>
</kw>
<status starttime="20170817 19:35:42.567" status="PASS" endtime="20170817 19:35:42.570"></status>
</kw>
<status starttime="20170817 19:35:42.562" status="PASS" endtime="20170817 19:35:42.570"></status>
</kw>
<status starttime="20170817 19:35:39.843" status="PASS" endtime="20170817 19:35:42.571"></status>
</kw>
<status starttime="20170817 19:35:39.842" status="PASS" endtime="20170817 19:35:42.571"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.572">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_procinfo.txt</msg>
<status starttime="20170817 19:35:42.571" status="PASS" endtime="20170817 19:35:42.572"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 19:35:42.573" status="PASS" endtime="20170817 19:35:42.574"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.575">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170817 19:35:42.574" status="PASS" endtime="20170817 19:35:42.575"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:42.707">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:42.708">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170817 19:35:42.755">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:42.639" status="PASS" endtime="20170817 19:35:42.756"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:42.756">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:42.756">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170817 19:35:42.575" status="PASS" endtime="20170817 19:35:42.756"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.757">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170817 19:35:42.756" status="PASS" endtime="20170817 19:35:42.757"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.757">${stderr} = </msg>
<status starttime="20170817 19:35:42.757" status="PASS" endtime="20170817 19:35:42.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:42.765">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_procinfo.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:42.764" status="PASS" endtime="20170817 19:35:42.765"></status>
</kw>
<status starttime="20170817 19:35:42.763" status="PASS" endtime="20170817 19:35:42.765"></status>
</kw>
<status starttime="20170817 19:35:42.758" status="PASS" endtime="20170817 19:35:42.765"></status>
</kw>
<status starttime="20170817 19:35:42.572" status="PASS" endtime="20170817 19:35:42.765"></status>
</kw>
<status starttime="20170817 19:35:42.571" status="PASS" endtime="20170817 19:35:42.765"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.766">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_meminfo.txt</msg>
<status starttime="20170817 19:35:42.765" status="PASS" endtime="20170817 19:35:42.766"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 19:35:42.767" status="PASS" endtime="20170817 19:35:42.767"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.768">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170817 19:35:42.767" status="PASS" endtime="20170817 19:35:42.768"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:42.902">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:42.903">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170817 19:35:42.959">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:42.826" status="PASS" endtime="20170817 19:35:42.959"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:42.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:42.960">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          271748 kB\nMemAvailable:     319760 kB\nBuffers:           11572 kB\nCached:            52944 kB\nSwapCached:            0 kB\nActive:           10154...</msg>
<status starttime="20170817 19:35:42.768" status="PASS" endtime="20170817 19:35:42.960"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.960">${stdout} = MemTotal:         432248 kB
MemFree:          271748 kB
MemAvailable:     319760 kB
Buffers:           11572 kB
Cached:            52944 kB
SwapCached:            0 kB
Active:           101548 kB
Inac...</msg>
<status starttime="20170817 19:35:42.960" status="PASS" endtime="20170817 19:35:42.961"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.961">${stderr} = </msg>
<status starttime="20170817 19:35:42.961" status="PASS" endtime="20170817 19:35:42.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:42.968">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_meminfo.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:42.967" status="PASS" endtime="20170817 19:35:42.968"></status>
</kw>
<status starttime="20170817 19:35:42.967" status="PASS" endtime="20170817 19:35:42.968"></status>
</kw>
<status starttime="20170817 19:35:42.961" status="PASS" endtime="20170817 19:35:42.968"></status>
</kw>
<status starttime="20170817 19:35:42.766" status="PASS" endtime="20170817 19:35:42.969"></status>
</kw>
<status starttime="20170817 19:35:42.765" status="PASS" endtime="20170817 19:35:42.969"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.969">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_dmesg.txt</msg>
<status starttime="20170817 19:35:42.969" status="PASS" endtime="20170817 19:35:42.969"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 19:35:42.970" status="PASS" endtime="20170817 19:35:42.971"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:42.971">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170817 19:35:42.971" status="PASS" endtime="20170817 19:35:42.971"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:43.097">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:43.097">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170817 19:35:43.154">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:43.027" status="PASS" endtime="20170817 19:35:43.154"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:43.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:43.155">${ret_values} = (u'[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)\n[    0.090000] pid_max: default: 32768 minimum: 301\n[    0.090000] Mount-cache hash table entries: 1024 (order: 0, 4096 byte...</msg>
<status starttime="20170817 19:35:42.972" status="PASS" endtime="20170817 19:35:43.155"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:43.156">${stdout} = [    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)
[    0.090000] pid_max: default: 32768 minimum: 301
[    0.090000] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
[ ...</msg>
<status starttime="20170817 19:35:43.155" status="PASS" endtime="20170817 19:35:43.156"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:43.156">${stderr} = </msg>
<status starttime="20170817 19:35:43.156" status="PASS" endtime="20170817 19:35:43.156"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:43.163">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_dmesg.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:43.162" status="PASS" endtime="20170817 19:35:43.163"></status>
</kw>
<status starttime="20170817 19:35:43.162" status="PASS" endtime="20170817 19:35:43.163"></status>
</kw>
<status starttime="20170817 19:35:43.156" status="PASS" endtime="20170817 19:35:43.163"></status>
</kw>
<status starttime="20170817 19:35:42.970" status="PASS" endtime="20170817 19:35:43.163"></status>
</kw>
<status starttime="20170817 19:35:42.969" status="PASS" endtime="20170817 19:35:43.164"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:43.164">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170817 19:35:43.164" status="PASS" endtime="20170817 19:35:43.164"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 19:35:43.165" status="PASS" endtime="20170817 19:35:43.166"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:43.167">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170817 19:35:43.166" status="PASS" endtime="20170817 19:35:43.167"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:43.290">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:43.290">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170817 19:35:43.963">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:43.223" status="PASS" endtime="20170817 19:35:43.964"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:43.964">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:43.965">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:56 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:56 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170817 19:35:43.167" status="PASS" endtime="20170817 19:35:43.965"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:43.966">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:56 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:56 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170817 19:35:43.965" status="PASS" endtime="20170817 19:35:43.966"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:43.967">${stderr} = ls: /proc/3037/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170817 19:35:43.966" status="PASS" endtime="20170817 19:35:43.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:43.974">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:43.973" status="PASS" endtime="20170817 19:35:43.974"></status>
</kw>
<status starttime="20170817 19:35:43.972" status="PASS" endtime="20170817 19:35:43.974"></status>
</kw>
<status starttime="20170817 19:35:43.967" status="PASS" endtime="20170817 19:35:43.974"></status>
</kw>
<status starttime="20170817 19:35:43.165" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:43.164" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.341" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.340" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.340" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.340" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.339" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.295" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.292" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<status starttime="20170817 19:35:39.291" status="PASS" endtime="20170817 19:35:43.975"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 19:35:43.977" status="PASS" endtime="20170817 19:35:43.977"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:43.977">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:43.977">${ret_values} = None</msg>
<status starttime="20170817 19:35:43.976" status="PASS" endtime="20170817 19:35:43.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 19:35:43.978" status="PASS" endtime="20170817 19:35:43.978"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:44.024">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170817 19:35:44.016" status="PASS" endtime="20170817 19:35:44.024"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:44.025">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170817 19:35:44.025" status="PASS" endtime="20170817 19:35:44.025"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:44.031">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170817 19:35:44.026" status="PASS" endtime="20170817 19:35:44.031"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:44.034">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:44.033" status="PASS" endtime="20170817 19:35:44.034"></status>
</kw>
<status starttime="20170817 19:35:44.033" status="PASS" endtime="20170817 19:35:44.034"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:44.035">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:44.035" status="PASS" endtime="20170817 19:35:44.035"></status>
</kw>
<status starttime="20170817 19:35:44.034" status="PASS" endtime="20170817 19:35:44.036"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:44.037">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:44.036" status="PASS" endtime="20170817 19:35:44.037"></status>
</kw>
<status starttime="20170817 19:35:44.036" status="PASS" endtime="20170817 19:35:44.037"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:44.038">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:44.038" status="PASS" endtime="20170817 19:35:44.038"></status>
</kw>
<status starttime="20170817 19:35:44.037" status="PASS" endtime="20170817 19:35:44.038"></status>
</kw>
<status starttime="20170817 19:35:44.032" status="PASS" endtime="20170817 19:35:44.038"></status>
</kw>
<status starttime="20170817 19:35:44.032" status="PASS" endtime="20170817 19:35:44.038"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:44.039">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170817 19:35:44.039" status="PASS" endtime="20170817 19:35:44.039"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:44.171">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:44.171">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170817 19:35:45.558">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:44.096" status="PASS" endtime="20170817 19:35:45.559"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:45.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:45.559">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status starttime="20170817 19:35:44.039" status="PASS" endtime="20170817 19:35:45.559"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.560">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status starttime="20170817 19:35:45.559" status="PASS" endtime="20170817 19:35:45.560"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.561">${stderr} = </msg>
<status starttime="20170817 19:35:45.560" status="PASS" endtime="20170817 19:35:45.561"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.571">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.570" status="PASS" endtime="20170817 19:35:45.571"></status>
</kw>
<status starttime="20170817 19:35:45.569" status="PASS" endtime="20170817 19:35:45.571"></status>
</kw>
<status starttime="20170817 19:35:45.561" status="PASS" endtime="20170817 19:35:45.571"></status>
</kw>
<status starttime="20170817 19:35:44.031" status="PASS" endtime="20170817 19:35:45.571"></status>
</kw>
<status starttime="20170817 19:35:44.031" status="PASS" endtime="20170817 19:35:45.571"></status>
</kw>
<status starttime="20170817 19:35:44.031" status="PASS" endtime="20170817 19:35:45.571"></status>
</kw>
<status starttime="20170817 19:35:44.024" status="PASS" endtime="20170817 19:35:45.572"></status>
</kw>
<status starttime="20170817 19:35:44.024" status="PASS" endtime="20170817 19:35:45.572"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.573">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170817 19:35:45.572" status="PASS" endtime="20170817 19:35:45.573"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:45.574">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170817 19:35:45.573" status="PASS" endtime="20170817 19:35:45.574"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.577">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.577" status="PASS" endtime="20170817 19:35:45.577"></status>
</kw>
<status starttime="20170817 19:35:45.576" status="PASS" endtime="20170817 19:35:45.577"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.579">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.578" status="PASS" endtime="20170817 19:35:45.579"></status>
</kw>
<status starttime="20170817 19:35:45.578" status="PASS" endtime="20170817 19:35:45.579"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.580">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.579" status="PASS" endtime="20170817 19:35:45.580"></status>
</kw>
<status starttime="20170817 19:35:45.579" status="PASS" endtime="20170817 19:35:45.580"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.581">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.581" status="PASS" endtime="20170817 19:35:45.581"></status>
</kw>
<status starttime="20170817 19:35:45.580" status="PASS" endtime="20170817 19:35:45.581"></status>
</kw>
<status starttime="20170817 19:35:45.576" status="PASS" endtime="20170817 19:35:45.582"></status>
</kw>
<status starttime="20170817 19:35:45.575" status="PASS" endtime="20170817 19:35:45.582"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.582">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170817 19:35:45.582" status="PASS" endtime="20170817 19:35:45.582"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:45.707">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:45.708">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170817 19:35:45.764">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:45.640" status="PASS" endtime="20170817 19:35:45.764"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:45.764">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:45.765">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-263"\nVERSION_ID="v1.99.8-263-g9505347"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170817 19:35:45.583" status="PASS" endtime="20170817 19:35:45.765"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.765">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-263"
VERSION_ID="v1.99.8-263-g9505347"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170817 19:35:45.765" status="PASS" endtime="20170817 19:35:45.765"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.766">${stderr} = </msg>
<status starttime="20170817 19:35:45.766" status="PASS" endtime="20170817 19:35:45.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.773">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.773" status="PASS" endtime="20170817 19:35:45.773"></status>
</kw>
<status starttime="20170817 19:35:45.772" status="PASS" endtime="20170817 19:35:45.773"></status>
</kw>
<status starttime="20170817 19:35:45.766" status="PASS" endtime="20170817 19:35:45.773"></status>
</kw>
<status starttime="20170817 19:35:45.574" status="PASS" endtime="20170817 19:35:45.773"></status>
</kw>
<status starttime="20170817 19:35:45.574" status="PASS" endtime="20170817 19:35:45.773"></status>
</kw>
<status starttime="20170817 19:35:45.574" status="PASS" endtime="20170817 19:35:45.774"></status>
</kw>
<status starttime="20170817 19:35:45.572" status="PASS" endtime="20170817 19:35:45.774"></status>
</kw>
<status starttime="20170817 19:35:45.572" status="PASS" endtime="20170817 19:35:45.774"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.775">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170817 19:35:45.774" status="PASS" endtime="20170817 19:35:45.775"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:45.776">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170817 19:35:45.775" status="PASS" endtime="20170817 19:35:45.776"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.780">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.780" status="PASS" endtime="20170817 19:35:45.780"></status>
</kw>
<status starttime="20170817 19:35:45.779" status="PASS" endtime="20170817 19:35:45.781"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.782">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.781" status="PASS" endtime="20170817 19:35:45.782"></status>
</kw>
<status starttime="20170817 19:35:45.781" status="PASS" endtime="20170817 19:35:45.782"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.783">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.783" status="PASS" endtime="20170817 19:35:45.783"></status>
</kw>
<status starttime="20170817 19:35:45.782" status="PASS" endtime="20170817 19:35:45.783"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.784">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.784" status="PASS" endtime="20170817 19:35:45.785"></status>
</kw>
<status starttime="20170817 19:35:45.783" status="PASS" endtime="20170817 19:35:45.785"></status>
</kw>
<status starttime="20170817 19:35:45.778" status="PASS" endtime="20170817 19:35:45.785"></status>
</kw>
<status starttime="20170817 19:35:45.778" status="PASS" endtime="20170817 19:35:45.785"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.786">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170817 19:35:45.785" status="PASS" endtime="20170817 19:35:45.786"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:45.906">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:45.906">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170817 19:35:45.989">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:45.842" status="PASS" endtime="20170817 19:35:45.989"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:45.989">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:45.989">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170817 19:35:45.786" status="PASS" endtime="20170817 19:35:45.989"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.990">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status starttime="20170817 19:35:45.990" status="PASS" endtime="20170817 19:35:45.990"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:45.991">${stderr} = </msg>
<status starttime="20170817 19:35:45.990" status="PASS" endtime="20170817 19:35:45.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:45.998">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:45.997" status="PASS" endtime="20170817 19:35:45.998"></status>
</kw>
<status starttime="20170817 19:35:45.996" status="PASS" endtime="20170817 19:35:45.998"></status>
</kw>
<status starttime="20170817 19:35:45.991" status="PASS" endtime="20170817 19:35:45.998"></status>
</kw>
<status starttime="20170817 19:35:45.777" status="PASS" endtime="20170817 19:35:45.998"></status>
</kw>
<status starttime="20170817 19:35:45.776" status="PASS" endtime="20170817 19:35:45.998"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.001">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.001" status="PASS" endtime="20170817 19:35:46.001"></status>
</kw>
<status starttime="20170817 19:35:46.000" status="PASS" endtime="20170817 19:35:46.001"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.002">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.002" status="PASS" endtime="20170817 19:35:46.003"></status>
</kw>
<status starttime="20170817 19:35:46.001" status="PASS" endtime="20170817 19:35:46.003"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.004">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.003" status="PASS" endtime="20170817 19:35:46.004"></status>
</kw>
<status starttime="20170817 19:35:46.003" status="PASS" endtime="20170817 19:35:46.004"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.005">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.005" status="PASS" endtime="20170817 19:35:46.005"></status>
</kw>
<status starttime="20170817 19:35:46.004" status="PASS" endtime="20170817 19:35:46.005"></status>
</kw>
<status starttime="20170817 19:35:45.999" status="PASS" endtime="20170817 19:35:46.005"></status>
</kw>
<status starttime="20170817 19:35:45.999" status="PASS" endtime="20170817 19:35:46.005"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.006">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170817 19:35:46.006" status="PASS" endtime="20170817 19:35:46.006"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.129">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:46.129">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170817 19:35:46.186">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:46.063" status="PASS" endtime="20170817 19:35:46.186"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:46.186">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:46.186">${ret_values} = (u' 15:56:34 up 13 min,  load average: 0.58, 0.98, 0.94', u'', 0)</msg>
<status starttime="20170817 19:35:46.006" status="PASS" endtime="20170817 19:35:46.186"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.187">${stdout} =  15:56:34 up 13 min,  load average: 0.58, 0.98, 0.94</msg>
<status starttime="20170817 19:35:46.186" status="PASS" endtime="20170817 19:35:46.187"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.187">${stderr} = </msg>
<status starttime="20170817 19:35:46.187" status="PASS" endtime="20170817 19:35:46.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.194">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.194" status="PASS" endtime="20170817 19:35:46.194"></status>
</kw>
<status starttime="20170817 19:35:46.193" status="PASS" endtime="20170817 19:35:46.194"></status>
</kw>
<status starttime="20170817 19:35:46.188" status="PASS" endtime="20170817 19:35:46.194"></status>
</kw>
<status starttime="20170817 19:35:45.998" status="PASS" endtime="20170817 19:35:46.195"></status>
</kw>
<status starttime="20170817 19:35:45.998" status="PASS" endtime="20170817 19:35:46.195"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.198">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.197" status="PASS" endtime="20170817 19:35:46.198"></status>
</kw>
<status starttime="20170817 19:35:46.197" status="PASS" endtime="20170817 19:35:46.198"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.199">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.199" status="PASS" endtime="20170817 19:35:46.199"></status>
</kw>
<status starttime="20170817 19:35:46.198" status="PASS" endtime="20170817 19:35:46.199"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.200">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.200" status="PASS" endtime="20170817 19:35:46.200"></status>
</kw>
<status starttime="20170817 19:35:46.199" status="PASS" endtime="20170817 19:35:46.201"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.202">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.201" status="PASS" endtime="20170817 19:35:46.202"></status>
</kw>
<status starttime="20170817 19:35:46.201" status="PASS" endtime="20170817 19:35:46.202"></status>
</kw>
<status starttime="20170817 19:35:46.196" status="PASS" endtime="20170817 19:35:46.202"></status>
</kw>
<status starttime="20170817 19:35:46.196" status="PASS" endtime="20170817 19:35:46.202"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.203">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170817 19:35:46.202" status="PASS" endtime="20170817 19:35:46.203"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.328">encoding=UTF-8
newline=

alias=bmc_connection
timeout=25 seconds
index=1
prompt=# 
port=22
height=24
width=80
path_separator=/
host=9.41.166.169
term_type=vt100</msg>
<msg level="INFO" timestamp="20170817 19:35:46.329">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170817 19:35:46.386">Command exited with return code 0.</msg>
<status starttime="20170817 19:35:46.263" status="PASS" endtime="20170817 19:35:46.386"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:46.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:46.386">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Thu Aug 17 18:49:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170817 19:35:46.203" status="PASS" endtime="20170817 19:35:46.386"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.387">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Thu Aug 17 18:49:09 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170817 19:35:46.386" status="PASS" endtime="20170817 19:35:46.387"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.387">${stderr} = </msg>
<status starttime="20170817 19:35:46.387" status="PASS" endtime="20170817 19:35:46.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:46.394">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:46.394" status="PASS" endtime="20170817 19:35:46.394"></status>
</kw>
<status starttime="20170817 19:35:46.393" status="PASS" endtime="20170817 19:35:46.394"></status>
</kw>
<status starttime="20170817 19:35:46.388" status="PASS" endtime="20170817 19:35:46.394"></status>
</kw>
<status starttime="20170817 19:35:46.195" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:46.195" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:45.776" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:45.774" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:45.774" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:44.024" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:44.015" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:43.978" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:43.976" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<status starttime="20170817 19:35:43.975" status="PASS" endtime="20170817 19:35:46.395"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 19:35:46.397" status="PASS" endtime="20170817 19:35:46.397"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:46.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:46.397">${ret_values} = None</msg>
<status starttime="20170817 19:35:46.396" status="PASS" endtime="20170817 19:35:46.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 19:35:46.398" status="PASS" endtime="20170817 19:35:46.398"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.442">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170817 19:35:46.442" status="PASS" endtime="20170817 19:35:46.442"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.443">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_le...</msg>
<status starttime="20170817 19:35:46.443" status="PASS" endtime="20170817 19:35:46.443"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.445">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_record_log.txt</msg>
<status starttime="20170817 19:35:46.444" status="PASS" endtime="20170817 19:35:46.445"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.448">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:46.448" status="PASS" endtime="20170817 19:35:46.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.449">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:46.449" status="PASS" endtime="20170817 19:35:46.449"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.450">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:46.450" status="PASS" endtime="20170817 19:35:46.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:46.450" status="PASS" endtime="20170817 19:35:46.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.639">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:46.451" status="PASS" endtime="20170817 19:35:46.639"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:46.639">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:46.639">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:46.451" status="PASS" endtime="20170817 19:35:46.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.640">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:46.640" status="PASS" endtime="20170817 19:35:46.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:46.641" status="PASS" endtime="20170817 19:35:46.641"></status>
</kw>
<status starttime="20170817 19:35:46.447" status="PASS" endtime="20170817 19:35:46.641"></status>
</kw>
<status starttime="20170817 19:35:46.447" status="PASS" endtime="20170817 19:35:46.642"></status>
</kw>
<status starttime="20170817 19:35:46.446" status="PASS" endtime="20170817 19:35:46.642"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.642">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170817 19:35:46.642" status="PASS" endtime="20170817 19:35:46.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:46.643" status="PASS" endtime="20170817 19:35:46.643"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.689">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:46.689">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 19:35:46.643" status="PASS" endtime="20170817 19:35:46.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:46.689" status="PASS" endtime="20170817 19:35:46.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:46.690">Delete All Sessions</msg>
<status starttime="20170817 19:35:46.690" status="PASS" endtime="20170817 19:35:46.690"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:46.690">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 19:35:46.445" status="PASS" endtime="20170817 19:35:46.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:35:46.692">404 != 200</msg>
<status starttime="20170817 19:35:46.691" status="FAIL" endtime="20170817 19:35:46.692"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:46.692">${status} = False</msg>
<status starttime="20170817 19:35:46.691" status="PASS" endtime="20170817 19:35:46.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170817 19:35:46.693">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 19:35:46.693" status="PASS" endtime="20170817 19:35:46.693"></status>
</kw>
<status starttime="20170817 19:35:46.692" status="PASS" endtime="20170817 19:35:46.693"></status>
</kw>
<status starttime="20170817 19:35:46.443" status="PASS" endtime="20170817 19:35:46.693"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.694">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_sensor_xyz_list.txt</msg>
<status starttime="20170817 19:35:46.693" status="PASS" endtime="20170817 19:35:46.694"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.697">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:46.696" status="PASS" endtime="20170817 19:35:46.697"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.698">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:46.698" status="PASS" endtime="20170817 19:35:46.698"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.698">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:46.698" status="PASS" endtime="20170817 19:35:46.699"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.699">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:46.699" status="PASS" endtime="20170817 19:35:46.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.894">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:46.700" status="PASS" endtime="20170817 19:35:46.894"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:46.894">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:46.894">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:46.699" status="PASS" endtime="20170817 19:35:46.894"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.895">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:46.895" status="PASS" endtime="20170817 19:35:46.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:46.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:46.895" status="PASS" endtime="20170817 19:35:46.896"></status>
</kw>
<status starttime="20170817 19:35:46.696" status="PASS" endtime="20170817 19:35:46.896"></status>
</kw>
<status starttime="20170817 19:35:46.695" status="PASS" endtime="20170817 19:35:46.896"></status>
</kw>
<status starttime="20170817 19:35:46.695" status="PASS" endtime="20170817 19:35:46.896"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:46.897">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status starttime="20170817 19:35:46.896" status="PASS" endtime="20170817 19:35:46.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:46.897" status="PASS" endtime="20170817 19:35:46.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.523">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:47.523">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:46.898" status="PASS" endtime="20170817 19:35:47.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:47.524" status="PASS" endtime="20170817 19:35:47.524"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:47.525">Delete All Sessions</msg>
<status starttime="20170817 19:35:47.524" status="PASS" endtime="20170817 19:35:47.525"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:47.525">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:46.694" status="PASS" endtime="20170817 19:35:47.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:47.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:47.526" status="PASS" endtime="20170817 19:35:47.526"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:47.526">${status} = True</msg>
<status starttime="20170817 19:35:47.525" status="PASS" endtime="20170817 19:35:47.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 19:35:47.526" status="PASS" endtime="20170817 19:35:47.527"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.528">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9740
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10683
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 11467
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10359
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10273
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30160
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:47.528">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 19:35:47.528">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
            "Scale": 0,
            "Target": 10500,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS",
       ...</msg>
<status starttime="20170817 19:35:47.527" status="PASS" endtime="20170817 19:35:47.528"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:47.530">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:47.529" status="PASS" endtime="20170817 19:35:47.530"></status>
</kw>
<status starttime="20170817 19:35:47.528" status="PASS" endtime="20170817 19:35:47.530"></status>
</kw>
<status starttime="20170817 19:35:46.693" status="PASS" endtime="20170817 19:35:47.530"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.531">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_elog.txt</msg>
<status starttime="20170817 19:35:47.530" status="PASS" endtime="20170817 19:35:47.531"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:47.534">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:47.533" status="PASS" endtime="20170817 19:35:47.534"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.535">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:47.535" status="PASS" endtime="20170817 19:35:47.535"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.536">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:47.535" status="PASS" endtime="20170817 19:35:47.536"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.536">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:47.536" status="PASS" endtime="20170817 19:35:47.536"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:47.712">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:47.537" status="PASS" endtime="20170817 19:35:47.712"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:47.712">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:47.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:47.537" status="PASS" endtime="20170817 19:35:47.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:47.713">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:47.712" status="PASS" endtime="20170817 19:35:47.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:47.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:47.713" status="PASS" endtime="20170817 19:35:47.713"></status>
</kw>
<status starttime="20170817 19:35:47.533" status="PASS" endtime="20170817 19:35:47.714"></status>
</kw>
<status starttime="20170817 19:35:47.532" status="PASS" endtime="20170817 19:35:47.714"></status>
</kw>
<status starttime="20170817 19:35:47.532" status="PASS" endtime="20170817 19:35:47.714"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.714">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170817 19:35:47.714" status="PASS" endtime="20170817 19:35:47.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:47.715" status="PASS" endtime="20170817 19:35:47.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.875">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:47.875">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:47.715" status="PASS" endtime="20170817 19:35:47.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:47.875" status="PASS" endtime="20170817 19:35:47.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:47.876">Delete All Sessions</msg>
<status starttime="20170817 19:35:47.876" status="PASS" endtime="20170817 19:35:47.876"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:47.876">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:47.531" status="PASS" endtime="20170817 19:35:47.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:47.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:47.877" status="PASS" endtime="20170817 19:35:47.878"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:47.878">${status} = True</msg>
<status starttime="20170817 19:35:47.877" status="PASS" endtime="20170817 19:35:47.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 19:35:47.878" status="PASS" endtime="20170817 19:35:47.878"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.879">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775229504, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775293912, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775360166, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775426456, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:47.879">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 19:35:47.879">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "org.open_power.Host.Error.WatchdogTimedOut",
          ...</msg>
<status starttime="20170817 19:35:47.879" status="PASS" endtime="20170817 19:35:47.879"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:47.882">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_elog.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:47.881" status="PASS" endtime="20170817 19:35:47.882"></status>
</kw>
<status starttime="20170817 19:35:47.880" status="PASS" endtime="20170817 19:35:47.882"></status>
</kw>
<status starttime="20170817 19:35:47.530" status="PASS" endtime="20170817 19:35:47.882"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.883">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_led.txt</msg>
<status starttime="20170817 19:35:47.882" status="PASS" endtime="20170817 19:35:47.883"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:47.887">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:47.886" status="PASS" endtime="20170817 19:35:47.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.888">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:47.888" status="PASS" endtime="20170817 19:35:47.888"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.889">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:47.889" status="PASS" endtime="20170817 19:35:47.889"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:47.890">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:47.890" status="PASS" endtime="20170817 19:35:47.890"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:47.891" status="PASS" endtime="20170817 19:35:48.070"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:48.070">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:48.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:47.891" status="PASS" endtime="20170817 19:35:48.070"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.070">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:48.070" status="PASS" endtime="20170817 19:35:48.071"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:48.071" status="PASS" endtime="20170817 19:35:48.071"></status>
</kw>
<status starttime="20170817 19:35:47.885" status="PASS" endtime="20170817 19:35:48.071"></status>
</kw>
<status starttime="20170817 19:35:47.885" status="PASS" endtime="20170817 19:35:48.071"></status>
</kw>
<status starttime="20170817 19:35:47.883" status="PASS" endtime="20170817 19:35:48.072"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.072">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170817 19:35:48.072" status="PASS" endtime="20170817 19:35:48.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:48.073" status="PASS" endtime="20170817 19:35:48.073"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.125">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:48.126">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 19:35:48.073" status="PASS" endtime="20170817 19:35:48.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:48.126" status="PASS" endtime="20170817 19:35:48.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:48.127">Delete All Sessions</msg>
<status starttime="20170817 19:35:48.126" status="PASS" endtime="20170817 19:35:48.127"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:48.127">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 19:35:47.883" status="PASS" endtime="20170817 19:35:48.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 19:35:48.128">404 != 200</msg>
<status starttime="20170817 19:35:48.128" status="FAIL" endtime="20170817 19:35:48.128"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:48.128">${status} = False</msg>
<status starttime="20170817 19:35:48.127" status="PASS" endtime="20170817 19:35:48.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170817 19:35:48.129">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 19:35:48.129" status="PASS" endtime="20170817 19:35:48.129"></status>
</kw>
<status starttime="20170817 19:35:48.129" status="PASS" endtime="20170817 19:35:48.129"></status>
</kw>
<status starttime="20170817 19:35:47.882" status="PASS" endtime="20170817 19:35:48.130"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.130">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_sensor_list.txt</msg>
<status starttime="20170817 19:35:48.130" status="PASS" endtime="20170817 19:35:48.130"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.133">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:48.133" status="PASS" endtime="20170817 19:35:48.134"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:48.134" status="PASS" endtime="20170817 19:35:48.134"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.135">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:48.135" status="PASS" endtime="20170817 19:35:48.135"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.136">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:48.135" status="PASS" endtime="20170817 19:35:48.136"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.335">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:48.136" status="PASS" endtime="20170817 19:35:48.335"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:48.335">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:48.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:48.136" status="PASS" endtime="20170817 19:35:48.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:48.336" status="PASS" endtime="20170817 19:35:48.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:48.337" status="PASS" endtime="20170817 19:35:48.337"></status>
</kw>
<status starttime="20170817 19:35:48.132" status="PASS" endtime="20170817 19:35:48.337"></status>
</kw>
<status starttime="20170817 19:35:48.132" status="PASS" endtime="20170817 19:35:48.337"></status>
</kw>
<status starttime="20170817 19:35:48.131" status="PASS" endtime="20170817 19:35:48.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.338">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170817 19:35:48.337" status="PASS" endtime="20170817 19:35:48.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:48.338" status="PASS" endtime="20170817 19:35:48.338"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.711">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:48.712">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:48.339" status="PASS" endtime="20170817 19:35:48.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:48.712" status="PASS" endtime="20170817 19:35:48.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:48.713">Delete All Sessions</msg>
<status starttime="20170817 19:35:48.713" status="PASS" endtime="20170817 19:35:48.713"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:48.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:48.131" status="PASS" endtime="20170817 19:35:48.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:48.714" status="PASS" endtime="20170817 19:35:48.714"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:48.714">${status} = True</msg>
<status starttime="20170817 19:35:48.713" status="PASS" endtime="20170817 19:35:48.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 19:35:48.715" status="PASS" endtime="20170817 19:35:48.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.716">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:48.716">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 19:35:48.716">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170817 19:35:48.715" status="PASS" endtime="20170817 19:35:48.716"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:48.717">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_sensor_list.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:48.717" status="PASS" endtime="20170817 19:35:48.717"></status>
</kw>
<status starttime="20170817 19:35:48.716" status="PASS" endtime="20170817 19:35:48.718"></status>
</kw>
<status starttime="20170817 19:35:48.130" status="PASS" endtime="20170817 19:35:48.718"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.718">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_control_list.txt</msg>
<status starttime="20170817 19:35:48.718" status="PASS" endtime="20170817 19:35:48.718"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.721">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:48.721" status="PASS" endtime="20170817 19:35:48.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.722">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:48.722" status="PASS" endtime="20170817 19:35:48.722"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.723">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:48.723" status="PASS" endtime="20170817 19:35:48.723"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.724">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:48.723" status="PASS" endtime="20170817 19:35:48.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.915">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:48.724" status="PASS" endtime="20170817 19:35:48.916"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:48.916">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:48.916">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:48.724" status="PASS" endtime="20170817 19:35:48.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.917">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:48.916" status="PASS" endtime="20170817 19:35:48.917"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:48.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:48.917" status="PASS" endtime="20170817 19:35:48.917"></status>
</kw>
<status starttime="20170817 19:35:48.720" status="PASS" endtime="20170817 19:35:48.917"></status>
</kw>
<status starttime="20170817 19:35:48.720" status="PASS" endtime="20170817 19:35:48.917"></status>
</kw>
<status starttime="20170817 19:35:48.719" status="PASS" endtime="20170817 19:35:48.918"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:48.918">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status starttime="20170817 19:35:48.918" status="PASS" endtime="20170817 19:35:48.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:48.918" status="PASS" endtime="20170817 19:35:48.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.143">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:49.143">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:48.919" status="PASS" endtime="20170817 19:35:49.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:49.143" status="PASS" endtime="20170817 19:35:49.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:49.144">Delete All Sessions</msg>
<status starttime="20170817 19:35:49.144" status="PASS" endtime="20170817 19:35:49.144"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:49.145">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:48.719" status="PASS" endtime="20170817 19:35:49.145"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:49.146">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:49.145" status="PASS" endtime="20170817 19:35:49.146"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:49.146">${status} = True</msg>
<status starttime="20170817 19:35:49.145" status="PASS" endtime="20170817 19:35:49.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 19:35:49.146" status="PASS" endtime="20170817 19:35:49.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.147">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:49.147">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 19:35:49.147">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status starttime="20170817 19:35:49.147" status="PASS" endtime="20170817 19:35:49.147"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:49.149">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_control_list.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:49.148" status="PASS" endtime="20170817 19:35:49.149"></status>
</kw>
<status starttime="20170817 19:35:49.148" status="PASS" endtime="20170817 19:35:49.149"></status>
</kw>
<status starttime="20170817 19:35:48.718" status="PASS" endtime="20170817 19:35:49.149"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.150">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_inventory.txt</msg>
<status starttime="20170817 19:35:49.149" status="PASS" endtime="20170817 19:35:49.150"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:49.153">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:49.152" status="PASS" endtime="20170817 19:35:49.153"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.154">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:49.154" status="PASS" endtime="20170817 19:35:49.154"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.154">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:49.154" status="PASS" endtime="20170817 19:35:49.154"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.155">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:49.155" status="PASS" endtime="20170817 19:35:49.155"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:49.387">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:49.156" status="PASS" endtime="20170817 19:35:49.387"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:49.387">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:49.387">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:49.155" status="PASS" endtime="20170817 19:35:49.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:49.388">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:49.388" status="PASS" endtime="20170817 19:35:49.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:49.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:49.389" status="PASS" endtime="20170817 19:35:49.389"></status>
</kw>
<status starttime="20170817 19:35:49.152" status="PASS" endtime="20170817 19:35:49.389"></status>
</kw>
<status starttime="20170817 19:35:49.151" status="PASS" endtime="20170817 19:35:49.389"></status>
</kw>
<status starttime="20170817 19:35:49.151" status="PASS" endtime="20170817 19:35:49.389"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.390">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170817 19:35:49.390" status="PASS" endtime="20170817 19:35:49.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:49.390" status="PASS" endtime="20170817 19:35:49.391"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.752">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:49.752">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:49.391" status="PASS" endtime="20170817 19:35:49.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:49.752" status="PASS" endtime="20170817 19:35:49.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:49.753">Delete All Sessions</msg>
<status starttime="20170817 19:35:49.753" status="PASS" endtime="20170817 19:35:49.753"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:49.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:49.150" status="PASS" endtime="20170817 19:35:49.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:49.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:49.754" status="PASS" endtime="20170817 19:35:49.754"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:49.755">${status} = True</msg>
<status starttime="20170817 19:35:49.754" status="PASS" endtime="20170817 19:35:49.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 19:35:49.755" status="PASS" endtime="20170817 19:35:49.755"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.756">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:49.756">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 19:35:49.756">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170817 19:35:49.755" status="PASS" endtime="20170817 19:35:49.756"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:49.758">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_inventory.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:49.757" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:49.756" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:49.149" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:46.443" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:46.442" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:46.442" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:46.442" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:46.441" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:46.398" status="PASS" endtime="20170817 19:35:49.758"></status>
</kw>
<status starttime="20170817 19:35:46.396" status="PASS" endtime="20170817 19:35:49.759"></status>
</kw>
<status starttime="20170817 19:35:46.395" status="PASS" endtime="20170817 19:35:49.759"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 19:35:49.760" status="PASS" endtime="20170817 19:35:49.760"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:49.761">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:49.761">${ret_values} = None</msg>
<status starttime="20170817 19:35:49.760" status="PASS" endtime="20170817 19:35:49.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 19:35:49.761" status="PASS" endtime="20170817 19:35:49.761"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:49.812">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:49.812" status="PASS" endtime="20170817 19:35:49.813"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:49.813" status="PASS" endtime="20170817 19:35:49.814"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.814">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:49.814" status="PASS" endtime="20170817 19:35:49.815"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:49.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:49.815" status="PASS" endtime="20170817 19:35:49.816"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.029">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:49.817" status="PASS" endtime="20170817 19:35:50.029"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.029">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:50.030">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:49.816" status="PASS" endtime="20170817 19:35:50.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.030">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.030" status="PASS" endtime="20170817 19:35:50.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.031">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.031" status="PASS" endtime="20170817 19:35:50.031"></status>
</kw>
<status starttime="20170817 19:35:49.811" status="PASS" endtime="20170817 19:35:50.031"></status>
</kw>
<status starttime="20170817 19:35:49.811" status="PASS" endtime="20170817 19:35:50.031"></status>
</kw>
<status starttime="20170817 19:35:49.810" status="PASS" endtime="20170817 19:35:50.032"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.032">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170817 19:35:50.032" status="PASS" endtime="20170817 19:35:50.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:50.032" status="PASS" endtime="20170817 19:35:50.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.208">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:50.208">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.033" status="PASS" endtime="20170817 19:35:50.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:50.208" status="PASS" endtime="20170817 19:35:50.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:50.209">Delete All Sessions</msg>
<status starttime="20170817 19:35:50.209" status="PASS" endtime="20170817 19:35:50.209"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:49.810" status="PASS" endtime="20170817 19:35:50.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.210" status="PASS" endtime="20170817 19:35:50.211"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.211">${status} = True</msg>
<status starttime="20170817 19:35:50.210" status="PASS" endtime="20170817 19:35:50.211"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170817 19:35:50.211" status="PASS" endtime="20170817 19:35:50.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.212">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775229504, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775293912, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775360166, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775426456, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:50.212">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:50.213">${content} = {u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'AdditionalData': [], u'associations': [], u'Resolved': 0, u'Id': 2, u'Message': u'org.open_power.Host.Error.WatchdogTimedOut', ...</msg>
<status starttime="20170817 19:35:50.212" status="PASS" endtime="20170817 19:35:50.213"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.213">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/5']</msg>
<status starttime="20170817 19:35:50.213" status="PASS" endtime="20170817 19:35:50.213"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.214">${logpath} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_esel</msg>
<status starttime="20170817 19:35:50.213" status="PASS" endtime="20170817 19:35:50.214"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:35:50.215">Created file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_esel"&gt;/tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/20170817193537588786_esel&lt;/a&gt;'.</msg>
<status starttime="20170817 19:35:50.214" status="PASS" endtime="20170817 19:35:50.215"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 19:35:50.215" status="PASS" endtime="20170817 19:35:50.216"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.219">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:50.219" status="PASS" endtime="20170817 19:35:50.220"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.221">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:50.220" status="PASS" endtime="20170817 19:35:50.221"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.222">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:50.221" status="PASS" endtime="20170817 19:35:50.222"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.223">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:50.222" status="PASS" endtime="20170817 19:35:50.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.440">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:50.224" status="PASS" endtime="20170817 19:35:50.440"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.440">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:50.440">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.223" status="PASS" endtime="20170817 19:35:50.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.441">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.440" status="PASS" endtime="20170817 19:35:50.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.441" status="PASS" endtime="20170817 19:35:50.442"></status>
</kw>
<status starttime="20170817 19:35:50.218" status="PASS" endtime="20170817 19:35:50.442"></status>
</kw>
<status starttime="20170817 19:35:50.218" status="PASS" endtime="20170817 19:35:50.442"></status>
</kw>
<status starttime="20170817 19:35:50.217" status="PASS" endtime="20170817 19:35:50.442"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.442">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170817 19:35:50.442" status="PASS" endtime="20170817 19:35:50.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:50.443" status="PASS" endtime="20170817 19:35:50.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.525">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:50.525">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.443" status="PASS" endtime="20170817 19:35:50.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:50.525" status="PASS" endtime="20170817 19:35:50.526"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:50.526">Delete All Sessions</msg>
<status starttime="20170817 19:35:50.526" status="PASS" endtime="20170817 19:35:50.526"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.526">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.216" status="PASS" endtime="20170817 19:35:50.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.527" status="PASS" endtime="20170817 19:35:50.527"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.528">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:50.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:50.528">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:50.527" status="PASS" endtime="20170817 19:35:50.528"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.528">${esel_data} = []</msg>
<status starttime="20170817 19:35:50.216" status="PASS" endtime="20170817 19:35:50.528"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.529">Length is 0</msg>
<msg level="INFO" timestamp="20170817 19:35:50.529">${length} = 0</msg>
<status starttime="20170817 19:35:50.528" status="PASS" endtime="20170817 19:35:50.529"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.529">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 19:35:50.529" status="PASS" endtime="20170817 19:35:50.530"></status>
</kw>
<status starttime="20170817 19:35:50.215" status="PASS" endtime="20170817 19:35:50.530"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 19:35:50.530" status="PASS" endtime="20170817 19:35:50.531"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.534">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:50.534" status="PASS" endtime="20170817 19:35:50.534"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.535">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:50.535" status="PASS" endtime="20170817 19:35:50.535"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.536">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:50.535" status="PASS" endtime="20170817 19:35:50.536"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.536">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:50.536" status="PASS" endtime="20170817 19:35:50.536"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:50.537" status="PASS" endtime="20170817 19:35:50.723"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:50.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.537" status="PASS" endtime="20170817 19:35:50.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.724">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.724" status="PASS" endtime="20170817 19:35:50.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.724" status="PASS" endtime="20170817 19:35:50.725"></status>
</kw>
<status starttime="20170817 19:35:50.533" status="PASS" endtime="20170817 19:35:50.725"></status>
</kw>
<status starttime="20170817 19:35:50.533" status="PASS" endtime="20170817 19:35:50.725"></status>
</kw>
<status starttime="20170817 19:35:50.532" status="PASS" endtime="20170817 19:35:50.725"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.726">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170817 19:35:50.726" status="PASS" endtime="20170817 19:35:50.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:50.727" status="PASS" endtime="20170817 19:35:50.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.815">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:50.815">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.727" status="PASS" endtime="20170817 19:35:50.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:50.815" status="PASS" endtime="20170817 19:35:50.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:50.816">Delete All Sessions</msg>
<status starttime="20170817 19:35:50.816" status="PASS" endtime="20170817 19:35:50.816"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.816">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.531" status="PASS" endtime="20170817 19:35:50.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:50.817" status="PASS" endtime="20170817 19:35:50.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.818">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:50.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:50.818">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:50.817" status="PASS" endtime="20170817 19:35:50.818"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:50.818">${esel_data} = []</msg>
<status starttime="20170817 19:35:50.531" status="PASS" endtime="20170817 19:35:50.818"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.818">Length is 0</msg>
<msg level="INFO" timestamp="20170817 19:35:50.819">${length} = 0</msg>
<status starttime="20170817 19:35:50.818" status="PASS" endtime="20170817 19:35:50.819"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.819">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 19:35:50.819" status="PASS" endtime="20170817 19:35:50.819"></status>
</kw>
<status starttime="20170817 19:35:50.530" status="PASS" endtime="20170817 19:35:50.819"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 19:35:50.820" status="PASS" endtime="20170817 19:35:50.820"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:50.824">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:50.823" status="PASS" endtime="20170817 19:35:50.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.825">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:50.824" status="PASS" endtime="20170817 19:35:50.825"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.825">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:50.825" status="PASS" endtime="20170817 19:35:50.825"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:50.826">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:50.825" status="PASS" endtime="20170817 19:35:50.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.140">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:50.827" status="PASS" endtime="20170817 19:35:51.140"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:51.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.826" status="PASS" endtime="20170817 19:35:51.141"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.141">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.141" status="PASS" endtime="20170817 19:35:51.141"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.142" status="PASS" endtime="20170817 19:35:51.142"></status>
</kw>
<status starttime="20170817 19:35:50.823" status="PASS" endtime="20170817 19:35:51.142"></status>
</kw>
<status starttime="20170817 19:35:50.822" status="PASS" endtime="20170817 19:35:51.142"></status>
</kw>
<status starttime="20170817 19:35:50.822" status="PASS" endtime="20170817 19:35:51.142"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.143">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170817 19:35:51.143" status="PASS" endtime="20170817 19:35:51.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:51.143" status="PASS" endtime="20170817 19:35:51.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.224">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:51.225">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.144" status="PASS" endtime="20170817 19:35:51.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:51.225" status="PASS" endtime="20170817 19:35:51.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:51.226">Delete All Sessions</msg>
<status starttime="20170817 19:35:51.226" status="PASS" endtime="20170817 19:35:51.226"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:50.821" status="PASS" endtime="20170817 19:35:51.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.226" status="PASS" endtime="20170817 19:35:51.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.227">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:51.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:51.227">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:51.227" status="PASS" endtime="20170817 19:35:51.227"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.228">${esel_data} = []</msg>
<status starttime="20170817 19:35:50.820" status="PASS" endtime="20170817 19:35:51.228"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.228">Length is 0</msg>
<msg level="INFO" timestamp="20170817 19:35:51.228">${length} = 0</msg>
<status starttime="20170817 19:35:51.228" status="PASS" endtime="20170817 19:35:51.228"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.229">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 19:35:51.229" status="PASS" endtime="20170817 19:35:51.229"></status>
</kw>
<status starttime="20170817 19:35:50.819" status="PASS" endtime="20170817 19:35:51.229"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 19:35:51.229" status="PASS" endtime="20170817 19:35:51.230"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.235">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:51.234" status="PASS" endtime="20170817 19:35:51.235"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.236">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:51.236" status="PASS" endtime="20170817 19:35:51.236"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.237">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:51.237" status="PASS" endtime="20170817 19:35:51.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:51.237" status="PASS" endtime="20170817 19:35:51.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.455">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:51.238" status="PASS" endtime="20170817 19:35:51.455"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.455">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:51.456">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.238" status="PASS" endtime="20170817 19:35:51.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.456">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.456" status="PASS" endtime="20170817 19:35:51.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.457" status="PASS" endtime="20170817 19:35:51.457"></status>
</kw>
<status starttime="20170817 19:35:51.234" status="PASS" endtime="20170817 19:35:51.457"></status>
</kw>
<status starttime="20170817 19:35:51.233" status="PASS" endtime="20170817 19:35:51.457"></status>
</kw>
<status starttime="20170817 19:35:51.232" status="PASS" endtime="20170817 19:35:51.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.458">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170817 19:35:51.458" status="PASS" endtime="20170817 19:35:51.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 19:35:51.458" status="PASS" endtime="20170817 19:35:51.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.549">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:51.550">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.459" status="PASS" endtime="20170817 19:35:51.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 19:35:51.550" status="PASS" endtime="20170817 19:35:51.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:51.551">Delete All Sessions</msg>
<status starttime="20170817 19:35:51.551" status="PASS" endtime="20170817 19:35:51.551"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.551">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.231" status="PASS" endtime="20170817 19:35:51.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.551" status="PASS" endtime="20170817 19:35:51.552"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.552">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:51.552">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:51.552">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:51.552" status="PASS" endtime="20170817 19:35:51.552"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.553">${esel_data} = []</msg>
<status starttime="20170817 19:35:51.230" status="PASS" endtime="20170817 19:35:51.553"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.553">Length is 0</msg>
<msg level="INFO" timestamp="20170817 19:35:51.553">${length} = 0</msg>
<status starttime="20170817 19:35:51.553" status="PASS" endtime="20170817 19:35:51.554"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.554">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 19:35:51.554" status="PASS" endtime="20170817 19:35:51.554"></status>
</kw>
<status starttime="20170817 19:35:51.229" status="PASS" endtime="20170817 19:35:51.554"></status>
</kw>
<status starttime="20170817 19:35:50.215" status="PASS" endtime="20170817 19:35:51.554"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.559">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 19:35:51.563">${out} = </msg>
<status starttime="20170817 19:35:51.555" status="PASS" endtime="20170817 19:35:51.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:35:51.567">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170817 19:35:51.566" status="FAIL" endtime="20170817 19:35:51.568"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.568">${status} = False</msg>
<status starttime="20170817 19:35:51.566" status="PASS" endtime="20170817 19:35:51.568"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.569">Returning from the enclosing user keyword.</msg>
<status starttime="20170817 19:35:51.568" status="PASS" endtime="20170817 19:35:51.569"></status>
</kw>
<status starttime="20170817 19:35:49.809" status="PASS" endtime="20170817 19:35:51.569"></status>
</kw>
<status starttime="20170817 19:35:49.761" status="PASS" endtime="20170817 19:35:51.569"></status>
</kw>
<status starttime="20170817 19:35:49.759" status="PASS" endtime="20170817 19:35:51.569"></status>
</kw>
<status starttime="20170817 19:35:49.759" status="PASS" endtime="20170817 19:35:51.570"></status>
</kw>
<status starttime="20170817 19:35:37.876" status="PASS" endtime="20170817 19:35:51.570"></status>
</kw>
<status starttime="20170817 19:35:37.873" status="PASS" endtime="20170817 19:35:51.570"></status>
</kw>
<status starttime="20170817 19:35:37.873" status="PASS" endtime="20170817 19:35:51.570"></status>
</kw>
<status starttime="20170817 19:35:37.872" status="PASS" endtime="20170817 19:35:51.570"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170817 19:35:51.584" status="PASS" endtime="20170817 19:35:51.584"></status>
</kw>
<status starttime="20170817 19:35:51.570" status="PASS" endtime="20170817 19:35:51.584"></status>
</kw>
<status starttime="20170817 19:35:37.871" status="PASS" endtime="20170817 19:35:51.584"></status>
</kw>
<status starttime="20170817 19:35:34.521" status="PASS" endtime="20170817 19:35:51.584"></status>
</kw>
<status starttime="20170817 19:35:34.520" status="PASS" endtime="20170817 19:35:51.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.591">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:51.591" status="PASS" endtime="20170817 19:35:51.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:51.593" status="PASS" endtime="20170817 19:35:51.593"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.594">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:51.593" status="PASS" endtime="20170817 19:35:51.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.594">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:51.594" status="PASS" endtime="20170817 19:35:51.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.798">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:51.595" status="PASS" endtime="20170817 19:35:51.798"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.798">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:51.799">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.595" status="PASS" endtime="20170817 19:35:51.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.799" status="PASS" endtime="20170817 19:35:51.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.800" status="PASS" endtime="20170817 19:35:51.800"></status>
</kw>
<status starttime="20170817 19:35:51.590" status="PASS" endtime="20170817 19:35:51.800"></status>
</kw>
<status starttime="20170817 19:35:51.589" status="PASS" endtime="20170817 19:35:51.801"></status>
</kw>
<status starttime="20170817 19:35:51.589" status="PASS" endtime="20170817 19:35:51.801"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.801">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:35:51.801" status="PASS" endtime="20170817 19:35:51.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.803">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:51.803" status="PASS" endtime="20170817 19:35:51.803"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.804">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:51.804" status="PASS" endtime="20170817 19:35:51.804"></status>
</kw>
<status starttime="20170817 19:35:51.804" status="PASS" endtime="20170817 19:35:51.805"></status>
</kw>
<status starttime="20170817 19:35:51.802" status="PASS" endtime="20170817 19:35:51.805"></status>
</kw>
<status starttime="20170817 19:35:51.802" status="PASS" endtime="20170817 19:35:51.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:51.893">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.805" status="PASS" endtime="20170817 19:35:51.893"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.895">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:51.895" status="PASS" endtime="20170817 19:35:51.895"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.896">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:51.896" status="PASS" endtime="20170817 19:35:51.896"></status>
</kw>
<status starttime="20170817 19:35:51.895" status="PASS" endtime="20170817 19:35:51.896"></status>
</kw>
<status starttime="20170817 19:35:51.894" status="PASS" endtime="20170817 19:35:51.896"></status>
</kw>
<status starttime="20170817 19:35:51.894" status="PASS" endtime="20170817 19:35:51.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:51.897">Delete All Sessions</msg>
<status starttime="20170817 19:35:51.897" status="PASS" endtime="20170817 19:35:51.897"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.897">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.588" status="PASS" endtime="20170817 19:35:51.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:51.898" status="PASS" endtime="20170817 19:35:51.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.898">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:51.899">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:51.899">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:51.898" status="PASS" endtime="20170817 19:35:51.899"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.899">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:35:51.587" status="PASS" endtime="20170817 19:35:51.899"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.899">${host_state} = Quiesced</msg>
<status starttime="20170817 19:35:51.587" status="PASS" endtime="20170817 19:35:51.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170817 19:35:51.900" status="PASS" endtime="20170817 19:35:51.900"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.900">${status} = True</msg>
<status starttime="20170817 19:35:51.900" status="PASS" endtime="20170817 19:35:51.901"></status>
</kw>
<status starttime="20170817 19:35:51.586" status="PASS" endtime="20170817 19:35:51.901"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:51.901">${resp} = True</msg>
<status starttime="20170817 19:35:51.586" status="PASS" endtime="20170817 19:35:51.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.903">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170817 19:35:51.903" status="PASS" endtime="20170817 19:35:51.903"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.905">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170817 19:35:51.904" status="PASS" endtime="20170817 19:35:51.905"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:51.907">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:51.907" status="PASS" endtime="20170817 19:35:51.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.909">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:51.908" status="PASS" endtime="20170817 19:35:51.909"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.910">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:51.909" status="PASS" endtime="20170817 19:35:51.910"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:51.911">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:51.910" status="PASS" endtime="20170817 19:35:51.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:52.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:51.912" status="PASS" endtime="20170817 19:35:52.139"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:52.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:52.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.911" status="PASS" endtime="20170817 19:35:52.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:52.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:52.140" status="PASS" endtime="20170817 19:35:52.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:52.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:52.140" status="PASS" endtime="20170817 19:35:52.141"></status>
</kw>
<status starttime="20170817 19:35:51.906" status="PASS" endtime="20170817 19:35:52.141"></status>
</kw>
<status starttime="20170817 19:35:51.906" status="PASS" endtime="20170817 19:35:52.141"></status>
</kw>
<status starttime="20170817 19:35:51.905" status="PASS" endtime="20170817 19:35:52.141"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.142">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170817 19:35:52.141" status="PASS" endtime="20170817 19:35:52.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:52.142" status="PASS" endtime="20170817 19:35:52.142"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170817 19:35:52.143" status="PASS" endtime="20170817 19:35:52.143"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.145">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170817 19:35:52.144" status="PASS" endtime="20170817 19:35:52.145"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:52.146">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170817 19:35:52.145" status="PASS" endtime="20170817 19:35:52.146"></status>
</kw>
<status starttime="20170817 19:35:52.145" status="PASS" endtime="20170817 19:35:52.146"></status>
</kw>
<status starttime="20170817 19:35:52.143" status="PASS" endtime="20170817 19:35:52.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.506">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170817 19:35:52.506">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:52.146" status="PASS" endtime="20170817 19:35:52.506"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.508">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:52.507" status="PASS" endtime="20170817 19:35:52.508"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:52.508">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:52.508" status="PASS" endtime="20170817 19:35:52.509"></status>
</kw>
<status starttime="20170817 19:35:52.508" status="PASS" endtime="20170817 19:35:52.509"></status>
</kw>
<status starttime="20170817 19:35:52.506" status="PASS" endtime="20170817 19:35:52.509"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:52.509">Delete All Sessions</msg>
<status starttime="20170817 19:35:52.509" status="PASS" endtime="20170817 19:35:52.509"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:52.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:51.905" status="PASS" endtime="20170817 19:35:52.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:52.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:52.510" status="PASS" endtime="20170817 19:35:52.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.511">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:52.511">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:52.511">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:52.511" status="PASS" endtime="20170817 19:35:52.511"></status>
</kw>
<status starttime="20170817 19:35:51.903" status="PASS" endtime="20170817 19:35:52.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170817 19:35:52.511" status="PASS" endtime="20170817 19:35:52.512"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:52.518">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:52.518" status="PASS" endtime="20170817 19:35:52.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:52.519" status="PASS" endtime="20170817 19:35:52.520"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.520">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:52.520" status="PASS" endtime="20170817 19:35:52.520"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:52.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:52.521" status="PASS" endtime="20170817 19:35:52.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:54.326">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:52.522" status="PASS" endtime="20170817 19:35:54.327"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:54.327">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:54.327">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:52.521" status="PASS" endtime="20170817 19:35:54.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:54.328">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:54.327" status="PASS" endtime="20170817 19:35:54.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:54.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:54.328" status="PASS" endtime="20170817 19:35:54.328"></status>
</kw>
<status starttime="20170817 19:35:52.517" status="PASS" endtime="20170817 19:35:54.328"></status>
</kw>
<status starttime="20170817 19:35:52.516" status="PASS" endtime="20170817 19:35:54.329"></status>
</kw>
<status starttime="20170817 19:35:52.515" status="PASS" endtime="20170817 19:35:54.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:54.329">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:35:54.329" status="PASS" endtime="20170817 19:35:54.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:54.332">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:54.331" status="PASS" endtime="20170817 19:35:54.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:54.333">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:54.332" status="PASS" endtime="20170817 19:35:54.333"></status>
</kw>
<status starttime="20170817 19:35:54.332" status="PASS" endtime="20170817 19:35:54.333"></status>
</kw>
<status starttime="20170817 19:35:54.330" status="PASS" endtime="20170817 19:35:54.333"></status>
</kw>
<status starttime="20170817 19:35:54.330" status="PASS" endtime="20170817 19:35:54.333"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:58.828">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:58.828">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:54.333" status="PASS" endtime="20170817 19:35:58.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:58.830">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:58.829" status="PASS" endtime="20170817 19:35:58.830"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:58.831">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:58.831" status="PASS" endtime="20170817 19:35:58.831"></status>
</kw>
<status starttime="20170817 19:35:58.830" status="PASS" endtime="20170817 19:35:58.831"></status>
</kw>
<status starttime="20170817 19:35:58.829" status="PASS" endtime="20170817 19:35:58.831"></status>
</kw>
<status starttime="20170817 19:35:58.828" status="PASS" endtime="20170817 19:35:58.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:58.832">Delete All Sessions</msg>
<status starttime="20170817 19:35:58.832" status="PASS" endtime="20170817 19:35:58.832"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:58.832">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:52.514" status="PASS" endtime="20170817 19:35:58.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:58.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:58.832" status="PASS" endtime="20170817 19:35:58.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:58.833">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:58.833">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:58.834">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:58.833" status="PASS" endtime="20170817 19:35:58.834"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:58.834">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 19:35:52.514" status="PASS" endtime="20170817 19:35:58.834"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:58.834">${power_state} = On</msg>
<status starttime="20170817 19:35:52.513" status="PASS" endtime="20170817 19:35:58.834"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:35:58.835">Off != On</msg>
<status starttime="20170817 19:35:58.835" status="FAIL" endtime="20170817 19:35:58.835"></status>
</kw>
<status starttime="20170817 19:35:52.513" status="FAIL" endtime="20170817 19:35:58.835"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:58.839">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:35:58.839" status="PASS" endtime="20170817 19:35:58.840"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:58.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:35:58.840" status="PASS" endtime="20170817 19:35:58.840"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:58.841">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:35:58.840" status="PASS" endtime="20170817 19:35:58.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:58.841">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:35:58.841" status="PASS" endtime="20170817 19:35:58.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:59.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:35:58.842" status="PASS" endtime="20170817 19:35:59.226"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:59.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:35:59.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:58.842" status="PASS" endtime="20170817 19:35:59.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:59.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:59.227" status="PASS" endtime="20170817 19:35:59.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:59.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:59.228" status="PASS" endtime="20170817 19:35:59.228"></status>
</kw>
<status starttime="20170817 19:35:58.838" status="PASS" endtime="20170817 19:35:59.228"></status>
</kw>
<status starttime="20170817 19:35:58.838" status="PASS" endtime="20170817 19:35:59.229"></status>
</kw>
<status starttime="20170817 19:35:58.837" status="PASS" endtime="20170817 19:35:59.229"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:59.229">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:35:59.229" status="PASS" endtime="20170817 19:35:59.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:59.232">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:59.231" status="PASS" endtime="20170817 19:35:59.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:59.233">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:35:59.232" status="PASS" endtime="20170817 19:35:59.233"></status>
</kw>
<status starttime="20170817 19:35:59.232" status="PASS" endtime="20170817 19:35:59.233"></status>
</kw>
<status starttime="20170817 19:35:59.230" status="PASS" endtime="20170817 19:35:59.233"></status>
</kw>
<status starttime="20170817 19:35:59.230" status="PASS" endtime="20170817 19:35:59.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:59.736">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:35:59.736">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:59.233" status="PASS" endtime="20170817 19:35:59.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:59.739">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:59.738" status="PASS" endtime="20170817 19:35:59.739"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:59.740">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:35:59.739" status="PASS" endtime="20170817 19:35:59.740"></status>
</kw>
<status starttime="20170817 19:35:59.739" status="PASS" endtime="20170817 19:35:59.740"></status>
</kw>
<status starttime="20170817 19:35:59.737" status="PASS" endtime="20170817 19:35:59.740"></status>
</kw>
<status starttime="20170817 19:35:59.737" status="PASS" endtime="20170817 19:35:59.740"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:35:59.740">Delete All Sessions</msg>
<status starttime="20170817 19:35:59.740" status="PASS" endtime="20170817 19:35:59.741"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:59.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:35:58.836" status="PASS" endtime="20170817 19:35:59.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:35:59.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:35:59.741" status="PASS" endtime="20170817 19:35:59.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:35:59.742">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:35:59.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:35:59.742">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:35:59.742" status="PASS" endtime="20170817 19:35:59.742"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:59.743">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 19:35:58.836" status="PASS" endtime="20170817 19:35:59.743"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:35:59.743">${host_state} = Quiesced</msg>
<status starttime="20170817 19:35:58.835" status="PASS" endtime="20170817 19:35:59.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 19:35:59.744">Off != Quiesced</msg>
<status starttime="20170817 19:35:59.743" status="FAIL" endtime="20170817 19:35:59.744"></status>
</kw>
<status starttime="20170817 19:35:52.512" status="FAIL" endtime="20170817 19:35:59.744"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:09.750">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:36:09.749" status="PASS" endtime="20170817 19:36:09.750"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:09.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:36:09.750" status="PASS" endtime="20170817 19:36:09.751"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:09.751">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:36:09.751" status="PASS" endtime="20170817 19:36:09.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:09.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:36:09.752" status="PASS" endtime="20170817 19:36:09.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:09.950">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:36:09.753" status="PASS" endtime="20170817 19:36:09.950"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:09.951">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:36:09.951">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:36:09.753" status="PASS" endtime="20170817 19:36:09.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:09.951">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:36:09.951" status="PASS" endtime="20170817 19:36:09.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:09.952">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:36:09.952" status="PASS" endtime="20170817 19:36:09.952"></status>
</kw>
<status starttime="20170817 19:36:09.749" status="PASS" endtime="20170817 19:36:09.952"></status>
</kw>
<status starttime="20170817 19:36:09.748" status="PASS" endtime="20170817 19:36:09.952"></status>
</kw>
<status starttime="20170817 19:36:09.747" status="PASS" endtime="20170817 19:36:09.952"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:09.953">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 19:36:09.953" status="PASS" endtime="20170817 19:36:09.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:09.955">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:36:09.954" status="PASS" endtime="20170817 19:36:09.955"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:09.956">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 19:36:09.956" status="PASS" endtime="20170817 19:36:09.956"></status>
</kw>
<status starttime="20170817 19:36:09.955" status="PASS" endtime="20170817 19:36:09.956"></status>
</kw>
<status starttime="20170817 19:36:09.954" status="PASS" endtime="20170817 19:36:09.956"></status>
</kw>
<status starttime="20170817 19:36:09.953" status="PASS" endtime="20170817 19:36:09.956"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.025">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:36:10.026">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:36:09.957" status="PASS" endtime="20170817 19:36:10.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.027">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:36:10.027" status="PASS" endtime="20170817 19:36:10.028"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.028">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:36:10.028" status="PASS" endtime="20170817 19:36:10.029"></status>
</kw>
<status starttime="20170817 19:36:10.028" status="PASS" endtime="20170817 19:36:10.029"></status>
</kw>
<status starttime="20170817 19:36:10.026" status="PASS" endtime="20170817 19:36:10.029"></status>
</kw>
<status starttime="20170817 19:36:10.026" status="PASS" endtime="20170817 19:36:10.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:36:10.029">Delete All Sessions</msg>
<status starttime="20170817 19:36:10.029" status="PASS" endtime="20170817 19:36:10.029"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.030">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:36:09.747" status="PASS" endtime="20170817 19:36:10.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:36:10.030" status="PASS" endtime="20170817 19:36:10.030"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.031">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:36:10.031">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:36:10.031">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:36:10.030" status="PASS" endtime="20170817 19:36:10.031"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.031">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 19:36:09.746" status="PASS" endtime="20170817 19:36:10.031"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.032">${power_state} = Off</msg>
<status starttime="20170817 19:36:09.746" status="PASS" endtime="20170817 19:36:10.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 19:36:10.032" status="PASS" endtime="20170817 19:36:10.032"></status>
</kw>
<status starttime="20170817 19:36:09.745" status="PASS" endtime="20170817 19:36:10.032"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.036">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 19:36:10.036" status="PASS" endtime="20170817 19:36:10.037"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.037">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 19:36:10.037" status="PASS" endtime="20170817 19:36:10.037"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.038">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 19:36:10.037" status="PASS" endtime="20170817 19:36:10.038"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.038">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 19:36:10.038" status="PASS" endtime="20170817 19:36:10.039"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.223">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 19:36:10.039" status="PASS" endtime="20170817 19:36:10.223"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.223">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 19:36:10.223">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:36:10.039" status="PASS" endtime="20170817 19:36:10.223"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.224">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:36:10.223" status="PASS" endtime="20170817 19:36:10.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:36:10.224" status="PASS" endtime="20170817 19:36:10.225"></status>
</kw>
<status starttime="20170817 19:36:10.035" status="PASS" endtime="20170817 19:36:10.225"></status>
</kw>
<status starttime="20170817 19:36:10.035" status="PASS" endtime="20170817 19:36:10.225"></status>
</kw>
<status starttime="20170817 19:36:10.034" status="PASS" endtime="20170817 19:36:10.225"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.226">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 19:36:10.225" status="PASS" endtime="20170817 19:36:10.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.228">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:36:10.227" status="PASS" endtime="20170817 19:36:10.228"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.229">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 19:36:10.228" status="PASS" endtime="20170817 19:36:10.229"></status>
</kw>
<status starttime="20170817 19:36:10.228" status="PASS" endtime="20170817 19:36:10.229"></status>
</kw>
<status starttime="20170817 19:36:10.226" status="PASS" endtime="20170817 19:36:10.229"></status>
</kw>
<status starttime="20170817 19:36:10.226" status="PASS" endtime="20170817 19:36:10.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.342">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 19:36:10.343">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:36:10.229" status="PASS" endtime="20170817 19:36:10.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.345">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:36:10.344" status="PASS" endtime="20170817 19:36:10.345"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.346">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 19:36:10.346" status="PASS" endtime="20170817 19:36:10.346"></status>
</kw>
<status starttime="20170817 19:36:10.345" status="PASS" endtime="20170817 19:36:10.346"></status>
</kw>
<status starttime="20170817 19:36:10.343" status="PASS" endtime="20170817 19:36:10.346"></status>
</kw>
<status starttime="20170817 19:36:10.343" status="PASS" endtime="20170817 19:36:10.346"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 19:36:10.347">Delete All Sessions</msg>
<status starttime="20170817 19:36:10.347" status="PASS" endtime="20170817 19:36:10.347"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.347">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 19:36:10.033" status="PASS" endtime="20170817 19:36:10.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 19:36:10.347" status="PASS" endtime="20170817 19:36:10.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.348">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 19:36:10.348">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 19:36:10.349">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170817 19:36:10.348" status="PASS" endtime="20170817 19:36:10.349"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.349">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170817 19:36:10.033" status="PASS" endtime="20170817 19:36:10.349"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.349">${host_state} = Off</msg>
<status starttime="20170817 19:36:10.032" status="PASS" endtime="20170817 19:36:10.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 19:36:10.349" status="PASS" endtime="20170817 19:36:10.350"></status>
</kw>
<status starttime="20170817 19:36:09.744" status="PASS" endtime="20170817 19:36:10.350"></status>
</kw>
<status starttime="20170817 19:35:52.512" status="PASS" endtime="20170817 19:36:10.350"></status>
</kw>
<status starttime="20170817 19:35:51.902" status="PASS" endtime="20170817 19:36:10.350"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.351">HOST is recovered from quiesced state</msg>
<status starttime="20170817 19:36:10.350" status="PASS" endtime="20170817 19:36:10.351"></status>
</kw>
<status starttime="20170817 19:35:51.902" status="PASS" endtime="20170817 19:36:10.351"></status>
</kw>
<status starttime="20170817 19:35:51.901" status="PASS" endtime="20170817 19:36:10.351"></status>
</kw>
<status starttime="20170817 19:35:51.585" status="PASS" endtime="20170817 19:36:10.351"></status>
</kw>
<status starttime="20170817 19:35:51.585" status="PASS" endtime="20170817 19:36:10.351"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.362">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170817 19:36:10.352" status="PASS" endtime="20170817 19:36:10.362"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.363">${FFDC_DIR_PATH} = /tmp/fspcibld/23324/obmc-robot/logs/20170817193537588786_TestsTestBasicPoweron/20170817193537588786_PowerOnTest/</msg>
<status starttime="20170817 19:36:10.362" status="PASS" endtime="20170817 19:36:10.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170817 19:36:10.363" status="PASS" endtime="20170817 19:36:10.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170817 19:36:10.364" status="PASS" endtime="20170817 19:36:10.365"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:36:10.365">Directory '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs"&gt;/tmp/fspcibld/23324/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170817 19:36:10.365" status="PASS" endtime="20170817 19:36:10.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:36:10.366">File '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170817 19:36:10.366" status="PASS" endtime="20170817 19:36:10.366"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.366">${exist} = True</msg>
<status starttime="20170817 19:36:10.365" status="PASS" endtime="20170817 19:36:10.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170817 19:36:10.367" status="PASS" endtime="20170817 19:36:10.367"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170817 19:36:10.367" status="PASS" endtime="20170817 19:36:10.368"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.369">${cur_time} = 2017-08-17 19:36:10:368380</msg>
<status starttime="20170817 19:36:10.368" status="PASS" endtime="20170817 19:36:10.369"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.369">${cur_time} = 20170817193610368380</msg>
<status starttime="20170817 19:36:10.369" status="PASS" endtime="20170817 19:36:10.369"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.370">${cur_time} = 20170817193610368380</msg>
<status starttime="20170817 19:36:10.368" status="PASS" endtime="20170817 19:36:10.370"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:36:10.371">Appended to file '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23324/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 19:36:10.370" status="PASS" endtime="20170817 19:36:10.371"></status>
</kw>
<status starttime="20170817 19:36:10.351" status="PASS" endtime="20170817 19:36:10.371"></status>
</kw>
<status starttime="20170817 19:35:34.192" status="PASS" endtime="20170817 19:36:10.372"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.373">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:36:10.373" status="PASS" endtime="20170817 19:36:10.373"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.374">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:36:10.374" status="PASS" endtime="20170817 19:36:10.374"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.374">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 19:36:10.373" status="PASS" endtime="20170817 19:36:10.374"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.375">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170817 19:36:10.375" status="PASS" endtime="20170817 19:36:10.375"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:36:10.375" status="PASS" endtime="20170817 19:36:10.376"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.380">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 19:36:10.383">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 19:36:10.383">${output} = /tmp/fspcibld/23324/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170817 19:36:10.376" status="PASS" endtime="20170817 19:36:10.383"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 19:36:10.385" status="PASS" endtime="20170817 19:36:10.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170817 19:36:10.386" status="PASS" endtime="20170817 19:36:10.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.388">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 19:36:10.387" status="PASS" endtime="20170817 19:36:10.388"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.388">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 19:36:10.375" status="PASS" endtime="20170817 19:36:10.388"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.389">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170817 19:36:10.388" status="PASS" endtime="20170817 19:36:10.389"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:36:10.389" status="PASS" endtime="20170817 19:36:10.389"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.393">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 19:36:10.408">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 19:36:10.408">${os_con_pid} = </msg>
<status starttime="20170817 19:36:10.390" status="PASS" endtime="20170817 19:36:10.408"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170817 19:36:10.410" status="PASS" endtime="20170817 19:36:10.411"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.412">${cmd_buf} = kill -9 </msg>
<status starttime="20170817 19:36:10.411" status="PASS" endtime="20170817 19:36:10.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 19:36:10.413" status="PASS" endtime="20170817 19:36:10.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.416">${rc} = None</msg>
<msg level="INFO" timestamp="20170817 19:36:10.416">${output} = None</msg>
<status starttime="20170817 19:36:10.415" status="PASS" endtime="20170817 19:36:10.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 19:36:10.416" status="PASS" endtime="20170817 19:36:10.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170817 19:36:10.434">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/23324/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/23324/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170817 19:36:10.427" status="PASS" endtime="20170817 19:36:10.434"></status>
</kw>
<status starttime="20170817 19:36:10.419" status="PASS" endtime="20170817 19:36:10.434"></status>
</kw>
<status starttime="20170817 19:36:10.417" status="PASS" endtime="20170817 19:36:10.434"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.434">${output} = </msg>
<status starttime="20170817 19:36:10.434" status="PASS" endtime="20170817 19:36:10.434"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170817 19:36:10.435">${loc_quiet} = 1</msg>
<status starttime="20170817 19:36:10.435" status="PASS" endtime="20170817 19:36:10.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170817 19:36:10.436" status="PASS" endtime="20170817 19:36:10.511"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.518">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 19:36:10.520">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170817 19:36:10.436" status="PASS" endtime="20170817 19:36:10.520"></status>
</kw>
<msg level="INFO" timestamp="20170817 19:36:10.524">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170817 19:36:10.372" status="PASS" endtime="20170817 19:36:10.524"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 19:36:10.533">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170817 19:36:10.533" status="PASS" endtime="20170817 19:36:10.533"></status>
</kw>
<status starttime="20170817 19:35:34.191" status="PASS" endtime="20170817 19:36:10.534"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170817 19:25:22.157" critical="yes" status="FAIL" endtime="20170817 19:36:10.535">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170817 19:25:22.120" status="FAIL" endtime="20170817 19:36:10.539"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170817 19:25:15.971" status="FAIL" endtime="20170817 19:36:10.549"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" pass="1" id="s1" name="Tests">Tests</stat>
<stat fail="0" pass="1" id="s1-s1" name="Security">Tests.Security</stat>
<stat fail="0" pass="1" id="s1-s1-s1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" pass="0" id="s1-s2" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
