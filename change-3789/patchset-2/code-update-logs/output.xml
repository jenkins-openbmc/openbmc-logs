<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170425 18:23:12.064" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:23:12.807" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:23:12.808" starttime="20170425 18:23:12.807"></status>
</kw>
<msg timestamp="20170425 18:23:12.808" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:23:12.808" starttime="20170425 18:23:12.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:12.809" starttime="20170425 18:23:12.809"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:12.809" starttime="20170425 18:23:12.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:12.810" starttime="20170425 18:23:12.809"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:23:12.811" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:23:12.811" starttime="20170425 18:23:12.810"></status>
</kw>
<msg timestamp="20170425 18:23:12.811" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:23:12.811" starttime="20170425 18:23:12.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:12.813" starttime="20170425 18:23:12.813"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:12.813" starttime="20170425 18:23:12.812"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:12.813" starttime="20170425 18:23:12.811"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:23:12.814" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:23:14.587" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 18:23:14.587" starttime="20170425 18:23:12.814"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:14.587" starttime="20170425 18:23:12.806"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170425 18:23:14.588" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170425 18:23:14.655" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 18:23:14.655" level="INFO">${output} = 1493142109</msg>
<msg timestamp="20170425 18:23:14.655" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170425 18:23:14.655" starttime="20170425 18:23:14.587"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170425 18:23:14.656" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170425 18:23:14.656" starttime="20170425 18:23:14.655"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170425 18:23:14.656" level="INFO">${btime} = 1493142109</msg>
<status status="PASS" endtime="20170425 18:23:14.656" starttime="20170425 18:23:14.656"></status>
</kw>
<msg timestamp="20170425 18:23:14.656" level="INFO">${cur_btime} = 1493142109</msg>
<status status="PASS" endtime="20170425 18:23:14.657" starttime="20170425 18:23:12.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170425 18:23:14.658" level="INFO">${BOOT_TIME} = 1493142109</msg>
<status status="PASS" endtime="20170425 18:23:14.659" starttime="20170425 18:23:14.658"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:14.659" starttime="20170425 18:23:14.657"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:14.659" starttime="20170425 18:23:12.805"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:14.659" starttime="20170425 18:23:14.659"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:14.660" starttime="20170425 18:23:14.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:14.661" starttime="20170425 18:23:14.660"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:14.661" starttime="20170425 18:23:12.805"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:23:14.663" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:23:14.664" starttime="20170425 18:23:14.663"></status>
</kw>
<msg timestamp="20170425 18:23:14.664" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:23:14.664" starttime="20170425 18:23:14.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:14.665" starttime="20170425 18:23:14.665"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:14.665" starttime="20170425 18:23:14.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:14.666" starttime="20170425 18:23:14.665"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:23:14.667" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:23:14.667" starttime="20170425 18:23:14.666"></status>
</kw>
<msg timestamp="20170425 18:23:14.667" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:23:14.667" starttime="20170425 18:23:14.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:14.669" starttime="20170425 18:23:14.668"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:14.669" starttime="20170425 18:23:14.668"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:14.669" starttime="20170425 18:23:14.667"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:23:14.670" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:23:16.311" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170425 18:23:16.311" starttime="20170425 18:23:14.669"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.311" starttime="20170425 18:23:14.662"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170425 18:23:16.312" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170425 18:23:16.380" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170425 18:23:16.380" level="INFO">${output} = </msg>
<msg timestamp="20170425 18:23:16.380" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/8a3a9614410e46fe87786be50aa53612.</msg>
<msg timestamp="20170425 18:23:16.380" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170425 18:23:16.380" starttime="20170425 18:23:16.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:16.381" starttime="20170425 18:23:16.380"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.381" starttime="20170425 18:23:14.661"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170425 18:23:16.383" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170425 18:23:16.384" starttime="20170425 18:23:16.383"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:23:16.385" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170425 18:23:16.385" starttime="20170425 18:23:16.384"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:23:16.387" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:23:16.387" starttime="20170425 18:23:16.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:16.388" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:16.388" starttime="20170425 18:23:16.387"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:23:16.388" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:23:16.388" starttime="20170425 18:23:16.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:23:16.389" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:23:16.389" starttime="20170425 18:23:16.389"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:23:16.589" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:23:16.590" starttime="20170425 18:23:16.390"></status>
</kw>
<msg timestamp="20170425 18:23:16.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:23:16.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.590" starttime="20170425 18:23:16.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:23:16.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.591" starttime="20170425 18:23:16.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:16.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.592" starttime="20170425 18:23:16.592"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.592" starttime="20170425 18:23:16.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:23:16.593" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170425 18:23:16.593" starttime="20170425 18:23:16.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:16.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:16.596" starttime="20170425 18:23:16.594"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:16.596" starttime="20170425 18:23:16.596"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 18:23:16.599" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170425 18:23:16.599" starttime="20170425 18:23:16.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 18:23:16.600" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 18:23:16.600" starttime="20170425 18:23:16.600"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.600" starttime="20170425 18:23:16.599"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.601" starttime="20170425 18:23:16.597"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 18:23:16.773" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170425 18:23:16.773" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.773" starttime="20170425 18:23:16.601"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 18:23:16.775" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 18:23:16.775" starttime="20170425 18:23:16.774"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 18:23:16.776" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 18:23:16.776" starttime="20170425 18:23:16.775"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.776" starttime="20170425 18:23:16.775"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.776" starttime="20170425 18:23:16.774"></status>
</kw>
<msg timestamp="20170425 18:23:16.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.777" starttime="20170425 18:23:16.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:16.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.778" starttime="20170425 18:23:16.777"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170425 18:23:16.778" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 18:23:16.779" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 18:23:16.779" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170425 18:23:16.779" starttime="20170425 18:23:16.778"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.779" starttime="20170425 18:23:16.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:16.779" starttime="20170425 18:23:16.779"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:23:16.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:23:16.784" starttime="20170425 18:23:16.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:16.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:16.784" starttime="20170425 18:23:16.784"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:23:16.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:23:16.785" starttime="20170425 18:23:16.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:23:16.786" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:23:16.786" starttime="20170425 18:23:16.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:23:16.985" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:23:16.985" starttime="20170425 18:23:16.786"></status>
</kw>
<msg timestamp="20170425 18:23:16.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:23:16.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.986" starttime="20170425 18:23:16.786"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:23:16.986" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.987" starttime="20170425 18:23:16.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:16.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:16.987" starttime="20170425 18:23:16.987"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:16.987" starttime="20170425 18:23:16.782"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:23:16.988" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170425 18:23:16.988" starttime="20170425 18:23:16.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:16.989" starttime="20170425 18:23:16.988"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 18:23:17.051" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170425 18:23:17.051" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.051" starttime="20170425 18:23:16.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.052" starttime="20170425 18:23:17.052"></status>
</kw>
<msg timestamp="20170425 18:23:17.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.052" starttime="20170425 18:23:16.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.053" starttime="20170425 18:23:17.052"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 18:23:17.053" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 18:23:17.053" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 18:23:17.054" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170425 18:23:17.054" starttime="20170425 18:23:17.053"></status>
</kw>
<msg timestamp="20170425 18:23:17.054" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170425 18:23:17.054" starttime="20170425 18:23:16.781"></status>
</kw>
<msg timestamp="20170425 18:23:17.054" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170425 18:23:17.054" starttime="20170425 18:23:16.780"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.055" starttime="20170425 18:23:17.055"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.055" starttime="20170425 18:23:16.780"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.055" starttime="20170425 18:23:16.780"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.056" starttime="20170425 18:23:16.382"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.056" starttime="20170425 18:23:16.382"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.056" starttime="20170425 18:23:16.381"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170425 18:23:17.057" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170425 18:23:17.057" starttime="20170425 18:23:17.057"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:23:17.059" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170425 18:23:17.059" starttime="20170425 18:23:17.058"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:23:17.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:23:17.065" starttime="20170425 18:23:17.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:17.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:17.066" starttime="20170425 18:23:17.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:23:17.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:23:17.067" starttime="20170425 18:23:17.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:23:17.067" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:23:17.068" starttime="20170425 18:23:17.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.247" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:23:17.247" starttime="20170425 18:23:17.068"></status>
</kw>
<msg timestamp="20170425 18:23:17.247" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:23:17.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.247" starttime="20170425 18:23:17.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.248" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.248" starttime="20170425 18:23:17.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.249" starttime="20170425 18:23:17.249"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.249" starttime="20170425 18:23:17.060"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:23:17.250" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170425 18:23:17.250" starttime="20170425 18:23:17.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:17.250" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:17.250" starttime="20170425 18:23:17.250"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.251" starttime="20170425 18:23:17.251"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 18:23:17.252" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 18:23:17.253" starttime="20170425 18:23:17.252"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 18:23:17.253" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170425 18:23:17.254" starttime="20170425 18:23:17.253"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.254" starttime="20170425 18:23:17.253"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.254" starttime="20170425 18:23:17.251"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 18:23:17.446" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170425 18:23:17.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.446" starttime="20170425 18:23:17.254"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170425 18:23:17.448" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 18:23:17.448" starttime="20170425 18:23:17.447"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170425 18:23:17.449" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170425 18:23:17.449" starttime="20170425 18:23:17.448"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.449" starttime="20170425 18:23:17.448"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.449" starttime="20170425 18:23:17.447"></status>
</kw>
<msg timestamp="20170425 18:23:17.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.450" starttime="20170425 18:23:17.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.451" starttime="20170425 18:23:17.450"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170425 18:23:17.451" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 18:23:17.451" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 18:23:17.451" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170425 18:23:17.451" starttime="20170425 18:23:17.451"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.451" starttime="20170425 18:23:17.058"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:23:17.454" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:23:17.454" starttime="20170425 18:23:17.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:17.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:17.455" starttime="20170425 18:23:17.454"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:23:17.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:23:17.455" starttime="20170425 18:23:17.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:23:17.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:23:17.456" starttime="20170425 18:23:17.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.631" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:23:17.631" starttime="20170425 18:23:17.457"></status>
</kw>
<msg timestamp="20170425 18:23:17.631" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:23:17.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.631" starttime="20170425 18:23:17.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.632" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.632" starttime="20170425 18:23:17.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.632" starttime="20170425 18:23:17.632"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.632" starttime="20170425 18:23:17.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:23:17.633" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170425 18:23:17.633" starttime="20170425 18:23:17.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.634" starttime="20170425 18:23:17.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 18:23:17.717" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170425 18:23:17.717" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.717" starttime="20170425 18:23:17.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.718" starttime="20170425 18:23:17.717"></status>
</kw>
<msg timestamp="20170425 18:23:17.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.718" starttime="20170425 18:23:17.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.719" starttime="20170425 18:23:17.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 18:23:17.719" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 18:23:17.720" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 18:23:17.720" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170425 18:23:17.720" starttime="20170425 18:23:17.719"></status>
</kw>
<msg timestamp="20170425 18:23:17.720" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170425 18:23:17.720" starttime="20170425 18:23:17.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.721" starttime="20170425 18:23:17.720"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.721" starttime="20170425 18:23:17.056"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:23:17.722" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170425 18:23:17.722" starttime="20170425 18:23:17.722"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:23:17.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:23:17.724" starttime="20170425 18:23:17.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:17.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:17.725" starttime="20170425 18:23:17.724"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:23:17.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:23:17.725" starttime="20170425 18:23:17.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:23:17.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:23:17.726" starttime="20170425 18:23:17.726"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:23:17.902" starttime="20170425 18:23:17.727"></status>
</kw>
<msg timestamp="20170425 18:23:17.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:23:17.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.903" starttime="20170425 18:23:17.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.904" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.904" starttime="20170425 18:23:17.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:17.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:17.905" starttime="20170425 18:23:17.904"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:17.905" starttime="20170425 18:23:17.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:23:17.906" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170425 18:23:17.906" starttime="20170425 18:23:17.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:17.907" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:17.907" starttime="20170425 18:23:17.906"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.907" starttime="20170425 18:23:17.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:17.908" starttime="20170425 18:23:17.908"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 18:23:18.272" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170425 18:23:18.272" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:18.272" starttime="20170425 18:23:17.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:18.273" starttime="20170425 18:23:18.272"></status>
</kw>
<msg timestamp="20170425 18:23:18.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:23:18.273" starttime="20170425 18:23:17.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:23:18.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:23:18.274" starttime="20170425 18:23:18.273"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170425 18:23:28.275" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170425 18:23:28.275" starttime="20170425 18:23:18.274"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:28.275" starttime="20170425 18:23:17.721"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:23:28.279" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:23:28.279" starttime="20170425 18:23:28.279"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:23:28.284" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:23:31.288" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:23:31.289" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.670 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.679 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:23:31.290" starttime="20170425 18:23:28.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:23:31.307" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.670 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.679 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.752 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.621 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.621/0.680/0.752/0.053 ms</msg>
<status status="PASS" endtime="20170425 18:23:31.307" starttime="20170425 18:23:31.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:31.308" starttime="20170425 18:23:31.307"></status>
</kw>
<status status="PASS" endtime="20170425 18:23:31.309" starttime="20170425 18:23:28.278"></status>
</kw>
<msg timestamp="20170425 18:23:31.309" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:23:31.309" starttime="20170425 18:23:28.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:23:31.311" starttime="20170425 18:23:31.310"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:23:31.316" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:23:31.320" starttime="20170425 18:23:31.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:23:31.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:23:31.321" starttime="20170425 18:23:31.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:23:31.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:23:31.322" starttime="20170425 18:23:31.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:23:31.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:23:31.322" starttime="20170425 18:23:31.322"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:23:31.935" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c348150&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20170425 18:23:31.936" starttime="20170425 18:23:31.323"></status>
</kw>
<msg timestamp="20170425 18:23:31.936" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170425 18:23:31.936" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection ob...</msg>
<status status="PASS" endtime="20170425 18:23:31.936" starttime="20170425 18:23:31.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:23:31.937" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 18:23:31.937" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.86.161', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9c348150&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170425 18:23:31.937" starttime="20170425 18:23:31.936"></status>
</kw>
<status status="FAIL" endtime="20170425 18:23:31.937" starttime="20170425 18:23:31.312"></status>
</kw>
<msg timestamp="20170425 18:23:31.937" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170425 18:23:31.937" starttime="20170425 18:23:31.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170425 18:23:31.939" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170425 18:23:31.939" starttime="20170425 18:23:31.938"></status>
</kw>
<status status="FAIL" endtime="20170425 18:23:31.939" starttime="20170425 18:23:31.938"></status>
</kw>
<status status="FAIL" endtime="20170425 18:23:31.939" starttime="20170425 18:23:28.277"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:23:41.941" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:23:41.941" starttime="20170425 18:23:41.941"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:23:41.945" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:23:54.970" level="INFO">${RC} = 1</msg>
<msg timestamp="20170425 18:23:54.970" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170425 18:23:54.970" starttime="20170425 18:23:41.941"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:23:54.974" level="INFO">RC: 1
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20170425 18:23:54.974" starttime="20170425 18:23:54.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170425 18:23:54.975" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170425 18:23:54.975" starttime="20170425 18:23:54.974"></status>
</kw>
<status status="FAIL" endtime="20170425 18:23:54.976" starttime="20170425 18:23:41.940"></status>
</kw>
<msg timestamp="20170425 18:23:54.976" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170425 18:23:54.976" starttime="20170425 18:23:41.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170425 18:23:54.977" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170425 18:23:54.977" starttime="20170425 18:23:54.977"></status>
</kw>
<status status="FAIL" endtime="20170425 18:23:54.977" starttime="20170425 18:23:54.976"></status>
</kw>
<status status="FAIL" endtime="20170425 18:23:54.978" starttime="20170425 18:23:41.939"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:24:04.980" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:24:04.980" starttime="20170425 18:24:04.980"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:24:04.987" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:24:18.019" level="INFO">${RC} = 1</msg>
<msg timestamp="20170425 18:24:18.019" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170425 18:24:18.020" starttime="20170425 18:24:04.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:24:18.037" level="INFO">RC: 1
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20170425 18:24:18.038" starttime="20170425 18:24:18.034"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170425 18:24:18.039" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170425 18:24:18.039" starttime="20170425 18:24:18.038"></status>
</kw>
<status status="FAIL" endtime="20170425 18:24:18.040" starttime="20170425 18:24:04.980"></status>
</kw>
<msg timestamp="20170425 18:24:18.040" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170425 18:24:18.041" starttime="20170425 18:24:04.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170425 18:24:18.044" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170425 18:24:18.044" starttime="20170425 18:24:18.044"></status>
</kw>
<status status="FAIL" endtime="20170425 18:24:18.044" starttime="20170425 18:24:18.043"></status>
</kw>
<status status="FAIL" endtime="20170425 18:24:18.045" starttime="20170425 18:24:04.978"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:24:28.047" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:24:28.048" starttime="20170425 18:24:28.047"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:24:28.051" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:24:41.056" level="INFO">${RC} = 1</msg>
<msg timestamp="20170425 18:24:41.056" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170425 18:24:41.056" starttime="20170425 18:24:28.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:24:41.059" level="INFO">RC: 1
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20170425 18:24:41.059" starttime="20170425 18:24:41.059"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170425 18:24:41.060" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170425 18:24:41.061" starttime="20170425 18:24:41.060"></status>
</kw>
<status status="FAIL" endtime="20170425 18:24:41.062" starttime="20170425 18:24:28.047"></status>
</kw>
<msg timestamp="20170425 18:24:41.062" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170425 18:24:41.062" starttime="20170425 18:24:28.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170425 18:24:41.063" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170425 18:24:41.063" starttime="20170425 18:24:41.063"></status>
</kw>
<status status="FAIL" endtime="20170425 18:24:41.063" starttime="20170425 18:24:41.062"></status>
</kw>
<status status="FAIL" endtime="20170425 18:24:41.063" starttime="20170425 18:24:28.045"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:24:51.066" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:24:51.066" starttime="20170425 18:24:51.066"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:24:51.071" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:24:54.082" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:24:54.083" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.33 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.691 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:24:54.084" starttime="20170425 18:24:51.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:24:54.095" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.33 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.691 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.675 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=3.88 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.675/1.645/3.884/1.319 ms</msg>
<status status="PASS" endtime="20170425 18:24:54.095" starttime="20170425 18:24:54.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:24:54.096" starttime="20170425 18:24:54.096"></status>
</kw>
<status status="PASS" endtime="20170425 18:24:54.096" starttime="20170425 18:24:51.065"></status>
</kw>
<msg timestamp="20170425 18:24:54.096" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:24:54.097" starttime="20170425 18:24:51.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:24:54.098" starttime="20170425 18:24:54.097"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:24:54.099" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:24:54.101" starttime="20170425 18:24:54.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:24:54.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:24:54.102" starttime="20170425 18:24:54.101"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:24:54.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:24:54.102" starttime="20170425 18:24:54.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:24:54.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:24:54.103" starttime="20170425 18:24:54.102"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:25:14.133" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170425 18:25:14.133" starttime="20170425 18:24:54.104"></status>
</kw>
<msg timestamp="20170425 18:25:14.133" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170425 18:25:14.133" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170425 18:25:14.133" starttime="20170425 18:24:54.103"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:25:14.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170425 18:25:14.134" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170425 18:25:14.135" starttime="20170425 18:25:14.134"></status>
</kw>
<status status="FAIL" endtime="20170425 18:25:14.135" starttime="20170425 18:24:54.098"></status>
</kw>
<msg timestamp="20170425 18:25:14.135" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170425 18:25:14.135" starttime="20170425 18:24:54.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170425 18:25:14.136" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170425 18:25:14.136" starttime="20170425 18:25:14.136"></status>
</kw>
<status status="FAIL" endtime="20170425 18:25:14.136" starttime="20170425 18:25:14.135"></status>
</kw>
<status status="FAIL" endtime="20170425 18:25:14.136" starttime="20170425 18:24:51.064"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:25:24.139" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:25:24.139" starttime="20170425 18:25:24.139"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:25:24.143" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:25:27.150" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:25:27.150" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.07 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.654 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:25:27.151" starttime="20170425 18:25:24.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:25:27.166" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.07 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.654 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.587 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.619 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.587/0.983/2.074/0.630 ms</msg>
<status status="PASS" endtime="20170425 18:25:27.166" starttime="20170425 18:25:27.164"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:25:27.168" starttime="20170425 18:25:27.167"></status>
</kw>
<status status="PASS" endtime="20170425 18:25:27.168" starttime="20170425 18:25:24.138"></status>
</kw>
<msg timestamp="20170425 18:25:27.168" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:25:27.168" starttime="20170425 18:25:24.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:25:27.170" starttime="20170425 18:25:27.169"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:25:27.173" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:25:27.178" starttime="20170425 18:25:27.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:25:27.179" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:25:27.179" starttime="20170425 18:25:27.178"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:25:27.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:25:27.180" starttime="20170425 18:25:27.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:25:27.181" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:25:27.181" starttime="20170425 18:25:27.181"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:25:27.409" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:25:27.409" starttime="20170425 18:25:27.182"></status>
</kw>
<msg timestamp="20170425 18:25:27.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:25:27.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:25:27.409" starttime="20170425 18:25:27.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:25:27.410" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:25:27.410" starttime="20170425 18:25:27.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:25:27.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:25:27.411" starttime="20170425 18:25:27.410"></status>
</kw>
<status status="PASS" endtime="20170425 18:25:27.411" starttime="20170425 18:25:27.171"></status>
</kw>
<msg timestamp="20170425 18:25:27.412" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:25:27.412" starttime="20170425 18:25:27.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:25:27.412" starttime="20170425 18:25:27.412"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:25:27.414" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:25:27.414" starttime="20170425 18:25:27.414"></status>
</kw>
<msg timestamp="20170425 18:25:27.414" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:25:27.414" starttime="20170425 18:25:27.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:25:27.415" starttime="20170425 18:25:27.415"></status>
</kw>
<status status="PASS" endtime="20170425 18:25:27.415" starttime="20170425 18:25:27.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:25:27.416" starttime="20170425 18:25:27.416"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:25:27.417" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:25:27.417" starttime="20170425 18:25:27.417"></status>
</kw>
<msg timestamp="20170425 18:25:27.417" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:25:27.417" starttime="20170425 18:25:27.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:25:27.420" starttime="20170425 18:25:27.419"></status>
</kw>
<status status="PASS" endtime="20170425 18:25:27.420" starttime="20170425 18:25:27.418"></status>
</kw>
<status status="PASS" endtime="20170425 18:25:27.420" starttime="20170425 18:25:27.418"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:25:27.421" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:25:57.457" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:25:57.457" starttime="20170425 18:25:27.420"></status>
</kw>
<status status="FAIL" endtime="20170425 18:25:57.458" starttime="20170425 18:25:27.412"></status>
</kw>
<status status="FAIL" endtime="20170425 18:25:57.458" starttime="20170425 18:25:24.137"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:26:07.460" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:26:07.460" starttime="20170425 18:26:07.460"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:26:07.464" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:26:10.474" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:26:10.474" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.86 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.662 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:26:10.475" starttime="20170425 18:26:07.461"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:26:10.489" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.86 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.662 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.628 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.634 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.628/1.198/2.868/0.964 ms</msg>
<status status="PASS" endtime="20170425 18:26:10.490" starttime="20170425 18:26:10.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:10.491" starttime="20170425 18:26:10.490"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:10.491" starttime="20170425 18:26:07.459"></status>
</kw>
<msg timestamp="20170425 18:26:10.491" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:26:10.491" starttime="20170425 18:26:07.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:10.493" starttime="20170425 18:26:10.493"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:26:10.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:26:10.501" starttime="20170425 18:26:10.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:26:10.503" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:26:10.503" starttime="20170425 18:26:10.501"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:26:10.503" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:26:10.503" starttime="20170425 18:26:10.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:26:10.504" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:26:10.504" starttime="20170425 18:26:10.504"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:26:10.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:26:10.686" starttime="20170425 18:26:10.505"></status>
</kw>
<msg timestamp="20170425 18:26:10.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:26:10.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:26:10.686" starttime="20170425 18:26:10.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:26:10.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:26:10.687" starttime="20170425 18:26:10.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:26:10.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:26:10.687" starttime="20170425 18:26:10.687"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:10.688" starttime="20170425 18:26:10.494"></status>
</kw>
<msg timestamp="20170425 18:26:10.688" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:26:10.688" starttime="20170425 18:26:10.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:10.688" starttime="20170425 18:26:10.688"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:26:10.691" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:26:10.691" starttime="20170425 18:26:10.690"></status>
</kw>
<msg timestamp="20170425 18:26:10.691" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:26:10.691" starttime="20170425 18:26:10.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:10.692" starttime="20170425 18:26:10.692"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:10.692" starttime="20170425 18:26:10.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:10.693" starttime="20170425 18:26:10.692"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:26:10.694" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:26:10.694" starttime="20170425 18:26:10.693"></status>
</kw>
<msg timestamp="20170425 18:26:10.694" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:26:10.694" starttime="20170425 18:26:10.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:10.696" starttime="20170425 18:26:10.695"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:10.696" starttime="20170425 18:26:10.695"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:10.696" starttime="20170425 18:26:10.694"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:26:10.697" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:26:40.724" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:26:40.725" starttime="20170425 18:26:10.696"></status>
</kw>
<status status="FAIL" endtime="20170425 18:26:40.725" starttime="20170425 18:26:10.689"></status>
</kw>
<status status="FAIL" endtime="20170425 18:26:40.725" starttime="20170425 18:26:07.458"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:26:50.728" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:26:50.728" starttime="20170425 18:26:50.727"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:26:50.743" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:26:53.761" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:26:53.761" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.778 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:26:53.761" starttime="20170425 18:26:50.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:26:53.765" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.778 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.748 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=13.0 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.624/3.808/13.084/5.355 ms</msg>
<status status="PASS" endtime="20170425 18:26:53.765" starttime="20170425 18:26:53.764"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:53.765" starttime="20170425 18:26:53.765"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:53.766" starttime="20170425 18:26:50.727"></status>
</kw>
<msg timestamp="20170425 18:26:53.766" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:26:53.766" starttime="20170425 18:26:50.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:53.767" starttime="20170425 18:26:53.767"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:26:53.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:26:53.771" starttime="20170425 18:26:53.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:26:53.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:26:53.771" starttime="20170425 18:26:53.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:26:53.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:26:53.772" starttime="20170425 18:26:53.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:26:53.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:26:53.773" starttime="20170425 18:26:53.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:26:54.000" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:26:54.000" starttime="20170425 18:26:53.774"></status>
</kw>
<msg timestamp="20170425 18:26:54.000" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:26:54.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:26:54.001" starttime="20170425 18:26:53.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:26:54.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:26:54.001" starttime="20170425 18:26:54.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:26:54.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:26:54.002" starttime="20170425 18:26:54.002"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:54.002" starttime="20170425 18:26:53.768"></status>
</kw>
<msg timestamp="20170425 18:26:54.002" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:26:54.002" starttime="20170425 18:26:53.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:54.003" starttime="20170425 18:26:54.003"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:26:54.005" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:26:54.005" starttime="20170425 18:26:54.004"></status>
</kw>
<msg timestamp="20170425 18:26:54.005" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:26:54.005" starttime="20170425 18:26:54.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:54.006" starttime="20170425 18:26:54.006"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:54.006" starttime="20170425 18:26:54.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:54.007" starttime="20170425 18:26:54.007"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:26:54.008" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:26:54.008" starttime="20170425 18:26:54.008"></status>
</kw>
<msg timestamp="20170425 18:26:54.008" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:26:54.008" starttime="20170425 18:26:54.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:26:54.010" starttime="20170425 18:26:54.010"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:54.010" starttime="20170425 18:26:54.009"></status>
</kw>
<status status="PASS" endtime="20170425 18:26:54.010" starttime="20170425 18:26:54.009"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:26:54.011" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:27:24.038" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:27:24.038" starttime="20170425 18:26:54.011"></status>
</kw>
<status status="FAIL" endtime="20170425 18:27:24.039" starttime="20170425 18:26:54.003"></status>
</kw>
<status status="FAIL" endtime="20170425 18:27:24.039" starttime="20170425 18:26:50.726"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:27:34.041" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:27:34.042" starttime="20170425 18:27:34.041"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:27:34.045" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:27:37.048" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:27:37.048" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.716 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.652 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:27:37.048" starttime="20170425 18:27:34.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:27:37.052" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.716 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.652 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.592 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.616 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.592/0.644/0.716/0.046 ms</msg>
<status status="PASS" endtime="20170425 18:27:37.052" starttime="20170425 18:27:37.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:27:37.053" starttime="20170425 18:27:37.052"></status>
</kw>
<status status="PASS" endtime="20170425 18:27:37.053" starttime="20170425 18:27:34.040"></status>
</kw>
<msg timestamp="20170425 18:27:37.053" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:27:37.053" starttime="20170425 18:27:34.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:27:37.054" starttime="20170425 18:27:37.054"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:27:37.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:27:37.058" starttime="20170425 18:27:37.056"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:27:37.059" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:27:37.059" starttime="20170425 18:27:37.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:27:37.060" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:27:37.060" starttime="20170425 18:27:37.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:27:37.061" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:27:37.061" starttime="20170425 18:27:37.060"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:27:37.238" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:27:37.239" starttime="20170425 18:27:37.062"></status>
</kw>
<msg timestamp="20170425 18:27:37.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:27:37.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:27:37.239" starttime="20170425 18:27:37.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:27:37.239" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:27:37.240" starttime="20170425 18:27:37.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:27:37.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:27:37.240" starttime="20170425 18:27:37.240"></status>
</kw>
<status status="PASS" endtime="20170425 18:27:37.240" starttime="20170425 18:27:37.055"></status>
</kw>
<msg timestamp="20170425 18:27:37.240" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:27:37.240" starttime="20170425 18:27:37.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:27:37.241" starttime="20170425 18:27:37.241"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:27:37.243" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:27:37.244" starttime="20170425 18:27:37.243"></status>
</kw>
<msg timestamp="20170425 18:27:37.244" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:27:37.244" starttime="20170425 18:27:37.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:27:37.245" starttime="20170425 18:27:37.245"></status>
</kw>
<status status="PASS" endtime="20170425 18:27:37.245" starttime="20170425 18:27:37.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:27:37.246" starttime="20170425 18:27:37.245"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:27:37.247" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:27:37.247" starttime="20170425 18:27:37.246"></status>
</kw>
<msg timestamp="20170425 18:27:37.247" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:27:37.247" starttime="20170425 18:27:37.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:27:37.249" starttime="20170425 18:27:37.249"></status>
</kw>
<status status="PASS" endtime="20170425 18:27:37.249" starttime="20170425 18:27:37.248"></status>
</kw>
<status status="PASS" endtime="20170425 18:27:37.249" starttime="20170425 18:27:37.247"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:27:37.250" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:28:07.278" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:28:07.278" starttime="20170425 18:27:37.250"></status>
</kw>
<status status="FAIL" endtime="20170425 18:28:07.279" starttime="20170425 18:27:37.241"></status>
</kw>
<status status="FAIL" endtime="20170425 18:28:07.279" starttime="20170425 18:27:34.039"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:28:17.281" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:28:17.281" starttime="20170425 18:28:17.281"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:28:17.285" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:28:20.296" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:28:20.297" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.49 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=2.08 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170425 18:28:20.298" starttime="20170425 18:28:17.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:28:20.312" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.49 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=2.08 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.662 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=1.44 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.662/1.671/2.499/0.695 ms</msg>
<status status="PASS" endtime="20170425 18:28:20.312" starttime="20170425 18:28:20.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:28:20.313" starttime="20170425 18:28:20.313"></status>
</kw>
<status status="PASS" endtime="20170425 18:28:20.314" starttime="20170425 18:28:17.280"></status>
</kw>
<msg timestamp="20170425 18:28:20.315" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:28:20.315" starttime="20170425 18:28:17.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:28:20.316" starttime="20170425 18:28:20.316"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:28:20.321" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:28:20.326" starttime="20170425 18:28:20.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:28:20.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:28:20.327" starttime="20170425 18:28:20.326"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:28:20.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:28:20.328" starttime="20170425 18:28:20.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:28:20.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:28:20.329" starttime="20170425 18:28:20.328"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:28:20.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:28:20.517" starttime="20170425 18:28:20.330"></status>
</kw>
<msg timestamp="20170425 18:28:20.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:28:20.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:28:20.518" starttime="20170425 18:28:20.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:28:20.518" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:28:20.518" starttime="20170425 18:28:20.518"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:28:20.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:28:20.519" starttime="20170425 18:28:20.519"></status>
</kw>
<status status="PASS" endtime="20170425 18:28:20.519" starttime="20170425 18:28:20.317"></status>
</kw>
<msg timestamp="20170425 18:28:20.519" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:28:20.519" starttime="20170425 18:28:20.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:28:20.520" starttime="20170425 18:28:20.520"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:28:20.522" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:28:20.522" starttime="20170425 18:28:20.521"></status>
</kw>
<msg timestamp="20170425 18:28:20.522" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:28:20.522" starttime="20170425 18:28:20.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:28:20.523" starttime="20170425 18:28:20.523"></status>
</kw>
<status status="PASS" endtime="20170425 18:28:20.523" starttime="20170425 18:28:20.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:28:20.524" starttime="20170425 18:28:20.523"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:28:20.525" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:28:20.525" starttime="20170425 18:28:20.524"></status>
</kw>
<msg timestamp="20170425 18:28:20.525" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:28:20.525" starttime="20170425 18:28:20.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:28:20.527" starttime="20170425 18:28:20.526"></status>
</kw>
<status status="PASS" endtime="20170425 18:28:20.527" starttime="20170425 18:28:20.526"></status>
</kw>
<status status="PASS" endtime="20170425 18:28:20.527" starttime="20170425 18:28:20.525"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:28:20.528" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:28:50.554" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:28:50.555" starttime="20170425 18:28:20.527"></status>
</kw>
<status status="FAIL" endtime="20170425 18:28:50.555" starttime="20170425 18:28:20.520"></status>
</kw>
<status status="FAIL" endtime="20170425 18:28:50.555" starttime="20170425 18:28:17.279"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:29:00.558" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:29:00.558" starttime="20170425 18:29:00.557"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:29:00.561" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:29:03.564" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:29:03.564" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:29:03.564" starttime="20170425 18:29:00.558"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:29:03.568" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.629 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.592 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.592/0.636/0.713/0.046 ms</msg>
<status status="PASS" endtime="20170425 18:29:03.568" starttime="20170425 18:29:03.567"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:03.568" starttime="20170425 18:29:03.568"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:03.569" starttime="20170425 18:29:00.557"></status>
</kw>
<msg timestamp="20170425 18:29:03.569" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:29:03.569" starttime="20170425 18:29:00.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:03.570" starttime="20170425 18:29:03.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:29:03.572" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:29:03.573" starttime="20170425 18:29:03.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:29:03.574" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:29:03.574" starttime="20170425 18:29:03.574"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:29:03.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:29:03.575" starttime="20170425 18:29:03.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:29:03.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:29:03.576" starttime="20170425 18:29:03.575"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:29:03.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:29:03.753" starttime="20170425 18:29:03.576"></status>
</kw>
<msg timestamp="20170425 18:29:03.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:29:03.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:29:03.753" starttime="20170425 18:29:03.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:29:03.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:29:03.754" starttime="20170425 18:29:03.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:29:03.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:29:03.755" starttime="20170425 18:29:03.755"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:03.755" starttime="20170425 18:29:03.570"></status>
</kw>
<msg timestamp="20170425 18:29:03.755" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:29:03.755" starttime="20170425 18:29:03.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:03.756" starttime="20170425 18:29:03.756"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:29:03.758" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:29:03.758" starttime="20170425 18:29:03.757"></status>
</kw>
<msg timestamp="20170425 18:29:03.758" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:29:03.758" starttime="20170425 18:29:03.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:03.759" starttime="20170425 18:29:03.759"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:03.759" starttime="20170425 18:29:03.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:03.760" starttime="20170425 18:29:03.759"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:29:03.761" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:29:03.761" starttime="20170425 18:29:03.761"></status>
</kw>
<msg timestamp="20170425 18:29:03.761" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:29:03.761" starttime="20170425 18:29:03.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:03.763" starttime="20170425 18:29:03.763"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:03.763" starttime="20170425 18:29:03.762"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:03.763" starttime="20170425 18:29:03.761"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:29:03.764" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:29:33.793" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:29:33.793" starttime="20170425 18:29:03.764"></status>
</kw>
<status status="FAIL" endtime="20170425 18:29:33.794" starttime="20170425 18:29:03.756"></status>
</kw>
<status status="FAIL" endtime="20170425 18:29:33.794" starttime="20170425 18:29:00.556"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:29:43.796" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:29:43.797" starttime="20170425 18:29:43.796"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:29:43.800" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:29:46.804" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:29:46.804" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.637 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:29:46.804" starttime="20170425 18:29:43.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:29:46.808" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.637 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.622 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.605 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.605/0.648/0.728/0.047 ms</msg>
<status status="PASS" endtime="20170425 18:29:46.808" starttime="20170425 18:29:46.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:46.808" starttime="20170425 18:29:46.808"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:46.809" starttime="20170425 18:29:43.796"></status>
</kw>
<msg timestamp="20170425 18:29:46.809" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:29:46.809" starttime="20170425 18:29:43.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:46.810" starttime="20170425 18:29:46.809"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:29:46.812" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:29:46.813" starttime="20170425 18:29:46.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:29:46.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:29:46.814" starttime="20170425 18:29:46.813"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:29:46.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:29:46.815" starttime="20170425 18:29:46.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:29:46.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:29:46.815" starttime="20170425 18:29:46.815"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:29:46.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:29:46.992" starttime="20170425 18:29:46.816"></status>
</kw>
<msg timestamp="20170425 18:29:46.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:29:46.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:29:46.992" starttime="20170425 18:29:46.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:29:46.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:29:46.993" starttime="20170425 18:29:46.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:29:46.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:29:46.994" starttime="20170425 18:29:46.993"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:46.994" starttime="20170425 18:29:46.810"></status>
</kw>
<msg timestamp="20170425 18:29:46.994" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:29:46.994" starttime="20170425 18:29:46.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:46.995" starttime="20170425 18:29:46.994"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:29:46.997" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:29:46.997" starttime="20170425 18:29:46.996"></status>
</kw>
<msg timestamp="20170425 18:29:46.997" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:29:46.997" starttime="20170425 18:29:46.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:46.998" starttime="20170425 18:29:46.998"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:46.998" starttime="20170425 18:29:46.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:46.999" starttime="20170425 18:29:46.999"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:29:47.000" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:29:47.000" starttime="20170425 18:29:47.000"></status>
</kw>
<msg timestamp="20170425 18:29:47.000" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:29:47.000" starttime="20170425 18:29:46.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:29:47.002" starttime="20170425 18:29:47.002"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:47.003" starttime="20170425 18:29:47.001"></status>
</kw>
<status status="PASS" endtime="20170425 18:29:47.003" starttime="20170425 18:29:47.001"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:29:47.003" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:30:17.031" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:30:17.031" starttime="20170425 18:29:47.003"></status>
</kw>
<status status="FAIL" endtime="20170425 18:30:17.031" starttime="20170425 18:29:46.995"></status>
</kw>
<status status="FAIL" endtime="20170425 18:30:17.032" starttime="20170425 18:29:43.794"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:30:27.034" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:30:27.034" starttime="20170425 18:30:27.034"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:30:27.038" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:30:30.041" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:30:30.041" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.55 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.694 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:30:30.041" starttime="20170425 18:30:27.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:30:30.044" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.55 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.694 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.676 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.574 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.574/1.125/2.559/0.829 ms</msg>
<status status="PASS" endtime="20170425 18:30:30.044" starttime="20170425 18:30:30.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:30:30.045" starttime="20170425 18:30:30.044"></status>
</kw>
<status status="PASS" endtime="20170425 18:30:30.045" starttime="20170425 18:30:27.033"></status>
</kw>
<msg timestamp="20170425 18:30:30.045" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:30:30.045" starttime="20170425 18:30:27.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:30:30.046" starttime="20170425 18:30:30.045"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:30:30.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:30:30.049" starttime="20170425 18:30:30.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:30:30.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:30:30.050" starttime="20170425 18:30:30.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:30:30.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:30:30.050" starttime="20170425 18:30:30.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:30:30.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:30:30.051" starttime="20170425 18:30:30.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:30:30.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:30:30.233" starttime="20170425 18:30:30.052"></status>
</kw>
<msg timestamp="20170425 18:30:30.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:30:30.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:30:30.233" starttime="20170425 18:30:30.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:30:30.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:30:30.234" starttime="20170425 18:30:30.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:30:30.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:30:30.235" starttime="20170425 18:30:30.234"></status>
</kw>
<status status="PASS" endtime="20170425 18:30:30.235" starttime="20170425 18:30:30.047"></status>
</kw>
<msg timestamp="20170425 18:30:30.235" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:30:30.235" starttime="20170425 18:30:30.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:30:30.235" starttime="20170425 18:30:30.235"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:30:30.237" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:30:30.237" starttime="20170425 18:30:30.237"></status>
</kw>
<msg timestamp="20170425 18:30:30.237" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:30:30.237" starttime="20170425 18:30:30.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:30:30.238" starttime="20170425 18:30:30.238"></status>
</kw>
<status status="PASS" endtime="20170425 18:30:30.239" starttime="20170425 18:30:30.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:30:30.239" starttime="20170425 18:30:30.239"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:30:30.241" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:30:30.241" starttime="20170425 18:30:30.240"></status>
</kw>
<msg timestamp="20170425 18:30:30.241" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:30:30.241" starttime="20170425 18:30:30.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:30:30.243" starttime="20170425 18:30:30.243"></status>
</kw>
<status status="PASS" endtime="20170425 18:30:30.243" starttime="20170425 18:30:30.242"></status>
</kw>
<status status="PASS" endtime="20170425 18:30:30.243" starttime="20170425 18:30:30.241"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:30:30.244" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:31:00.272" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:31:00.272" starttime="20170425 18:30:30.243"></status>
</kw>
<status status="FAIL" endtime="20170425 18:31:00.273" starttime="20170425 18:30:30.236"></status>
</kw>
<status status="FAIL" endtime="20170425 18:31:00.273" starttime="20170425 18:30:27.032"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:31:10.275" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:31:10.275" starttime="20170425 18:31:10.275"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:31:10.279" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:31:13.284" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:31:13.284" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.914 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.586 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:31:13.284" starttime="20170425 18:31:10.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:31:13.286" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.914 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.586 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.629 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.624 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.586/0.688/0.914/0.132 ms</msg>
<status status="PASS" endtime="20170425 18:31:13.286" starttime="20170425 18:31:13.285"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:13.287" starttime="20170425 18:31:13.286"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:13.287" starttime="20170425 18:31:10.275"></status>
</kw>
<msg timestamp="20170425 18:31:13.287" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:31:13.287" starttime="20170425 18:31:10.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:13.288" starttime="20170425 18:31:13.287"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:31:13.290" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:31:13.291" starttime="20170425 18:31:13.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:31:13.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:31:13.292" starttime="20170425 18:31:13.292"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:31:13.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:31:13.293" starttime="20170425 18:31:13.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:31:13.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:31:13.293" starttime="20170425 18:31:13.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:31:13.471" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:31:13.471" starttime="20170425 18:31:13.294"></status>
</kw>
<msg timestamp="20170425 18:31:13.472" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:31:13.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:31:13.472" starttime="20170425 18:31:13.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:31:13.472" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:31:13.473" starttime="20170425 18:31:13.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:31:13.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:31:13.473" starttime="20170425 18:31:13.473"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:13.473" starttime="20170425 18:31:13.289"></status>
</kw>
<msg timestamp="20170425 18:31:13.473" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:31:13.474" starttime="20170425 18:31:13.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:13.474" starttime="20170425 18:31:13.474"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:31:13.476" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:31:13.476" starttime="20170425 18:31:13.476"></status>
</kw>
<msg timestamp="20170425 18:31:13.477" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:31:13.477" starttime="20170425 18:31:13.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:13.478" starttime="20170425 18:31:13.478"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:13.478" starttime="20170425 18:31:13.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:13.479" starttime="20170425 18:31:13.479"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:31:13.481" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:31:13.481" starttime="20170425 18:31:13.480"></status>
</kw>
<msg timestamp="20170425 18:31:13.481" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:31:13.481" starttime="20170425 18:31:13.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:13.484" starttime="20170425 18:31:13.483"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:13.484" starttime="20170425 18:31:13.483"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:13.484" starttime="20170425 18:31:13.482"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:31:13.485" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:31:43.512" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:31:43.513" starttime="20170425 18:31:13.485"></status>
</kw>
<status status="FAIL" endtime="20170425 18:31:43.513" starttime="20170425 18:31:13.474"></status>
</kw>
<status status="FAIL" endtime="20170425 18:31:43.513" starttime="20170425 18:31:10.273"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:31:53.516" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:31:53.516" starttime="20170425 18:31:53.515"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:31:53.520" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:31:56.529" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:31:56.529" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.26 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=17.5 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170425 18:31:56.529" starttime="20170425 18:31:53.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:31:56.532" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.26 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=17.5 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=20.4 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=2.43 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 1.268/10.419/20.475/8.643 ms</msg>
<status status="PASS" endtime="20170425 18:31:56.532" starttime="20170425 18:31:56.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:56.533" starttime="20170425 18:31:56.532"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:56.533" starttime="20170425 18:31:53.515"></status>
</kw>
<msg timestamp="20170425 18:31:56.533" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:31:56.533" starttime="20170425 18:31:53.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:56.534" starttime="20170425 18:31:56.534"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:31:56.536" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:31:56.537" starttime="20170425 18:31:56.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:31:56.538" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:31:56.538" starttime="20170425 18:31:56.538"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:31:56.539" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:31:56.539" starttime="20170425 18:31:56.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:31:56.539" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:31:56.539" starttime="20170425 18:31:56.539"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:31:56.718" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:31:56.718" starttime="20170425 18:31:56.540"></status>
</kw>
<msg timestamp="20170425 18:31:56.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:31:56.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:31:56.719" starttime="20170425 18:31:56.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:31:56.719" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:31:56.720" starttime="20170425 18:31:56.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:31:56.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:31:56.721" starttime="20170425 18:31:56.720"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:56.721" starttime="20170425 18:31:56.535"></status>
</kw>
<msg timestamp="20170425 18:31:56.721" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:31:56.721" starttime="20170425 18:31:56.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:56.722" starttime="20170425 18:31:56.721"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:31:56.724" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:31:56.725" starttime="20170425 18:31:56.724"></status>
</kw>
<msg timestamp="20170425 18:31:56.725" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:31:56.725" starttime="20170425 18:31:56.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:56.726" starttime="20170425 18:31:56.726"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:56.726" starttime="20170425 18:31:56.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:56.727" starttime="20170425 18:31:56.727"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:31:56.728" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:31:56.728" starttime="20170425 18:31:56.728"></status>
</kw>
<msg timestamp="20170425 18:31:56.728" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:31:56.728" starttime="20170425 18:31:56.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:31:56.731" starttime="20170425 18:31:56.730"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:56.731" starttime="20170425 18:31:56.730"></status>
</kw>
<status status="PASS" endtime="20170425 18:31:56.731" starttime="20170425 18:31:56.729"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:31:56.731" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:32:26.758" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:32:26.758" starttime="20170425 18:31:56.731"></status>
</kw>
<status status="FAIL" endtime="20170425 18:32:26.758" starttime="20170425 18:31:56.722"></status>
</kw>
<status status="FAIL" endtime="20170425 18:32:26.758" starttime="20170425 18:31:53.514"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:32:36.761" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:32:36.761" starttime="20170425 18:32:36.761"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:32:36.765" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:32:39.768" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:32:39.768" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.822 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.660 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:32:39.768" starttime="20170425 18:32:36.761"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:32:39.771" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.822 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.660 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.610 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.588 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.588/0.670/0.822/0.091 ms</msg>
<status status="PASS" endtime="20170425 18:32:39.771" starttime="20170425 18:32:39.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:32:39.771" starttime="20170425 18:32:39.771"></status>
</kw>
<status status="PASS" endtime="20170425 18:32:39.772" starttime="20170425 18:32:36.760"></status>
</kw>
<msg timestamp="20170425 18:32:39.772" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:32:39.772" starttime="20170425 18:32:36.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:32:39.773" starttime="20170425 18:32:39.772"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:32:39.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:32:39.776" starttime="20170425 18:32:39.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:32:39.777" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:32:39.777" starttime="20170425 18:32:39.776"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:32:39.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:32:39.777" starttime="20170425 18:32:39.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:32:39.778" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:32:39.778" starttime="20170425 18:32:39.778"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:32:39.965" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:32:39.965" starttime="20170425 18:32:39.779"></status>
</kw>
<msg timestamp="20170425 18:32:39.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:32:39.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:32:39.965" starttime="20170425 18:32:39.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:32:39.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:32:39.966" starttime="20170425 18:32:39.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:32:39.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:32:39.966" starttime="20170425 18:32:39.966"></status>
</kw>
<status status="PASS" endtime="20170425 18:32:39.967" starttime="20170425 18:32:39.773"></status>
</kw>
<msg timestamp="20170425 18:32:39.967" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:32:39.967" starttime="20170425 18:32:39.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:32:39.967" starttime="20170425 18:32:39.967"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:32:39.969" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:32:39.969" starttime="20170425 18:32:39.968"></status>
</kw>
<msg timestamp="20170425 18:32:39.969" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:32:39.969" starttime="20170425 18:32:39.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:32:39.970" starttime="20170425 18:32:39.970"></status>
</kw>
<status status="PASS" endtime="20170425 18:32:39.970" starttime="20170425 18:32:39.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:32:39.971" starttime="20170425 18:32:39.971"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:32:39.972" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:32:39.972" starttime="20170425 18:32:39.972"></status>
</kw>
<msg timestamp="20170425 18:32:39.972" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:32:39.972" starttime="20170425 18:32:39.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:32:39.974" starttime="20170425 18:32:39.974"></status>
</kw>
<status status="PASS" endtime="20170425 18:32:39.974" starttime="20170425 18:32:39.973"></status>
</kw>
<status status="PASS" endtime="20170425 18:32:39.974" starttime="20170425 18:32:39.972"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:32:39.975" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:33:10.003" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:33:10.003" starttime="20170425 18:32:39.975"></status>
</kw>
<status status="FAIL" endtime="20170425 18:33:10.003" starttime="20170425 18:32:39.967"></status>
</kw>
<status status="FAIL" endtime="20170425 18:33:10.004" starttime="20170425 18:32:36.759"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:33:20.007" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:33:20.007" starttime="20170425 18:33:20.007"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:33:20.012" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:33:23.024" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:33:23.024" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.63 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:33:23.026" starttime="20170425 18:33:20.007"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:33:23.040" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.63 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.747 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.701 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.624/0.927/1.637/0.412 ms</msg>
<status status="PASS" endtime="20170425 18:33:23.040" starttime="20170425 18:33:23.038"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:33:23.041" starttime="20170425 18:33:23.040"></status>
</kw>
<status status="PASS" endtime="20170425 18:33:23.042" starttime="20170425 18:33:20.006"></status>
</kw>
<msg timestamp="20170425 18:33:23.043" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:33:23.043" starttime="20170425 18:33:20.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:33:23.044" starttime="20170425 18:33:23.043"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:33:23.047" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:33:23.048" starttime="20170425 18:33:23.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:33:23.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:33:23.049" starttime="20170425 18:33:23.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:33:23.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:33:23.050" starttime="20170425 18:33:23.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:33:23.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:33:23.051" starttime="20170425 18:33:23.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:33:23.229" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:33:23.229" starttime="20170425 18:33:23.052"></status>
</kw>
<msg timestamp="20170425 18:33:23.229" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:33:23.229" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:33:23.229" starttime="20170425 18:33:23.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:33:23.230" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:33:23.230" starttime="20170425 18:33:23.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:33:23.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:33:23.231" starttime="20170425 18:33:23.231"></status>
</kw>
<status status="PASS" endtime="20170425 18:33:23.231" starttime="20170425 18:33:23.045"></status>
</kw>
<msg timestamp="20170425 18:33:23.231" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:33:23.231" starttime="20170425 18:33:23.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:33:23.232" starttime="20170425 18:33:23.232"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:33:23.234" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:33:23.234" starttime="20170425 18:33:23.234"></status>
</kw>
<msg timestamp="20170425 18:33:23.234" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:33:23.234" starttime="20170425 18:33:23.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:33:23.235" starttime="20170425 18:33:23.235"></status>
</kw>
<status status="PASS" endtime="20170425 18:33:23.235" starttime="20170425 18:33:23.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:33:23.236" starttime="20170425 18:33:23.236"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:33:23.237" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:33:23.237" starttime="20170425 18:33:23.237"></status>
</kw>
<msg timestamp="20170425 18:33:23.237" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:33:23.237" starttime="20170425 18:33:23.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:33:23.240" starttime="20170425 18:33:23.239"></status>
</kw>
<status status="PASS" endtime="20170425 18:33:23.240" starttime="20170425 18:33:23.238"></status>
</kw>
<status status="PASS" endtime="20170425 18:33:23.240" starttime="20170425 18:33:23.238"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:33:23.240" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:33:53.269" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:33:53.270" starttime="20170425 18:33:23.240"></status>
</kw>
<status status="FAIL" endtime="20170425 18:33:53.270" starttime="20170425 18:33:23.232"></status>
</kw>
<status status="FAIL" endtime="20170425 18:33:53.271" starttime="20170425 18:33:20.004"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:34:03.274" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:34:03.274" starttime="20170425 18:34:03.273"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:34:03.278" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:34:06.280" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:34:06.280" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=5.19 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.695 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:34:06.281" starttime="20170425 18:34:03.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:34:06.285" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=5.19 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.695 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.711 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.622 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.622/1.805/5.192/1.955 ms</msg>
<status status="PASS" endtime="20170425 18:34:06.285" starttime="20170425 18:34:06.283"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:06.286" starttime="20170425 18:34:06.286"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:06.286" starttime="20170425 18:34:03.273"></status>
</kw>
<msg timestamp="20170425 18:34:06.286" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:34:06.286" starttime="20170425 18:34:03.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:06.287" starttime="20170425 18:34:06.287"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:34:06.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:34:06.290" starttime="20170425 18:34:06.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:34:06.291" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:34:06.291" starttime="20170425 18:34:06.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:34:06.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:34:06.292" starttime="20170425 18:34:06.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:34:06.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:34:06.292" starttime="20170425 18:34:06.292"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:34:06.472" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:34:06.472" starttime="20170425 18:34:06.293"></status>
</kw>
<msg timestamp="20170425 18:34:06.472" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:34:06.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:34:06.472" starttime="20170425 18:34:06.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:34:06.473" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:34:06.473" starttime="20170425 18:34:06.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:34:06.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:34:06.474" starttime="20170425 18:34:06.473"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:06.474" starttime="20170425 18:34:06.288"></status>
</kw>
<msg timestamp="20170425 18:34:06.474" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:34:06.474" starttime="20170425 18:34:06.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:06.475" starttime="20170425 18:34:06.474"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:34:06.476" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:34:06.476" starttime="20170425 18:34:06.476"></status>
</kw>
<msg timestamp="20170425 18:34:06.476" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:34:06.477" starttime="20170425 18:34:06.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:06.478" starttime="20170425 18:34:06.477"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:06.478" starttime="20170425 18:34:06.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:06.478" starttime="20170425 18:34:06.478"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:34:06.479" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:34:06.479" starttime="20170425 18:34:06.479"></status>
</kw>
<msg timestamp="20170425 18:34:06.480" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:34:06.480" starttime="20170425 18:34:06.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:06.482" starttime="20170425 18:34:06.481"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:06.482" starttime="20170425 18:34:06.481"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:06.482" starttime="20170425 18:34:06.480"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:34:06.482" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:34:36.513" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:34:36.513" starttime="20170425 18:34:06.482"></status>
</kw>
<status status="FAIL" endtime="20170425 18:34:36.513" starttime="20170425 18:34:06.475"></status>
</kw>
<status status="FAIL" endtime="20170425 18:34:36.514" starttime="20170425 18:34:03.272"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:34:46.516" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:34:46.516" starttime="20170425 18:34:46.516"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:34:46.520" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:34:49.529" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:34:49.529" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.784 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:34:49.530" starttime="20170425 18:34:46.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:34:49.537" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.784 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.620 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.631 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.618/0.663/0.784/0.072 ms</msg>
<status status="PASS" endtime="20170425 18:34:49.537" starttime="20170425 18:34:49.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:49.538" starttime="20170425 18:34:49.537"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:49.538" starttime="20170425 18:34:46.515"></status>
</kw>
<msg timestamp="20170425 18:34:49.538" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:34:49.538" starttime="20170425 18:34:46.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:49.539" starttime="20170425 18:34:49.539"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:34:49.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:34:49.544" starttime="20170425 18:34:49.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:34:49.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:34:49.545" starttime="20170425 18:34:49.544"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:34:49.545" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:34:49.545" starttime="20170425 18:34:49.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:34:49.546" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:34:49.546" starttime="20170425 18:34:49.546"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:34:49.732" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:34:49.732" starttime="20170425 18:34:49.547"></status>
</kw>
<msg timestamp="20170425 18:34:49.732" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:34:49.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:34:49.732" starttime="20170425 18:34:49.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:34:49.733" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:34:49.733" starttime="20170425 18:34:49.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:34:49.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:34:49.734" starttime="20170425 18:34:49.733"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:49.734" starttime="20170425 18:34:49.540"></status>
</kw>
<msg timestamp="20170425 18:34:49.734" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:34:49.734" starttime="20170425 18:34:49.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:49.734" starttime="20170425 18:34:49.734"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:34:49.736" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:34:49.736" starttime="20170425 18:34:49.736"></status>
</kw>
<msg timestamp="20170425 18:34:49.736" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:34:49.736" starttime="20170425 18:34:49.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:49.737" starttime="20170425 18:34:49.737"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:49.737" starttime="20170425 18:34:49.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:49.738" starttime="20170425 18:34:49.738"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:34:49.739" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:34:49.739" starttime="20170425 18:34:49.739"></status>
</kw>
<msg timestamp="20170425 18:34:49.739" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:34:49.739" starttime="20170425 18:34:49.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:34:49.741" starttime="20170425 18:34:49.741"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:49.741" starttime="20170425 18:34:49.740"></status>
</kw>
<status status="PASS" endtime="20170425 18:34:49.742" starttime="20170425 18:34:49.740"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:34:49.742" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:35:19.773" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:35:19.773" starttime="20170425 18:34:49.742"></status>
</kw>
<status status="FAIL" endtime="20170425 18:35:19.774" starttime="20170425 18:34:49.735"></status>
</kw>
<status status="FAIL" endtime="20170425 18:35:19.774" starttime="20170425 18:34:46.514"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:35:29.777" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:35:29.777" starttime="20170425 18:35:29.776"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:35:29.780" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:35:32.789" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:35:32.789" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.903 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.605 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:35:32.789" starttime="20170425 18:35:29.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:35:32.803" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.903 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.605 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.588 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.590 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.588/0.671/0.903/0.136 ms</msg>
<status status="PASS" endtime="20170425 18:35:32.803" starttime="20170425 18:35:32.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:35:32.804" starttime="20170425 18:35:32.804"></status>
</kw>
<status status="PASS" endtime="20170425 18:35:32.806" starttime="20170425 18:35:29.776"></status>
</kw>
<msg timestamp="20170425 18:35:32.806" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:35:32.806" starttime="20170425 18:35:29.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:35:32.807" starttime="20170425 18:35:32.806"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:35:32.809" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:35:32.810" starttime="20170425 18:35:32.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:35:32.811" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:35:32.811" starttime="20170425 18:35:32.810"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:35:32.811" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:35:32.811" starttime="20170425 18:35:32.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:35:32.812" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:35:32.812" starttime="20170425 18:35:32.811"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:35:32.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:35:32.988" starttime="20170425 18:35:32.813"></status>
</kw>
<msg timestamp="20170425 18:35:32.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:35:32.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:35:32.988" starttime="20170425 18:35:32.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:35:32.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:35:32.989" starttime="20170425 18:35:32.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:35:32.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:35:32.990" starttime="20170425 18:35:32.989"></status>
</kw>
<status status="PASS" endtime="20170425 18:35:32.990" starttime="20170425 18:35:32.808"></status>
</kw>
<msg timestamp="20170425 18:35:32.990" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:35:32.990" starttime="20170425 18:35:32.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:35:32.991" starttime="20170425 18:35:32.990"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:35:32.992" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:35:32.992" starttime="20170425 18:35:32.992"></status>
</kw>
<msg timestamp="20170425 18:35:32.992" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:35:32.993" starttime="20170425 18:35:32.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:35:32.994" starttime="20170425 18:35:32.993"></status>
</kw>
<status status="PASS" endtime="20170425 18:35:32.994" starttime="20170425 18:35:32.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:35:32.994" starttime="20170425 18:35:32.994"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:35:32.996" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:35:32.996" starttime="20170425 18:35:32.995"></status>
</kw>
<msg timestamp="20170425 18:35:32.996" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:35:32.996" starttime="20170425 18:35:32.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:35:32.998" starttime="20170425 18:35:32.997"></status>
</kw>
<status status="PASS" endtime="20170425 18:35:32.998" starttime="20170425 18:35:32.997"></status>
</kw>
<status status="PASS" endtime="20170425 18:35:32.998" starttime="20170425 18:35:32.996"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:35:32.999" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:36:03.026" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:36:03.026" starttime="20170425 18:35:32.998"></status>
</kw>
<status status="FAIL" endtime="20170425 18:36:03.027" starttime="20170425 18:35:32.991"></status>
</kw>
<status status="FAIL" endtime="20170425 18:36:03.027" starttime="20170425 18:35:29.774"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:36:13.029" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:36:13.030" starttime="20170425 18:36:13.029"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:36:13.034" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:36:16.036" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:36:16.036" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.02 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.581 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:36:16.036" starttime="20170425 18:36:13.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:36:16.040" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.02 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.581 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.571 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.571 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.571/1.186/3.024/1.061 ms</msg>
<status status="PASS" endtime="20170425 18:36:16.040" starttime="20170425 18:36:16.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:16.041" starttime="20170425 18:36:16.040"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:16.041" starttime="20170425 18:36:13.029"></status>
</kw>
<msg timestamp="20170425 18:36:16.041" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:36:16.041" starttime="20170425 18:36:13.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:16.042" starttime="20170425 18:36:16.041"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:36:16.044" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:36:16.045" starttime="20170425 18:36:16.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:36:16.046" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:36:16.046" starttime="20170425 18:36:16.045"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:36:16.046" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:36:16.046" starttime="20170425 18:36:16.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:36:16.047" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:36:16.047" starttime="20170425 18:36:16.047"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:36:16.225" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:36:16.225" starttime="20170425 18:36:16.048"></status>
</kw>
<msg timestamp="20170425 18:36:16.225" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:36:16.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:36:16.225" starttime="20170425 18:36:16.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:36:16.226" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:36:16.226" starttime="20170425 18:36:16.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:36:16.226" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:36:16.226" starttime="20170425 18:36:16.226"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:16.227" starttime="20170425 18:36:16.043"></status>
</kw>
<msg timestamp="20170425 18:36:16.227" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:36:16.227" starttime="20170425 18:36:16.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:16.227" starttime="20170425 18:36:16.227"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:36:16.229" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:36:16.229" starttime="20170425 18:36:16.229"></status>
</kw>
<msg timestamp="20170425 18:36:16.229" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:36:16.229" starttime="20170425 18:36:16.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:16.230" starttime="20170425 18:36:16.230"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:16.230" starttime="20170425 18:36:16.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:16.231" starttime="20170425 18:36:16.231"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:36:16.232" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:36:16.232" starttime="20170425 18:36:16.232"></status>
</kw>
<msg timestamp="20170425 18:36:16.232" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:36:16.232" starttime="20170425 18:36:16.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:16.234" starttime="20170425 18:36:16.234"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:16.234" starttime="20170425 18:36:16.233"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:16.235" starttime="20170425 18:36:16.233"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:36:16.235" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:36:46.267" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:36:46.267" starttime="20170425 18:36:16.235"></status>
</kw>
<status status="FAIL" endtime="20170425 18:36:46.267" starttime="20170425 18:36:16.228"></status>
</kw>
<status status="FAIL" endtime="20170425 18:36:46.267" starttime="20170425 18:36:13.027"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:36:56.270" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:36:56.270" starttime="20170425 18:36:56.270"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:36:56.274" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:36:59.281" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:36:59.281" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.793 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.631 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:36:59.282" starttime="20170425 18:36:56.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:36:59.296" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.793 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.631 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.683 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.756 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.631/0.715/0.793/0.070 ms</msg>
<status status="PASS" endtime="20170425 18:36:59.296" starttime="20170425 18:36:59.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:59.297" starttime="20170425 18:36:59.297"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:59.299" starttime="20170425 18:36:56.269"></status>
</kw>
<msg timestamp="20170425 18:36:59.299" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:36:59.299" starttime="20170425 18:36:56.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:59.300" starttime="20170425 18:36:59.299"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:36:59.306" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:36:59.309" starttime="20170425 18:36:59.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:36:59.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:36:59.310" starttime="20170425 18:36:59.309"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:36:59.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:36:59.311" starttime="20170425 18:36:59.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:36:59.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:36:59.312" starttime="20170425 18:36:59.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:36:59.504" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:36:59.504" starttime="20170425 18:36:59.314"></status>
</kw>
<msg timestamp="20170425 18:36:59.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:36:59.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:36:59.505" starttime="20170425 18:36:59.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:36:59.505" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:36:59.505" starttime="20170425 18:36:59.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:36:59.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:36:59.506" starttime="20170425 18:36:59.506"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:59.506" starttime="20170425 18:36:59.301"></status>
</kw>
<msg timestamp="20170425 18:36:59.506" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:36:59.506" starttime="20170425 18:36:59.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:59.507" starttime="20170425 18:36:59.507"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:36:59.509" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:36:59.509" starttime="20170425 18:36:59.508"></status>
</kw>
<msg timestamp="20170425 18:36:59.509" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:36:59.509" starttime="20170425 18:36:59.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:59.510" starttime="20170425 18:36:59.510"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:59.510" starttime="20170425 18:36:59.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:59.511" starttime="20170425 18:36:59.511"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:36:59.512" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:36:59.512" starttime="20170425 18:36:59.512"></status>
</kw>
<msg timestamp="20170425 18:36:59.512" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:36:59.512" starttime="20170425 18:36:59.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:36:59.514" starttime="20170425 18:36:59.514"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:59.514" starttime="20170425 18:36:59.513"></status>
</kw>
<status status="PASS" endtime="20170425 18:36:59.514" starttime="20170425 18:36:59.512"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:36:59.515" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:37:29.546" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:37:29.546" starttime="20170425 18:36:59.515"></status>
</kw>
<status status="FAIL" endtime="20170425 18:37:29.547" starttime="20170425 18:36:59.507"></status>
</kw>
<status status="FAIL" endtime="20170425 18:37:29.547" starttime="20170425 18:36:56.268"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:37:39.550" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:37:39.550" starttime="20170425 18:37:39.549"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:37:39.560" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:37:42.560" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:37:42.560" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.804 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.653 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:37:42.561" starttime="20170425 18:37:39.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:37:42.575" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.804 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.653 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.625 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.686 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.625/0.692/0.804/0.068 ms</msg>
<status status="PASS" endtime="20170425 18:37:42.575" starttime="20170425 18:37:42.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:37:42.576" starttime="20170425 18:37:42.576"></status>
</kw>
<status status="PASS" endtime="20170425 18:37:42.577" starttime="20170425 18:37:39.549"></status>
</kw>
<msg timestamp="20170425 18:37:42.578" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:37:42.578" starttime="20170425 18:37:39.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:37:42.580" starttime="20170425 18:37:42.579"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:37:42.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:37:42.588" starttime="20170425 18:37:42.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:37:42.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:37:42.589" starttime="20170425 18:37:42.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:37:42.590" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:37:42.590" starttime="20170425 18:37:42.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:37:42.591" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:37:42.591" starttime="20170425 18:37:42.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:37:42.772" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:37:42.772" starttime="20170425 18:37:42.591"></status>
</kw>
<msg timestamp="20170425 18:37:42.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:37:42.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:37:42.772" starttime="20170425 18:37:42.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:37:42.773" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:37:42.773" starttime="20170425 18:37:42.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:37:42.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:37:42.773" starttime="20170425 18:37:42.773"></status>
</kw>
<status status="PASS" endtime="20170425 18:37:42.774" starttime="20170425 18:37:42.581"></status>
</kw>
<msg timestamp="20170425 18:37:42.774" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:37:42.774" starttime="20170425 18:37:42.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:37:42.774" starttime="20170425 18:37:42.774"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:37:42.776" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:37:42.776" starttime="20170425 18:37:42.775"></status>
</kw>
<msg timestamp="20170425 18:37:42.776" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:37:42.776" starttime="20170425 18:37:42.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:37:42.778" starttime="20170425 18:37:42.777"></status>
</kw>
<status status="PASS" endtime="20170425 18:37:42.778" starttime="20170425 18:37:42.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:37:42.779" starttime="20170425 18:37:42.778"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:37:42.780" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:37:42.780" starttime="20170425 18:37:42.779"></status>
</kw>
<msg timestamp="20170425 18:37:42.780" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:37:42.780" starttime="20170425 18:37:42.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:37:42.782" starttime="20170425 18:37:42.781"></status>
</kw>
<status status="PASS" endtime="20170425 18:37:42.782" starttime="20170425 18:37:42.781"></status>
</kw>
<status status="PASS" endtime="20170425 18:37:42.782" starttime="20170425 18:37:42.780"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:37:42.782" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:38:12.812" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:38:12.812" starttime="20170425 18:37:42.782"></status>
</kw>
<status status="FAIL" endtime="20170425 18:38:12.813" starttime="20170425 18:37:42.774"></status>
</kw>
<status status="FAIL" endtime="20170425 18:38:12.813" starttime="20170425 18:37:39.547"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:38:22.816" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:38:22.816" starttime="20170425 18:38:22.816"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:38:22.823" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:38:25.824" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:38:25.824" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.52 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.642 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:38:25.824" starttime="20170425 18:38:22.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:38:25.827" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.52 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.642 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.632 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.630 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.630/1.107/2.524/0.818 ms</msg>
<status status="PASS" endtime="20170425 18:38:25.827" starttime="20170425 18:38:25.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:38:25.828" starttime="20170425 18:38:25.827"></status>
</kw>
<status status="PASS" endtime="20170425 18:38:25.828" starttime="20170425 18:38:22.815"></status>
</kw>
<msg timestamp="20170425 18:38:25.828" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:38:25.828" starttime="20170425 18:38:22.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:38:25.829" starttime="20170425 18:38:25.829"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:38:25.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:38:25.832" starttime="20170425 18:38:25.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:38:25.833" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:38:25.833" starttime="20170425 18:38:25.832"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:38:25.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:38:25.834" starttime="20170425 18:38:25.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:38:25.835" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:38:25.835" starttime="20170425 18:38:25.834"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:38:26.012" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:38:26.012" starttime="20170425 18:38:25.835"></status>
</kw>
<msg timestamp="20170425 18:38:26.012" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:38:26.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:38:26.013" starttime="20170425 18:38:25.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:38:26.013" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:38:26.013" starttime="20170425 18:38:26.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:38:26.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:38:26.014" starttime="20170425 18:38:26.014"></status>
</kw>
<status status="PASS" endtime="20170425 18:38:26.014" starttime="20170425 18:38:25.830"></status>
</kw>
<msg timestamp="20170425 18:38:26.014" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:38:26.015" starttime="20170425 18:38:25.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:38:26.015" starttime="20170425 18:38:26.015"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:38:26.017" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:38:26.017" starttime="20170425 18:38:26.016"></status>
</kw>
<msg timestamp="20170425 18:38:26.017" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:38:26.017" starttime="20170425 18:38:26.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:38:26.019" starttime="20170425 18:38:26.018"></status>
</kw>
<status status="PASS" endtime="20170425 18:38:26.019" starttime="20170425 18:38:26.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:38:26.020" starttime="20170425 18:38:26.020"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:38:26.021" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:38:26.021" starttime="20170425 18:38:26.021"></status>
</kw>
<msg timestamp="20170425 18:38:26.021" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:38:26.021" starttime="20170425 18:38:26.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:38:26.025" starttime="20170425 18:38:26.023"></status>
</kw>
<status status="PASS" endtime="20170425 18:38:26.025" starttime="20170425 18:38:26.023"></status>
</kw>
<status status="PASS" endtime="20170425 18:38:26.025" starttime="20170425 18:38:26.022"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:38:26.025" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:38:56.055" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:38:56.055" starttime="20170425 18:38:26.025"></status>
</kw>
<status status="FAIL" endtime="20170425 18:38:56.055" starttime="20170425 18:38:26.015"></status>
</kw>
<status status="FAIL" endtime="20170425 18:38:56.056" starttime="20170425 18:38:22.814"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:39:06.058" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:39:06.058" starttime="20170425 18:39:06.058"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:39:06.063" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:39:09.070" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:39:09.070" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.25 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.614 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:39:09.071" starttime="20170425 18:39:06.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:39:09.090" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.25 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.614 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.615 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.614 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.614/0.774/1.255/0.278 ms</msg>
<status status="PASS" endtime="20170425 18:39:09.090" starttime="20170425 18:39:09.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:09.091" starttime="20170425 18:39:09.090"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:09.091" starttime="20170425 18:39:06.057"></status>
</kw>
<msg timestamp="20170425 18:39:09.091" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:39:09.091" starttime="20170425 18:39:06.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:09.093" starttime="20170425 18:39:09.093"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:39:09.096" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:39:09.100" starttime="20170425 18:39:09.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:39:09.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:39:09.101" starttime="20170425 18:39:09.100"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:39:09.101" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:39:09.101" starttime="20170425 18:39:09.101"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:39:09.102" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:39:09.102" starttime="20170425 18:39:09.102"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:39:09.285" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:39:09.285" starttime="20170425 18:39:09.103"></status>
</kw>
<msg timestamp="20170425 18:39:09.285" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:39:09.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:39:09.285" starttime="20170425 18:39:09.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:39:09.286" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:39:09.286" starttime="20170425 18:39:09.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:39:09.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:39:09.287" starttime="20170425 18:39:09.286"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:09.287" starttime="20170425 18:39:09.094"></status>
</kw>
<msg timestamp="20170425 18:39:09.287" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:39:09.287" starttime="20170425 18:39:09.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:09.288" starttime="20170425 18:39:09.287"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:39:09.289" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:39:09.289" starttime="20170425 18:39:09.289"></status>
</kw>
<msg timestamp="20170425 18:39:09.289" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:39:09.290" starttime="20170425 18:39:09.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:09.291" starttime="20170425 18:39:09.290"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:09.291" starttime="20170425 18:39:09.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:09.291" starttime="20170425 18:39:09.291"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:39:09.292" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:39:09.293" starttime="20170425 18:39:09.292"></status>
</kw>
<msg timestamp="20170425 18:39:09.293" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:39:09.293" starttime="20170425 18:39:09.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:09.295" starttime="20170425 18:39:09.294"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:09.295" starttime="20170425 18:39:09.294"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:09.295" starttime="20170425 18:39:09.293"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:39:09.296" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:39:39.322" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:39:39.322" starttime="20170425 18:39:09.295"></status>
</kw>
<status status="FAIL" endtime="20170425 18:39:39.322" starttime="20170425 18:39:09.288"></status>
</kw>
<status status="FAIL" endtime="20170425 18:39:39.322" starttime="20170425 18:39:06.056"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:39:49.325" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:39:49.325" starttime="20170425 18:39:49.325"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:39:49.329" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:39:52.332" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:39:52.332" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.828 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.662 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:39:52.333" starttime="20170425 18:39:49.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:39:52.336" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.828 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.662 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.666 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.682 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.662/0.709/0.828/0.073 ms</msg>
<status status="PASS" endtime="20170425 18:39:52.336" starttime="20170425 18:39:52.335"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:52.337" starttime="20170425 18:39:52.336"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:52.337" starttime="20170425 18:39:49.324"></status>
</kw>
<msg timestamp="20170425 18:39:52.337" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:39:52.337" starttime="20170425 18:39:49.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:52.338" starttime="20170425 18:39:52.338"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:39:52.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:39:52.341" starttime="20170425 18:39:52.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:39:52.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:39:52.342" starttime="20170425 18:39:52.341"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:39:52.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:39:52.342" starttime="20170425 18:39:52.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:39:52.343" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:39:52.343" starttime="20170425 18:39:52.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:39:52.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:39:52.526" starttime="20170425 18:39:52.344"></status>
</kw>
<msg timestamp="20170425 18:39:52.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:39:52.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:39:52.527" starttime="20170425 18:39:52.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:39:52.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:39:52.528" starttime="20170425 18:39:52.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:39:52.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:39:52.528" starttime="20170425 18:39:52.528"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:52.528" starttime="20170425 18:39:52.339"></status>
</kw>
<msg timestamp="20170425 18:39:52.528" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:39:52.529" starttime="20170425 18:39:52.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:52.529" starttime="20170425 18:39:52.529"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:39:52.531" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:39:52.531" starttime="20170425 18:39:52.531"></status>
</kw>
<msg timestamp="20170425 18:39:52.531" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:39:52.531" starttime="20170425 18:39:52.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:52.533" starttime="20170425 18:39:52.532"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:52.533" starttime="20170425 18:39:52.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:52.533" starttime="20170425 18:39:52.533"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:39:52.534" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:39:52.534" starttime="20170425 18:39:52.534"></status>
</kw>
<msg timestamp="20170425 18:39:52.535" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:39:52.535" starttime="20170425 18:39:52.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:39:52.537" starttime="20170425 18:39:52.536"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:52.537" starttime="20170425 18:39:52.536"></status>
</kw>
<status status="PASS" endtime="20170425 18:39:52.537" starttime="20170425 18:39:52.535"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:39:52.537" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:40:22.565" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:40:22.566" starttime="20170425 18:39:52.537"></status>
</kw>
<status status="FAIL" endtime="20170425 18:40:22.566" starttime="20170425 18:39:52.529"></status>
</kw>
<status status="FAIL" endtime="20170425 18:40:22.566" starttime="20170425 18:39:49.323"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:40:32.569" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:40:32.569" starttime="20170425 18:40:32.568"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:40:32.574" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:40:35.576" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:40:35.576" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.14 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.620 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:40:35.576" starttime="20170425 18:40:32.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:40:35.579" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.14 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.620 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.640 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.617 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.617/1.256/3.147/1.091 ms</msg>
<status status="PASS" endtime="20170425 18:40:35.580" starttime="20170425 18:40:35.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:40:35.580" starttime="20170425 18:40:35.580"></status>
</kw>
<status status="PASS" endtime="20170425 18:40:35.581" starttime="20170425 18:40:32.568"></status>
</kw>
<msg timestamp="20170425 18:40:35.581" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:40:35.581" starttime="20170425 18:40:32.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:40:35.582" starttime="20170425 18:40:35.581"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:40:35.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:40:35.585" starttime="20170425 18:40:35.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:40:35.586" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:40:35.586" starttime="20170425 18:40:35.586"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:40:35.587" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:40:35.587" starttime="20170425 18:40:35.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:40:35.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:40:35.587" starttime="20170425 18:40:35.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:40:35.766" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:40:35.766" starttime="20170425 18:40:35.588"></status>
</kw>
<msg timestamp="20170425 18:40:35.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:40:35.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:40:35.766" starttime="20170425 18:40:35.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:40:35.767" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:40:35.767" starttime="20170425 18:40:35.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:40:35.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:40:35.768" starttime="20170425 18:40:35.768"></status>
</kw>
<status status="PASS" endtime="20170425 18:40:35.768" starttime="20170425 18:40:35.582"></status>
</kw>
<msg timestamp="20170425 18:40:35.768" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:40:35.768" starttime="20170425 18:40:35.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:40:35.769" starttime="20170425 18:40:35.769"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:40:35.771" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:40:35.771" starttime="20170425 18:40:35.770"></status>
</kw>
<msg timestamp="20170425 18:40:35.771" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:40:35.771" starttime="20170425 18:40:35.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:40:35.772" starttime="20170425 18:40:35.772"></status>
</kw>
<status status="PASS" endtime="20170425 18:40:35.772" starttime="20170425 18:40:35.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:40:35.773" starttime="20170425 18:40:35.772"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:40:35.774" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:40:35.774" starttime="20170425 18:40:35.774"></status>
</kw>
<msg timestamp="20170425 18:40:35.774" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:40:35.774" starttime="20170425 18:40:35.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:40:35.776" starttime="20170425 18:40:35.775"></status>
</kw>
<status status="PASS" endtime="20170425 18:40:35.776" starttime="20170425 18:40:35.775"></status>
</kw>
<status status="PASS" endtime="20170425 18:40:35.776" starttime="20170425 18:40:35.774"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:40:35.777" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:41:05.806" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:41:05.806" starttime="20170425 18:40:35.776"></status>
</kw>
<status status="FAIL" endtime="20170425 18:41:05.806" starttime="20170425 18:40:35.769"></status>
</kw>
<status status="FAIL" endtime="20170425 18:41:05.807" starttime="20170425 18:40:32.567"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:41:15.814" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:41:15.814" starttime="20170425 18:41:15.814"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:41:15.826" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:41:18.820" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:41:18.820" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.91 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.601 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:41:18.821" starttime="20170425 18:41:15.814"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:41:18.824" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.91 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.601 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.668 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.597 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.597/0.944/1.912/0.560 ms</msg>
<status status="PASS" endtime="20170425 18:41:18.824" starttime="20170425 18:41:18.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:41:18.825" starttime="20170425 18:41:18.824"></status>
</kw>
<status status="PASS" endtime="20170425 18:41:18.825" starttime="20170425 18:41:15.809"></status>
</kw>
<msg timestamp="20170425 18:41:18.825" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:41:18.825" starttime="20170425 18:41:15.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:41:18.826" starttime="20170425 18:41:18.826"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:41:18.828" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:41:18.829" starttime="20170425 18:41:18.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:41:18.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:41:18.830" starttime="20170425 18:41:18.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:41:18.831" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:41:18.831" starttime="20170425 18:41:18.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:41:18.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:41:18.832" starttime="20170425 18:41:18.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:41:19.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:41:19.009" starttime="20170425 18:41:18.832"></status>
</kw>
<msg timestamp="20170425 18:41:19.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:41:19.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:41:19.010" starttime="20170425 18:41:18.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:41:19.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:41:19.010" starttime="20170425 18:41:19.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:41:19.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:41:19.011" starttime="20170425 18:41:19.011"></status>
</kw>
<status status="PASS" endtime="20170425 18:41:19.012" starttime="20170425 18:41:18.827"></status>
</kw>
<msg timestamp="20170425 18:41:19.012" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:41:19.012" starttime="20170425 18:41:18.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:41:19.012" starttime="20170425 18:41:19.012"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:41:19.014" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:41:19.014" starttime="20170425 18:41:19.014"></status>
</kw>
<msg timestamp="20170425 18:41:19.014" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:41:19.014" starttime="20170425 18:41:19.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:41:19.015" starttime="20170425 18:41:19.015"></status>
</kw>
<status status="PASS" endtime="20170425 18:41:19.016" starttime="20170425 18:41:19.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:41:19.016" starttime="20170425 18:41:19.016"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:41:19.017" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:41:19.017" starttime="20170425 18:41:19.017"></status>
</kw>
<msg timestamp="20170425 18:41:19.017" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:41:19.017" starttime="20170425 18:41:19.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:41:19.020" starttime="20170425 18:41:19.019"></status>
</kw>
<status status="PASS" endtime="20170425 18:41:19.020" starttime="20170425 18:41:19.019"></status>
</kw>
<status status="PASS" endtime="20170425 18:41:19.020" starttime="20170425 18:41:19.018"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:41:19.020" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:41:49.047" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:41:49.047" starttime="20170425 18:41:19.020"></status>
</kw>
<status status="FAIL" endtime="20170425 18:41:49.047" starttime="20170425 18:41:19.013"></status>
</kw>
<status status="FAIL" endtime="20170425 18:41:49.047" starttime="20170425 18:41:15.807"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:41:59.050" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:41:59.051" starttime="20170425 18:41:59.050"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:41:59.058" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:42:02.060" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:42:02.060" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.78 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.594 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:42:02.060" starttime="20170425 18:41:59.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:42:02.064" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.78 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.594 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.577 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.565 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.565/2.130/6.784/2.687 ms</msg>
<status status="PASS" endtime="20170425 18:42:02.064" starttime="20170425 18:42:02.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:02.064" starttime="20170425 18:42:02.064"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:02.065" starttime="20170425 18:41:59.050"></status>
</kw>
<msg timestamp="20170425 18:42:02.065" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:42:02.065" starttime="20170425 18:41:59.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:02.066" starttime="20170425 18:42:02.065"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:42:02.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:42:02.070" starttime="20170425 18:42:02.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:42:02.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:42:02.070" starttime="20170425 18:42:02.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:42:02.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:42:02.071" starttime="20170425 18:42:02.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:42:02.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:42:02.072" starttime="20170425 18:42:02.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:42:02.250" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:42:02.250" starttime="20170425 18:42:02.073"></status>
</kw>
<msg timestamp="20170425 18:42:02.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:42:02.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:42:02.250" starttime="20170425 18:42:02.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:42:02.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:42:02.251" starttime="20170425 18:42:02.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:42:02.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:42:02.252" starttime="20170425 18:42:02.251"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:02.252" starttime="20170425 18:42:02.067"></status>
</kw>
<msg timestamp="20170425 18:42:02.252" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:42:02.252" starttime="20170425 18:42:02.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:02.253" starttime="20170425 18:42:02.252"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:42:02.254" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:42:02.255" starttime="20170425 18:42:02.254"></status>
</kw>
<msg timestamp="20170425 18:42:02.255" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:42:02.255" starttime="20170425 18:42:02.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:02.256" starttime="20170425 18:42:02.255"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:02.256" starttime="20170425 18:42:02.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:02.257" starttime="20170425 18:42:02.256"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:42:02.258" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:42:02.258" starttime="20170425 18:42:02.257"></status>
</kw>
<msg timestamp="20170425 18:42:02.258" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:42:02.258" starttime="20170425 18:42:02.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:02.260" starttime="20170425 18:42:02.259"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:02.260" starttime="20170425 18:42:02.259"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:02.260" starttime="20170425 18:42:02.258"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:42:02.260" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:42:32.289" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:42:32.289" starttime="20170425 18:42:02.260"></status>
</kw>
<status status="FAIL" endtime="20170425 18:42:32.289" starttime="20170425 18:42:02.253"></status>
</kw>
<status status="FAIL" endtime="20170425 18:42:32.290" starttime="20170425 18:41:59.048"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:42:42.292" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:42:42.292" starttime="20170425 18:42:42.292"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:42:42.296" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:42:45.300" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:42:45.300" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.734 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.658 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:42:45.300" starttime="20170425 18:42:42.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:42:45.303" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.734 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.658 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.656 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.654 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.654/0.675/0.734/0.042 ms</msg>
<status status="PASS" endtime="20170425 18:42:45.304" starttime="20170425 18:42:45.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:45.304" starttime="20170425 18:42:45.304"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:45.305" starttime="20170425 18:42:42.291"></status>
</kw>
<msg timestamp="20170425 18:42:45.305" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:42:45.305" starttime="20170425 18:42:42.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:45.306" starttime="20170425 18:42:45.305"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:42:45.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:42:45.309" starttime="20170425 18:42:45.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:42:45.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:42:45.310" starttime="20170425 18:42:45.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:42:45.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:42:45.311" starttime="20170425 18:42:45.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:42:45.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:42:45.311" starttime="20170425 18:42:45.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:42:45.502" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:42:45.502" starttime="20170425 18:42:45.312"></status>
</kw>
<msg timestamp="20170425 18:42:45.502" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:42:45.502" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:42:45.502" starttime="20170425 18:42:45.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:42:45.503" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:42:45.503" starttime="20170425 18:42:45.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:42:45.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:42:45.504" starttime="20170425 18:42:45.503"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:45.504" starttime="20170425 18:42:45.306"></status>
</kw>
<msg timestamp="20170425 18:42:45.504" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:42:45.504" starttime="20170425 18:42:45.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:45.505" starttime="20170425 18:42:45.504"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:42:45.507" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:42:45.507" starttime="20170425 18:42:45.506"></status>
</kw>
<msg timestamp="20170425 18:42:45.507" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:42:45.507" starttime="20170425 18:42:45.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:45.508" starttime="20170425 18:42:45.508"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:45.508" starttime="20170425 18:42:45.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:45.509" starttime="20170425 18:42:45.509"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:42:45.510" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:42:45.510" starttime="20170425 18:42:45.510"></status>
</kw>
<msg timestamp="20170425 18:42:45.510" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:42:45.510" starttime="20170425 18:42:45.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:42:45.512" starttime="20170425 18:42:45.512"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:45.512" starttime="20170425 18:42:45.511"></status>
</kw>
<status status="PASS" endtime="20170425 18:42:45.512" starttime="20170425 18:42:45.510"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:42:45.513" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:43:15.541" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:43:15.541" starttime="20170425 18:42:45.513"></status>
</kw>
<status status="FAIL" endtime="20170425 18:43:15.541" starttime="20170425 18:42:45.505"></status>
</kw>
<status status="FAIL" endtime="20170425 18:43:15.542" starttime="20170425 18:42:42.290"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:43:25.545" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:43:25.545" starttime="20170425 18:43:25.544"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:43:25.549" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:43:28.552" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:43:28.552" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.52 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170425 18:43:28.552" starttime="20170425 18:43:25.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:43:28.556" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.52 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.644 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.630 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.612/0.853/1.528/0.390 ms</msg>
<status status="PASS" endtime="20170425 18:43:28.556" starttime="20170425 18:43:28.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:28.556" starttime="20170425 18:43:28.556"></status>
</kw>
<status status="PASS" endtime="20170425 18:43:28.557" starttime="20170425 18:43:25.544"></status>
</kw>
<msg timestamp="20170425 18:43:28.557" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170425 18:43:28.557" starttime="20170425 18:43:25.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:28.558" starttime="20170425 18:43:28.557"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:43:28.560" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:43:28.561" starttime="20170425 18:43:28.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:43:28.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:43:28.562" starttime="20170425 18:43:28.561"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:43:28.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:43:28.562" starttime="20170425 18:43:28.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:43:28.563" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:43:28.563" starttime="20170425 18:43:28.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:43:28.739" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:43:28.739" starttime="20170425 18:43:28.564"></status>
</kw>
<msg timestamp="20170425 18:43:28.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:43:28.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:43:28.739" starttime="20170425 18:43:28.563"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:43:28.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:43:28.740" starttime="20170425 18:43:28.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:43:28.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:43:28.741" starttime="20170425 18:43:28.740"></status>
</kw>
<status status="PASS" endtime="20170425 18:43:28.741" starttime="20170425 18:43:28.558"></status>
</kw>
<msg timestamp="20170425 18:43:28.741" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170425 18:43:28.741" starttime="20170425 18:43:28.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:28.742" starttime="20170425 18:43:28.741"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:43:28.743" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:43:28.744" starttime="20170425 18:43:28.743"></status>
</kw>
<msg timestamp="20170425 18:43:28.744" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:43:28.744" starttime="20170425 18:43:28.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:28.745" starttime="20170425 18:43:28.744"></status>
</kw>
<status status="PASS" endtime="20170425 18:43:28.745" starttime="20170425 18:43:28.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:28.746" starttime="20170425 18:43:28.745"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:43:28.747" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:43:28.747" starttime="20170425 18:43:28.746"></status>
</kw>
<msg timestamp="20170425 18:43:28.747" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:43:28.747" starttime="20170425 18:43:28.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:28.749" starttime="20170425 18:43:28.749"></status>
</kw>
<status status="PASS" endtime="20170425 18:43:28.749" starttime="20170425 18:43:28.748"></status>
</kw>
<status status="PASS" endtime="20170425 18:43:28.749" starttime="20170425 18:43:28.747"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:43:28.750" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:43:58.777" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:43:58.777" starttime="20170425 18:43:28.750"></status>
</kw>
<status status="FAIL" endtime="20170425 18:43:58.778" starttime="20170425 18:43:28.742"></status>
</kw>
<status status="FAIL" endtime="20170425 18:43:58.778" starttime="20170425 18:43:25.542"></status>
</kw>
<msg timestamp="20170425 18:43:58.778" level="FAIL">Keyword 'Verify Ping and REST Authentication' failed after retrying for 20 minutes. The last error was: SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:43:58.778" starttime="20170425 18:23:28.277"></status>
</kw>
<status status="FAIL" endtime="20170425 18:43:58.778" starttime="20170425 18:23:28.276"></status>
</kw>
<status status="FAIL" endtime="20170425 18:43:58.779" starttime="20170425 18:23:12.805"></status>
</kw>
<status status="FAIL" endtime="20170425 18:43:58.779" starttime="20170425 18:23:12.804"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170425 18:43:58.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170425 18:43:58.792" starttime="20170425 18:43:58.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170425 18:43:58.793" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170425 18:43:58.793" starttime="20170425 18:43:58.792"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170425 18:43:58.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170425 18:43:58.793" starttime="20170425 18:43:58.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170425 18:43:58.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170425 18:43:58.794" starttime="20170425 18:43:58.794"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170425 18:43:58.977" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170425 18:43:58.977" starttime="20170425 18:43:58.795"></status>
</kw>
<msg timestamp="20170425 18:43:58.977" level="INFO">${status} = PASS</msg>
<msg timestamp="20170425 18:43:58.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:43:58.977" starttime="20170425 18:43:58.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170425 18:43:58.978" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:43:58.978" starttime="20170425 18:43:58.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:43:58.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:43:58.979" starttime="20170425 18:43:58.979"></status>
</kw>
<status status="PASS" endtime="20170425 18:43:58.979" starttime="20170425 18:43:58.790"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170425 18:43:58.980" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170425 18:43:58.980" starttime="20170425 18:43:58.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:58.981" starttime="20170425 18:43:58.980"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170425 18:43:59.056" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170425 18:43:59.056" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:43:59.056" starttime="20170425 18:43:58.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:43:59.057" starttime="20170425 18:43:59.057"></status>
</kw>
<msg timestamp="20170425 18:43:59.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170425 18:43:59.057" starttime="20170425 18:43:58.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170425 18:43:59.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170425 18:43:59.058" starttime="20170425 18:43:59.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170425 18:43:59.058" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170425 18:43:59.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170425 18:43:59.059" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170425 18:43:59.059" starttime="20170425 18:43:59.058"></status>
</kw>
<msg timestamp="20170425 18:43:59.059" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170425 18:43:59.059" starttime="20170425 18:43:58.789"></status>
</kw>
<msg timestamp="20170425 18:43:59.059" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170425 18:43:59.059" starttime="20170425 18:43:58.789"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170425 18:43:59.060" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170425 18:43:59.060" starttime="20170425 18:43:59.060"></status>
</kw>
<msg timestamp="20170425 18:43:59.061" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 18:43:59.061" starttime="20170425 18:43:59.060"></status>
</kw>
<msg timestamp="20170425 18:43:59.061" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170425 18:43:59.061" starttime="20170425 18:43:58.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170425 18:43:59.064" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170425 18:43:59.064" starttime="20170425 18:43:59.063"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170425 18:43:59.068" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170425 18:44:02.068" level="INFO">${RC} = 0</msg>
<msg timestamp="20170425 18:44:02.068" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.716 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.625 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170425 18:44:02.068" starttime="20170425 18:43:59.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170425 18:44:02.072" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.716 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.625 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.602 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.583 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.583/0.631/0.716/0.056 ms</msg>
<status status="PASS" endtime="20170425 18:44:02.072" starttime="20170425 18:44:02.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:44:02.072" starttime="20170425 18:44:02.072"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:02.073" starttime="20170425 18:43:59.063"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170425 18:44:02.104" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170425 18:44:02.104" starttime="20170425 18:44:02.103"></status>
</kw>
<msg timestamp="20170425 18:44:02.104" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170425 18:44:02.104" starttime="20170425 18:44:02.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:44:02.105" starttime="20170425 18:44:02.105"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:02.105" starttime="20170425 18:44:02.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170425 18:44:02.106" starttime="20170425 18:44:02.106"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170425 18:44:02.107" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170425 18:44:02.107" starttime="20170425 18:44:02.107"></status>
</kw>
<msg timestamp="20170425 18:44:02.107" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170425 18:44:02.107" starttime="20170425 18:44:02.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:44:02.109" starttime="20170425 18:44:02.109"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:02.109" starttime="20170425 18:44:02.108"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:02.110" starttime="20170425 18:44:02.108"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170425 18:44:02.110" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170425 18:44:32.140" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170425 18:44:32.140" starttime="20170425 18:44:02.110"></status>
</kw>
<status status="FAIL" endtime="20170425 18:44:32.142" starttime="20170425 18:44:02.101"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170425 18:44:32.721" starttime="20170425 18:44:32.155"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:32.721" starttime="20170425 18:43:59.062"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:32.721" starttime="20170425 18:43:59.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170425 18:44:32.722" starttime="20170425 18:44:32.722"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170425 18:44:32.724" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170425 18:44:32.724" starttime="20170425 18:44:32.724"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170425 18:44:32.726" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170425 18:44:32.726" starttime="20170425 18:44:32.725"></status>
</kw>
<msg timestamp="20170425 18:44:32.726" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170425 18:44:32.726" starttime="20170425 18:44:32.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170425 18:44:32.727" starttime="20170425 18:44:32.726"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 18:44:32.728" level="INFO">${cur_time} = 2017-04-25 18:44:32:727356</msg>
<status status="PASS" endtime="20170425 18:44:32.728" starttime="20170425 18:44:32.727"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170425 18:44:32.728" level="INFO">${cur_time} = 20170425184432727356</msg>
<status status="PASS" endtime="20170425 18:44:32.728" starttime="20170425 18:44:32.728"></status>
</kw>
<msg timestamp="20170425 18:44:32.728" level="INFO">${cur_time} = 20170425184432727356</msg>
<status status="PASS" endtime="20170425 18:44:32.729" starttime="20170425 18:44:32.727"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170425 18:44:32.729" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170425 18:44:32.729" starttime="20170425 18:44:32.729"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:32.730" starttime="20170425 18:44:32.723"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:32.730" starttime="20170425 18:43:58.788"></status>
</kw>
<status status="PASS" endtime="20170425 18:44:32.730" starttime="20170425 18:43:58.780"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170425 18:44:32.730" critical="yes" starttime="20170425 18:23:12.802">Keyword 'Verify Ping and REST Authentication' failed after retrying for 20 minutes. The last error was: SSHException: No existing session</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20170425 18:44:32.731" starttime="20170425 18:23:12.066"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
