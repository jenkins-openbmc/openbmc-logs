<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170512 23:07:10.470">
<suite id="s1" source="/tmp/fspcibld/18816/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:10.994">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:07:10.993" status="FAIL" endtime="20170512 23:07:10.994"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:10.994">${has_host} = False</msg>
<status starttime="20170512 23:07:10.993" status="PASS" endtime="20170512 23:07:10.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:07:10.995" status="PASS" endtime="20170512 23:07:10.995"></status>
</kw>
<status starttime="20170512 23:07:10.994" status="PASS" endtime="20170512 23:07:10.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:10.996">${port_num} = 22</msg>
<status starttime="20170512 23:07:10.996" status="PASS" endtime="20170512 23:07:10.997"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:10.997">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:07:10.997" status="PASS" endtime="20170512 23:07:10.997"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:10.997">${https_num} = 443</msg>
<status starttime="20170512 23:07:10.997" status="PASS" endtime="20170512 23:07:10.998"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:10.998">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:07:10.998" status="PASS" endtime="20170512 23:07:10.998"></status>
</kw>
<status starttime="20170512 23:07:10.996" status="PASS" endtime="20170512 23:07:10.998"></status>
</kw>
<status starttime="20170512 23:07:10.995" status="PASS" endtime="20170512 23:07:10.998"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:10.999">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:07:10.999" status="FAIL" endtime="20170512 23:07:10.999"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:10.999">${has_port} = False</msg>
<status starttime="20170512 23:07:10.999" status="PASS" endtime="20170512 23:07:11.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:07:11.001" status="PASS" endtime="20170512 23:07:11.001"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:07:11.001" status="PASS" endtime="20170512 23:07:11.002"></status>
</kw>
<status starttime="20170512 23:07:11.000" status="PASS" endtime="20170512 23:07:11.002"></status>
</kw>
<status starttime="20170512 23:07:11.000" status="PASS" endtime="20170512 23:07:11.002"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:11.002">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:07:13.029">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:07:11.002" status="PASS" endtime="20170512 23:07:13.030"></status>
</kw>
<status starttime="20170512 23:07:10.988" status="PASS" endtime="20170512 23:07:13.030"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:13.032">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170512 23:07:13.181">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:07:13.182">${output} = VERSION_ID="v1.99.5-37-g77e75ff"</msg>
<msg level="INFO" timestamp="20170512 23:07:13.182">${stderr} = </msg>
<status starttime="20170512 23:07:13.031" status="PASS" endtime="20170512 23:07:13.182"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:13.183">Length is 0</msg>
<status starttime="20170512 23:07:13.182" status="PASS" endtime="20170512 23:07:13.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:13.183">VERSION_ID="v1.99.5-37-g77e75ff"</msg>
<status starttime="20170512 23:07:13.183" status="PASS" endtime="20170512 23:07:13.183"></status>
</kw>
<status starttime="20170512 23:07:13.031" status="PASS" endtime="20170512 23:07:13.183"></status>
</kw>
<status starttime="20170512 23:07:13.031" status="PASS" endtime="20170512 23:07:13.183"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:13.185">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170512 23:07:13.444">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:07:13.445">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170512 23:07:13.445">${stderr} = </msg>
<status starttime="20170512 23:07:13.185" status="PASS" endtime="20170512 23:07:13.445"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:13.445">Length is 0</msg>
<status starttime="20170512 23:07:13.445" status="PASS" endtime="20170512 23:07:13.446"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:13.446">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170512 23:07:13.184" status="PASS" endtime="20170512 23:07:13.446"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:13.446">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170512 23:07:13.446" status="PASS" endtime="20170512 23:07:13.447"></status>
</kw>
<status starttime="20170512 23:07:13.184" status="PASS" endtime="20170512 23:07:13.447"></status>
</kw>
<status starttime="20170512 23:07:13.184" status="PASS" endtime="20170512 23:07:13.448"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:13.450">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:07:13.450" status="FAIL" endtime="20170512 23:07:13.450"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:13.450">${has_host} = False</msg>
<status starttime="20170512 23:07:13.449" status="PASS" endtime="20170512 23:07:13.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:07:13.451" status="PASS" endtime="20170512 23:07:13.451"></status>
</kw>
<status starttime="20170512 23:07:13.451" status="PASS" endtime="20170512 23:07:13.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:13.453">${port_num} = 22</msg>
<status starttime="20170512 23:07:13.453" status="PASS" endtime="20170512 23:07:13.453"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:13.453">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:07:13.453" status="PASS" endtime="20170512 23:07:13.454"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:13.454">${https_num} = 443</msg>
<status starttime="20170512 23:07:13.454" status="PASS" endtime="20170512 23:07:13.454"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:13.455">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:07:13.454" status="PASS" endtime="20170512 23:07:13.455"></status>
</kw>
<status starttime="20170512 23:07:13.452" status="PASS" endtime="20170512 23:07:13.455"></status>
</kw>
<status starttime="20170512 23:07:13.452" status="PASS" endtime="20170512 23:07:13.455"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:13.456">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:07:13.456" status="FAIL" endtime="20170512 23:07:13.456"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:13.456">${has_port} = False</msg>
<status starttime="20170512 23:07:13.455" status="PASS" endtime="20170512 23:07:13.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:07:13.457" status="PASS" endtime="20170512 23:07:13.458"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:07:13.458" status="PASS" endtime="20170512 23:07:13.458"></status>
</kw>
<status starttime="20170512 23:07:13.457" status="PASS" endtime="20170512 23:07:13.458"></status>
</kw>
<status starttime="20170512 23:07:13.456" status="PASS" endtime="20170512 23:07:13.459"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:13.459">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:07:15.206">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:07:13.459" status="PASS" endtime="20170512 23:07:15.207"></status>
</kw>
<status starttime="20170512 23:07:13.449" status="PASS" endtime="20170512 23:07:15.207"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:15.208">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170512 23:07:15.275">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:07:15.275">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170512 23:07:15.275">${stderr} = </msg>
<status starttime="20170512 23:07:15.207" status="PASS" endtime="20170512 23:07:15.275"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:15.275">Length is 0</msg>
<status starttime="20170512 23:07:15.275" status="PASS" endtime="20170512 23:07:15.276"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:15.276">Length is 11</msg>
<status starttime="20170512 23:07:15.276" status="PASS" endtime="20170512 23:07:15.276"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:15.276">${bmc_model} = Witherspoon</msg>
<status starttime="20170512 23:07:13.448" status="PASS" endtime="20170512 23:07:15.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:15.277">BMC Model=Witherspoon</msg>
<status starttime="20170512 23:07:15.277" status="PASS" endtime="20170512 23:07:15.277"></status>
</kw>
<status starttime="20170512 23:07:13.448" status="PASS" endtime="20170512 23:07:15.277"></status>
</kw>
<status starttime="20170512 23:07:13.448" status="PASS" endtime="20170512 23:07:15.277"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:15.279">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:07:15.279" status="FAIL" endtime="20170512 23:07:15.279"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:15.279">${has_host} = False</msg>
<status starttime="20170512 23:07:15.278" status="PASS" endtime="20170512 23:07:15.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:07:15.280" status="PASS" endtime="20170512 23:07:15.281"></status>
</kw>
<status starttime="20170512 23:07:15.280" status="PASS" endtime="20170512 23:07:15.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:15.282">${port_num} = 22</msg>
<status starttime="20170512 23:07:15.282" status="PASS" endtime="20170512 23:07:17.275"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:17.277">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:07:17.276" status="PASS" endtime="20170512 23:07:17.277"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:17.279">${https_num} = 443</msg>
<status starttime="20170512 23:07:17.278" status="PASS" endtime="20170512 23:07:17.279"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:17.281">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:07:17.279" status="PASS" endtime="20170512 23:07:17.281"></status>
</kw>
<status starttime="20170512 23:07:15.281" status="PASS" endtime="20170512 23:07:17.282"></status>
</kw>
<status starttime="20170512 23:07:15.281" status="PASS" endtime="20170512 23:07:17.282"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:17.284">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:07:17.283" status="FAIL" endtime="20170512 23:07:17.285"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:17.285">${has_port} = False</msg>
<status starttime="20170512 23:07:17.282" status="PASS" endtime="20170512 23:07:17.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:07:17.289" status="PASS" endtime="20170512 23:07:17.290"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:07:17.291" status="PASS" endtime="20170512 23:07:17.292"></status>
</kw>
<status starttime="20170512 23:07:17.288" status="PASS" endtime="20170512 23:07:17.293"></status>
</kw>
<status starttime="20170512 23:07:17.286" status="PASS" endtime="20170512 23:07:17.293"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:17.295">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:07:18.969">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:07:17.294" status="PASS" endtime="20170512 23:07:18.969"></status>
</kw>
<status starttime="20170512 23:07:15.278" status="PASS" endtime="20170512 23:07:18.970"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:18.971">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170512 23:07:19.050">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:07:19.050">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170512 23:07:19.050">${stderr} = </msg>
<status starttime="20170512 23:07:18.971" status="PASS" endtime="20170512 23:07:19.050"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:19.051">Length is 0</msg>
<status starttime="20170512 23:07:19.050" status="PASS" endtime="20170512 23:07:19.051"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:19.051">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170512 23:07:18.970" status="PASS" endtime="20170512 23:07:19.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170512 23:07:19.051" status="PASS" endtime="20170512 23:07:19.052"></status>
</kw>
<status starttime="20170512 23:07:15.277" status="PASS" endtime="20170512 23:07:19.052"></status>
</kw>
<status starttime="20170512 23:07:15.277" status="PASS" endtime="20170512 23:07:19.052"></status>
</kw>
<status starttime="20170512 23:07:10.988" status="PASS" endtime="20170512 23:07:19.052"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/18816/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/18816/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.370">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:25.370" status="PASS" endtime="20170512 23:07:25.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.371">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:25.371" status="PASS" endtime="20170512 23:07:25.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.372">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:25.372" status="PASS" endtime="20170512 23:07:25.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.372">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:25.372" status="PASS" endtime="20170512 23:07:25.373"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.576">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:25.373" status="PASS" endtime="20170512 23:07:25.576"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.577">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:25.577">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:25.373" status="PASS" endtime="20170512 23:07:25.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.578">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:25.578" status="PASS" endtime="20170512 23:07:25.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:25.579" status="PASS" endtime="20170512 23:07:25.580"></status>
</kw>
<status starttime="20170512 23:07:25.369" status="PASS" endtime="20170512 23:07:25.580"></status>
</kw>
<status starttime="20170512 23:07:25.369" status="PASS" endtime="20170512 23:07:25.581"></status>
</kw>
<status starttime="20170512 23:07:25.368" status="PASS" endtime="20170512 23:07:25.581"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.591">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:25.590" status="PASS" endtime="20170512 23:07:25.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:25.593" status="PASS" endtime="20170512 23:07:25.593"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.595">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:25.594" status="PASS" endtime="20170512 23:07:25.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:25.595" status="PASS" endtime="20170512 23:07:25.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.807">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:25.598" status="PASS" endtime="20170512 23:07:25.808"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.808">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:25.808">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:25.597" status="PASS" endtime="20170512 23:07:25.808"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.809">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:25.808" status="PASS" endtime="20170512 23:07:25.809"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:25.809" status="PASS" endtime="20170512 23:07:25.810"></status>
</kw>
<status starttime="20170512 23:07:25.589" status="PASS" endtime="20170512 23:07:25.810"></status>
</kw>
<status starttime="20170512 23:07:25.588" status="PASS" endtime="20170512 23:07:25.810"></status>
</kw>
<status starttime="20170512 23:07:25.586" status="PASS" endtime="20170512 23:07:25.810"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.811">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:07:25.810" status="PASS" endtime="20170512 23:07:25.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.814">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:25.813" status="PASS" endtime="20170512 23:07:25.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.815">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:25.815" status="PASS" endtime="20170512 23:07:25.816"></status>
</kw>
<status starttime="20170512 23:07:25.814" status="PASS" endtime="20170512 23:07:25.816"></status>
</kw>
<status starttime="20170512 23:07:25.812" status="PASS" endtime="20170512 23:07:25.816"></status>
</kw>
<status starttime="20170512 23:07:25.811" status="PASS" endtime="20170512 23:07:25.816"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.885">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:07:25.885">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:25.816" status="PASS" endtime="20170512 23:07:25.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.888">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:25.887" status="PASS" endtime="20170512 23:07:25.888"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.890">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:25.889" status="PASS" endtime="20170512 23:07:25.890"></status>
</kw>
<status starttime="20170512 23:07:25.888" status="PASS" endtime="20170512 23:07:25.890"></status>
</kw>
<status starttime="20170512 23:07:25.886" status="PASS" endtime="20170512 23:07:25.890"></status>
</kw>
<status starttime="20170512 23:07:25.886" status="PASS" endtime="20170512 23:07:25.890"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.891">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:25.585" status="PASS" endtime="20170512 23:07:25.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:25.891" status="PASS" endtime="20170512 23:07:25.892"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.893">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:07:25.893">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:07:25.893">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:07:25.893" status="PASS" endtime="20170512 23:07:25.893"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.894">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170512 23:07:25.584" status="PASS" endtime="20170512 23:07:25.894"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.895">${host_state} = Running</msg>
<status starttime="20170512 23:07:25.583" status="PASS" endtime="20170512 23:07:25.895"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:25.897">Running != Quiesced</msg>
<status starttime="20170512 23:07:25.896" status="FAIL" endtime="20170512 23:07:25.897"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.897">${status} = False</msg>
<status starttime="20170512 23:07:25.895" status="PASS" endtime="20170512 23:07:25.897"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.897">${status} = False</msg>
<status starttime="20170512 23:07:25.582" status="PASS" endtime="20170512 23:07:25.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170512 23:07:25.898" status="PASS" endtime="20170512 23:07:25.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170512 23:07:25.899" status="PASS" endtime="20170512 23:07:25.899"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.910">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170512 23:07:25.900" status="PASS" endtime="20170512 23:07:25.910"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.930">${FFDC_DIR_PATH} = </msg>
<status starttime="20170512 23:07:25.911" status="PASS" endtime="20170512 23:07:25.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.944">${cur_time} = 2017-05-12 23:07:25:944116</msg>
<status starttime="20170512 23:07:25.944" status="PASS" endtime="20170512 23:07:25.944"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.945">${cur_time} = 20170512230725944116</msg>
<status starttime="20170512 23:07:25.945" status="PASS" endtime="20170512 23:07:25.945"></status>
</kw>
<status starttime="20170512 23:07:25.943" status="PASS" endtime="20170512 23:07:25.945"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.950">${FFDC_TIME} = 20170512230725944116</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.953">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170512 23:07:25.952" status="PASS" endtime="20170512 23:07:25.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.954">${suite_name} = 20170512230725944116_TestsSecurityTestSsl</msg>
<status starttime="20170512 23:07:25.953" status="PASS" endtime="20170512 23:07:25.954"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.954">${test_name} = TestSSLConnection</msg>
<status starttime="20170512 23:07:25.954" status="PASS" endtime="20170512 23:07:25.954"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.955">${test_name} = 20170512230725944116_TestSSLConnection</msg>
<status starttime="20170512 23:07:25.954" status="PASS" endtime="20170512 23:07:25.955"></status>
</kw>
<status starttime="20170512 23:07:25.951" status="PASS" endtime="20170512 23:07:25.955"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.955">${FFDC_DIR_PATH} = /tmp/fspcibld/18816/obmc-robot/logs/20170512230725944116_TestsSecurityTestSsl/20170512230725944116_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170512 23:07:25.961">${FFDC_PREFIX} = 20170512230725944116_</msg>
<status starttime="20170512 23:07:25.933" status="PASS" endtime="20170512 23:07:25.962"></status>
</kw>
<status starttime="20170512 23:07:25.931" status="PASS" endtime="20170512 23:07:25.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170512 23:07:25.962" status="PASS" endtime="20170512 23:07:25.962"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.963" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs"&gt;/tmp/fspcibld/18816/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170512 23:07:25.963" status="PASS" endtime="20170512 23:07:25.963"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:25.964">File '/tmp/fspcibld/18816/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170512 23:07:25.964" status="FAIL" endtime="20170512 23:07:25.964"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.965">${exist} = False</msg>
<status starttime="20170512 23:07:25.964" status="PASS" endtime="20170512 23:07:25.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.966" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:07:25.965" status="PASS" endtime="20170512 23:07:25.966"></status>
</kw>
<status starttime="20170512 23:07:25.965" status="PASS" endtime="20170512 23:07:25.966"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170512 23:07:25.966" status="PASS" endtime="20170512 23:07:25.967"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.970">${cur_time} = 2017-05-12 23:07:25:969412</msg>
<status starttime="20170512 23:07:25.969" status="PASS" endtime="20170512 23:07:25.970"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:25.972">${cur_time} = 20170512230725969412</msg>
<status starttime="20170512 23:07:25.971" status="PASS" endtime="20170512 23:07:25.972"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:25.972">${cur_time} = 20170512230725969412</msg>
<status starttime="20170512 23:07:25.968" status="PASS" endtime="20170512 23:07:25.972"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:25.974" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:07:25.973" status="PASS" endtime="20170512 23:07:25.974"></status>
</kw>
<status starttime="20170512 23:07:25.899" status="PASS" endtime="20170512 23:07:25.974"></status>
</kw>
<status starttime="20170512 23:07:25.581" status="PASS" endtime="20170512 23:07:25.974"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170512 23:07:25.368" critical="yes" status="PASS" endtime="20170512 23:07:25.974"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170512 23:07:25.975">Delete All Sessions</msg>
<status starttime="20170512 23:07:25.975" status="PASS" endtime="20170512 23:07:25.975"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170512 23:07:19.054" status="PASS" endtime="20170512 23:07:25.975"></status>
</suite>
<status starttime="20170512 23:07:19.052" status="PASS" endtime="20170512 23:07:25.976"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/18816/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.041">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:07:26.041" status="PASS" endtime="20170512 23:07:26.041"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.042">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:07:26.041" status="PASS" endtime="20170512 23:07:26.042"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:26.042">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:07:26.040" status="PASS" endtime="20170512 23:07:26.042"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.043">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:07:26.043" status="PASS" endtime="20170512 23:07:26.043"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.044">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:07:26.044" status="PASS" endtime="20170512 23:07:26.044"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:26.044">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:07:26.043" status="PASS" endtime="20170512 23:07:26.044"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.045">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170512 23:07:26.045" status="PASS" endtime="20170512 23:07:26.045"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:07:26.045" status="PASS" endtime="20170512 23:07:26.053"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.059">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:07:26.065">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:07:26.065">${output} = /tmp/fspcibld/18816/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170512 23:07:26.053" status="PASS" endtime="20170512 23:07:26.065"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170512 23:07:26.068" status="PASS" endtime="20170512 23:07:26.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170512 23:07:26.076" status="PASS" endtime="20170512 23:07:26.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.078">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170512 23:07:26.077" status="PASS" endtime="20170512 23:07:26.078"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:26.078">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170512 23:07:26.044" status="PASS" endtime="20170512 23:07:26.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.079">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170512 23:07:26.079" status="PASS" endtime="20170512 23:07:26.079"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:07:26.079" status="PASS" endtime="20170512 23:07:26.087"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.114">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:07:26.130">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:07:26.130">${os_con_pid} = </msg>
<status starttime="20170512 23:07:26.087" status="PASS" endtime="20170512 23:07:26.130"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170512 23:07:26.137" status="PASS" endtime="20170512 23:07:26.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.153">${cmd_buf} = kill -9 </msg>
<status starttime="20170512 23:07:26.152" status="PASS" endtime="20170512 23:07:26.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:07:26.153" status="PASS" endtime="20170512 23:07:26.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.155">${rc} = None</msg>
<msg level="INFO" timestamp="20170512 23:07:26.155">${output} = None</msg>
<status starttime="20170512 23:07:26.154" status="PASS" endtime="20170512 23:07:26.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170512 23:07:26.156" status="PASS" endtime="20170512 23:07:26.156"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.157">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170512 23:07:26.157" status="PASS" endtime="20170512 23:07:26.157"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:07:26.157" status="PASS" endtime="20170512 23:07:26.168"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.206">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:07:26.220">${rc} = 1</msg>
<msg level="INFO" timestamp="20170512 23:07:26.220">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170512 23:07:26.169" status="PASS" endtime="20170512 23:07:26.221"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170512 23:07:26.229" status="PASS" endtime="20170512 23:07:26.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170512 23:07:26.242" status="PASS" endtime="20170512 23:07:26.243"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:26.243">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170512 23:07:26.042" status="PASS" endtime="20170512 23:07:26.243"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:26.244" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170512 23:07:26.243" status="PASS" endtime="20170512 23:07:26.244"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.245">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170512 23:07:26.245" status="PASS" endtime="20170512 23:07:26.245"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:07:26.245" status="PASS" endtime="20170512 23:07:26.252"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.255">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:07:26.260">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:07:26.260">${output} = /tmp/fspcibld/18816/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170512 23:07:26.252" status="PASS" endtime="20170512 23:07:26.260"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170512 23:07:26.261" status="PASS" endtime="20170512 23:07:26.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170512 23:07:26.269" status="PASS" endtime="20170512 23:07:26.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.270">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170512 23:07:26.270" status="PASS" endtime="20170512 23:07:26.270"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:26.271">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170512 23:07:26.244" status="PASS" endtime="20170512 23:07:26.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.271">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170512 23:07:26.271" status="PASS" endtime="20170512 23:07:26.271"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:07:26.272" status="PASS" endtime="20170512 23:07:26.279"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.283">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170512 23:07:26.287">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:07:26.287">${output} = </msg>
<status starttime="20170512 23:07:26.279" status="PASS" endtime="20170512 23:07:26.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170512 23:07:26.289" status="PASS" endtime="20170512 23:07:26.289"></status>
</kw>
<status starttime="20170512 23:07:26.040" status="PASS" endtime="20170512 23:07:26.290"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:26.290">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.292">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170512 23:07:26.291" status="PASS" endtime="20170512 23:07:26.292"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.293">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170512 23:07:26.293" status="PASS" endtime="20170512 23:07:26.293"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:26.296">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:26.296" status="PASS" endtime="20170512 23:07:26.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.298">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:26.297" status="PASS" endtime="20170512 23:07:26.298"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.299">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:26.298" status="PASS" endtime="20170512 23:07:26.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.300">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:26.299" status="PASS" endtime="20170512 23:07:26.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:26.832">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:26.301" status="PASS" endtime="20170512 23:07:26.832"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:26.833">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:26.833">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:26.300" status="PASS" endtime="20170512 23:07:26.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:26.834">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:26.833" status="PASS" endtime="20170512 23:07:26.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:26.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:26.835" status="PASS" endtime="20170512 23:07:26.836"></status>
</kw>
<status starttime="20170512 23:07:26.295" status="PASS" endtime="20170512 23:07:26.836"></status>
</kw>
<status starttime="20170512 23:07:26.295" status="PASS" endtime="20170512 23:07:26.836"></status>
</kw>
<status starttime="20170512 23:07:26.294" status="PASS" endtime="20170512 23:07:26.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.838">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170512 23:07:26.837" status="PASS" endtime="20170512 23:07:26.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:26.839" status="PASS" endtime="20170512 23:07:26.840"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170512 23:07:26.840" status="PASS" endtime="20170512 23:07:26.841"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:26.845">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170512 23:07:26.843" status="PASS" endtime="20170512 23:07:26.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:26.847">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170512 23:07:26.847" status="PASS" endtime="20170512 23:07:26.848"></status>
</kw>
<status starttime="20170512 23:07:26.846" status="PASS" endtime="20170512 23:07:26.848"></status>
</kw>
<status starttime="20170512 23:07:26.841" status="PASS" endtime="20170512 23:07:26.848"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:27.240">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170512 23:07:27.240">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:26.849" status="PASS" endtime="20170512 23:07:27.240"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:27.242">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:27.242" status="PASS" endtime="20170512 23:07:27.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:27.244">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:27.243" status="PASS" endtime="20170512 23:07:27.244"></status>
</kw>
<status starttime="20170512 23:07:27.243" status="PASS" endtime="20170512 23:07:27.244"></status>
</kw>
<status starttime="20170512 23:07:27.241" status="PASS" endtime="20170512 23:07:27.244"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:27.244">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:26.293" status="PASS" endtime="20170512 23:07:27.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:27.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:27.245" status="PASS" endtime="20170512 23:07:27.245"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:27.246">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:07:27.246">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:07:27.246">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:07:27.246" status="PASS" endtime="20170512 23:07:27.246"></status>
</kw>
<status starttime="20170512 23:07:26.292" status="PASS" endtime="20170512 23:07:27.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170512 23:07:27.247" status="PASS" endtime="20170512 23:07:27.247"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:27.254">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:27.253" status="PASS" endtime="20170512 23:07:27.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:27.255">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:27.255" status="PASS" endtime="20170512 23:07:27.255"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:27.256">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:27.256" status="PASS" endtime="20170512 23:07:27.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:27.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:27.256" status="PASS" endtime="20170512 23:07:27.257"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:28.165">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:27.258" status="PASS" endtime="20170512 23:07:28.165"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:28.166">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:28.166">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:27.257" status="PASS" endtime="20170512 23:07:28.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:28.167">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:28.166" status="PASS" endtime="20170512 23:07:28.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:28.167">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:28.167" status="PASS" endtime="20170512 23:07:28.167"></status>
</kw>
<status starttime="20170512 23:07:27.253" status="PASS" endtime="20170512 23:07:28.168"></status>
</kw>
<status starttime="20170512 23:07:27.252" status="PASS" endtime="20170512 23:07:28.168"></status>
</kw>
<status starttime="20170512 23:07:27.251" status="PASS" endtime="20170512 23:07:28.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:28.168">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:07:28.168" status="PASS" endtime="20170512 23:07:28.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:28.170">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:28.170" status="PASS" endtime="20170512 23:07:28.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:28.171">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:28.171" status="PASS" endtime="20170512 23:07:28.171"></status>
</kw>
<status starttime="20170512 23:07:28.171" status="PASS" endtime="20170512 23:07:28.172"></status>
</kw>
<status starttime="20170512 23:07:28.169" status="PASS" endtime="20170512 23:07:28.172"></status>
</kw>
<status starttime="20170512 23:07:28.169" status="PASS" endtime="20170512 23:07:28.172"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:29.167">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:07:29.168">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:28.172" status="PASS" endtime="20170512 23:07:29.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:29.177">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:29.175" status="PASS" endtime="20170512 23:07:29.177"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:29.178">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:29.178" status="PASS" endtime="20170512 23:07:29.178"></status>
</kw>
<status starttime="20170512 23:07:29.177" status="PASS" endtime="20170512 23:07:29.178"></status>
</kw>
<status starttime="20170512 23:07:29.172" status="PASS" endtime="20170512 23:07:29.178"></status>
</kw>
<status starttime="20170512 23:07:29.170" status="PASS" endtime="20170512 23:07:29.179"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:29.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:27.250" status="PASS" endtime="20170512 23:07:29.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:29.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:29.179" status="PASS" endtime="20170512 23:07:29.180"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:29.181">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:07:29.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:07:29.181">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:07:29.180" status="PASS" endtime="20170512 23:07:29.181"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:29.181">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170512 23:07:27.249" status="PASS" endtime="20170512 23:07:29.181"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:29.182">${host_state} = Running</msg>
<status starttime="20170512 23:07:27.249" status="PASS" endtime="20170512 23:07:29.182"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:29.183">Off != Running</msg>
<status starttime="20170512 23:07:29.182" status="FAIL" endtime="20170512 23:07:29.183"></status>
</kw>
<status starttime="20170512 23:07:27.248" status="FAIL" endtime="20170512 23:07:29.183"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.189">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:39.189" status="PASS" endtime="20170512 23:07:39.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.190">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:39.190" status="PASS" endtime="20170512 23:07:39.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.191">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:39.190" status="PASS" endtime="20170512 23:07:39.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.191">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:39.191" status="PASS" endtime="20170512 23:07:39.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:39.192" status="PASS" endtime="20170512 23:07:39.382"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:39.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.191" status="PASS" endtime="20170512 23:07:39.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.383" status="PASS" endtime="20170512 23:07:39.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.384" status="PASS" endtime="20170512 23:07:39.385"></status>
</kw>
<status starttime="20170512 23:07:39.188" status="PASS" endtime="20170512 23:07:39.385"></status>
</kw>
<status starttime="20170512 23:07:39.187" status="PASS" endtime="20170512 23:07:39.385"></status>
</kw>
<status starttime="20170512 23:07:39.187" status="PASS" endtime="20170512 23:07:39.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.386">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:07:39.386" status="PASS" endtime="20170512 23:07:39.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.390">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:39.389" status="PASS" endtime="20170512 23:07:39.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.391">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:39.391" status="PASS" endtime="20170512 23:07:39.391"></status>
</kw>
<status starttime="20170512 23:07:39.390" status="PASS" endtime="20170512 23:07:39.391"></status>
</kw>
<status starttime="20170512 23:07:39.387" status="PASS" endtime="20170512 23:07:39.392"></status>
</kw>
<status starttime="20170512 23:07:39.387" status="PASS" endtime="20170512 23:07:39.392"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.458">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:07:39.458">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.392" status="PASS" endtime="20170512 23:07:39.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.461">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:39.460" status="PASS" endtime="20170512 23:07:39.461"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.462">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:39.462" status="PASS" endtime="20170512 23:07:39.462"></status>
</kw>
<status starttime="20170512 23:07:39.461" status="PASS" endtime="20170512 23:07:39.463"></status>
</kw>
<status starttime="20170512 23:07:39.459" status="PASS" endtime="20170512 23:07:39.463"></status>
</kw>
<status starttime="20170512 23:07:39.459" status="PASS" endtime="20170512 23:07:39.463"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.186" status="PASS" endtime="20170512 23:07:39.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.464">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.464" status="PASS" endtime="20170512 23:07:39.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.465">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:07:39.465">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:07:39.466">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:07:39.465" status="PASS" endtime="20170512 23:07:39.466"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.466">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170512 23:07:39.185" status="PASS" endtime="20170512 23:07:39.466"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.467">${host_state} = Off</msg>
<status starttime="20170512 23:07:39.185" status="PASS" endtime="20170512 23:07:39.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170512 23:07:39.467" status="PASS" endtime="20170512 23:07:39.468"></status>
</kw>
<status starttime="20170512 23:07:39.184" status="PASS" endtime="20170512 23:07:39.468"></status>
</kw>
<status starttime="20170512 23:07:27.248" status="PASS" endtime="20170512 23:07:39.468"></status>
</kw>
<status starttime="20170512 23:07:26.291" status="PASS" endtime="20170512 23:07:39.468"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.476">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:39.475" status="PASS" endtime="20170512 23:07:39.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:39.477" status="PASS" endtime="20170512 23:07:39.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.478">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:39.478" status="PASS" endtime="20170512 23:07:39.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:39.479" status="PASS" endtime="20170512 23:07:39.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:39.480" status="PASS" endtime="20170512 23:07:39.664"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:39.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.480" status="PASS" endtime="20170512 23:07:39.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.665" status="PASS" endtime="20170512 23:07:39.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.666" status="PASS" endtime="20170512 23:07:39.666"></status>
</kw>
<status starttime="20170512 23:07:39.474" status="PASS" endtime="20170512 23:07:39.666"></status>
</kw>
<status starttime="20170512 23:07:39.473" status="PASS" endtime="20170512 23:07:39.666"></status>
</kw>
<status starttime="20170512 23:07:39.472" status="PASS" endtime="20170512 23:07:39.666"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.667">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:07:39.667" status="PASS" endtime="20170512 23:07:39.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.669">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:07:39.668" status="PASS" endtime="20170512 23:07:39.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.670">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:07:39.670" status="PASS" endtime="20170512 23:07:39.670"></status>
</kw>
<status starttime="20170512 23:07:39.669" status="PASS" endtime="20170512 23:07:39.670"></status>
</kw>
<status starttime="20170512 23:07:39.668" status="PASS" endtime="20170512 23:07:39.670"></status>
</kw>
<status starttime="20170512 23:07:39.667" status="PASS" endtime="20170512 23:07:39.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.737">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:07:39.738">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.671" status="PASS" endtime="20170512 23:07:39.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.739">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:39.739" status="PASS" endtime="20170512 23:07:39.739"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.740">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:39.740" status="PASS" endtime="20170512 23:07:39.740"></status>
</kw>
<status starttime="20170512 23:07:39.740" status="PASS" endtime="20170512 23:07:39.741"></status>
</kw>
<status starttime="20170512 23:07:39.738" status="PASS" endtime="20170512 23:07:39.741"></status>
</kw>
<status starttime="20170512 23:07:39.738" status="PASS" endtime="20170512 23:07:39.741"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.471" status="PASS" endtime="20170512 23:07:39.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.741" status="PASS" endtime="20170512 23:07:39.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.742">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:07:39.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:07:39.742">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:07:39.742" status="PASS" endtime="20170512 23:07:39.742"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.743">${state} = Off</msg>
<status starttime="20170512 23:07:39.470" status="PASS" endtime="20170512 23:07:39.743"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.743">${boot_progress} = Off</msg>
<status starttime="20170512 23:07:39.470" status="PASS" endtime="20170512 23:07:39.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170512 23:07:39.743" status="PASS" endtime="20170512 23:07:39.743"></status>
</kw>
<status starttime="20170512 23:07:39.469" status="PASS" endtime="20170512 23:07:39.743"></status>
</kw>
<status starttime="20170512 23:07:39.469" status="PASS" endtime="20170512 23:07:39.743"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.744">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170512 23:07:39.744" status="PASS" endtime="20170512 23:07:39.745"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.746">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170512 23:07:39.746" status="PASS" endtime="20170512 23:07:39.746"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.749">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:39.748" status="PASS" endtime="20170512 23:07:39.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.749">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:39.749" status="PASS" endtime="20170512 23:07:39.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.750">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:39.750" status="PASS" endtime="20170512 23:07:39.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.751">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:39.750" status="PASS" endtime="20170512 23:07:39.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.941">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:39.752" status="PASS" endtime="20170512 23:07:39.941"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:39.941">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:39.941">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.751" status="PASS" endtime="20170512 23:07:39.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.942">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.942" status="PASS" endtime="20170512 23:07:39.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.943">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:39.942" status="PASS" endtime="20170512 23:07:39.943"></status>
</kw>
<status starttime="20170512 23:07:39.748" status="PASS" endtime="20170512 23:07:39.943"></status>
</kw>
<status starttime="20170512 23:07:39.747" status="PASS" endtime="20170512 23:07:39.943"></status>
</kw>
<status starttime="20170512 23:07:39.747" status="PASS" endtime="20170512 23:07:39.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.944">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170512 23:07:39.943" status="PASS" endtime="20170512 23:07:39.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:39.944" status="PASS" endtime="20170512 23:07:39.944"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170512 23:07:39.945" status="PASS" endtime="20170512 23:07:39.945"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:39.946">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170512 23:07:39.946" status="PASS" endtime="20170512 23:07:39.947"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:39.948">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170512 23:07:39.947" status="PASS" endtime="20170512 23:07:39.948"></status>
</kw>
<status starttime="20170512 23:07:39.947" status="PASS" endtime="20170512 23:07:39.948"></status>
</kw>
<status starttime="20170512 23:07:39.945" status="PASS" endtime="20170512 23:07:39.948"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.347">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170512 23:07:40.347">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.948" status="PASS" endtime="20170512 23:07:40.347"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.349">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:40.348" status="PASS" endtime="20170512 23:07:40.349"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:40.350">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:40.349" status="PASS" endtime="20170512 23:07:40.350"></status>
</kw>
<status starttime="20170512 23:07:40.349" status="PASS" endtime="20170512 23:07:40.350"></status>
</kw>
<status starttime="20170512 23:07:40.348" status="PASS" endtime="20170512 23:07:40.350"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:40.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:39.746" status="PASS" endtime="20170512 23:07:40.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:40.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:40.351" status="PASS" endtime="20170512 23:07:40.351"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.352">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:07:40.352">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:07:40.352">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:07:40.351" status="PASS" endtime="20170512 23:07:40.352"></status>
</kw>
<status starttime="20170512 23:07:39.745" status="PASS" endtime="20170512 23:07:40.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170512 23:07:40.352" status="PASS" endtime="20170512 23:07:40.352"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:40.357">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:40.356" status="PASS" endtime="20170512 23:07:40.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:40.357" status="PASS" endtime="20170512 23:07:40.358"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.360">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:40.358" status="PASS" endtime="20170512 23:07:40.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.361">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:40.360" status="PASS" endtime="20170512 23:07:40.361"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:40.732">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:40.361" status="PASS" endtime="20170512 23:07:40.732"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:40.733">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:40.733">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:40.361" status="PASS" endtime="20170512 23:07:40.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:40.739">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:40.736" status="PASS" endtime="20170512 23:07:40.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:40.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:40.741" status="PASS" endtime="20170512 23:07:40.745"></status>
</kw>
<status starttime="20170512 23:07:40.356" status="PASS" endtime="20170512 23:07:40.746"></status>
</kw>
<status starttime="20170512 23:07:40.355" status="PASS" endtime="20170512 23:07:40.746"></status>
</kw>
<status starttime="20170512 23:07:40.355" status="PASS" endtime="20170512 23:07:40.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.751">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:07:40.748" status="PASS" endtime="20170512 23:07:40.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:40.763">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:40.761" status="PASS" endtime="20170512 23:07:40.763"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:40.765">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:40.765" status="PASS" endtime="20170512 23:07:40.766"></status>
</kw>
<status starttime="20170512 23:07:40.763" status="PASS" endtime="20170512 23:07:40.766"></status>
</kw>
<status starttime="20170512 23:07:40.757" status="PASS" endtime="20170512 23:07:40.766"></status>
</kw>
<status starttime="20170512 23:07:40.753" status="PASS" endtime="20170512 23:07:40.767"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:41.294">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:07:41.295">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:40.767" status="PASS" endtime="20170512 23:07:41.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:41.301">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:41.299" status="PASS" endtime="20170512 23:07:41.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:41.304">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:41.304" status="PASS" endtime="20170512 23:07:41.305"></status>
</kw>
<status starttime="20170512 23:07:41.302" status="PASS" endtime="20170512 23:07:41.305"></status>
</kw>
<status starttime="20170512 23:07:41.298" status="PASS" endtime="20170512 23:07:41.306"></status>
</kw>
<status starttime="20170512 23:07:41.296" status="PASS" endtime="20170512 23:07:41.306"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:41.307">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:40.354" status="PASS" endtime="20170512 23:07:41.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:41.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:41.310" status="PASS" endtime="20170512 23:07:41.311"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:41.345">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:07:41.346">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:07:41.347">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:07:41.312" status="PASS" endtime="20170512 23:07:41.347"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:41.350">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170512 23:07:40.354" status="PASS" endtime="20170512 23:07:41.350"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:41.352">${host_state} = Off</msg>
<status starttime="20170512 23:07:40.353" status="PASS" endtime="20170512 23:07:41.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:07:41.355">Running != Off</msg>
<status starttime="20170512 23:07:41.353" status="FAIL" endtime="20170512 23:07:41.355"></status>
</kw>
<status starttime="20170512 23:07:40.353" status="FAIL" endtime="20170512 23:07:41.356"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:51.365">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:07:51.364" status="PASS" endtime="20170512 23:07:51.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:51.366">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:07:51.365" status="PASS" endtime="20170512 23:07:51.366"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:51.367">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:07:51.366" status="PASS" endtime="20170512 23:07:51.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:51.368">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:07:51.367" status="PASS" endtime="20170512 23:07:51.368"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:54.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:07:51.368" status="PASS" endtime="20170512 23:07:54.964"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:07:54.964">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:07:54.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:51.368" status="PASS" endtime="20170512 23:07:54.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:54.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:54.965" status="PASS" endtime="20170512 23:07:54.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:54.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:07:54.965" status="PASS" endtime="20170512 23:07:54.966"></status>
</kw>
<status starttime="20170512 23:07:51.364" status="PASS" endtime="20170512 23:07:54.966"></status>
</kw>
<status starttime="20170512 23:07:51.363" status="PASS" endtime="20170512 23:07:54.966"></status>
</kw>
<status starttime="20170512 23:07:51.363" status="PASS" endtime="20170512 23:07:54.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:54.967">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:07:54.967" status="PASS" endtime="20170512 23:07:54.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:54.969">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:54.968" status="PASS" endtime="20170512 23:07:54.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:54.970">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:07:54.970" status="PASS" endtime="20170512 23:07:54.970"></status>
</kw>
<status starttime="20170512 23:07:54.969" status="PASS" endtime="20170512 23:07:54.970"></status>
</kw>
<status starttime="20170512 23:07:54.968" status="PASS" endtime="20170512 23:07:54.970"></status>
</kw>
<status starttime="20170512 23:07:54.967" status="PASS" endtime="20170512 23:07:54.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:56.730">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:07:56.730">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:54.971" status="PASS" endtime="20170512 23:07:56.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:07:56.732">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:56.731" status="PASS" endtime="20170512 23:07:56.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:07:56.733">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:07:56.733" status="PASS" endtime="20170512 23:07:56.733"></status>
</kw>
<status starttime="20170512 23:07:56.732" status="PASS" endtime="20170512 23:07:56.733"></status>
</kw>
<status starttime="20170512 23:07:56.731" status="PASS" endtime="20170512 23:07:56.733"></status>
</kw>
<status starttime="20170512 23:07:56.730" status="PASS" endtime="20170512 23:08:04.002"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:04.003">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:07:51.361" status="PASS" endtime="20170512 23:08:04.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:04.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:04.004" status="PASS" endtime="20170512 23:08:04.007"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:04.010">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:08:04.010">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:08:04.010">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:08:04.008" status="PASS" endtime="20170512 23:08:04.011"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:04.012">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170512 23:07:51.360" status="PASS" endtime="20170512 23:08:04.012"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:04.013">${host_state} = Off</msg>
<status starttime="20170512 23:07:51.360" status="PASS" endtime="20170512 23:08:04.013"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:08:04.016">Running != Off</msg>
<status starttime="20170512 23:08:04.015" status="FAIL" endtime="20170512 23:08:04.017"></status>
</kw>
<status starttime="20170512 23:07:51.359" status="FAIL" endtime="20170512 23:08:04.017"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:14.025">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:08:14.025" status="PASS" endtime="20170512 23:08:14.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:14.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:08:14.026" status="PASS" endtime="20170512 23:08:14.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:14.027">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:08:14.027" status="PASS" endtime="20170512 23:08:14.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:14.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:08:14.027" status="PASS" endtime="20170512 23:08:14.028"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:14.297">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:08:14.028" status="PASS" endtime="20170512 23:08:14.297"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:14.297">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:08:14.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:14.028" status="PASS" endtime="20170512 23:08:14.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:14.298">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:14.298" status="PASS" endtime="20170512 23:08:14.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:14.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:14.299" status="PASS" endtime="20170512 23:08:14.299"></status>
</kw>
<status starttime="20170512 23:08:14.024" status="PASS" endtime="20170512 23:08:14.299"></status>
</kw>
<status starttime="20170512 23:08:14.024" status="PASS" endtime="20170512 23:08:14.299"></status>
</kw>
<status starttime="20170512 23:08:14.023" status="PASS" endtime="20170512 23:08:14.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:14.300">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:08:14.300" status="PASS" endtime="20170512 23:08:14.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:25.768">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:08:25.767" status="PASS" endtime="20170512 23:08:25.768"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:25.770">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:08:25.769" status="PASS" endtime="20170512 23:08:25.770"></status>
</kw>
<status starttime="20170512 23:08:25.769" status="PASS" endtime="20170512 23:08:25.770"></status>
</kw>
<status starttime="20170512 23:08:25.766" status="PASS" endtime="20170512 23:08:25.770"></status>
</kw>
<status starttime="20170512 23:08:25.765" status="PASS" endtime="20170512 23:08:25.770"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:25.865">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:08:25.866">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:25.770" status="PASS" endtime="20170512 23:08:25.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:25.868">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:25.867" status="PASS" endtime="20170512 23:08:25.868"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:25.869">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:25.869" status="PASS" endtime="20170512 23:08:25.869"></status>
</kw>
<status starttime="20170512 23:08:25.868" status="PASS" endtime="20170512 23:08:25.869"></status>
</kw>
<status starttime="20170512 23:08:25.867" status="PASS" endtime="20170512 23:08:25.869"></status>
</kw>
<status starttime="20170512 23:08:25.866" status="PASS" endtime="20170512 23:08:25.869"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:25.869">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:14.022" status="PASS" endtime="20170512 23:08:25.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:25.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:25.870" status="PASS" endtime="20170512 23:08:25.870"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:25.871">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:08:25.871">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:08:25.871">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:08:25.870" status="PASS" endtime="20170512 23:08:25.871"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:25.871">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170512 23:08:14.022" status="PASS" endtime="20170512 23:08:25.871"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:25.872">${host_state} = Running</msg>
<status starttime="20170512 23:08:14.021" status="PASS" endtime="20170512 23:08:25.872"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170512 23:08:25.872" status="PASS" endtime="20170512 23:08:25.872"></status>
</kw>
<status starttime="20170512 23:08:14.020" status="PASS" endtime="20170512 23:08:25.872"></status>
</kw>
<status starttime="20170512 23:07:40.353" status="PASS" endtime="20170512 23:08:25.872"></status>
</kw>
<status starttime="20170512 23:07:39.744" status="PASS" endtime="20170512 23:08:25.872"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:25.878">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:08:25.877" status="PASS" endtime="20170512 23:08:25.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:25.879">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:08:25.878" status="PASS" endtime="20170512 23:08:25.879"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:25.879">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:08:25.879" status="PASS" endtime="20170512 23:08:25.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:25.880">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:08:25.879" status="PASS" endtime="20170512 23:08:25.880"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:26.192">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:08:25.880" status="PASS" endtime="20170512 23:08:26.193"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:26.193">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:08:26.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:25.880" status="PASS" endtime="20170512 23:08:26.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:26.194">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:26.193" status="PASS" endtime="20170512 23:08:26.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:26.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:26.195" status="PASS" endtime="20170512 23:08:26.195"></status>
</kw>
<status starttime="20170512 23:08:25.876" status="PASS" endtime="20170512 23:08:26.196"></status>
</kw>
<status starttime="20170512 23:08:25.876" status="PASS" endtime="20170512 23:08:26.196"></status>
</kw>
<status starttime="20170512 23:08:25.875" status="PASS" endtime="20170512 23:08:26.196"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:26.197">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:08:26.196" status="PASS" endtime="20170512 23:08:26.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:26.201">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:08:26.199" status="PASS" endtime="20170512 23:08:26.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:26.202">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:08:26.202" status="PASS" endtime="20170512 23:08:26.203"></status>
</kw>
<status starttime="20170512 23:08:26.201" status="PASS" endtime="20170512 23:08:26.203"></status>
</kw>
<status starttime="20170512 23:08:26.198" status="PASS" endtime="20170512 23:08:26.203"></status>
</kw>
<status starttime="20170512 23:08:26.197" status="PASS" endtime="20170512 23:08:26.203"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:26.344">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:08:26.345">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:26.204" status="PASS" endtime="20170512 23:08:26.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:26.351">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:26.349" status="PASS" endtime="20170512 23:08:26.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:26.353">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:26.353" status="PASS" endtime="20170512 23:08:26.353"></status>
</kw>
<status starttime="20170512 23:08:26.351" status="PASS" endtime="20170512 23:08:26.354"></status>
</kw>
<status starttime="20170512 23:08:26.348" status="PASS" endtime="20170512 23:08:26.354"></status>
</kw>
<status starttime="20170512 23:08:26.347" status="PASS" endtime="20170512 23:08:26.354"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:26.355">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:25.874" status="PASS" endtime="20170512 23:08:26.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:26.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:26.355" status="PASS" endtime="20170512 23:08:26.356"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:26.357">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:08:26.357">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:08:26.357">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:08:26.357" status="PASS" endtime="20170512 23:08:26.357"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:26.358">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:08:25.874" status="PASS" endtime="20170512 23:08:26.358"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:26.358">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:08:25.873" status="PASS" endtime="20170512 23:08:26.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:08:26.370">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:08:26.359" status="FAIL" endtime="20170512 23:08:26.370"></status>
</kw>
<status starttime="20170512 23:08:25.873" status="FAIL" endtime="20170512 23:08:26.370"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:36.376">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:08:36.376" status="PASS" endtime="20170512 23:08:36.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:36.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:08:36.377" status="PASS" endtime="20170512 23:08:36.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:36.378">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:08:36.377" status="PASS" endtime="20170512 23:08:36.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:36.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:08:36.378" status="PASS" endtime="20170512 23:08:36.378"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:36.575">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:08:36.379" status="PASS" endtime="20170512 23:08:36.575"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:36.575">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:08:36.575">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:36.379" status="PASS" endtime="20170512 23:08:36.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:36.576">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:36.576" status="PASS" endtime="20170512 23:08:36.576"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:36.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:36.576" status="PASS" endtime="20170512 23:08:36.577"></status>
</kw>
<status starttime="20170512 23:08:36.375" status="PASS" endtime="20170512 23:08:36.577"></status>
</kw>
<status starttime="20170512 23:08:36.375" status="PASS" endtime="20170512 23:08:44.191"></status>
</kw>
<status starttime="20170512 23:08:36.374" status="PASS" endtime="20170512 23:08:44.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:44.194">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:08:44.193" status="PASS" endtime="20170512 23:08:44.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:44.203">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:08:44.199" status="PASS" endtime="20170512 23:08:44.203"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:44.207">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:08:44.206" status="PASS" endtime="20170512 23:08:44.208"></status>
</kw>
<status starttime="20170512 23:08:44.204" status="PASS" endtime="20170512 23:08:44.209"></status>
</kw>
<status starttime="20170512 23:08:44.197" status="PASS" endtime="20170512 23:08:44.209"></status>
</kw>
<status starttime="20170512 23:08:44.195" status="PASS" endtime="20170512 23:08:44.209"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:44.328">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:08:44.328">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:44.211" status="PASS" endtime="20170512 23:08:44.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:44.330">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:44.330" status="PASS" endtime="20170512 23:08:44.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:44.331">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:44.331" status="PASS" endtime="20170512 23:08:44.331"></status>
</kw>
<status starttime="20170512 23:08:44.330" status="PASS" endtime="20170512 23:08:44.331"></status>
</kw>
<status starttime="20170512 23:08:44.329" status="PASS" endtime="20170512 23:08:44.332"></status>
</kw>
<status starttime="20170512 23:08:44.329" status="PASS" endtime="20170512 23:08:44.332"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:44.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:36.373" status="PASS" endtime="20170512 23:08:44.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:44.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:44.332" status="PASS" endtime="20170512 23:08:44.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:44.333">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:08:44.333">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:08:44.333">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:08:44.333" status="PASS" endtime="20170512 23:08:44.333"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:44.334">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:08:36.373" status="PASS" endtime="20170512 23:08:44.334"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:44.334">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:08:36.372" status="PASS" endtime="20170512 23:08:44.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:08:44.335">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:08:44.334" status="FAIL" endtime="20170512 23:08:44.335"></status>
</kw>
<status starttime="20170512 23:08:36.371" status="FAIL" endtime="20170512 23:08:44.335"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:54.342">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:08:54.342" status="PASS" endtime="20170512 23:08:54.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.343">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:08:54.343" status="PASS" endtime="20170512 23:08:54.343"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.344">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:08:54.344" status="PASS" endtime="20170512 23:08:54.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.345">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:08:54.344" status="PASS" endtime="20170512 23:08:54.345"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:54.535">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:08:54.346" status="PASS" endtime="20170512 23:08:54.535"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:54.535">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:08:54.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:54.345" status="PASS" endtime="20170512 23:08:54.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:54.536">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:54.536" status="PASS" endtime="20170512 23:08:54.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:54.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:54.536" status="PASS" endtime="20170512 23:08:54.537"></status>
</kw>
<status starttime="20170512 23:08:54.341" status="PASS" endtime="20170512 23:08:54.537"></status>
</kw>
<status starttime="20170512 23:08:54.341" status="PASS" endtime="20170512 23:08:54.537"></status>
</kw>
<status starttime="20170512 23:08:54.340" status="PASS" endtime="20170512 23:08:54.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.538">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:08:54.538" status="PASS" endtime="20170512 23:08:54.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.540">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:08:54.539" status="PASS" endtime="20170512 23:08:54.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:54.541">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:08:54.541" status="PASS" endtime="20170512 23:08:54.541"></status>
</kw>
<status starttime="20170512 23:08:54.540" status="PASS" endtime="20170512 23:08:54.541"></status>
</kw>
<status starttime="20170512 23:08:54.539" status="PASS" endtime="20170512 23:08:54.541"></status>
</kw>
<status starttime="20170512 23:08:54.538" status="PASS" endtime="20170512 23:08:54.541"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.664">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:08:54.664">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:54.542" status="PASS" endtime="20170512 23:08:54.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.665">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:54.665" status="PASS" endtime="20170512 23:08:54.666"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:54.666">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:08:54.666" status="PASS" endtime="20170512 23:08:54.667"></status>
</kw>
<status starttime="20170512 23:08:54.666" status="PASS" endtime="20170512 23:08:54.667"></status>
</kw>
<status starttime="20170512 23:08:54.665" status="PASS" endtime="20170512 23:08:54.667"></status>
</kw>
<status starttime="20170512 23:08:54.664" status="PASS" endtime="20170512 23:08:54.667"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:54.667">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:08:54.339" status="PASS" endtime="20170512 23:08:54.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:08:54.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:08:54.667" status="PASS" endtime="20170512 23:08:54.668"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:08:54.668">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:08:54.668">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:08:54.669">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:08:54.668" status="PASS" endtime="20170512 23:08:54.669"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:54.669">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:08:54.338" status="PASS" endtime="20170512 23:08:54.669"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:08:54.669">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:08:54.338" status="PASS" endtime="20170512 23:08:54.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:08:54.670">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:08:54.669" status="FAIL" endtime="20170512 23:08:54.670"></status>
</kw>
<status starttime="20170512 23:08:54.337" status="FAIL" endtime="20170512 23:08:54.670"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:04.677">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:04.676" status="PASS" endtime="20170512 23:09:04.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:04.679" status="PASS" endtime="20170512 23:09:04.679"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.680">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:04.679" status="PASS" endtime="20170512 23:09:04.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:04.680" status="PASS" endtime="20170512 23:09:04.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:04.869">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:04.681" status="PASS" endtime="20170512 23:09:04.869"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:04.869">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:04.869">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:04.681" status="PASS" endtime="20170512 23:09:04.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:04.870">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:04.869" status="PASS" endtime="20170512 23:09:04.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:04.871">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:04.870" status="PASS" endtime="20170512 23:09:04.871"></status>
</kw>
<status starttime="20170512 23:09:04.676" status="PASS" endtime="20170512 23:09:04.871"></status>
</kw>
<status starttime="20170512 23:09:04.676" status="PASS" endtime="20170512 23:09:04.871"></status>
</kw>
<status starttime="20170512 23:09:04.674" status="PASS" endtime="20170512 23:09:04.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.872">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:09:04.871" status="PASS" endtime="20170512 23:09:04.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.874">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:04.873" status="PASS" endtime="20170512 23:09:04.874"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:04.875">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:04.874" status="PASS" endtime="20170512 23:09:04.875"></status>
</kw>
<status starttime="20170512 23:09:04.874" status="PASS" endtime="20170512 23:09:04.875"></status>
</kw>
<status starttime="20170512 23:09:04.872" status="PASS" endtime="20170512 23:09:04.875"></status>
</kw>
<status starttime="20170512 23:09:04.872" status="PASS" endtime="20170512 23:09:04.875"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.949">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:09:04.950">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:04.875" status="PASS" endtime="20170512 23:09:04.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.952">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:04.951" status="PASS" endtime="20170512 23:09:04.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:04.953">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:04.952" status="PASS" endtime="20170512 23:09:04.953"></status>
</kw>
<status starttime="20170512 23:09:04.952" status="PASS" endtime="20170512 23:09:04.953"></status>
</kw>
<status starttime="20170512 23:09:04.950" status="PASS" endtime="20170512 23:09:04.953"></status>
</kw>
<status starttime="20170512 23:09:04.950" status="PASS" endtime="20170512 23:09:04.953"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:04.953">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:04.673" status="PASS" endtime="20170512 23:09:04.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:04.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:04.953" status="PASS" endtime="20170512 23:09:04.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:04.954">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:04.954">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:04.955">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:04.954" status="PASS" endtime="20170512 23:09:04.955"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:04.955">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:04.673" status="PASS" endtime="20170512 23:09:04.955"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:04.955">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:04.672" status="PASS" endtime="20170512 23:09:04.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:09:04.956">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:09:04.955" status="FAIL" endtime="20170512 23:09:04.956"></status>
</kw>
<status starttime="20170512 23:09:04.671" status="FAIL" endtime="20170512 23:09:04.956"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:14.966">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:14.966" status="PASS" endtime="20170512 23:09:14.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:14.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:14.968" status="PASS" endtime="20170512 23:09:14.968"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:14.969">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:14.969" status="PASS" endtime="20170512 23:09:14.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:14.970">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:14.969" status="PASS" endtime="20170512 23:09:14.970"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:15.343">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:14.971" status="PASS" endtime="20170512 23:09:15.343"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:15.344">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:15.344">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:14.970" status="PASS" endtime="20170512 23:09:15.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:15.345">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:15.344" status="PASS" endtime="20170512 23:09:15.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:15.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:15.346" status="PASS" endtime="20170512 23:09:15.347"></status>
</kw>
<status starttime="20170512 23:09:14.965" status="PASS" endtime="20170512 23:09:15.347"></status>
</kw>
<status starttime="20170512 23:09:14.965" status="PASS" endtime="20170512 23:09:15.348"></status>
</kw>
<status starttime="20170512 23:09:14.963" status="PASS" endtime="20170512 23:09:15.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:15.349">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:09:15.348" status="PASS" endtime="20170512 23:09:15.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:15.352">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:15.351" status="PASS" endtime="20170512 23:09:15.352"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:15.353">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:15.353" status="PASS" endtime="20170512 23:09:15.354"></status>
</kw>
<status starttime="20170512 23:09:15.352" status="PASS" endtime="20170512 23:09:15.354"></status>
</kw>
<status starttime="20170512 23:09:15.350" status="PASS" endtime="20170512 23:09:15.354"></status>
</kw>
<status starttime="20170512 23:09:15.349" status="PASS" endtime="20170512 23:09:15.354"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:15.453">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:09:15.454">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:15.354" status="PASS" endtime="20170512 23:09:15.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:15.457">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:15.456" status="PASS" endtime="20170512 23:09:15.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:15.458">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:15.458" status="PASS" endtime="20170512 23:09:15.458"></status>
</kw>
<status starttime="20170512 23:09:15.457" status="PASS" endtime="20170512 23:09:15.459"></status>
</kw>
<status starttime="20170512 23:09:15.455" status="PASS" endtime="20170512 23:09:15.459"></status>
</kw>
<status starttime="20170512 23:09:15.454" status="PASS" endtime="20170512 23:09:15.459"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:15.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:14.962" status="PASS" endtime="20170512 23:09:15.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:15.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:15.460" status="PASS" endtime="20170512 23:09:15.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:15.461">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:15.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:15.461">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:15.460" status="PASS" endtime="20170512 23:09:15.461"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:15.462">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:14.961" status="PASS" endtime="20170512 23:09:15.462"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:15.462">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:14.961" status="PASS" endtime="20170512 23:09:15.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:09:15.463">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:09:15.462" status="FAIL" endtime="20170512 23:09:15.463"></status>
</kw>
<status starttime="20170512 23:09:14.959" status="FAIL" endtime="20170512 23:09:15.463"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:25.470">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:25.469" status="PASS" endtime="20170512 23:09:25.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.471">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:25.470" status="PASS" endtime="20170512 23:09:25.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.471">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:25.471" status="PASS" endtime="20170512 23:09:25.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.472">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:25.472" status="PASS" endtime="20170512 23:09:25.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:25.651">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:25.473" status="PASS" endtime="20170512 23:09:25.651"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:25.652">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:25.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:25.472" status="PASS" endtime="20170512 23:09:25.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:25.653">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:25.652" status="PASS" endtime="20170512 23:09:25.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:25.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:25.653" status="PASS" endtime="20170512 23:09:25.654"></status>
</kw>
<status starttime="20170512 23:09:25.468" status="PASS" endtime="20170512 23:09:25.654"></status>
</kw>
<status starttime="20170512 23:09:25.468" status="PASS" endtime="20170512 23:09:25.654"></status>
</kw>
<status starttime="20170512 23:09:25.467" status="PASS" endtime="20170512 23:09:25.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.655">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:09:25.654" status="PASS" endtime="20170512 23:09:25.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.657">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:25.656" status="PASS" endtime="20170512 23:09:25.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:25.658">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:25.657" status="PASS" endtime="20170512 23:09:25.658"></status>
</kw>
<status starttime="20170512 23:09:25.657" status="PASS" endtime="20170512 23:09:25.658"></status>
</kw>
<status starttime="20170512 23:09:25.655" status="PASS" endtime="20170512 23:09:25.658"></status>
</kw>
<status starttime="20170512 23:09:25.655" status="PASS" endtime="20170512 23:09:25.658"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.726">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:09:25.726">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:25.658" status="PASS" endtime="20170512 23:09:25.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.728">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:25.728" status="PASS" endtime="20170512 23:09:25.728"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:25.732">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:25.729" status="PASS" endtime="20170512 23:09:25.732"></status>
</kw>
<status starttime="20170512 23:09:25.728" status="PASS" endtime="20170512 23:09:25.732"></status>
</kw>
<status starttime="20170512 23:09:25.727" status="PASS" endtime="20170512 23:09:25.732"></status>
</kw>
<status starttime="20170512 23:09:25.727" status="PASS" endtime="20170512 23:09:25.732"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:25.732">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:25.466" status="PASS" endtime="20170512 23:09:25.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:25.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:25.733" status="PASS" endtime="20170512 23:09:25.733"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:25.734">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:25.734">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:25.734">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:25.733" status="PASS" endtime="20170512 23:09:25.734"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:25.734">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:25.466" status="PASS" endtime="20170512 23:09:25.734"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:25.734">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:25.465" status="PASS" endtime="20170512 23:09:25.734"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:09:25.735">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:09:25.735" status="FAIL" endtime="20170512 23:09:25.735"></status>
</kw>
<status starttime="20170512 23:09:25.464" status="FAIL" endtime="20170512 23:09:25.735"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:35.742">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:35.742" status="PASS" endtime="20170512 23:09:35.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:35.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:35.743" status="PASS" endtime="20170512 23:09:35.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:35.744">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:35.743" status="PASS" endtime="20170512 23:09:35.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:35.744">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:35.744" status="PASS" endtime="20170512 23:09:35.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:35.928">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:35.745" status="PASS" endtime="20170512 23:09:35.928"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:35.929">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:35.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:35.745" status="PASS" endtime="20170512 23:09:35.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:35.929">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:35.929" status="PASS" endtime="20170512 23:09:35.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:35.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:35.930" status="PASS" endtime="20170512 23:09:35.931"></status>
</kw>
<status starttime="20170512 23:09:35.741" status="PASS" endtime="20170512 23:09:35.931"></status>
</kw>
<status starttime="20170512 23:09:35.741" status="PASS" endtime="20170512 23:09:35.931"></status>
</kw>
<status starttime="20170512 23:09:35.740" status="PASS" endtime="20170512 23:09:35.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:35.932">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:09:35.931" status="PASS" endtime="20170512 23:09:35.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:35.934">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:35.933" status="PASS" endtime="20170512 23:09:35.934"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:35.934">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:35.934" status="PASS" endtime="20170512 23:09:35.935"></status>
</kw>
<status starttime="20170512 23:09:35.934" status="PASS" endtime="20170512 23:09:35.935"></status>
</kw>
<status starttime="20170512 23:09:35.932" status="PASS" endtime="20170512 23:09:35.935"></status>
</kw>
<status starttime="20170512 23:09:35.932" status="PASS" endtime="20170512 23:09:35.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:36.003">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:09:36.003">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:35.935" status="PASS" endtime="20170512 23:09:36.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:36.005">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:36.005" status="PASS" endtime="20170512 23:09:36.005"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:36.006">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:36.006" status="PASS" endtime="20170512 23:09:36.006"></status>
</kw>
<status starttime="20170512 23:09:36.006" status="PASS" endtime="20170512 23:09:36.007"></status>
</kw>
<status starttime="20170512 23:09:36.004" status="PASS" endtime="20170512 23:09:36.007"></status>
</kw>
<status starttime="20170512 23:09:36.004" status="PASS" endtime="20170512 23:09:36.007"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:36.007">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:35.739" status="PASS" endtime="20170512 23:09:36.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:36.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:36.007" status="PASS" endtime="20170512 23:09:36.008"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:36.008">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:36.008">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:36.008">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:36.008" status="PASS" endtime="20170512 23:09:36.008"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:36.009">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:35.737" status="PASS" endtime="20170512 23:09:36.009"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:36.009">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:09:35.737" status="PASS" endtime="20170512 23:09:36.009"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:09:36.010">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:09:36.009" status="FAIL" endtime="20170512 23:09:36.010"></status>
</kw>
<status starttime="20170512 23:09:35.736" status="FAIL" endtime="20170512 23:09:36.010"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.051">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:46.049" status="PASS" endtime="20170512 23:09:46.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.055">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:46.054" status="PASS" endtime="20170512 23:09:46.056"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.059">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:46.057" status="PASS" endtime="20170512 23:09:46.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.062">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:46.060" status="PASS" endtime="20170512 23:09:46.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:46.071" status="PASS" endtime="20170512 23:09:46.621"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:46.622">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:46.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:46.063" status="PASS" endtime="20170512 23:09:46.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.626">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:46.624" status="PASS" endtime="20170512 23:09:46.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.629">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:46.627" status="PASS" endtime="20170512 23:09:46.629"></status>
</kw>
<status starttime="20170512 23:09:46.044" status="PASS" endtime="20170512 23:09:46.630"></status>
</kw>
<status starttime="20170512 23:09:46.042" status="PASS" endtime="20170512 23:09:46.630"></status>
</kw>
<status starttime="20170512 23:09:46.039" status="PASS" endtime="20170512 23:09:46.630"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.633">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:09:46.631" status="PASS" endtime="20170512 23:09:46.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.640">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:46.638" status="PASS" endtime="20170512 23:09:46.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.643">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:09:46.642" status="PASS" endtime="20170512 23:09:46.643"></status>
</kw>
<status starttime="20170512 23:09:46.641" status="PASS" endtime="20170512 23:09:46.644"></status>
</kw>
<status starttime="20170512 23:09:46.636" status="PASS" endtime="20170512 23:09:46.644"></status>
</kw>
<status starttime="20170512 23:09:46.634" status="PASS" endtime="20170512 23:09:46.644"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.885">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:09:46.886">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:46.645" status="PASS" endtime="20170512 23:09:46.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.893">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:46.891" status="PASS" endtime="20170512 23:09:46.894"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.897">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:46.896" status="PASS" endtime="20170512 23:09:46.899"></status>
</kw>
<status starttime="20170512 23:09:46.894" status="PASS" endtime="20170512 23:09:46.900"></status>
</kw>
<status starttime="20170512 23:09:46.889" status="PASS" endtime="20170512 23:09:46.900"></status>
</kw>
<status starttime="20170512 23:09:46.887" status="PASS" endtime="20170512 23:09:46.900"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:46.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:46.036" status="PASS" endtime="20170512 23:09:46.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:46.903" status="PASS" endtime="20170512 23:09:46.905"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.906">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:46.906">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:46.907">${content} = {u'data': u'FW Progress, Starting OS', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:46.905" status="PASS" endtime="20170512 23:09:46.907"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:46.907">${state} = FW Progress, Starting OS</msg>
<status starttime="20170512 23:09:46.033" status="PASS" endtime="20170512 23:09:46.908"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:46.908">${boot_progress} = FW Progress, Starting OS</msg>
<status starttime="20170512 23:09:46.023" status="PASS" endtime="20170512 23:09:46.908"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status starttime="20170512 23:09:46.909" status="PASS" endtime="20170512 23:09:46.910"></status>
</kw>
<status starttime="20170512 23:09:46.017" status="PASS" endtime="20170512 23:09:46.910"></status>
</kw>
<status starttime="20170512 23:08:25.873" status="PASS" endtime="20170512 23:09:46.911"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170512 23:09:46.913">Delete All Sessions</msg>
<status starttime="20170512 23:09:46.912" status="PASS" endtime="20170512 23:09:46.933"></status>
</kw>
<status starttime="20170512 23:09:46.911" status="PASS" endtime="20170512 23:09:46.934"></status>
</kw>
<status starttime="20170512 23:07:26.290" status="PASS" endtime="20170512 23:09:46.934"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:46.934">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.939">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170512 23:09:46.937" status="PASS" endtime="20170512 23:09:46.939"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.945">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170512 23:09:46.943" status="PASS" endtime="20170512 23:09:46.945"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:46.959">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:46.957" status="PASS" endtime="20170512 23:09:46.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:46.962" status="PASS" endtime="20170512 23:09:46.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.966">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:46.965" status="PASS" endtime="20170512 23:09:46.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:46.970">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:46.968" status="PASS" endtime="20170512 23:09:46.970"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:47.198">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:46.973" status="PASS" endtime="20170512 23:09:47.198"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:47.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:47.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:46.971" status="PASS" endtime="20170512 23:09:47.199"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:47.202">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:47.200" status="PASS" endtime="20170512 23:09:47.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:47.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:47.203" status="PASS" endtime="20170512 23:09:47.205"></status>
</kw>
<status starttime="20170512 23:09:46.954" status="PASS" endtime="20170512 23:09:47.205"></status>
</kw>
<status starttime="20170512 23:09:46.952" status="PASS" endtime="20170512 23:09:47.206"></status>
</kw>
<status starttime="20170512 23:09:46.949" status="PASS" endtime="20170512 23:09:47.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.209">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170512 23:09:47.207" status="PASS" endtime="20170512 23:09:47.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:47.210" status="PASS" endtime="20170512 23:09:47.212"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170512 23:09:47.213" status="PASS" endtime="20170512 23:09:47.214"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.222">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170512 23:09:47.218" status="PASS" endtime="20170512 23:09:47.222"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:47.226">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170512 23:09:47.225" status="PASS" endtime="20170512 23:09:47.227"></status>
</kw>
<status starttime="20170512 23:09:47.223" status="PASS" endtime="20170512 23:09:47.228"></status>
</kw>
<status starttime="20170512 23:09:47.215" status="PASS" endtime="20170512 23:09:47.228"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.925">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170512 23:09:47.926">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:47.229" status="PASS" endtime="20170512 23:09:47.926"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.933">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:47.930" status="PASS" endtime="20170512 23:09:47.933"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:47.938">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:47.937" status="PASS" endtime="20170512 23:09:47.939"></status>
</kw>
<status starttime="20170512 23:09:47.934" status="PASS" endtime="20170512 23:09:47.939"></status>
</kw>
<status starttime="20170512 23:09:47.927" status="PASS" endtime="20170512 23:09:47.940"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:47.941">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:46.946" status="PASS" endtime="20170512 23:09:47.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:47.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:47.942" status="PASS" endtime="20170512 23:09:47.944"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.946">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:47.946">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:47.947">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:47.945" status="PASS" endtime="20170512 23:09:47.947"></status>
</kw>
<status starttime="20170512 23:09:46.940" status="PASS" endtime="20170512 23:09:47.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170512 23:09:47.949" status="PASS" endtime="20170512 23:09:47.951"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:47.978">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:47.976" status="PASS" endtime="20170512 23:09:47.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.983">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:47.981" status="PASS" endtime="20170512 23:09:47.983"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.988">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:47.987" status="PASS" endtime="20170512 23:09:47.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:47.991">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:47.990" status="PASS" endtime="20170512 23:09:47.991"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:48.543">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:47.994" status="PASS" endtime="20170512 23:09:48.543"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:48.544">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:48.545">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:47.992" status="PASS" endtime="20170512 23:09:48.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:48.547">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:48.546" status="PASS" endtime="20170512 23:09:48.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:48.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:48.549" status="PASS" endtime="20170512 23:09:48.550"></status>
</kw>
<status starttime="20170512 23:09:47.973" status="PASS" endtime="20170512 23:09:48.551"></status>
</kw>
<status starttime="20170512 23:09:47.970" status="PASS" endtime="20170512 23:09:48.551"></status>
</kw>
<status starttime="20170512 23:09:47.966" status="PASS" endtime="20170512 23:09:48.552"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:48.553">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:09:48.552" status="PASS" endtime="20170512 23:09:48.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:48.560">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:09:48.558" status="PASS" endtime="20170512 23:09:48.561"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:48.563">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:09:48.563" status="PASS" endtime="20170512 23:09:48.564"></status>
</kw>
<status starttime="20170512 23:09:48.561" status="PASS" endtime="20170512 23:09:48.564"></status>
</kw>
<status starttime="20170512 23:09:48.556" status="PASS" endtime="20170512 23:09:48.564"></status>
</kw>
<status starttime="20170512 23:09:48.554" status="PASS" endtime="20170512 23:09:48.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:49.335">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:09:49.336">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:48.565" status="PASS" endtime="20170512 23:09:49.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:49.344">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:49.342" status="PASS" endtime="20170512 23:09:49.344"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:49.350">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:49.349" status="PASS" endtime="20170512 23:09:49.350"></status>
</kw>
<status starttime="20170512 23:09:49.345" status="PASS" endtime="20170512 23:09:49.351"></status>
</kw>
<status starttime="20170512 23:09:49.340" status="PASS" endtime="20170512 23:09:49.351"></status>
</kw>
<status starttime="20170512 23:09:49.338" status="PASS" endtime="20170512 23:09:49.351"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:49.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:47.962" status="PASS" endtime="20170512 23:09:49.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:49.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:49.353" status="PASS" endtime="20170512 23:09:49.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:49.356">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:49.356">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:49.356">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:49.355" status="PASS" endtime="20170512 23:09:49.356"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:49.357">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170512 23:09:47.959" status="PASS" endtime="20170512 23:09:49.357"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:49.358">${host_state} = Running</msg>
<status starttime="20170512 23:09:47.957" status="PASS" endtime="20170512 23:09:49.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:09:49.360">Off != Running</msg>
<status starttime="20170512 23:09:49.359" status="FAIL" endtime="20170512 23:09:49.360"></status>
</kw>
<status starttime="20170512 23:09:47.955" status="FAIL" endtime="20170512 23:09:49.360"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.370">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:59.370" status="PASS" endtime="20170512 23:09:59.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.372">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:59.372" status="PASS" endtime="20170512 23:09:59.372"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.373">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:59.372" status="PASS" endtime="20170512 23:09:59.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.374">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:59.373" status="PASS" endtime="20170512 23:09:59.374"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.607">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:59.375" status="PASS" endtime="20170512 23:09:59.607"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:59.608">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:09:59.608">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:59.374" status="PASS" endtime="20170512 23:09:59.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:59.609" status="PASS" endtime="20170512 23:09:59.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:59.613" status="PASS" endtime="20170512 23:09:59.615"></status>
</kw>
<status starttime="20170512 23:09:59.369" status="PASS" endtime="20170512 23:09:59.616"></status>
</kw>
<status starttime="20170512 23:09:59.368" status="PASS" endtime="20170512 23:09:59.616"></status>
</kw>
<status starttime="20170512 23:09:59.367" status="PASS" endtime="20170512 23:09:59.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.619">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:09:59.618" status="PASS" endtime="20170512 23:09:59.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.629">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:09:59.626" status="PASS" endtime="20170512 23:09:59.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.634">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:09:59.633" status="PASS" endtime="20170512 23:09:59.634"></status>
</kw>
<status starttime="20170512 23:09:59.630" status="PASS" endtime="20170512 23:09:59.634"></status>
</kw>
<status starttime="20170512 23:09:59.623" status="PASS" endtime="20170512 23:09:59.635"></status>
</kw>
<status starttime="20170512 23:09:59.621" status="PASS" endtime="20170512 23:09:59.635"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.725">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:09:59.726">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:59.636" status="PASS" endtime="20170512 23:09:59.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.734">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:59.731" status="PASS" endtime="20170512 23:09:59.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.738">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:09:59.737" status="PASS" endtime="20170512 23:09:59.739"></status>
</kw>
<status starttime="20170512 23:09:59.735" status="PASS" endtime="20170512 23:09:59.740"></status>
</kw>
<status starttime="20170512 23:09:59.729" status="PASS" endtime="20170512 23:09:59.740"></status>
</kw>
<status starttime="20170512 23:09:59.727" status="PASS" endtime="20170512 23:09:59.740"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:59.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:59.366" status="PASS" endtime="20170512 23:09:59.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:09:59.743" status="PASS" endtime="20170512 23:09:59.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.746">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:09:59.747">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:09:59.747">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:09:59.745" status="PASS" endtime="20170512 23:09:59.747"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:59.754">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170512 23:09:59.365" status="PASS" endtime="20170512 23:09:59.754"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:09:59.756">${host_state} = Off</msg>
<status starttime="20170512 23:09:59.364" status="PASS" endtime="20170512 23:09:59.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170512 23:09:59.758" status="PASS" endtime="20170512 23:09:59.759"></status>
</kw>
<status starttime="20170512 23:09:59.362" status="PASS" endtime="20170512 23:09:59.760"></status>
</kw>
<status starttime="20170512 23:09:47.952" status="PASS" endtime="20170512 23:09:59.760"></status>
</kw>
<status starttime="20170512 23:09:46.936" status="PASS" endtime="20170512 23:09:59.760"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:09:59.781">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:09:59.778" status="PASS" endtime="20170512 23:09:59.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.784">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:09:59.783" status="PASS" endtime="20170512 23:09:59.784"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.785">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:09:59.784" status="PASS" endtime="20170512 23:09:59.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:09:59.786">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:09:59.785" status="PASS" endtime="20170512 23:09:59.786"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.047">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:09:59.787" status="PASS" endtime="20170512 23:10:00.048"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:00.048">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:00.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:59.786" status="PASS" endtime="20170512 23:10:00.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:00.051" status="PASS" endtime="20170512 23:10:00.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:00.054" status="PASS" endtime="20170512 23:10:00.056"></status>
</kw>
<status starttime="20170512 23:09:59.774" status="PASS" endtime="20170512 23:10:00.057"></status>
</kw>
<status starttime="20170512 23:09:59.773" status="PASS" endtime="20170512 23:10:00.057"></status>
</kw>
<status starttime="20170512 23:09:59.770" status="PASS" endtime="20170512 23:10:00.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.061">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:10:00.059" status="PASS" endtime="20170512 23:10:00.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.070">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:00.067" status="PASS" endtime="20170512 23:10:00.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.074">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:00.073" status="PASS" endtime="20170512 23:10:00.075"></status>
</kw>
<status starttime="20170512 23:10:00.071" status="PASS" endtime="20170512 23:10:00.075"></status>
</kw>
<status starttime="20170512 23:10:00.064" status="PASS" endtime="20170512 23:10:00.076"></status>
</kw>
<status starttime="20170512 23:10:00.062" status="PASS" endtime="20170512 23:10:00.076"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.150">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:00.150">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:00.077" status="PASS" endtime="20170512 23:10:00.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.153">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:00.152" status="PASS" endtime="20170512 23:10:00.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.155">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:00.154" status="PASS" endtime="20170512 23:10:00.155"></status>
</kw>
<status starttime="20170512 23:10:00.153" status="PASS" endtime="20170512 23:10:00.155"></status>
</kw>
<status starttime="20170512 23:10:00.152" status="PASS" endtime="20170512 23:10:00.155"></status>
</kw>
<status starttime="20170512 23:10:00.151" status="PASS" endtime="20170512 23:10:00.155"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:00.156">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:09:59.768" status="PASS" endtime="20170512 23:10:00.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:00.156" status="PASS" endtime="20170512 23:10:00.157"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.158">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:00.158">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:00.159">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:00.157" status="PASS" endtime="20170512 23:10:00.159"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:00.160">${state} = Off</msg>
<status starttime="20170512 23:09:59.766" status="PASS" endtime="20170512 23:10:00.160"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:00.161">${boot_progress} = Off</msg>
<status starttime="20170512 23:09:59.764" status="PASS" endtime="20170512 23:10:00.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170512 23:10:00.163" status="PASS" endtime="20170512 23:10:00.164"></status>
</kw>
<status starttime="20170512 23:09:59.763" status="PASS" endtime="20170512 23:10:00.164"></status>
</kw>
<status starttime="20170512 23:09:59.761" status="PASS" endtime="20170512 23:10:00.165"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.170">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170512 23:10:00.168" status="PASS" endtime="20170512 23:10:00.170"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.177">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170512 23:10:00.175" status="PASS" endtime="20170512 23:10:00.177"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.192">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:00.189" status="PASS" endtime="20170512 23:10:00.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.193">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:00.193" status="PASS" endtime="20170512 23:10:00.193"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.195">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:00.194" status="PASS" endtime="20170512 23:10:00.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.196">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:00.195" status="PASS" endtime="20170512 23:10:00.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.391">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:00.196" status="PASS" endtime="20170512 23:10:00.392"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:00.392">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:00.392">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:00.196" status="PASS" endtime="20170512 23:10:00.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.394">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:00.393" status="PASS" endtime="20170512 23:10:00.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:00.395" status="PASS" endtime="20170512 23:10:00.396"></status>
</kw>
<status starttime="20170512 23:10:00.186" status="PASS" endtime="20170512 23:10:00.396"></status>
</kw>
<status starttime="20170512 23:10:00.184" status="PASS" endtime="20170512 23:10:00.396"></status>
</kw>
<status starttime="20170512 23:10:00.181" status="PASS" endtime="20170512 23:10:00.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.398">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170512 23:10:00.397" status="PASS" endtime="20170512 23:10:00.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.399">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:00.399" status="PASS" endtime="20170512 23:10:00.400"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170512 23:10:00.400" status="PASS" endtime="20170512 23:10:00.400"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.404">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170512 23:10:00.403" status="PASS" endtime="20170512 23:10:00.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.406">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170512 23:10:00.405" status="PASS" endtime="20170512 23:10:00.406"></status>
</kw>
<status starttime="20170512 23:10:00.404" status="PASS" endtime="20170512 23:10:00.406"></status>
</kw>
<status starttime="20170512 23:10:00.401" status="PASS" endtime="20170512 23:10:00.407"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.619">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170512 23:10:00.620">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:00.407" status="PASS" endtime="20170512 23:10:00.620"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.625">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:00.623" status="PASS" endtime="20170512 23:10:00.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.630">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:00.629" status="PASS" endtime="20170512 23:10:00.630"></status>
</kw>
<status starttime="20170512 23:10:00.626" status="PASS" endtime="20170512 23:10:00.631"></status>
</kw>
<status starttime="20170512 23:10:00.621" status="PASS" endtime="20170512 23:10:00.631"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:00.632">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:00.178" status="PASS" endtime="20170512 23:10:00.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:00.634" status="PASS" endtime="20170512 23:10:00.636"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.639">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:00.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:00.640">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:00.637" status="PASS" endtime="20170512 23:10:00.640"></status>
</kw>
<status starttime="20170512 23:10:00.170" status="PASS" endtime="20170512 23:10:00.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170512 23:10:00.642" status="PASS" endtime="20170512 23:10:00.643"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:00.672">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:00.670" status="PASS" endtime="20170512 23:10:00.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.676">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:00.675" status="PASS" endtime="20170512 23:10:00.676"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.680">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:00.678" status="PASS" endtime="20170512 23:10:00.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:00.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:00.682" status="PASS" endtime="20170512 23:10:00.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:01.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:00.687" status="PASS" endtime="20170512 23:10:01.423"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:01.424">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:01.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:00.685" status="PASS" endtime="20170512 23:10:01.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:01.427">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:01.425" status="PASS" endtime="20170512 23:10:01.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:01.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:01.428" status="PASS" endtime="20170512 23:10:01.430"></status>
</kw>
<status starttime="20170512 23:10:00.667" status="PASS" endtime="20170512 23:10:01.430"></status>
</kw>
<status starttime="20170512 23:10:00.664" status="PASS" endtime="20170512 23:10:01.431"></status>
</kw>
<status starttime="20170512 23:10:00.661" status="PASS" endtime="20170512 23:10:01.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:01.433">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:10:01.432" status="PASS" endtime="20170512 23:10:01.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:01.448">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:10:01.445" status="PASS" endtime="20170512 23:10:01.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:01.452">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:10:01.451" status="PASS" endtime="20170512 23:10:01.452"></status>
</kw>
<status starttime="20170512 23:10:01.449" status="PASS" endtime="20170512 23:10:01.453"></status>
</kw>
<status starttime="20170512 23:10:01.437" status="PASS" endtime="20170512 23:10:01.453"></status>
</kw>
<status starttime="20170512 23:10:01.435" status="PASS" endtime="20170512 23:10:01.454"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:02.197">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:02.198">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:01.455" status="PASS" endtime="20170512 23:10:02.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:02.207">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:02.204" status="PASS" endtime="20170512 23:10:02.782"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:02.785">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:02.785" status="PASS" endtime="20170512 23:10:02.786"></status>
</kw>
<status starttime="20170512 23:10:02.783" status="PASS" endtime="20170512 23:10:02.786"></status>
</kw>
<status starttime="20170512 23:10:02.202" status="PASS" endtime="20170512 23:10:02.786"></status>
</kw>
<status starttime="20170512 23:10:02.200" status="PASS" endtime="20170512 23:10:02.786"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:02.787">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:00.654" status="PASS" endtime="20170512 23:10:02.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:02.788">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:02.787" status="PASS" endtime="20170512 23:10:02.788"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:02.789">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:02.789">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:02.790">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:02.789" status="PASS" endtime="20170512 23:10:02.790"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:02.790">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170512 23:10:00.648" status="PASS" endtime="20170512 23:10:02.790"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:02.791">${host_state} = Off</msg>
<status starttime="20170512 23:10:00.646" status="PASS" endtime="20170512 23:10:02.791"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:10:02.792">Running != Off</msg>
<status starttime="20170512 23:10:02.791" status="FAIL" endtime="20170512 23:10:02.792"></status>
</kw>
<status starttime="20170512 23:10:00.645" status="FAIL" endtime="20170512 23:10:02.792"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:12.822">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:12.821" status="PASS" endtime="20170512 23:10:12.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:12.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:12.825" status="PASS" endtime="20170512 23:10:12.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:12.830">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:12.828" status="PASS" endtime="20170512 23:10:12.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:12.834">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:12.832" status="PASS" endtime="20170512 23:10:12.834"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:13.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:12.838" status="PASS" endtime="20170512 23:10:13.961"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:13.962">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:13.962">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:12.836" status="PASS" endtime="20170512 23:10:13.962"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:13.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:13.964" status="PASS" endtime="20170512 23:10:13.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:13.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:13.967" status="PASS" endtime="20170512 23:10:13.970"></status>
</kw>
<status starttime="20170512 23:10:12.818" status="PASS" endtime="20170512 23:10:13.971"></status>
</kw>
<status starttime="20170512 23:10:12.816" status="PASS" endtime="20170512 23:10:13.971"></status>
</kw>
<status starttime="20170512 23:10:12.813" status="PASS" endtime="20170512 23:10:13.972"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:13.974">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:10:13.973" status="PASS" endtime="20170512 23:10:13.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:13.986">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:10:13.981" status="PASS" endtime="20170512 23:10:13.986"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:13.991">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:10:13.990" status="PASS" endtime="20170512 23:10:13.992"></status>
</kw>
<status starttime="20170512 23:10:13.987" status="PASS" endtime="20170512 23:10:13.993"></status>
</kw>
<status starttime="20170512 23:10:13.978" status="PASS" endtime="20170512 23:10:13.994"></status>
</kw>
<status starttime="20170512 23:10:13.976" status="PASS" endtime="20170512 23:10:13.994"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:14.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:14.501">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:13.995" status="PASS" endtime="20170512 23:10:14.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:14.509">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:14.507" status="PASS" endtime="20170512 23:10:14.509"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:14.512">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:14.511" status="PASS" endtime="20170512 23:10:14.512"></status>
</kw>
<status starttime="20170512 23:10:14.510" status="PASS" endtime="20170512 23:10:14.513"></status>
</kw>
<status starttime="20170512 23:10:14.505" status="PASS" endtime="20170512 23:10:14.513"></status>
</kw>
<status starttime="20170512 23:10:14.503" status="PASS" endtime="20170512 23:10:14.513"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:14.514">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:12.802" status="PASS" endtime="20170512 23:10:14.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:14.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:14.515" status="PASS" endtime="20170512 23:10:14.516"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:14.527">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:14.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:14.528">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:14.517" status="PASS" endtime="20170512 23:10:14.528"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:14.528">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170512 23:10:12.799" status="PASS" endtime="20170512 23:10:14.529"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:14.529">${host_state} = Off</msg>
<status starttime="20170512 23:10:12.798" status="PASS" endtime="20170512 23:10:14.529"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:10:14.530">Running != Off</msg>
<status starttime="20170512 23:10:14.529" status="FAIL" endtime="20170512 23:10:14.530"></status>
</kw>
<status starttime="20170512 23:10:12.795" status="FAIL" endtime="20170512 23:10:14.530"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.536">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:24.536" status="PASS" endtime="20170512 23:10:24.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:24.537" status="PASS" endtime="20170512 23:10:24.537"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.538">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:24.537" status="PASS" endtime="20170512 23:10:24.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.539">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:24.538" status="PASS" endtime="20170512 23:10:24.539"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:24.539" status="PASS" endtime="20170512 23:10:24.723"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:24.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:24.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:24.539" status="PASS" endtime="20170512 23:10:24.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.724">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:24.723" status="PASS" endtime="20170512 23:10:24.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:24.724" status="PASS" endtime="20170512 23:10:24.725"></status>
</kw>
<status starttime="20170512 23:10:24.535" status="PASS" endtime="20170512 23:10:24.725"></status>
</kw>
<status starttime="20170512 23:10:24.535" status="PASS" endtime="20170512 23:10:24.725"></status>
</kw>
<status starttime="20170512 23:10:24.534" status="PASS" endtime="20170512 23:10:24.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.727">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:10:24.726" status="PASS" endtime="20170512 23:10:24.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.730">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:10:24.729" status="PASS" endtime="20170512 23:10:24.730"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.731">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:10:24.731" status="PASS" endtime="20170512 23:10:24.731"></status>
</kw>
<status starttime="20170512 23:10:24.730" status="PASS" endtime="20170512 23:10:24.731"></status>
</kw>
<status starttime="20170512 23:10:24.728" status="PASS" endtime="20170512 23:10:24.731"></status>
</kw>
<status starttime="20170512 23:10:24.727" status="PASS" endtime="20170512 23:10:24.731"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.796">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:24.796">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:24.732" status="PASS" endtime="20170512 23:10:24.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.799">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:24.798" status="PASS" endtime="20170512 23:10:24.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.799">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:24.799" status="PASS" endtime="20170512 23:10:24.800"></status>
</kw>
<status starttime="20170512 23:10:24.799" status="PASS" endtime="20170512 23:10:24.800"></status>
</kw>
<status starttime="20170512 23:10:24.797" status="PASS" endtime="20170512 23:10:24.800"></status>
</kw>
<status starttime="20170512 23:10:24.797" status="PASS" endtime="20170512 23:10:24.800"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:24.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:24.533" status="PASS" endtime="20170512 23:10:24.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:24.800" status="PASS" endtime="20170512 23:10:24.801"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.801">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:24.801">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:24.801">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:24.801" status="PASS" endtime="20170512 23:10:24.801"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:24.802">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170512 23:10:24.533" status="PASS" endtime="20170512 23:10:24.802"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:24.802">${host_state} = Running</msg>
<status starttime="20170512 23:10:24.532" status="PASS" endtime="20170512 23:10:24.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170512 23:10:24.802" status="PASS" endtime="20170512 23:10:24.803"></status>
</kw>
<status starttime="20170512 23:10:24.531" status="PASS" endtime="20170512 23:10:24.803"></status>
</kw>
<status starttime="20170512 23:10:00.644" status="PASS" endtime="20170512 23:10:24.803"></status>
</kw>
<status starttime="20170512 23:10:00.166" status="PASS" endtime="20170512 23:10:24.803"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.808">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:24.808" status="PASS" endtime="20170512 23:10:24.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.809">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:24.809" status="PASS" endtime="20170512 23:10:24.809"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.810">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:24.809" status="PASS" endtime="20170512 23:10:24.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.811">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:24.810" status="PASS" endtime="20170512 23:10:24.811"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.991">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:24.812" status="PASS" endtime="20170512 23:10:24.991"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:24.991">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:24.992">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:24.811" status="PASS" endtime="20170512 23:10:24.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.992">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:24.992" status="PASS" endtime="20170512 23:10:24.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:24.993" status="PASS" endtime="20170512 23:10:24.993"></status>
</kw>
<status starttime="20170512 23:10:24.807" status="PASS" endtime="20170512 23:10:24.993"></status>
</kw>
<status starttime="20170512 23:10:24.807" status="PASS" endtime="20170512 23:10:24.993"></status>
</kw>
<status starttime="20170512 23:10:24.806" status="PASS" endtime="20170512 23:10:24.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.994">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:10:24.994" status="PASS" endtime="20170512 23:10:24.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:24.996">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:24.996" status="PASS" endtime="20170512 23:10:24.996"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:24.997">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:24.997" status="PASS" endtime="20170512 23:10:24.997"></status>
</kw>
<status starttime="20170512 23:10:24.996" status="PASS" endtime="20170512 23:10:24.997"></status>
</kw>
<status starttime="20170512 23:10:24.995" status="PASS" endtime="20170512 23:10:24.998"></status>
</kw>
<status starttime="20170512 23:10:24.994" status="PASS" endtime="20170512 23:10:24.998"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:25.110">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:25.111">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:24.998" status="PASS" endtime="20170512 23:10:25.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:25.113">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:25.112" status="PASS" endtime="20170512 23:10:25.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:25.114">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:25.113" status="PASS" endtime="20170512 23:10:25.114"></status>
</kw>
<status starttime="20170512 23:10:25.113" status="PASS" endtime="20170512 23:10:25.114"></status>
</kw>
<status starttime="20170512 23:10:25.112" status="PASS" endtime="20170512 23:10:25.114"></status>
</kw>
<status starttime="20170512 23:10:25.111" status="PASS" endtime="20170512 23:10:25.114"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:25.114">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:24.805" status="PASS" endtime="20170512 23:10:25.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:25.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:25.114" status="PASS" endtime="20170512 23:10:25.115"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:25.115">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:25.115">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:25.116">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:25.115" status="PASS" endtime="20170512 23:10:25.116"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:25.116">${state} = Off</msg>
<status starttime="20170512 23:10:24.804" status="PASS" endtime="20170512 23:10:25.116"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:25.116">${boot_progress} = Off</msg>
<status starttime="20170512 23:10:24.804" status="PASS" endtime="20170512 23:10:25.116"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:10:25.117">Off != FW Progress, Starting OS</msg>
<status starttime="20170512 23:10:25.116" status="FAIL" endtime="20170512 23:10:25.117"></status>
</kw>
<status starttime="20170512 23:10:24.804" status="FAIL" endtime="20170512 23:10:25.117"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:35.122">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:35.122" status="PASS" endtime="20170512 23:10:35.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:35.123" status="PASS" endtime="20170512 23:10:35.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.124">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:35.123" status="PASS" endtime="20170512 23:10:35.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.124">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:35.124" status="PASS" endtime="20170512 23:10:35.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:35.335">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:35.125" status="PASS" endtime="20170512 23:10:35.335"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:35.335">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:35.335">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:35.125" status="PASS" endtime="20170512 23:10:35.335"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:35.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:35.336" status="PASS" endtime="20170512 23:10:35.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:35.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:35.336" status="PASS" endtime="20170512 23:10:35.337"></status>
</kw>
<status starttime="20170512 23:10:35.121" status="PASS" endtime="20170512 23:10:35.337"></status>
</kw>
<status starttime="20170512 23:10:35.121" status="PASS" endtime="20170512 23:10:35.337"></status>
</kw>
<status starttime="20170512 23:10:35.120" status="PASS" endtime="20170512 23:10:35.337"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.338">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:10:35.338" status="PASS" endtime="20170512 23:10:35.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.340">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:35.339" status="PASS" endtime="20170512 23:10:35.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:35.341">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:35.341" status="PASS" endtime="20170512 23:10:35.341"></status>
</kw>
<status starttime="20170512 23:10:35.340" status="PASS" endtime="20170512 23:10:35.341"></status>
</kw>
<status starttime="20170512 23:10:35.339" status="PASS" endtime="20170512 23:10:35.341"></status>
</kw>
<status starttime="20170512 23:10:35.338" status="PASS" endtime="20170512 23:10:35.341"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.427">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:35.427">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:35.342" status="PASS" endtime="20170512 23:10:35.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.429">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:35.429" status="PASS" endtime="20170512 23:10:35.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:35.430">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:35.430" status="PASS" endtime="20170512 23:10:35.430"></status>
</kw>
<status starttime="20170512 23:10:35.429" status="PASS" endtime="20170512 23:10:35.430"></status>
</kw>
<status starttime="20170512 23:10:35.428" status="PASS" endtime="20170512 23:10:35.430"></status>
</kw>
<status starttime="20170512 23:10:35.427" status="PASS" endtime="20170512 23:10:35.430"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:35.431">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:35.120" status="PASS" endtime="20170512 23:10:35.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:35.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:35.431" status="PASS" endtime="20170512 23:10:35.431"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:35.432">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:35.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:35.432">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:35.432" status="PASS" endtime="20170512 23:10:35.432"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:35.432">${state} = Off</msg>
<status starttime="20170512 23:10:35.119" status="PASS" endtime="20170512 23:10:35.432"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:35.433">${boot_progress} = Off</msg>
<status starttime="20170512 23:10:35.119" status="PASS" endtime="20170512 23:10:35.433"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:10:35.433">Off != FW Progress, Starting OS</msg>
<status starttime="20170512 23:10:35.433" status="FAIL" endtime="20170512 23:10:35.433"></status>
</kw>
<status starttime="20170512 23:10:35.118" status="FAIL" endtime="20170512 23:10:35.433"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:45.440">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:45.440" status="PASS" endtime="20170512 23:10:45.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:45.441" status="PASS" endtime="20170512 23:10:45.441"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.442">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:45.442" status="PASS" endtime="20170512 23:10:45.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.443">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:45.442" status="PASS" endtime="20170512 23:10:45.443"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:45.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:45.443" status="PASS" endtime="20170512 23:10:45.812"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:45.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:45.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:45.443" status="PASS" endtime="20170512 23:10:45.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:45.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:45.813" status="PASS" endtime="20170512 23:10:45.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:45.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:45.814" status="PASS" endtime="20170512 23:10:45.814"></status>
</kw>
<status starttime="20170512 23:10:45.439" status="PASS" endtime="20170512 23:10:45.814"></status>
</kw>
<status starttime="20170512 23:10:45.439" status="PASS" endtime="20170512 23:10:45.814"></status>
</kw>
<status starttime="20170512 23:10:45.437" status="PASS" endtime="20170512 23:10:45.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.815">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:10:45.815" status="PASS" endtime="20170512 23:10:45.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.817">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:45.817" status="PASS" endtime="20170512 23:10:45.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:45.818">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:45.818" status="PASS" endtime="20170512 23:10:45.819"></status>
</kw>
<status starttime="20170512 23:10:45.818" status="PASS" endtime="20170512 23:10:45.819"></status>
</kw>
<status starttime="20170512 23:10:45.816" status="PASS" endtime="20170512 23:10:45.819"></status>
</kw>
<status starttime="20170512 23:10:45.815" status="PASS" endtime="20170512 23:10:45.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.905">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:45.905">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:45.819" status="PASS" endtime="20170512 23:10:45.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.908">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:45.907" status="PASS" endtime="20170512 23:10:45.908"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:45.908">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:45.908" status="PASS" endtime="20170512 23:10:45.909"></status>
</kw>
<status starttime="20170512 23:10:45.908" status="PASS" endtime="20170512 23:10:45.909"></status>
</kw>
<status starttime="20170512 23:10:45.906" status="PASS" endtime="20170512 23:10:45.909"></status>
</kw>
<status starttime="20170512 23:10:45.906" status="PASS" endtime="20170512 23:10:45.909"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:45.909">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:45.437" status="PASS" endtime="20170512 23:10:45.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:45.910">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:45.909" status="PASS" endtime="20170512 23:10:45.910"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:45.910">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:45.910">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:45.910">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:45.910" status="PASS" endtime="20170512 23:10:45.910"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:45.911">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:10:45.436" status="PASS" endtime="20170512 23:10:45.911"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:45.911">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:10:45.436" status="PASS" endtime="20170512 23:10:45.911"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:10:45.912">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:10:45.911" status="FAIL" endtime="20170512 23:10:45.912"></status>
</kw>
<status starttime="20170512 23:10:45.435" status="FAIL" endtime="20170512 23:10:45.912"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:55.923">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:10:55.923" status="PASS" endtime="20170512 23:10:55.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:55.925">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:10:55.925" status="PASS" endtime="20170512 23:10:55.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:55.926">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:10:55.925" status="PASS" endtime="20170512 23:10:55.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:55.927">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:10:55.926" status="PASS" endtime="20170512 23:10:55.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:56.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:10:55.928" status="PASS" endtime="20170512 23:10:56.112"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:56.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:10:56.112">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:55.927" status="PASS" endtime="20170512 23:10:56.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:56.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:56.113" status="PASS" endtime="20170512 23:10:56.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:56.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:56.113" status="PASS" endtime="20170512 23:10:56.114"></status>
</kw>
<status starttime="20170512 23:10:55.922" status="PASS" endtime="20170512 23:10:56.114"></status>
</kw>
<status starttime="20170512 23:10:55.921" status="PASS" endtime="20170512 23:10:56.114"></status>
</kw>
<status starttime="20170512 23:10:55.920" status="PASS" endtime="20170512 23:10:56.115"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:56.115">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:10:56.115" status="PASS" endtime="20170512 23:10:56.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:56.117">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:56.116" status="PASS" endtime="20170512 23:10:56.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:56.118">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:10:56.118" status="PASS" endtime="20170512 23:10:56.118"></status>
</kw>
<status starttime="20170512 23:10:56.117" status="PASS" endtime="20170512 23:10:56.119"></status>
</kw>
<status starttime="20170512 23:10:56.116" status="PASS" endtime="20170512 23:10:56.119"></status>
</kw>
<status starttime="20170512 23:10:56.115" status="PASS" endtime="20170512 23:10:56.119"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:56.187">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:10:56.188">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:56.119" status="PASS" endtime="20170512 23:10:56.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:56.190">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:56.189" status="PASS" endtime="20170512 23:10:56.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:56.191">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:10:56.191" status="PASS" endtime="20170512 23:10:56.192"></status>
</kw>
<status starttime="20170512 23:10:56.190" status="PASS" endtime="20170512 23:10:56.192"></status>
</kw>
<status starttime="20170512 23:10:56.189" status="PASS" endtime="20170512 23:10:56.192"></status>
</kw>
<status starttime="20170512 23:10:56.188" status="PASS" endtime="20170512 23:10:56.192"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:56.192">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:10:55.919" status="PASS" endtime="20170512 23:10:56.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:10:56.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:10:56.192" status="PASS" endtime="20170512 23:10:56.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:10:56.193">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:10:56.193">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:10:56.193">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:10:56.193" status="PASS" endtime="20170512 23:10:56.193"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:56.194">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:10:55.918" status="PASS" endtime="20170512 23:10:56.194"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:10:56.194">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:10:55.918" status="PASS" endtime="20170512 23:10:56.194"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:10:56.195">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:10:56.194" status="FAIL" endtime="20170512 23:10:56.195"></status>
</kw>
<status starttime="20170512 23:10:55.915" status="FAIL" endtime="20170512 23:10:56.195"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:06.202">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:11:06.202" status="PASS" endtime="20170512 23:11:06.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:11:06.203" status="PASS" endtime="20170512 23:11:06.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.204">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:11:06.204" status="PASS" endtime="20170512 23:11:06.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.205">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:11:06.204" status="PASS" endtime="20170512 23:11:06.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:06.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:11:06.205" status="PASS" endtime="20170512 23:11:06.452"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:06.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:11:06.453">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:06.205" status="PASS" endtime="20170512 23:11:06.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:06.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:06.453" status="PASS" endtime="20170512 23:11:06.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:06.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:06.454" status="PASS" endtime="20170512 23:11:06.455"></status>
</kw>
<status starttime="20170512 23:11:06.201" status="PASS" endtime="20170512 23:11:06.455"></status>
</kw>
<status starttime="20170512 23:11:06.200" status="PASS" endtime="20170512 23:11:06.455"></status>
</kw>
<status starttime="20170512 23:11:06.200" status="PASS" endtime="20170512 23:11:06.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.456">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:11:06.456" status="PASS" endtime="20170512 23:11:06.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.458">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:06.457" status="PASS" endtime="20170512 23:11:06.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:06.459">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:06.459" status="PASS" endtime="20170512 23:11:06.459"></status>
</kw>
<status starttime="20170512 23:11:06.458" status="PASS" endtime="20170512 23:11:06.459"></status>
</kw>
<status starttime="20170512 23:11:06.457" status="PASS" endtime="20170512 23:11:06.460"></status>
</kw>
<status starttime="20170512 23:11:06.456" status="PASS" endtime="20170512 23:11:06.460"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.529">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:11:06.529">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:06.460" status="PASS" endtime="20170512 23:11:06.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.533">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:06.532" status="PASS" endtime="20170512 23:11:06.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:06.536">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:06.535" status="PASS" endtime="20170512 23:11:06.536"></status>
</kw>
<status starttime="20170512 23:11:06.534" status="PASS" endtime="20170512 23:11:06.536"></status>
</kw>
<status starttime="20170512 23:11:06.531" status="PASS" endtime="20170512 23:11:06.536"></status>
</kw>
<status starttime="20170512 23:11:06.530" status="PASS" endtime="20170512 23:11:06.536"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:06.537">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:06.199" status="PASS" endtime="20170512 23:11:06.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:06.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:06.537" status="PASS" endtime="20170512 23:11:06.538"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:06.539">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:11:06.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:11:06.539">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:11:06.538" status="PASS" endtime="20170512 23:11:06.539"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:06.540">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:06.198" status="PASS" endtime="20170512 23:11:06.540"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:06.540">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:06.197" status="PASS" endtime="20170512 23:11:06.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:11:06.541">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:11:06.541" status="FAIL" endtime="20170512 23:11:06.542"></status>
</kw>
<status starttime="20170512 23:11:06.196" status="FAIL" endtime="20170512 23:11:06.542"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:16.558">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:11:16.557" status="PASS" endtime="20170512 23:11:16.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:16.559">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:11:16.559" status="PASS" endtime="20170512 23:11:16.559"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:16.560">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:11:16.559" status="PASS" endtime="20170512 23:11:16.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:16.560">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:11:16.560" status="PASS" endtime="20170512 23:11:16.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:17.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:11:16.561" status="PASS" endtime="20170512 23:11:17.214"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:17.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:11:17.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:16.561" status="PASS" endtime="20170512 23:11:17.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:17.215">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:17.215" status="PASS" endtime="20170512 23:11:17.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:17.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:17.215" status="PASS" endtime="20170512 23:11:17.216"></status>
</kw>
<status starttime="20170512 23:11:16.556" status="PASS" endtime="20170512 23:11:17.216"></status>
</kw>
<status starttime="20170512 23:11:16.556" status="PASS" endtime="20170512 23:11:17.216"></status>
</kw>
<status starttime="20170512 23:11:16.553" status="PASS" endtime="20170512 23:11:17.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:17.217">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:11:17.217" status="PASS" endtime="20170512 23:11:17.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:17.220">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:17.219" status="PASS" endtime="20170512 23:11:17.220"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:17.222">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:17.221" status="PASS" endtime="20170512 23:11:17.222"></status>
</kw>
<status starttime="20170512 23:11:17.221" status="PASS" endtime="20170512 23:11:17.222"></status>
</kw>
<status starttime="20170512 23:11:17.218" status="PASS" endtime="20170512 23:11:17.222"></status>
</kw>
<status starttime="20170512 23:11:17.218" status="PASS" endtime="20170512 23:11:17.222"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:17.403">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:11:17.403">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:17.222" status="PASS" endtime="20170512 23:11:17.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:17.405">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:17.405" status="PASS" endtime="20170512 23:11:17.405"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:17.406">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:17.406" status="PASS" endtime="20170512 23:11:17.406"></status>
</kw>
<status starttime="20170512 23:11:17.405" status="PASS" endtime="20170512 23:11:17.406"></status>
</kw>
<status starttime="20170512 23:11:17.404" status="PASS" endtime="20170512 23:11:17.406"></status>
</kw>
<status starttime="20170512 23:11:17.403" status="PASS" endtime="20170512 23:11:17.406"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:17.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:16.552" status="PASS" endtime="20170512 23:11:17.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:17.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:17.407" status="PASS" endtime="20170512 23:11:17.407"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:17.408">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:11:17.408">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:11:17.408">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:11:17.408" status="PASS" endtime="20170512 23:11:17.408"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:17.408">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:16.551" status="PASS" endtime="20170512 23:11:17.408"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:17.409">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:16.550" status="PASS" endtime="20170512 23:11:17.409"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:11:17.409">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:11:17.409" status="FAIL" endtime="20170512 23:11:17.410"></status>
</kw>
<status starttime="20170512 23:11:16.547" status="FAIL" endtime="20170512 23:11:17.410"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:27.420">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:11:27.420" status="PASS" endtime="20170512 23:11:27.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:11:27.422" status="PASS" endtime="20170512 23:11:27.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.423">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:11:27.422" status="PASS" endtime="20170512 23:11:27.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:11:27.424" status="PASS" endtime="20170512 23:11:27.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:27.627">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:11:27.425" status="PASS" endtime="20170512 23:11:27.627"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:27.627">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:11:27.627">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:27.425" status="PASS" endtime="20170512 23:11:27.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:27.628">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:27.628" status="PASS" endtime="20170512 23:11:27.628"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:27.629">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:27.628" status="PASS" endtime="20170512 23:11:27.629"></status>
</kw>
<status starttime="20170512 23:11:27.418" status="PASS" endtime="20170512 23:11:27.629"></status>
</kw>
<status starttime="20170512 23:11:27.418" status="PASS" endtime="20170512 23:11:27.629"></status>
</kw>
<status starttime="20170512 23:11:27.417" status="PASS" endtime="20170512 23:11:27.629"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.630">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:11:27.630" status="PASS" endtime="20170512 23:11:27.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.633">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:27.632" status="PASS" endtime="20170512 23:11:27.633"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:27.634">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:27.634" status="PASS" endtime="20170512 23:11:27.634"></status>
</kw>
<status starttime="20170512 23:11:27.633" status="PASS" endtime="20170512 23:11:27.635"></status>
</kw>
<status starttime="20170512 23:11:27.631" status="PASS" endtime="20170512 23:11:27.635"></status>
</kw>
<status starttime="20170512 23:11:27.630" status="PASS" endtime="20170512 23:11:27.635"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.750">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:11:27.751">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:27.635" status="PASS" endtime="20170512 23:11:27.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.759">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:27.755" status="PASS" endtime="20170512 23:11:27.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:27.760">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:27.760" status="PASS" endtime="20170512 23:11:27.760"></status>
</kw>
<status starttime="20170512 23:11:27.759" status="PASS" endtime="20170512 23:11:27.761"></status>
</kw>
<status starttime="20170512 23:11:27.754" status="PASS" endtime="20170512 23:11:27.761"></status>
</kw>
<status starttime="20170512 23:11:27.754" status="PASS" endtime="20170512 23:11:27.761"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:27.761">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:27.416" status="PASS" endtime="20170512 23:11:27.761"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:27.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:27.761" status="PASS" endtime="20170512 23:11:27.762"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:27.762">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:11:27.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:11:27.762">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:11:27.762" status="PASS" endtime="20170512 23:11:27.763"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:27.763">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:27.415" status="PASS" endtime="20170512 23:11:27.763"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:27.763">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:27.414" status="PASS" endtime="20170512 23:11:27.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:11:27.764">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:11:27.763" status="FAIL" endtime="20170512 23:11:27.764"></status>
</kw>
<status starttime="20170512 23:11:27.413" status="FAIL" endtime="20170512 23:11:27.764"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:37.773">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:11:37.772" status="PASS" endtime="20170512 23:11:37.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:37.774">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:11:37.774" status="PASS" endtime="20170512 23:11:37.774"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:37.775">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:11:37.774" status="PASS" endtime="20170512 23:11:37.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:37.775">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:11:37.775" status="PASS" endtime="20170512 23:11:37.775"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:37.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:11:37.776" status="PASS" endtime="20170512 23:11:37.958"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:37.958">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:11:37.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:37.776" status="PASS" endtime="20170512 23:11:37.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:37.960">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:37.960" status="PASS" endtime="20170512 23:11:37.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:37.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:37.961" status="PASS" endtime="20170512 23:11:37.963"></status>
</kw>
<status starttime="20170512 23:11:37.772" status="PASS" endtime="20170512 23:11:37.963"></status>
</kw>
<status starttime="20170512 23:11:37.771" status="PASS" endtime="20170512 23:11:37.963"></status>
</kw>
<status starttime="20170512 23:11:37.771" status="PASS" endtime="20170512 23:11:37.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:37.964">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:11:37.964" status="PASS" endtime="20170512 23:11:37.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:37.967">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:37.966" status="PASS" endtime="20170512 23:11:37.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:37.968">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:37.968" status="PASS" endtime="20170512 23:11:37.974"></status>
</kw>
<status starttime="20170512 23:11:37.967" status="PASS" endtime="20170512 23:11:37.975"></status>
</kw>
<status starttime="20170512 23:11:37.965" status="PASS" endtime="20170512 23:11:37.975"></status>
</kw>
<status starttime="20170512 23:11:37.965" status="PASS" endtime="20170512 23:11:37.975"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:38.046">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:11:38.046">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:37.975" status="PASS" endtime="20170512 23:11:38.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:38.048">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:38.048" status="PASS" endtime="20170512 23:11:38.048"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:38.049">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:38.049" status="PASS" endtime="20170512 23:11:38.049"></status>
</kw>
<status starttime="20170512 23:11:38.048" status="PASS" endtime="20170512 23:11:38.049"></status>
</kw>
<status starttime="20170512 23:11:38.047" status="PASS" endtime="20170512 23:11:38.049"></status>
</kw>
<status starttime="20170512 23:11:38.047" status="PASS" endtime="20170512 23:11:38.049"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:38.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:37.770" status="PASS" endtime="20170512 23:11:38.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:38.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:38.050" status="PASS" endtime="20170512 23:11:38.050"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:38.051">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:11:38.051">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:11:38.051">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:11:38.051" status="PASS" endtime="20170512 23:11:38.051"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:38.051">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:37.769" status="PASS" endtime="20170512 23:11:38.051"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:38.052">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:37.769" status="PASS" endtime="20170512 23:11:38.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:11:38.052">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:11:38.052" status="FAIL" endtime="20170512 23:11:38.052"></status>
</kw>
<status starttime="20170512 23:11:37.767" status="FAIL" endtime="20170512 23:11:38.052"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:48.061">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:11:48.061" status="PASS" endtime="20170512 23:11:48.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.063">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:11:48.063" status="PASS" endtime="20170512 23:11:48.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.064">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:11:48.063" status="PASS" endtime="20170512 23:11:48.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:11:48.064" status="PASS" endtime="20170512 23:11:48.065"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:48.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:11:48.066" status="PASS" endtime="20170512 23:11:48.257"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:48.257">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:11:48.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:48.066" status="PASS" endtime="20170512 23:11:48.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:48.258">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:48.257" status="PASS" endtime="20170512 23:11:48.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:48.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:48.258" status="PASS" endtime="20170512 23:11:48.259"></status>
</kw>
<status starttime="20170512 23:11:48.059" status="PASS" endtime="20170512 23:11:48.259"></status>
</kw>
<status starttime="20170512 23:11:48.059" status="PASS" endtime="20170512 23:11:48.259"></status>
</kw>
<status starttime="20170512 23:11:48.057" status="PASS" endtime="20170512 23:11:48.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.259">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:11:48.259" status="PASS" endtime="20170512 23:11:48.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.262">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:48.261" status="PASS" endtime="20170512 23:11:48.262"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:48.263">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:48.263" status="PASS" endtime="20170512 23:11:48.263"></status>
</kw>
<status starttime="20170512 23:11:48.262" status="PASS" endtime="20170512 23:11:48.263"></status>
</kw>
<status starttime="20170512 23:11:48.260" status="PASS" endtime="20170512 23:11:48.263"></status>
</kw>
<status starttime="20170512 23:11:48.260" status="PASS" endtime="20170512 23:11:48.263"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.332">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:11:48.332">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:48.264" status="PASS" endtime="20170512 23:11:48.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.334">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:48.334" status="PASS" endtime="20170512 23:11:48.334"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:48.335">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:48.335" status="PASS" endtime="20170512 23:11:48.336"></status>
</kw>
<status starttime="20170512 23:11:48.335" status="PASS" endtime="20170512 23:11:48.336"></status>
</kw>
<status starttime="20170512 23:11:48.333" status="PASS" endtime="20170512 23:11:48.336"></status>
</kw>
<status starttime="20170512 23:11:48.333" status="PASS" endtime="20170512 23:11:48.336"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:48.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:48.056" status="PASS" endtime="20170512 23:11:48.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:48.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:48.337" status="PASS" endtime="20170512 23:11:48.337"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:48.338">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:11:48.338">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:11:48.338">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:11:48.338" status="PASS" endtime="20170512 23:11:48.338"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:48.339">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:48.055" status="PASS" endtime="20170512 23:11:48.339"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:48.339">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:48.055" status="PASS" endtime="20170512 23:11:48.339"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:11:48.340">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:11:48.339" status="FAIL" endtime="20170512 23:11:48.340"></status>
</kw>
<status starttime="20170512 23:11:48.054" status="FAIL" endtime="20170512 23:11:48.340"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:58.345">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:11:58.344" status="PASS" endtime="20170512 23:11:58.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:11:58.345" status="PASS" endtime="20170512 23:11:58.346"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.347">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:11:58.346" status="PASS" endtime="20170512 23:11:58.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.347">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:11:58.347" status="PASS" endtime="20170512 23:11:58.347"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:58.532">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:11:58.348" status="PASS" endtime="20170512 23:11:58.533"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:58.533">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:11:58.533">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:58.348" status="PASS" endtime="20170512 23:11:58.533"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:58.535">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:58.534" status="PASS" endtime="20170512 23:11:58.535"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:58.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:58.535" status="PASS" endtime="20170512 23:11:58.537"></status>
</kw>
<status starttime="20170512 23:11:58.344" status="PASS" endtime="20170512 23:11:58.537"></status>
</kw>
<status starttime="20170512 23:11:58.343" status="PASS" endtime="20170512 23:11:58.537"></status>
</kw>
<status starttime="20170512 23:11:58.343" status="PASS" endtime="20170512 23:11:58.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.538">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:11:58.537" status="PASS" endtime="20170512 23:11:58.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.541">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:58.540" status="PASS" endtime="20170512 23:11:58.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:58.542">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:11:58.542" status="PASS" endtime="20170512 23:11:58.542"></status>
</kw>
<status starttime="20170512 23:11:58.541" status="PASS" endtime="20170512 23:11:58.543"></status>
</kw>
<status starttime="20170512 23:11:58.539" status="PASS" endtime="20170512 23:11:58.543"></status>
</kw>
<status starttime="20170512 23:11:58.539" status="PASS" endtime="20170512 23:11:58.543"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.612">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:11:58.612">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:58.543" status="PASS" endtime="20170512 23:11:58.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.615">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:58.614" status="PASS" endtime="20170512 23:11:58.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:58.617">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:11:58.616" status="PASS" endtime="20170512 23:11:58.617"></status>
</kw>
<status starttime="20170512 23:11:58.615" status="PASS" endtime="20170512 23:11:58.617"></status>
</kw>
<status starttime="20170512 23:11:58.614" status="PASS" endtime="20170512 23:11:58.617"></status>
</kw>
<status starttime="20170512 23:11:58.613" status="PASS" endtime="20170512 23:11:58.617"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:58.618">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:11:58.342" status="PASS" endtime="20170512 23:11:58.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:11:58.619">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:11:58.618" status="PASS" endtime="20170512 23:11:58.619"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:11:58.620">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:11:58.620">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:11:58.620">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:11:58.619" status="PASS" endtime="20170512 23:11:58.620"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:58.620">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:58.341" status="PASS" endtime="20170512 23:11:58.620"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:11:58.621">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:11:58.341" status="PASS" endtime="20170512 23:11:58.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:11:58.622">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:11:58.621" status="FAIL" endtime="20170512 23:11:58.622"></status>
</kw>
<status starttime="20170512 23:11:58.340" status="FAIL" endtime="20170512 23:11:58.622"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:08.628">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:12:08.627" status="PASS" endtime="20170512 23:12:08.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:12:08.628" status="PASS" endtime="20170512 23:12:08.629"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.629">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:12:08.629" status="PASS" endtime="20170512 23:12:08.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.630">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:12:08.630" status="PASS" endtime="20170512 23:12:08.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:08.809">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:12:08.631" status="PASS" endtime="20170512 23:12:08.809"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:08.809">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:12:08.809">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:08.630" status="PASS" endtime="20170512 23:12:08.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:08.810">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:08.810" status="PASS" endtime="20170512 23:12:08.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:08.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:08.811" status="PASS" endtime="20170512 23:12:08.811"></status>
</kw>
<status starttime="20170512 23:12:08.626" status="PASS" endtime="20170512 23:12:08.811"></status>
</kw>
<status starttime="20170512 23:12:08.626" status="PASS" endtime="20170512 23:12:08.811"></status>
</kw>
<status starttime="20170512 23:12:08.625" status="PASS" endtime="20170512 23:12:08.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.812">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:12:08.812" status="PASS" endtime="20170512 23:12:08.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.814">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:08.813" status="PASS" endtime="20170512 23:12:08.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:08.815">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:08.815" status="PASS" endtime="20170512 23:12:08.815"></status>
</kw>
<status starttime="20170512 23:12:08.814" status="PASS" endtime="20170512 23:12:08.815"></status>
</kw>
<status starttime="20170512 23:12:08.813" status="PASS" endtime="20170512 23:12:08.815"></status>
</kw>
<status starttime="20170512 23:12:08.812" status="PASS" endtime="20170512 23:12:08.815"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.882">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:12:08.883">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:08.816" status="PASS" endtime="20170512 23:12:08.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.885">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:08.884" status="PASS" endtime="20170512 23:12:08.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:08.886">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:08.886" status="PASS" endtime="20170512 23:12:08.886"></status>
</kw>
<status starttime="20170512 23:12:08.885" status="PASS" endtime="20170512 23:12:08.886"></status>
</kw>
<status starttime="20170512 23:12:08.884" status="PASS" endtime="20170512 23:12:08.886"></status>
</kw>
<status starttime="20170512 23:12:08.883" status="PASS" endtime="20170512 23:12:08.887"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:08.887">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:08.624" status="PASS" endtime="20170512 23:12:08.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:08.887">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:08.887" status="PASS" endtime="20170512 23:12:08.887"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:08.888">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:12:08.888">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:12:08.888">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:12:08.888" status="PASS" endtime="20170512 23:12:08.888"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:08.889">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:08.624" status="PASS" endtime="20170512 23:12:08.889"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:08.889">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:08.623" status="PASS" endtime="20170512 23:12:08.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:12:08.890">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:12:08.889" status="FAIL" endtime="20170512 23:12:08.890"></status>
</kw>
<status starttime="20170512 23:12:08.623" status="FAIL" endtime="20170512 23:12:08.890"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:18.895">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:12:18.895" status="PASS" endtime="20170512 23:12:18.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:18.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:12:18.896" status="PASS" endtime="20170512 23:12:18.896"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:18.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:12:18.897" status="PASS" endtime="20170512 23:12:18.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:18.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:12:18.897" status="PASS" endtime="20170512 23:12:18.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:19.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:12:18.898" status="PASS" endtime="20170512 23:12:19.078"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:19.078">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:12:19.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:18.898" status="PASS" endtime="20170512 23:12:19.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:19.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:19.079" status="PASS" endtime="20170512 23:12:19.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:19.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:19.079" status="PASS" endtime="20170512 23:12:19.080"></status>
</kw>
<status starttime="20170512 23:12:18.895" status="PASS" endtime="20170512 23:12:19.080"></status>
</kw>
<status starttime="20170512 23:12:18.894" status="PASS" endtime="20170512 23:12:19.080"></status>
</kw>
<status starttime="20170512 23:12:18.893" status="PASS" endtime="20170512 23:12:19.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:19.080">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:12:19.080" status="PASS" endtime="20170512 23:12:19.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:19.083">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:19.082" status="PASS" endtime="20170512 23:12:19.083"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:19.083">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:19.083" status="PASS" endtime="20170512 23:12:19.084"></status>
</kw>
<status starttime="20170512 23:12:19.083" status="PASS" endtime="20170512 23:12:19.084"></status>
</kw>
<status starttime="20170512 23:12:19.081" status="PASS" endtime="20170512 23:12:19.084"></status>
</kw>
<status starttime="20170512 23:12:19.081" status="PASS" endtime="20170512 23:12:19.084"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:19.151">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:12:19.151">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:19.084" status="PASS" endtime="20170512 23:12:19.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:19.153">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:19.152" status="PASS" endtime="20170512 23:12:19.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:19.154">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:19.154" status="PASS" endtime="20170512 23:12:19.154"></status>
</kw>
<status starttime="20170512 23:12:19.153" status="PASS" endtime="20170512 23:12:19.154"></status>
</kw>
<status starttime="20170512 23:12:19.152" status="PASS" endtime="20170512 23:12:19.154"></status>
</kw>
<status starttime="20170512 23:12:19.151" status="PASS" endtime="20170512 23:12:19.154"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:19.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:18.893" status="PASS" endtime="20170512 23:12:19.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:19.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:19.155" status="PASS" endtime="20170512 23:12:19.155"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:19.156">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:12:19.156">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:12:19.156">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:12:19.155" status="PASS" endtime="20170512 23:12:19.156"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:19.156">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:18.892" status="PASS" endtime="20170512 23:12:19.156"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:19.156">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:18.892" status="PASS" endtime="20170512 23:12:19.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:12:19.157">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:12:19.157" status="FAIL" endtime="20170512 23:12:19.157"></status>
</kw>
<status starttime="20170512 23:12:18.891" status="FAIL" endtime="20170512 23:12:19.157"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:29.233">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:12:29.232" status="PASS" endtime="20170512 23:12:29.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.236">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:12:29.235" status="PASS" endtime="20170512 23:12:29.236"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.237">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:12:29.236" status="PASS" endtime="20170512 23:12:29.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.239">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:12:29.238" status="PASS" endtime="20170512 23:12:29.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:29.467">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:12:29.240" status="PASS" endtime="20170512 23:12:29.467"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:29.467">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:12:29.468">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:29.239" status="PASS" endtime="20170512 23:12:29.468"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:29.469">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:29.468" status="PASS" endtime="20170512 23:12:29.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:29.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:29.469" status="PASS" endtime="20170512 23:12:29.469"></status>
</kw>
<status starttime="20170512 23:12:29.230" status="PASS" endtime="20170512 23:12:29.470"></status>
</kw>
<status starttime="20170512 23:12:29.229" status="PASS" endtime="20170512 23:12:29.470"></status>
</kw>
<status starttime="20170512 23:12:29.193" status="PASS" endtime="20170512 23:12:29.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.470">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:12:29.470" status="PASS" endtime="20170512 23:12:29.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.473">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:29.472" status="PASS" endtime="20170512 23:12:29.473"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:29.473">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:29.473" status="PASS" endtime="20170512 23:12:29.474"></status>
</kw>
<status starttime="20170512 23:12:29.473" status="PASS" endtime="20170512 23:12:29.474"></status>
</kw>
<status starttime="20170512 23:12:29.471" status="PASS" endtime="20170512 23:12:29.474"></status>
</kw>
<status starttime="20170512 23:12:29.471" status="PASS" endtime="20170512 23:12:29.474"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.543">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:12:29.543">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:29.475" status="PASS" endtime="20170512 23:12:29.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.545">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:29.545" status="PASS" endtime="20170512 23:12:29.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:29.547">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:29.547" status="PASS" endtime="20170512 23:12:29.547"></status>
</kw>
<status starttime="20170512 23:12:29.546" status="PASS" endtime="20170512 23:12:29.548"></status>
</kw>
<status starttime="20170512 23:12:29.544" status="PASS" endtime="20170512 23:12:29.548"></status>
</kw>
<status starttime="20170512 23:12:29.544" status="PASS" endtime="20170512 23:12:29.548"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:29.548">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:29.188" status="PASS" endtime="20170512 23:12:29.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:29.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:29.548" status="PASS" endtime="20170512 23:12:29.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:29.550">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:12:29.550">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:12:29.550">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:12:29.549" status="PASS" endtime="20170512 23:12:29.550"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:29.550">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:29.172" status="PASS" endtime="20170512 23:12:29.550"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:29.551">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:29.171" status="PASS" endtime="20170512 23:12:29.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:12:29.552">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:12:29.551" status="FAIL" endtime="20170512 23:12:29.552"></status>
</kw>
<status starttime="20170512 23:12:29.169" status="FAIL" endtime="20170512 23:12:29.552"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:39.558">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:12:39.558" status="PASS" endtime="20170512 23:12:39.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.559">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:12:39.559" status="PASS" endtime="20170512 23:12:39.559"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.560">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:12:39.560" status="PASS" endtime="20170512 23:12:39.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.561">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:12:39.560" status="PASS" endtime="20170512 23:12:39.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:39.741">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:12:39.561" status="PASS" endtime="20170512 23:12:39.741"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:39.741">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:12:39.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:39.561" status="PASS" endtime="20170512 23:12:39.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:39.742">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:39.742" status="PASS" endtime="20170512 23:12:39.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:39.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:39.742" status="PASS" endtime="20170512 23:12:39.743"></status>
</kw>
<status starttime="20170512 23:12:39.557" status="PASS" endtime="20170512 23:12:39.743"></status>
</kw>
<status starttime="20170512 23:12:39.557" status="PASS" endtime="20170512 23:12:39.743"></status>
</kw>
<status starttime="20170512 23:12:39.556" status="PASS" endtime="20170512 23:12:39.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.744">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:12:39.743" status="PASS" endtime="20170512 23:12:39.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.746">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:39.745" status="PASS" endtime="20170512 23:12:39.746"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:39.747">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:39.746" status="PASS" endtime="20170512 23:12:39.747"></status>
</kw>
<status starttime="20170512 23:12:39.746" status="PASS" endtime="20170512 23:12:39.747"></status>
</kw>
<status starttime="20170512 23:12:39.744" status="PASS" endtime="20170512 23:12:39.747"></status>
</kw>
<status starttime="20170512 23:12:39.744" status="PASS" endtime="20170512 23:12:39.747"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.825">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:12:39.825">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:39.748" status="PASS" endtime="20170512 23:12:39.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.827">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:39.826" status="PASS" endtime="20170512 23:12:39.827"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:39.828">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:39.827" status="PASS" endtime="20170512 23:12:39.828"></status>
</kw>
<status starttime="20170512 23:12:39.827" status="PASS" endtime="20170512 23:12:39.828"></status>
</kw>
<status starttime="20170512 23:12:39.826" status="PASS" endtime="20170512 23:12:39.828"></status>
</kw>
<status starttime="20170512 23:12:39.825" status="PASS" endtime="20170512 23:12:39.828"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:39.828">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:39.555" status="PASS" endtime="20170512 23:12:39.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:39.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:39.829" status="PASS" endtime="20170512 23:12:39.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:39.830">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:12:39.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:12:39.830">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:12:39.829" status="PASS" endtime="20170512 23:12:39.830"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:39.830">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:39.554" status="PASS" endtime="20170512 23:12:39.830"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:39.830">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:39.553" status="PASS" endtime="20170512 23:12:39.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:12:39.831">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:12:39.831" status="FAIL" endtime="20170512 23:12:39.831"></status>
</kw>
<status starttime="20170512 23:12:39.553" status="FAIL" endtime="20170512 23:12:39.831"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:49.836">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:12:49.836" status="PASS" endtime="20170512 23:12:49.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:49.837">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:12:49.837" status="PASS" endtime="20170512 23:12:49.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:49.838">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:12:49.837" status="PASS" endtime="20170512 23:12:49.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:49.838">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:12:49.838" status="PASS" endtime="20170512 23:12:49.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:50.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:12:49.839" status="PASS" endtime="20170512 23:12:50.018"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:50.018">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:12:50.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:49.839" status="PASS" endtime="20170512 23:12:50.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:50.019">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:50.019" status="PASS" endtime="20170512 23:12:50.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:50.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:50.019" status="PASS" endtime="20170512 23:12:50.020"></status>
</kw>
<status starttime="20170512 23:12:49.835" status="PASS" endtime="20170512 23:12:50.020"></status>
</kw>
<status starttime="20170512 23:12:49.835" status="PASS" endtime="20170512 23:12:50.020"></status>
</kw>
<status starttime="20170512 23:12:49.834" status="PASS" endtime="20170512 23:12:50.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:50.021">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:12:50.020" status="PASS" endtime="20170512 23:12:50.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:50.023">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:50.022" status="PASS" endtime="20170512 23:12:50.023"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:50.024">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:12:50.023" status="PASS" endtime="20170512 23:12:50.024"></status>
</kw>
<status starttime="20170512 23:12:50.023" status="PASS" endtime="20170512 23:12:50.024"></status>
</kw>
<status starttime="20170512 23:12:50.021" status="PASS" endtime="20170512 23:12:50.024"></status>
</kw>
<status starttime="20170512 23:12:50.021" status="PASS" endtime="20170512 23:12:50.024"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:50.091">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:12:50.091">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:50.024" status="PASS" endtime="20170512 23:12:50.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:50.093">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:50.092" status="PASS" endtime="20170512 23:12:50.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:50.096">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:12:50.096" status="PASS" endtime="20170512 23:12:50.096"></status>
</kw>
<status starttime="20170512 23:12:50.093" status="PASS" endtime="20170512 23:12:50.096"></status>
</kw>
<status starttime="20170512 23:12:50.092" status="PASS" endtime="20170512 23:12:50.096"></status>
</kw>
<status starttime="20170512 23:12:50.091" status="PASS" endtime="20170512 23:12:50.096"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:50.096">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:12:49.833" status="PASS" endtime="20170512 23:12:50.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:12:50.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:12:50.097" status="PASS" endtime="20170512 23:12:50.097"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:12:50.098">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:12:50.098">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:12:50.098">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:12:50.097" status="PASS" endtime="20170512 23:12:50.098"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:50.098">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:49.833" status="PASS" endtime="20170512 23:12:50.098"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:12:50.099">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:12:49.832" status="PASS" endtime="20170512 23:12:50.099"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:12:50.099">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:12:50.099" status="FAIL" endtime="20170512 23:12:50.099"></status>
</kw>
<status starttime="20170512 23:12:49.832" status="FAIL" endtime="20170512 23:12:50.099"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:00.104">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:13:00.104" status="PASS" endtime="20170512 23:13:00.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:13:00.106" status="PASS" endtime="20170512 23:13:00.106"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.107">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:13:00.107" status="PASS" endtime="20170512 23:13:00.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.108">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:13:00.107" status="PASS" endtime="20170512 23:13:00.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:00.304">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:13:00.108" status="PASS" endtime="20170512 23:13:00.304"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:00.304">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:13:00.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:00.108" status="PASS" endtime="20170512 23:13:00.304"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:00.305">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:00.305" status="PASS" endtime="20170512 23:13:00.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:00.307">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:00.305" status="PASS" endtime="20170512 23:13:00.307"></status>
</kw>
<status starttime="20170512 23:13:00.103" status="PASS" endtime="20170512 23:13:00.308"></status>
</kw>
<status starttime="20170512 23:13:00.103" status="PASS" endtime="20170512 23:13:00.308"></status>
</kw>
<status starttime="20170512 23:13:00.102" status="PASS" endtime="20170512 23:13:00.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.308">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:13:00.308" status="PASS" endtime="20170512 23:13:00.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.312">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:00.310" status="PASS" endtime="20170512 23:13:00.312"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:00.313">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:00.313" status="PASS" endtime="20170512 23:13:00.313"></status>
</kw>
<status starttime="20170512 23:13:00.312" status="PASS" endtime="20170512 23:13:00.313"></status>
</kw>
<status starttime="20170512 23:13:00.309" status="PASS" endtime="20170512 23:13:00.313"></status>
</kw>
<status starttime="20170512 23:13:00.309" status="PASS" endtime="20170512 23:13:00.313"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.381">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:13:00.381">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:00.314" status="PASS" endtime="20170512 23:13:00.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.385">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:00.384" status="PASS" endtime="20170512 23:13:00.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:00.387">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:00.387" status="PASS" endtime="20170512 23:13:00.388"></status>
</kw>
<status starttime="20170512 23:13:00.386" status="PASS" endtime="20170512 23:13:00.388"></status>
</kw>
<status starttime="20170512 23:13:00.383" status="PASS" endtime="20170512 23:13:00.388"></status>
</kw>
<status starttime="20170512 23:13:00.382" status="PASS" endtime="20170512 23:13:00.388"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:00.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:00.102" status="PASS" endtime="20170512 23:13:00.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:00.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:00.389" status="PASS" endtime="20170512 23:13:00.391"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:00.392">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:13:00.392">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:13:00.392">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:13:00.391" status="PASS" endtime="20170512 23:13:00.393"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:00.393">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:00.101" status="PASS" endtime="20170512 23:13:00.393"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:00.394">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:00.101" status="PASS" endtime="20170512 23:13:00.394"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:13:00.396">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:13:00.395" status="FAIL" endtime="20170512 23:13:00.396"></status>
</kw>
<status starttime="20170512 23:13:00.100" status="FAIL" endtime="20170512 23:13:00.396"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:10.403">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:13:10.403" status="PASS" endtime="20170512 23:13:10.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:10.404">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:13:10.404" status="PASS" endtime="20170512 23:13:10.404"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:10.405">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:13:10.404" status="PASS" endtime="20170512 23:13:10.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:10.406">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:13:10.405" status="PASS" endtime="20170512 23:13:10.406"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:11.016">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:13:10.406" status="PASS" endtime="20170512 23:13:11.017"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:11.017">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:13:11.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:10.406" status="PASS" endtime="20170512 23:13:11.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:11.018">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:11.017" status="PASS" endtime="20170512 23:13:11.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:11.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:11.018" status="PASS" endtime="20170512 23:13:11.019"></status>
</kw>
<status starttime="20170512 23:13:10.402" status="PASS" endtime="20170512 23:13:11.019"></status>
</kw>
<status starttime="20170512 23:13:10.401" status="PASS" endtime="20170512 23:13:11.019"></status>
</kw>
<status starttime="20170512 23:13:10.400" status="PASS" endtime="20170512 23:13:11.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:11.020">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:13:11.020" status="PASS" endtime="20170512 23:13:11.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:11.023">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:11.022" status="PASS" endtime="20170512 23:13:11.023"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:11.024">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:11.024" status="PASS" endtime="20170512 23:13:11.025"></status>
</kw>
<status starttime="20170512 23:13:11.023" status="PASS" endtime="20170512 23:13:11.025"></status>
</kw>
<status starttime="20170512 23:13:11.021" status="PASS" endtime="20170512 23:13:11.025"></status>
</kw>
<status starttime="20170512 23:13:11.021" status="PASS" endtime="20170512 23:13:11.025"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:11.206">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:13:11.206">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:11.025" status="PASS" endtime="20170512 23:13:11.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:11.208">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:11.208" status="PASS" endtime="20170512 23:13:11.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:11.209">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:11.209" status="PASS" endtime="20170512 23:13:11.209"></status>
</kw>
<status starttime="20170512 23:13:11.208" status="PASS" endtime="20170512 23:13:11.210"></status>
</kw>
<status starttime="20170512 23:13:11.207" status="PASS" endtime="20170512 23:13:11.210"></status>
</kw>
<status starttime="20170512 23:13:11.207" status="PASS" endtime="20170512 23:13:11.210"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:11.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:10.400" status="PASS" endtime="20170512 23:13:11.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:11.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:11.210" status="PASS" endtime="20170512 23:13:11.211"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:11.211">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:13:11.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:13:11.211">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:13:11.211" status="PASS" endtime="20170512 23:13:11.211"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:11.212">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:10.399" status="PASS" endtime="20170512 23:13:11.212"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:11.212">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:10.399" status="PASS" endtime="20170512 23:13:11.212"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:13:11.213">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:13:11.212" status="FAIL" endtime="20170512 23:13:11.213"></status>
</kw>
<status starttime="20170512 23:13:10.397" status="FAIL" endtime="20170512 23:13:11.213"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:21.219">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:13:21.219" status="PASS" endtime="20170512 23:13:21.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:21.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:13:21.220" status="PASS" endtime="20170512 23:13:21.220"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:21.221">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:13:21.220" status="PASS" endtime="20170512 23:13:21.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:21.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:13:21.221" status="PASS" endtime="20170512 23:13:21.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:21.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:13:21.222" status="PASS" endtime="20170512 23:13:21.901"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:21.901">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:13:21.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:21.222" status="PASS" endtime="20170512 23:13:21.901"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:21.902">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:21.902" status="PASS" endtime="20170512 23:13:21.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:21.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:21.902" status="PASS" endtime="20170512 23:13:21.903"></status>
</kw>
<status starttime="20170512 23:13:21.218" status="PASS" endtime="20170512 23:13:21.903"></status>
</kw>
<status starttime="20170512 23:13:21.218" status="PASS" endtime="20170512 23:13:21.903"></status>
</kw>
<status starttime="20170512 23:13:21.217" status="PASS" endtime="20170512 23:13:21.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:21.904">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:13:21.904" status="PASS" endtime="20170512 23:13:21.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:21.906">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:21.905" status="PASS" endtime="20170512 23:13:21.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:21.908">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:21.907" status="PASS" endtime="20170512 23:13:21.908"></status>
</kw>
<status starttime="20170512 23:13:21.907" status="PASS" endtime="20170512 23:13:21.908"></status>
</kw>
<status starttime="20170512 23:13:21.905" status="PASS" endtime="20170512 23:13:21.908"></status>
</kw>
<status starttime="20170512 23:13:21.904" status="PASS" endtime="20170512 23:13:21.908"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:22.094">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:13:22.095">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:21.908" status="PASS" endtime="20170512 23:13:22.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:22.097">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:22.096" status="PASS" endtime="20170512 23:13:22.097"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:22.098">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:22.098" status="PASS" endtime="20170512 23:13:22.098"></status>
</kw>
<status starttime="20170512 23:13:22.097" status="PASS" endtime="20170512 23:13:22.098"></status>
</kw>
<status starttime="20170512 23:13:22.096" status="PASS" endtime="20170512 23:13:22.098"></status>
</kw>
<status starttime="20170512 23:13:22.095" status="PASS" endtime="20170512 23:13:22.098"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:22.099">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:21.216" status="PASS" endtime="20170512 23:13:22.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:22.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:22.099" status="PASS" endtime="20170512 23:13:22.099"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:22.100">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:13:22.100">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:13:22.100">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:13:22.100" status="PASS" endtime="20170512 23:13:22.100"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:22.100">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:21.215" status="PASS" endtime="20170512 23:13:22.100"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:22.101">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:21.214" status="PASS" endtime="20170512 23:13:22.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:13:22.101">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:13:22.101" status="FAIL" endtime="20170512 23:13:22.101"></status>
</kw>
<status starttime="20170512 23:13:21.213" status="FAIL" endtime="20170512 23:13:22.101"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:32.108">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:13:32.107" status="PASS" endtime="20170512 23:13:32.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.109">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:13:32.109" status="PASS" endtime="20170512 23:13:32.109"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.110">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:13:32.109" status="PASS" endtime="20170512 23:13:32.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.110">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:13:32.110" status="PASS" endtime="20170512 23:13:32.110"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:32.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:13:32.111" status="PASS" endtime="20170512 23:13:32.708"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:32.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:13:32.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:32.111" status="PASS" endtime="20170512 23:13:32.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:32.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:32.708" status="PASS" endtime="20170512 23:13:32.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:32.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:32.709" status="PASS" endtime="20170512 23:13:32.710"></status>
</kw>
<status starttime="20170512 23:13:32.106" status="PASS" endtime="20170512 23:13:32.710"></status>
</kw>
<status starttime="20170512 23:13:32.106" status="PASS" endtime="20170512 23:13:32.710"></status>
</kw>
<status starttime="20170512 23:13:32.105" status="PASS" endtime="20170512 23:13:32.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.711">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:13:32.710" status="PASS" endtime="20170512 23:13:32.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.713">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:32.712" status="PASS" endtime="20170512 23:13:32.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:32.714">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:32.713" status="PASS" endtime="20170512 23:13:32.714"></status>
</kw>
<status starttime="20170512 23:13:32.713" status="PASS" endtime="20170512 23:13:32.714"></status>
</kw>
<status starttime="20170512 23:13:32.711" status="PASS" endtime="20170512 23:13:32.714"></status>
</kw>
<status starttime="20170512 23:13:32.711" status="PASS" endtime="20170512 23:13:32.714"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.888">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:13:32.888">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:32.714" status="PASS" endtime="20170512 23:13:32.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.890">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:32.890" status="PASS" endtime="20170512 23:13:32.890"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:32.892">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:32.891" status="PASS" endtime="20170512 23:13:32.892"></status>
</kw>
<status starttime="20170512 23:13:32.890" status="PASS" endtime="20170512 23:13:32.892"></status>
</kw>
<status starttime="20170512 23:13:32.889" status="PASS" endtime="20170512 23:13:32.892"></status>
</kw>
<status starttime="20170512 23:13:32.889" status="PASS" endtime="20170512 23:13:32.892"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:32.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:32.105" status="PASS" endtime="20170512 23:13:32.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:32.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:32.893" status="PASS" endtime="20170512 23:13:32.893"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:32.894">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:13:32.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:13:32.894">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:13:32.893" status="PASS" endtime="20170512 23:13:32.894"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:32.894">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:32.104" status="PASS" endtime="20170512 23:13:32.894"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:32.894">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:32.103" status="PASS" endtime="20170512 23:13:32.894"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:13:32.895">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:13:32.895" status="FAIL" endtime="20170512 23:13:32.895"></status>
</kw>
<status starttime="20170512 23:13:32.103" status="FAIL" endtime="20170512 23:13:32.895"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:42.902">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:13:42.901" status="PASS" endtime="20170512 23:13:42.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:42.903">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:13:42.903" status="PASS" endtime="20170512 23:13:42.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:42.904">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:13:42.904" status="PASS" endtime="20170512 23:13:42.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:42.905">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:13:42.904" status="PASS" endtime="20170512 23:13:42.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:43.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:13:42.906" status="PASS" endtime="20170512 23:13:43.179"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:43.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:13:43.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:42.905" status="PASS" endtime="20170512 23:13:43.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:43.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:43.179" status="PASS" endtime="20170512 23:13:43.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:43.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:43.180" status="PASS" endtime="20170512 23:13:43.180"></status>
</kw>
<status starttime="20170512 23:13:42.900" status="PASS" endtime="20170512 23:13:43.180"></status>
</kw>
<status starttime="20170512 23:13:42.900" status="PASS" endtime="20170512 23:13:43.180"></status>
</kw>
<status starttime="20170512 23:13:42.899" status="PASS" endtime="20170512 23:13:43.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:43.181">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:13:43.181" status="PASS" endtime="20170512 23:13:43.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:43.183">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:43.182" status="PASS" endtime="20170512 23:13:43.183"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:43.184">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:43.184" status="PASS" endtime="20170512 23:13:43.184"></status>
</kw>
<status starttime="20170512 23:13:43.183" status="PASS" endtime="20170512 23:13:43.184"></status>
</kw>
<status starttime="20170512 23:13:43.182" status="PASS" endtime="20170512 23:13:43.185"></status>
</kw>
<status starttime="20170512 23:13:43.181" status="PASS" endtime="20170512 23:13:43.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:43.251">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:13:43.251">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:43.185" status="PASS" endtime="20170512 23:13:43.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:43.253">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:43.253" status="PASS" endtime="20170512 23:13:43.253"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:43.254">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:43.254" status="PASS" endtime="20170512 23:13:43.254"></status>
</kw>
<status starttime="20170512 23:13:43.253" status="PASS" endtime="20170512 23:13:43.255"></status>
</kw>
<status starttime="20170512 23:13:43.252" status="PASS" endtime="20170512 23:13:43.255"></status>
</kw>
<status starttime="20170512 23:13:43.252" status="PASS" endtime="20170512 23:13:43.255"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:43.255">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:42.898" status="PASS" endtime="20170512 23:13:43.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:43.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:43.255" status="PASS" endtime="20170512 23:13:43.256"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:43.256">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:13:43.256">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:13:43.256">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:13:43.256" status="PASS" endtime="20170512 23:13:43.256"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:43.257">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:42.897" status="PASS" endtime="20170512 23:13:43.257"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:43.257">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:42.896" status="PASS" endtime="20170512 23:13:43.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:13:43.258">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:13:43.257" status="FAIL" endtime="20170512 23:13:43.258"></status>
</kw>
<status starttime="20170512 23:13:42.896" status="FAIL" endtime="20170512 23:13:43.258"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:53.263">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:13:53.263" status="PASS" endtime="20170512 23:13:53.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.264">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:13:53.264" status="PASS" endtime="20170512 23:13:53.264"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.265">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:13:53.264" status="PASS" endtime="20170512 23:13:53.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.266">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:13:53.265" status="PASS" endtime="20170512 23:13:53.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:53.456">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:13:53.266" status="PASS" endtime="20170512 23:13:53.457"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:53.457">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:13:53.457">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:53.266" status="PASS" endtime="20170512 23:13:53.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:53.458">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:53.457" status="PASS" endtime="20170512 23:13:53.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:53.458">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:53.458" status="PASS" endtime="20170512 23:13:53.458"></status>
</kw>
<status starttime="20170512 23:13:53.262" status="PASS" endtime="20170512 23:13:53.459"></status>
</kw>
<status starttime="20170512 23:13:53.261" status="PASS" endtime="20170512 23:13:53.459"></status>
</kw>
<status starttime="20170512 23:13:53.261" status="PASS" endtime="20170512 23:13:53.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.459">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:13:53.459" status="PASS" endtime="20170512 23:13:53.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.462">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:53.461" status="PASS" endtime="20170512 23:13:53.462"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:53.463">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:13:53.463" status="PASS" endtime="20170512 23:13:53.463"></status>
</kw>
<status starttime="20170512 23:13:53.462" status="PASS" endtime="20170512 23:13:53.463"></status>
</kw>
<status starttime="20170512 23:13:53.460" status="PASS" endtime="20170512 23:13:53.463"></status>
</kw>
<status starttime="20170512 23:13:53.460" status="PASS" endtime="20170512 23:13:53.464"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.530">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:13:53.530">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:53.464" status="PASS" endtime="20170512 23:13:53.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.532">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:53.532" status="PASS" endtime="20170512 23:13:53.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:53.533">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:13:53.533" status="PASS" endtime="20170512 23:13:53.533"></status>
</kw>
<status starttime="20170512 23:13:53.532" status="PASS" endtime="20170512 23:13:53.534"></status>
</kw>
<status starttime="20170512 23:13:53.531" status="PASS" endtime="20170512 23:13:53.534"></status>
</kw>
<status starttime="20170512 23:13:53.531" status="PASS" endtime="20170512 23:13:53.534"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:53.534">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:13:53.260" status="PASS" endtime="20170512 23:13:53.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:13:53.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:13:53.534" status="PASS" endtime="20170512 23:13:53.535"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:13:53.535">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:13:53.535">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:13:53.535">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:13:53.535" status="PASS" endtime="20170512 23:13:53.536"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:53.536">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:53.259" status="PASS" endtime="20170512 23:13:53.536"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:13:53.536">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:13:53.259" status="PASS" endtime="20170512 23:13:53.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:13:53.537">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:13:53.537" status="FAIL" endtime="20170512 23:13:53.537"></status>
</kw>
<status starttime="20170512 23:13:53.258" status="FAIL" endtime="20170512 23:13:53.537"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:03.544">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:14:03.544" status="PASS" endtime="20170512 23:14:03.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.546">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:14:03.545" status="PASS" endtime="20170512 23:14:03.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.547">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:14:03.546" status="PASS" endtime="20170512 23:14:03.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:14:03.547" status="PASS" endtime="20170512 23:14:03.548"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:03.742">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:14:03.548" status="PASS" endtime="20170512 23:14:03.742"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:03.742">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:14:03.742">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:03.548" status="PASS" endtime="20170512 23:14:03.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:03.743">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:03.743" status="PASS" endtime="20170512 23:14:03.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:03.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:03.743" status="PASS" endtime="20170512 23:14:03.744"></status>
</kw>
<status starttime="20170512 23:14:03.543" status="PASS" endtime="20170512 23:14:03.744"></status>
</kw>
<status starttime="20170512 23:14:03.542" status="PASS" endtime="20170512 23:14:03.744"></status>
</kw>
<status starttime="20170512 23:14:03.541" status="PASS" endtime="20170512 23:14:03.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.744">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:14:03.744" status="PASS" endtime="20170512 23:14:03.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.747">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:03.746" status="PASS" endtime="20170512 23:14:03.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:03.747">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:03.747" status="PASS" endtime="20170512 23:14:03.748"></status>
</kw>
<status starttime="20170512 23:14:03.747" status="PASS" endtime="20170512 23:14:03.748"></status>
</kw>
<status starttime="20170512 23:14:03.745" status="PASS" endtime="20170512 23:14:03.748"></status>
</kw>
<status starttime="20170512 23:14:03.745" status="PASS" endtime="20170512 23:14:03.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.815">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:14:03.816">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:03.748" status="PASS" endtime="20170512 23:14:03.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.817">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:03.817" status="PASS" endtime="20170512 23:14:03.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:03.818">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:03.818" status="PASS" endtime="20170512 23:14:03.818"></status>
</kw>
<status starttime="20170512 23:14:03.818" status="PASS" endtime="20170512 23:14:03.818"></status>
</kw>
<status starttime="20170512 23:14:03.816" status="PASS" endtime="20170512 23:14:03.819"></status>
</kw>
<status starttime="20170512 23:14:03.816" status="PASS" endtime="20170512 23:14:03.819"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:03.819">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:03.540" status="PASS" endtime="20170512 23:14:03.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:03.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:03.819" status="PASS" endtime="20170512 23:14:03.820"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:03.820">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:14:03.820">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:14:03.821">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:14:03.820" status="PASS" endtime="20170512 23:14:03.821"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:03.821">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:03.539" status="PASS" endtime="20170512 23:14:03.821"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:03.821">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:03.539" status="PASS" endtime="20170512 23:14:03.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:14:03.822">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:14:03.821" status="FAIL" endtime="20170512 23:14:03.822"></status>
</kw>
<status starttime="20170512 23:14:03.538" status="FAIL" endtime="20170512 23:14:03.822"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:13.827">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:14:13.827" status="PASS" endtime="20170512 23:14:13.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:13.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:14:13.828" status="PASS" endtime="20170512 23:14:13.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:13.829">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:14:13.828" status="PASS" endtime="20170512 23:14:13.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:13.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:14:13.829" status="PASS" endtime="20170512 23:14:13.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:14.067">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:14:13.830" status="PASS" endtime="20170512 23:14:14.067"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:14.067">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:14:14.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:13.830" status="PASS" endtime="20170512 23:14:14.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:14.068">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:14.068" status="PASS" endtime="20170512 23:14:14.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:14.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:14.069" status="PASS" endtime="20170512 23:14:14.069"></status>
</kw>
<status starttime="20170512 23:14:13.826" status="PASS" endtime="20170512 23:14:14.069"></status>
</kw>
<status starttime="20170512 23:14:13.825" status="PASS" endtime="20170512 23:14:14.069"></status>
</kw>
<status starttime="20170512 23:14:13.825" status="PASS" endtime="20170512 23:14:14.069"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:14.070">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:14:14.070" status="PASS" endtime="20170512 23:14:14.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:14.072">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:14.071" status="PASS" endtime="20170512 23:14:14.072"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:14.073">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:14.073" status="PASS" endtime="20170512 23:14:14.073"></status>
</kw>
<status starttime="20170512 23:14:14.072" status="PASS" endtime="20170512 23:14:14.073"></status>
</kw>
<status starttime="20170512 23:14:14.071" status="PASS" endtime="20170512 23:14:14.073"></status>
</kw>
<status starttime="20170512 23:14:14.070" status="PASS" endtime="20170512 23:14:14.073"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:14.141">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:14:14.141">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:14.073" status="PASS" endtime="20170512 23:14:14.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:14.143">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:14.142" status="PASS" endtime="20170512 23:14:14.143"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:14.146">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:14.145" status="PASS" endtime="20170512 23:14:14.146"></status>
</kw>
<status starttime="20170512 23:14:14.143" status="PASS" endtime="20170512 23:14:14.146"></status>
</kw>
<status starttime="20170512 23:14:14.142" status="PASS" endtime="20170512 23:14:14.146"></status>
</kw>
<status starttime="20170512 23:14:14.141" status="PASS" endtime="20170512 23:14:14.146"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:14.146">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:13.824" status="PASS" endtime="20170512 23:14:14.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:14.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:14.147" status="PASS" endtime="20170512 23:14:14.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:14.147">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:14:14.148">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:14:14.148">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:14:14.147" status="PASS" endtime="20170512 23:14:14.148"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:14.148">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:13.823" status="PASS" endtime="20170512 23:14:14.148"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:14.148">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:13.823" status="PASS" endtime="20170512 23:14:14.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:14:14.149">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:14:14.148" status="FAIL" endtime="20170512 23:14:14.149"></status>
</kw>
<status starttime="20170512 23:14:13.822" status="FAIL" endtime="20170512 23:14:14.149"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:24.154">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:14:24.154" status="PASS" endtime="20170512 23:14:24.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.155">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:14:24.155" status="PASS" endtime="20170512 23:14:24.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.156">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:14:24.155" status="PASS" endtime="20170512 23:14:24.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.156">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:14:24.156" status="PASS" endtime="20170512 23:14:24.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:24.340">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:14:24.157" status="PASS" endtime="20170512 23:14:24.340"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:24.340">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:14:24.340">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:24.157" status="PASS" endtime="20170512 23:14:24.341"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:24.341">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:24.341" status="PASS" endtime="20170512 23:14:24.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:24.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:24.342" status="PASS" endtime="20170512 23:14:24.342"></status>
</kw>
<status starttime="20170512 23:14:24.153" status="PASS" endtime="20170512 23:14:24.343"></status>
</kw>
<status starttime="20170512 23:14:24.153" status="PASS" endtime="20170512 23:14:24.343"></status>
</kw>
<status starttime="20170512 23:14:24.152" status="PASS" endtime="20170512 23:14:24.343"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.343">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:14:24.343" status="PASS" endtime="20170512 23:14:24.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.345">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:24.345" status="PASS" endtime="20170512 23:14:24.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:24.346">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:24.346" status="PASS" endtime="20170512 23:14:24.346"></status>
</kw>
<status starttime="20170512 23:14:24.346" status="PASS" endtime="20170512 23:14:24.347"></status>
</kw>
<status starttime="20170512 23:14:24.344" status="PASS" endtime="20170512 23:14:24.347"></status>
</kw>
<status starttime="20170512 23:14:24.344" status="PASS" endtime="20170512 23:14:24.347"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.440">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:14:24.441">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:24.347" status="PASS" endtime="20170512 23:14:24.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.442">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:24.442" status="PASS" endtime="20170512 23:14:24.442"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:24.443">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:24.443" status="PASS" endtime="20170512 23:14:24.443"></status>
</kw>
<status starttime="20170512 23:14:24.442" status="PASS" endtime="20170512 23:14:24.443"></status>
</kw>
<status starttime="20170512 23:14:24.441" status="PASS" endtime="20170512 23:14:24.444"></status>
</kw>
<status starttime="20170512 23:14:24.441" status="PASS" endtime="20170512 23:14:24.444"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:24.444">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:24.151" status="PASS" endtime="20170512 23:14:24.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:24.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:24.444" status="PASS" endtime="20170512 23:14:24.444"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:24.445">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:14:24.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:14:24.445">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:14:24.445" status="PASS" endtime="20170512 23:14:24.445"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:24.445">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:24.151" status="PASS" endtime="20170512 23:14:24.445"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:24.446">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:24.150" status="PASS" endtime="20170512 23:14:24.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:14:24.446">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:14:24.446" status="FAIL" endtime="20170512 23:14:24.446"></status>
</kw>
<status starttime="20170512 23:14:24.150" status="FAIL" endtime="20170512 23:14:24.447"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:34.452">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:14:34.451" status="PASS" endtime="20170512 23:14:34.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:14:34.453" status="PASS" endtime="20170512 23:14:34.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.455">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:14:34.453" status="PASS" endtime="20170512 23:14:34.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:14:34.455" status="PASS" endtime="20170512 23:14:34.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:34.676">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:14:34.456" status="PASS" endtime="20170512 23:14:34.676"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:34.676">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:14:34.676">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:34.456" status="PASS" endtime="20170512 23:14:34.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:34.677">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:34.676" status="PASS" endtime="20170512 23:14:34.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:34.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:34.677" status="PASS" endtime="20170512 23:14:34.678"></status>
</kw>
<status starttime="20170512 23:14:34.450" status="PASS" endtime="20170512 23:14:34.678"></status>
</kw>
<status starttime="20170512 23:14:34.450" status="PASS" endtime="20170512 23:14:34.678"></status>
</kw>
<status starttime="20170512 23:14:34.449" status="PASS" endtime="20170512 23:14:34.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.678">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:14:34.678" status="PASS" endtime="20170512 23:14:34.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.681">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:34.680" status="PASS" endtime="20170512 23:14:34.681"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:34.682">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:34.681" status="PASS" endtime="20170512 23:14:34.682"></status>
</kw>
<status starttime="20170512 23:14:34.681" status="PASS" endtime="20170512 23:14:34.682"></status>
</kw>
<status starttime="20170512 23:14:34.679" status="PASS" endtime="20170512 23:14:34.682"></status>
</kw>
<status starttime="20170512 23:14:34.679" status="PASS" endtime="20170512 23:14:34.682"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.750">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:14:34.750">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:34.682" status="PASS" endtime="20170512 23:14:34.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.753">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:34.752" status="PASS" endtime="20170512 23:14:34.753"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:34.754">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:34.754" status="PASS" endtime="20170512 23:14:34.754"></status>
</kw>
<status starttime="20170512 23:14:34.753" status="PASS" endtime="20170512 23:14:34.754"></status>
</kw>
<status starttime="20170512 23:14:34.751" status="PASS" endtime="20170512 23:14:34.755"></status>
</kw>
<status starttime="20170512 23:14:34.751" status="PASS" endtime="20170512 23:14:34.755"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:34.755">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:34.449" status="PASS" endtime="20170512 23:14:34.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:34.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:34.755" status="PASS" endtime="20170512 23:14:34.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:34.756">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:14:34.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:14:34.756">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:14:34.756" status="PASS" endtime="20170512 23:14:34.756"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:34.757">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:34.448" status="PASS" endtime="20170512 23:14:34.757"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:34.757">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:14:34.448" status="PASS" endtime="20170512 23:14:34.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:14:34.757">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:14:34.757" status="FAIL" endtime="20170512 23:14:34.757"></status>
</kw>
<status starttime="20170512 23:14:34.447" status="FAIL" endtime="20170512 23:14:34.758"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:44.763">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:14:44.763" status="PASS" endtime="20170512 23:14:44.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:44.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:14:44.764" status="PASS" endtime="20170512 23:14:44.764"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:44.765">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:14:44.764" status="PASS" endtime="20170512 23:14:44.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:44.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:14:44.765" status="PASS" endtime="20170512 23:14:44.765"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:45.610">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:14:44.766" status="PASS" endtime="20170512 23:14:45.610"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:45.611">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:14:45.611">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:44.766" status="PASS" endtime="20170512 23:14:45.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:45.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:45.611" status="PASS" endtime="20170512 23:14:45.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:45.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:45.612" status="PASS" endtime="20170512 23:14:45.612"></status>
</kw>
<status starttime="20170512 23:14:44.762" status="PASS" endtime="20170512 23:14:45.613"></status>
</kw>
<status starttime="20170512 23:14:44.761" status="PASS" endtime="20170512 23:14:45.613"></status>
</kw>
<status starttime="20170512 23:14:44.761" status="PASS" endtime="20170512 23:14:45.613"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:45.613">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:14:45.613" status="PASS" endtime="20170512 23:14:45.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:45.616">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:45.615" status="PASS" endtime="20170512 23:14:45.616"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:45.616">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:45.616" status="PASS" endtime="20170512 23:14:45.617"></status>
</kw>
<status starttime="20170512 23:14:45.616" status="PASS" endtime="20170512 23:14:45.617"></status>
</kw>
<status starttime="20170512 23:14:45.614" status="PASS" endtime="20170512 23:14:45.617"></status>
</kw>
<status starttime="20170512 23:14:45.614" status="PASS" endtime="20170512 23:14:45.617"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:46.185">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:14:46.185">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:45.617" status="PASS" endtime="20170512 23:14:46.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:46.187">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:46.187" status="PASS" endtime="20170512 23:14:46.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:46.188">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:14:46.188" status="PASS" endtime="20170512 23:14:46.188"></status>
</kw>
<status starttime="20170512 23:14:46.187" status="PASS" endtime="20170512 23:14:46.189"></status>
</kw>
<status starttime="20170512 23:14:46.186" status="PASS" endtime="20170512 23:14:46.189"></status>
</kw>
<status starttime="20170512 23:14:46.186" status="PASS" endtime="20170512 23:14:46.189"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:46.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:44.760" status="PASS" endtime="20170512 23:14:46.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:46.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:46.189" status="PASS" endtime="20170512 23:14:46.190"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:46.190">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:14:46.190">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:14:46.190">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:14:46.190" status="PASS" endtime="20170512 23:14:46.190"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:46.191">${state} = Off</msg>
<status starttime="20170512 23:14:44.760" status="PASS" endtime="20170512 23:14:46.191"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:46.191">${boot_progress} = Off</msg>
<status starttime="20170512 23:14:44.759" status="PASS" endtime="20170512 23:14:46.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:14:46.192">Off != FW Progress, Starting OS</msg>
<status starttime="20170512 23:14:46.191" status="FAIL" endtime="20170512 23:14:46.192"></status>
</kw>
<status starttime="20170512 23:14:44.758" status="FAIL" endtime="20170512 23:14:46.192"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:56.198">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:14:56.197" status="PASS" endtime="20170512 23:14:56.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:56.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:14:56.199" status="PASS" endtime="20170512 23:14:56.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:56.200">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:14:56.199" status="PASS" endtime="20170512 23:14:56.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:56.200">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:14:56.200" status="PASS" endtime="20170512 23:14:56.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:59.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:14:56.201" status="PASS" endtime="20170512 23:14:59.189"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:14:59.189">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:14:59.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:56.201" status="PASS" endtime="20170512 23:14:59.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:59.190">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:59.190" status="PASS" endtime="20170512 23:14:59.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:59.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:14:59.191" status="PASS" endtime="20170512 23:14:59.191"></status>
</kw>
<status starttime="20170512 23:14:56.196" status="PASS" endtime="20170512 23:14:59.191"></status>
</kw>
<status starttime="20170512 23:14:56.196" status="PASS" endtime="20170512 23:14:59.191"></status>
</kw>
<status starttime="20170512 23:14:56.195" status="PASS" endtime="20170512 23:14:59.191"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:59.192">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:14:59.192" status="PASS" endtime="20170512 23:14:59.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:14:59.194">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:59.193" status="PASS" endtime="20170512 23:14:59.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:14:59.195">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:14:59.195" status="PASS" endtime="20170512 23:14:59.195"></status>
</kw>
<status starttime="20170512 23:14:59.194" status="PASS" endtime="20170512 23:14:59.195"></status>
</kw>
<status starttime="20170512 23:14:59.193" status="PASS" endtime="20170512 23:14:59.195"></status>
</kw>
<status starttime="20170512 23:14:59.192" status="PASS" endtime="20170512 23:14:59.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:00.293">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:15:00.293">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:59.196" status="PASS" endtime="20170512 23:15:00.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:00.295">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:00.294" status="PASS" endtime="20170512 23:15:00.295"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:00.296">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:00.296" status="PASS" endtime="20170512 23:15:00.296"></status>
</kw>
<status starttime="20170512 23:15:00.295" status="PASS" endtime="20170512 23:15:00.296"></status>
</kw>
<status starttime="20170512 23:15:00.294" status="PASS" endtime="20170512 23:15:00.297"></status>
</kw>
<status starttime="20170512 23:15:00.293" status="PASS" endtime="20170512 23:15:00.297"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:00.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:14:56.195" status="PASS" endtime="20170512 23:15:00.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:00.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:00.297" status="PASS" endtime="20170512 23:15:00.298"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:00.298">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:15:00.298">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:15:00.298">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:15:00.298" status="PASS" endtime="20170512 23:15:00.298"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:00.299">${state} = Off</msg>
<status starttime="20170512 23:14:56.194" status="PASS" endtime="20170512 23:15:00.299"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:00.299">${boot_progress} = Off</msg>
<status starttime="20170512 23:14:56.194" status="PASS" endtime="20170512 23:15:00.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:15:00.300">Off != FW Progress, Starting OS</msg>
<status starttime="20170512 23:15:00.299" status="FAIL" endtime="20170512 23:15:00.300"></status>
</kw>
<status starttime="20170512 23:14:56.193" status="FAIL" endtime="20170512 23:15:00.300"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:10.304">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:15:10.304" status="PASS" endtime="20170512 23:15:10.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.305">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:15:10.305" status="PASS" endtime="20170512 23:15:10.305"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.306">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:15:10.306" status="PASS" endtime="20170512 23:15:10.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:15:10.306" status="PASS" endtime="20170512 23:15:10.307"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:10.753">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:15:10.307" status="PASS" endtime="20170512 23:15:10.753"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:10.753">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:15:10.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:10.307" status="PASS" endtime="20170512 23:15:10.754"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:10.754">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:10.754" status="PASS" endtime="20170512 23:15:10.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:10.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:10.755" status="PASS" endtime="20170512 23:15:10.755"></status>
</kw>
<status starttime="20170512 23:15:10.304" status="PASS" endtime="20170512 23:15:10.755"></status>
</kw>
<status starttime="20170512 23:15:10.303" status="PASS" endtime="20170512 23:15:10.755"></status>
</kw>
<status starttime="20170512 23:15:10.302" status="PASS" endtime="20170512 23:15:10.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.756">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:15:10.755" status="PASS" endtime="20170512 23:15:10.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.758">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:10.757" status="PASS" endtime="20170512 23:15:10.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:10.760">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:10.759" status="PASS" endtime="20170512 23:15:10.760"></status>
</kw>
<status starttime="20170512 23:15:10.759" status="PASS" endtime="20170512 23:15:10.760"></status>
</kw>
<status starttime="20170512 23:15:10.757" status="PASS" endtime="20170512 23:15:10.760"></status>
</kw>
<status starttime="20170512 23:15:10.756" status="PASS" endtime="20170512 23:15:10.760"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.826">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:15:10.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:10.760" status="PASS" endtime="20170512 23:15:10.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.828">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:10.827" status="PASS" endtime="20170512 23:15:10.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:10.829">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:10.829" status="PASS" endtime="20170512 23:15:10.829"></status>
</kw>
<status starttime="20170512 23:15:10.828" status="PASS" endtime="20170512 23:15:10.829"></status>
</kw>
<status starttime="20170512 23:15:10.827" status="PASS" endtime="20170512 23:15:10.830"></status>
</kw>
<status starttime="20170512 23:15:10.827" status="PASS" endtime="20170512 23:15:10.830"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:10.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:10.302" status="PASS" endtime="20170512 23:15:10.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:10.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:10.830" status="PASS" endtime="20170512 23:15:10.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:10.831">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:15:10.831">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:15:10.831">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:15:10.831" status="PASS" endtime="20170512 23:15:10.831"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:10.832">${state} = Off</msg>
<status starttime="20170512 23:15:10.301" status="PASS" endtime="20170512 23:15:10.832"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:10.832">${boot_progress} = Off</msg>
<status starttime="20170512 23:15:10.301" status="PASS" endtime="20170512 23:15:10.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:15:10.832">Off != FW Progress, Starting OS</msg>
<status starttime="20170512 23:15:10.832" status="FAIL" endtime="20170512 23:15:10.832"></status>
</kw>
<status starttime="20170512 23:15:10.300" status="FAIL" endtime="20170512 23:15:10.833"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:20.838">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:15:20.837" status="PASS" endtime="20170512 23:15:20.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:20.839">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:15:20.839" status="PASS" endtime="20170512 23:15:20.839"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:20.840">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:15:20.839" status="PASS" endtime="20170512 23:15:20.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:20.840">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:15:20.840" status="PASS" endtime="20170512 23:15:20.840"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:21.581">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:15:20.841" status="PASS" endtime="20170512 23:15:21.581"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:21.581">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:15:21.581">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:20.841" status="PASS" endtime="20170512 23:15:21.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:21.582">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:21.581" status="PASS" endtime="20170512 23:15:21.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:21.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:21.582" status="PASS" endtime="20170512 23:15:21.582"></status>
</kw>
<status starttime="20170512 23:15:20.836" status="PASS" endtime="20170512 23:15:21.583"></status>
</kw>
<status starttime="20170512 23:15:20.836" status="PASS" endtime="20170512 23:15:21.583"></status>
</kw>
<status starttime="20170512 23:15:20.835" status="PASS" endtime="20170512 23:15:21.583"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:21.583">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:15:21.583" status="PASS" endtime="20170512 23:15:21.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:21.585">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:21.585" status="PASS" endtime="20170512 23:15:21.585"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:21.586">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:21.586" status="PASS" endtime="20170512 23:15:21.586"></status>
</kw>
<status starttime="20170512 23:15:21.585" status="PASS" endtime="20170512 23:15:21.586"></status>
</kw>
<status starttime="20170512 23:15:21.584" status="PASS" endtime="20170512 23:15:21.587"></status>
</kw>
<status starttime="20170512 23:15:21.584" status="PASS" endtime="20170512 23:15:21.587"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:21.749">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:15:21.749">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:21.587" status="PASS" endtime="20170512 23:15:21.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:21.751">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:21.750" status="PASS" endtime="20170512 23:15:21.751"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:21.752">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:21.752" status="PASS" endtime="20170512 23:15:21.752"></status>
</kw>
<status starttime="20170512 23:15:21.751" status="PASS" endtime="20170512 23:15:21.752"></status>
</kw>
<status starttime="20170512 23:15:21.750" status="PASS" endtime="20170512 23:15:21.752"></status>
</kw>
<status starttime="20170512 23:15:21.749" status="PASS" endtime="20170512 23:15:21.752"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:21.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:20.835" status="PASS" endtime="20170512 23:15:21.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:21.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:21.753" status="PASS" endtime="20170512 23:15:21.753"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:21.754">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:15:21.754">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:15:21.754">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:15:21.754" status="PASS" endtime="20170512 23:15:21.754"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:21.754">${state} = Off</msg>
<status starttime="20170512 23:15:20.834" status="PASS" endtime="20170512 23:15:21.754"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:21.755">${boot_progress} = Off</msg>
<status starttime="20170512 23:15:20.834" status="PASS" endtime="20170512 23:15:21.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:15:21.755">Off != FW Progress, Starting OS</msg>
<status starttime="20170512 23:15:21.755" status="FAIL" endtime="20170512 23:15:21.755"></status>
</kw>
<status starttime="20170512 23:15:20.833" status="FAIL" endtime="20170512 23:15:21.755"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:31.760">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:15:31.760" status="PASS" endtime="20170512 23:15:31.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:31.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:15:31.761" status="PASS" endtime="20170512 23:15:31.761"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:31.762">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:15:31.761" status="PASS" endtime="20170512 23:15:31.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:31.762">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:15:31.762" status="PASS" endtime="20170512 23:15:31.762"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:32.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:15:31.763" status="PASS" endtime="20170512 23:15:32.162"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:32.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:15:32.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:31.762" status="PASS" endtime="20170512 23:15:32.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:32.163">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:32.162" status="PASS" endtime="20170512 23:15:32.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:32.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:32.163" status="PASS" endtime="20170512 23:15:32.164"></status>
</kw>
<status starttime="20170512 23:15:31.759" status="PASS" endtime="20170512 23:15:32.164"></status>
</kw>
<status starttime="20170512 23:15:31.759" status="PASS" endtime="20170512 23:15:32.164"></status>
</kw>
<status starttime="20170512 23:15:31.758" status="PASS" endtime="20170512 23:15:32.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:32.164">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:15:32.164" status="PASS" endtime="20170512 23:15:32.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:32.167">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:32.166" status="PASS" endtime="20170512 23:15:32.167"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:32.167">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:32.167" status="PASS" endtime="20170512 23:15:32.168"></status>
</kw>
<status starttime="20170512 23:15:32.167" status="PASS" endtime="20170512 23:15:32.168"></status>
</kw>
<status starttime="20170512 23:15:32.165" status="PASS" endtime="20170512 23:15:32.168"></status>
</kw>
<status starttime="20170512 23:15:32.165" status="PASS" endtime="20170512 23:15:32.168"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:32.257">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:15:32.257">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:32.168" status="PASS" endtime="20170512 23:15:32.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:32.258">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:32.258" status="PASS" endtime="20170512 23:15:32.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:32.259">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:32.259" status="PASS" endtime="20170512 23:15:32.259"></status>
</kw>
<status starttime="20170512 23:15:32.259" status="PASS" endtime="20170512 23:15:32.260"></status>
</kw>
<status starttime="20170512 23:15:32.257" status="PASS" endtime="20170512 23:15:32.260"></status>
</kw>
<status starttime="20170512 23:15:32.257" status="PASS" endtime="20170512 23:15:32.260"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:32.260">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:31.757" status="PASS" endtime="20170512 23:15:32.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:32.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:32.260" status="PASS" endtime="20170512 23:15:32.261"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:32.261">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:15:32.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:15:32.261">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:15:32.261" status="PASS" endtime="20170512 23:15:32.261"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:32.262">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:15:31.757" status="PASS" endtime="20170512 23:15:32.262"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:32.262">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:15:31.756" status="PASS" endtime="20170512 23:15:32.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:15:32.263">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:15:32.262" status="FAIL" endtime="20170512 23:15:32.263"></status>
</kw>
<status starttime="20170512 23:15:31.756" status="FAIL" endtime="20170512 23:15:32.263"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:42.268">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:15:42.267" status="PASS" endtime="20170512 23:15:42.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.269">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:15:42.268" status="PASS" endtime="20170512 23:15:42.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.269">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:15:42.269" status="PASS" endtime="20170512 23:15:42.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.270">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:15:42.270" status="PASS" endtime="20170512 23:15:42.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:42.501">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:15:42.271" status="PASS" endtime="20170512 23:15:42.501"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:42.501">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:15:42.501">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:42.270" status="PASS" endtime="20170512 23:15:42.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:42.502">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:42.501" status="PASS" endtime="20170512 23:15:42.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:42.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:42.502" status="PASS" endtime="20170512 23:15:42.503"></status>
</kw>
<status starttime="20170512 23:15:42.266" status="PASS" endtime="20170512 23:15:42.503"></status>
</kw>
<status starttime="20170512 23:15:42.266" status="PASS" endtime="20170512 23:15:42.503"></status>
</kw>
<status starttime="20170512 23:15:42.265" status="PASS" endtime="20170512 23:15:42.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.503">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:15:42.503" status="PASS" endtime="20170512 23:15:42.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.506">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:42.505" status="PASS" endtime="20170512 23:15:42.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:42.507">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:42.507" status="PASS" endtime="20170512 23:15:42.508"></status>
</kw>
<status starttime="20170512 23:15:42.506" status="PASS" endtime="20170512 23:15:42.508"></status>
</kw>
<status starttime="20170512 23:15:42.504" status="PASS" endtime="20170512 23:15:42.508"></status>
</kw>
<status starttime="20170512 23:15:42.504" status="PASS" endtime="20170512 23:15:42.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.607">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:15:42.607">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:42.508" status="PASS" endtime="20170512 23:15:42.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.609">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:42.609" status="PASS" endtime="20170512 23:15:42.609"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:42.612">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:42.612" status="PASS" endtime="20170512 23:15:42.613"></status>
</kw>
<status starttime="20170512 23:15:42.610" status="PASS" endtime="20170512 23:15:42.613"></status>
</kw>
<status starttime="20170512 23:15:42.608" status="PASS" endtime="20170512 23:15:42.613"></status>
</kw>
<status starttime="20170512 23:15:42.608" status="PASS" endtime="20170512 23:15:42.613"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:42.613">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:42.265" status="PASS" endtime="20170512 23:15:42.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:42.614">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:42.613" status="PASS" endtime="20170512 23:15:42.614"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:42.614">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:15:42.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:15:42.615">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:15:42.614" status="PASS" endtime="20170512 23:15:42.615"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:42.615">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:15:42.264" status="PASS" endtime="20170512 23:15:42.615"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:42.615">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:15:42.264" status="PASS" endtime="20170512 23:15:42.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:15:42.616">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:15:42.615" status="FAIL" endtime="20170512 23:15:42.616"></status>
</kw>
<status starttime="20170512 23:15:42.263" status="FAIL" endtime="20170512 23:15:42.616"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:52.621">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:15:52.620" status="PASS" endtime="20170512 23:15:52.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.622">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:15:52.621" status="PASS" endtime="20170512 23:15:52.622"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.622">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:15:52.622" status="PASS" endtime="20170512 23:15:52.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.623">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:15:52.623" status="PASS" endtime="20170512 23:15:52.623"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:52.807">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:15:52.624" status="PASS" endtime="20170512 23:15:52.807"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:52.807">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:15:52.807">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:52.624" status="PASS" endtime="20170512 23:15:52.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:52.808">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:52.807" status="PASS" endtime="20170512 23:15:52.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:52.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:52.808" status="PASS" endtime="20170512 23:15:52.809"></status>
</kw>
<status starttime="20170512 23:15:52.620" status="PASS" endtime="20170512 23:15:52.809"></status>
</kw>
<status starttime="20170512 23:15:52.619" status="PASS" endtime="20170512 23:15:52.809"></status>
</kw>
<status starttime="20170512 23:15:52.619" status="PASS" endtime="20170512 23:15:52.809"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.810">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:15:52.809" status="PASS" endtime="20170512 23:15:52.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.812">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:52.811" status="PASS" endtime="20170512 23:15:52.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:52.813">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:15:52.813" status="PASS" endtime="20170512 23:15:52.813"></status>
</kw>
<status starttime="20170512 23:15:52.812" status="PASS" endtime="20170512 23:15:52.813"></status>
</kw>
<status starttime="20170512 23:15:52.811" status="PASS" endtime="20170512 23:15:52.813"></status>
</kw>
<status starttime="20170512 23:15:52.810" status="PASS" endtime="20170512 23:15:52.813"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.882">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:15:52.883">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:52.814" status="PASS" endtime="20170512 23:15:52.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.884">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:52.884" status="PASS" endtime="20170512 23:15:52.884"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:52.885">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:15:52.885" status="PASS" endtime="20170512 23:15:52.885"></status>
</kw>
<status starttime="20170512 23:15:52.884" status="PASS" endtime="20170512 23:15:52.885"></status>
</kw>
<status starttime="20170512 23:15:52.883" status="PASS" endtime="20170512 23:15:52.885"></status>
</kw>
<status starttime="20170512 23:15:52.883" status="PASS" endtime="20170512 23:15:52.886"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:52.886">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:15:52.618" status="PASS" endtime="20170512 23:15:52.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:15:52.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:15:52.886" status="PASS" endtime="20170512 23:15:52.886"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:15:52.887">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:15:52.887">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:15:52.887">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:15:52.887" status="PASS" endtime="20170512 23:15:52.887"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:52.887">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:15:52.618" status="PASS" endtime="20170512 23:15:52.887"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:15:52.888">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:15:52.617" status="PASS" endtime="20170512 23:15:52.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:15:52.888">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:15:52.888" status="FAIL" endtime="20170512 23:15:52.888"></status>
</kw>
<status starttime="20170512 23:15:52.616" status="FAIL" endtime="20170512 23:15:52.889"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:02.894">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:16:02.893" status="PASS" endtime="20170512 23:16:02.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:02.895">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:16:02.895" status="PASS" endtime="20170512 23:16:02.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:02.896">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:16:02.895" status="PASS" endtime="20170512 23:16:02.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:02.896">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:16:02.896" status="PASS" endtime="20170512 23:16:02.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:03.076">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:16:02.897" status="PASS" endtime="20170512 23:16:03.076"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:03.076">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:16:03.076">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:02.897" status="PASS" endtime="20170512 23:16:03.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:03.077">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:03.077" status="PASS" endtime="20170512 23:16:03.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:03.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:03.077" status="PASS" endtime="20170512 23:16:03.078"></status>
</kw>
<status starttime="20170512 23:16:02.893" status="PASS" endtime="20170512 23:16:03.078"></status>
</kw>
<status starttime="20170512 23:16:02.892" status="PASS" endtime="20170512 23:16:03.078"></status>
</kw>
<status starttime="20170512 23:16:02.891" status="PASS" endtime="20170512 23:16:03.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:03.079">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:16:03.078" status="PASS" endtime="20170512 23:16:03.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:03.081">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:03.080" status="PASS" endtime="20170512 23:16:03.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:03.082">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:03.082" status="PASS" endtime="20170512 23:16:03.082"></status>
</kw>
<status starttime="20170512 23:16:03.081" status="PASS" endtime="20170512 23:16:03.082"></status>
</kw>
<status starttime="20170512 23:16:03.079" status="PASS" endtime="20170512 23:16:03.082"></status>
</kw>
<status starttime="20170512 23:16:03.079" status="PASS" endtime="20170512 23:16:03.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:03.383">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:16:03.384">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:03.082" status="PASS" endtime="20170512 23:16:03.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:03.385">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:03.385" status="PASS" endtime="20170512 23:16:03.385"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:03.386">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:03.386" status="PASS" endtime="20170512 23:16:03.387"></status>
</kw>
<status starttime="20170512 23:16:03.386" status="PASS" endtime="20170512 23:16:03.387"></status>
</kw>
<status starttime="20170512 23:16:03.384" status="PASS" endtime="20170512 23:16:03.387"></status>
</kw>
<status starttime="20170512 23:16:03.384" status="PASS" endtime="20170512 23:16:03.387"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:03.387">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:02.891" status="PASS" endtime="20170512 23:16:03.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:03.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:03.388" status="PASS" endtime="20170512 23:16:03.388"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:03.389">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:16:03.389">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:16:03.389">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:16:03.388" status="PASS" endtime="20170512 23:16:03.389"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:03.389">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:02.890" status="PASS" endtime="20170512 23:16:03.389"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:03.389">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:02.890" status="PASS" endtime="20170512 23:16:03.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:16:03.390">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:16:03.390" status="FAIL" endtime="20170512 23:16:03.390"></status>
</kw>
<status starttime="20170512 23:16:02.889" status="FAIL" endtime="20170512 23:16:03.390"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:13.395">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:16:13.395" status="PASS" endtime="20170512 23:16:13.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.396">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:16:13.396" status="PASS" endtime="20170512 23:16:13.396"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.397">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:16:13.396" status="PASS" endtime="20170512 23:16:13.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.397">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:16:13.397" status="PASS" endtime="20170512 23:16:13.397"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:13.579">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:16:13.398" status="PASS" endtime="20170512 23:16:13.579"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:13.579">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:16:13.579">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:13.398" status="PASS" endtime="20170512 23:16:13.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:13.580">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:13.579" status="PASS" endtime="20170512 23:16:13.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:13.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:13.580" status="PASS" endtime="20170512 23:16:13.581"></status>
</kw>
<status starttime="20170512 23:16:13.394" status="PASS" endtime="20170512 23:16:13.581"></status>
</kw>
<status starttime="20170512 23:16:13.394" status="PASS" endtime="20170512 23:16:13.581"></status>
</kw>
<status starttime="20170512 23:16:13.393" status="PASS" endtime="20170512 23:16:13.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.582">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:16:13.581" status="PASS" endtime="20170512 23:16:13.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.584">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:13.583" status="PASS" endtime="20170512 23:16:13.584"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:13.585">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:13.584" status="PASS" endtime="20170512 23:16:13.585"></status>
</kw>
<status starttime="20170512 23:16:13.584" status="PASS" endtime="20170512 23:16:13.585"></status>
</kw>
<status starttime="20170512 23:16:13.582" status="PASS" endtime="20170512 23:16:13.585"></status>
</kw>
<status starttime="20170512 23:16:13.582" status="PASS" endtime="20170512 23:16:13.585"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.651">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:16:13.651">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:13.585" status="PASS" endtime="20170512 23:16:13.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.654">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:13.653" status="PASS" endtime="20170512 23:16:13.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:13.655">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:13.655" status="PASS" endtime="20170512 23:16:13.655"></status>
</kw>
<status starttime="20170512 23:16:13.654" status="PASS" endtime="20170512 23:16:13.655"></status>
</kw>
<status starttime="20170512 23:16:13.652" status="PASS" endtime="20170512 23:16:13.655"></status>
</kw>
<status starttime="20170512 23:16:13.652" status="PASS" endtime="20170512 23:16:13.655"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:13.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:13.392" status="PASS" endtime="20170512 23:16:13.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:13.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:13.656" status="PASS" endtime="20170512 23:16:13.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:13.657">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:16:13.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:16:13.657">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:16:13.656" status="PASS" endtime="20170512 23:16:13.657"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:13.657">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:13.392" status="PASS" endtime="20170512 23:16:13.657"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:13.657">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:13.391" status="PASS" endtime="20170512 23:16:13.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:16:13.658">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:16:13.658" status="FAIL" endtime="20170512 23:16:13.658"></status>
</kw>
<status starttime="20170512 23:16:13.391" status="FAIL" endtime="20170512 23:16:13.659"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:23.664">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:16:23.664" status="PASS" endtime="20170512 23:16:23.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:16:23.665" status="PASS" endtime="20170512 23:16:23.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.666">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:16:23.665" status="PASS" endtime="20170512 23:16:23.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.666">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:16:23.666" status="PASS" endtime="20170512 23:16:23.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:23.843">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:16:23.667" status="PASS" endtime="20170512 23:16:23.844"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:23.844">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:16:23.844">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:23.667" status="PASS" endtime="20170512 23:16:23.844"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:23.844">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:23.844" status="PASS" endtime="20170512 23:16:23.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:23.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:23.845" status="PASS" endtime="20170512 23:16:23.845"></status>
</kw>
<status starttime="20170512 23:16:23.663" status="PASS" endtime="20170512 23:16:23.845"></status>
</kw>
<status starttime="20170512 23:16:23.662" status="PASS" endtime="20170512 23:16:23.845"></status>
</kw>
<status starttime="20170512 23:16:23.662" status="PASS" endtime="20170512 23:16:23.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.846">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:16:23.846" status="PASS" endtime="20170512 23:16:23.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.848">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:23.847" status="PASS" endtime="20170512 23:16:23.848"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:23.849">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:23.849" status="PASS" endtime="20170512 23:16:23.849"></status>
</kw>
<status starttime="20170512 23:16:23.848" status="PASS" endtime="20170512 23:16:23.849"></status>
</kw>
<status starttime="20170512 23:16:23.847" status="PASS" endtime="20170512 23:16:23.849"></status>
</kw>
<status starttime="20170512 23:16:23.846" status="PASS" endtime="20170512 23:16:23.849"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.915">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:16:23.915">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:23.850" status="PASS" endtime="20170512 23:16:23.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.917">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:23.917" status="PASS" endtime="20170512 23:16:23.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:23.918">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:23.918" status="PASS" endtime="20170512 23:16:23.919"></status>
</kw>
<status starttime="20170512 23:16:23.917" status="PASS" endtime="20170512 23:16:23.919"></status>
</kw>
<status starttime="20170512 23:16:23.916" status="PASS" endtime="20170512 23:16:23.919"></status>
</kw>
<status starttime="20170512 23:16:23.916" status="PASS" endtime="20170512 23:16:23.919"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:23.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:23.661" status="PASS" endtime="20170512 23:16:23.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:23.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:23.919" status="PASS" endtime="20170512 23:16:23.920"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:23.920">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:16:23.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:16:23.920">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:16:23.920" status="PASS" endtime="20170512 23:16:23.921"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:23.921">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:23.660" status="PASS" endtime="20170512 23:16:23.921"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:23.921">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:23.660" status="PASS" endtime="20170512 23:16:23.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:16:23.922">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:16:23.921" status="FAIL" endtime="20170512 23:16:23.922"></status>
</kw>
<status starttime="20170512 23:16:23.659" status="FAIL" endtime="20170512 23:16:23.922"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:33.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:16:33.926" status="PASS" endtime="20170512 23:16:33.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:33.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:16:33.927" status="PASS" endtime="20170512 23:16:33.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:33.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:16:33.928" status="PASS" endtime="20170512 23:16:33.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:33.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:16:33.928" status="PASS" endtime="20170512 23:16:33.929"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:34.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:16:33.929" status="PASS" endtime="20170512 23:16:34.107"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:34.107">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:16:34.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:33.929" status="PASS" endtime="20170512 23:16:34.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:34.108">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:34.107" status="PASS" endtime="20170512 23:16:34.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:34.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:34.108" status="PASS" endtime="20170512 23:16:34.108"></status>
</kw>
<status starttime="20170512 23:16:33.926" status="PASS" endtime="20170512 23:16:34.108"></status>
</kw>
<status starttime="20170512 23:16:33.925" status="PASS" endtime="20170512 23:16:34.108"></status>
</kw>
<status starttime="20170512 23:16:33.925" status="PASS" endtime="20170512 23:16:34.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:34.109">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:16:34.109" status="PASS" endtime="20170512 23:16:34.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:34.111">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:34.111" status="PASS" endtime="20170512 23:16:34.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:34.112">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:34.112" status="PASS" endtime="20170512 23:16:34.112"></status>
</kw>
<status starttime="20170512 23:16:34.112" status="PASS" endtime="20170512 23:16:34.113"></status>
</kw>
<status starttime="20170512 23:16:34.110" status="PASS" endtime="20170512 23:16:34.113"></status>
</kw>
<status starttime="20170512 23:16:34.110" status="PASS" endtime="20170512 23:16:34.113"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:34.179">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:16:34.179">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:34.113" status="PASS" endtime="20170512 23:16:34.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:34.181">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:34.181" status="PASS" endtime="20170512 23:16:34.181"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:34.182">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:34.182" status="PASS" endtime="20170512 23:16:34.182"></status>
</kw>
<status starttime="20170512 23:16:34.181" status="PASS" endtime="20170512 23:16:34.182"></status>
</kw>
<status starttime="20170512 23:16:34.180" status="PASS" endtime="20170512 23:16:34.182"></status>
</kw>
<status starttime="20170512 23:16:34.180" status="PASS" endtime="20170512 23:16:34.182"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:34.183">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:33.924" status="PASS" endtime="20170512 23:16:34.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:34.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:34.183" status="PASS" endtime="20170512 23:16:34.183"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:34.184">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:16:34.184">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:16:34.184">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:16:34.183" status="PASS" endtime="20170512 23:16:34.184"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:34.184">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:33.923" status="PASS" endtime="20170512 23:16:34.184"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:34.184">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:33.923" status="PASS" endtime="20170512 23:16:34.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:16:34.185">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:16:34.185" status="FAIL" endtime="20170512 23:16:34.185"></status>
</kw>
<status starttime="20170512 23:16:33.922" status="FAIL" endtime="20170512 23:16:34.185"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:44.191">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:16:44.190" status="PASS" endtime="20170512 23:16:44.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:16:44.191" status="PASS" endtime="20170512 23:16:44.192"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.192">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:16:44.192" status="PASS" endtime="20170512 23:16:44.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:16:44.193" status="PASS" endtime="20170512 23:16:44.193"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:44.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:16:44.194" status="PASS" endtime="20170512 23:16:44.413"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:44.413">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:16:44.413">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:44.193" status="PASS" endtime="20170512 23:16:44.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:44.414">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:44.413" status="PASS" endtime="20170512 23:16:44.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:44.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:44.414" status="PASS" endtime="20170512 23:16:44.414"></status>
</kw>
<status starttime="20170512 23:16:44.189" status="PASS" endtime="20170512 23:16:44.415"></status>
</kw>
<status starttime="20170512 23:16:44.189" status="PASS" endtime="20170512 23:16:44.415"></status>
</kw>
<status starttime="20170512 23:16:44.188" status="PASS" endtime="20170512 23:16:44.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.415">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:16:44.415" status="PASS" endtime="20170512 23:16:44.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.417">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:44.417" status="PASS" endtime="20170512 23:16:44.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:44.418">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:44.418" status="PASS" endtime="20170512 23:16:44.418"></status>
</kw>
<status starttime="20170512 23:16:44.417" status="PASS" endtime="20170512 23:16:44.418"></status>
</kw>
<status starttime="20170512 23:16:44.416" status="PASS" endtime="20170512 23:16:44.419"></status>
</kw>
<status starttime="20170512 23:16:44.416" status="PASS" endtime="20170512 23:16:44.419"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.485">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:16:44.485">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:44.419" status="PASS" endtime="20170512 23:16:44.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.487">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:44.487" status="PASS" endtime="20170512 23:16:44.487"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:44.488">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:44.488" status="PASS" endtime="20170512 23:16:44.488"></status>
</kw>
<status starttime="20170512 23:16:44.487" status="PASS" endtime="20170512 23:16:44.489"></status>
</kw>
<status starttime="20170512 23:16:44.486" status="PASS" endtime="20170512 23:16:44.489"></status>
</kw>
<status starttime="20170512 23:16:44.486" status="PASS" endtime="20170512 23:16:44.489"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:44.489">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:44.188" status="PASS" endtime="20170512 23:16:44.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:44.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:44.489" status="PASS" endtime="20170512 23:16:44.490"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:44.490">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:16:44.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:16:44.491">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:16:44.490" status="PASS" endtime="20170512 23:16:44.491"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:44.491">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:44.187" status="PASS" endtime="20170512 23:16:44.491"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:44.491">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:44.187" status="PASS" endtime="20170512 23:16:44.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:16:44.492">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:16:44.491" status="FAIL" endtime="20170512 23:16:44.492"></status>
</kw>
<status starttime="20170512 23:16:44.186" status="FAIL" endtime="20170512 23:16:44.492"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:54.497">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:16:54.497" status="PASS" endtime="20170512 23:16:54.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.498">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:16:54.497" status="PASS" endtime="20170512 23:16:54.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.498">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:16:54.498" status="PASS" endtime="20170512 23:16:54.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.499">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:16:54.499" status="PASS" endtime="20170512 23:16:54.499"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:54.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:16:54.500" status="PASS" endtime="20170512 23:16:54.679"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:54.679">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:16:54.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:54.499" status="PASS" endtime="20170512 23:16:54.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:54.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:54.680" status="PASS" endtime="20170512 23:16:54.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:54.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:54.680" status="PASS" endtime="20170512 23:16:54.681"></status>
</kw>
<status starttime="20170512 23:16:54.496" status="PASS" endtime="20170512 23:16:54.681"></status>
</kw>
<status starttime="20170512 23:16:54.496" status="PASS" endtime="20170512 23:16:54.681"></status>
</kw>
<status starttime="20170512 23:16:54.495" status="PASS" endtime="20170512 23:16:54.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.682">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:16:54.681" status="PASS" endtime="20170512 23:16:54.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.684">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:54.683" status="PASS" endtime="20170512 23:16:54.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:54.685">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:16:54.684" status="PASS" endtime="20170512 23:16:54.685"></status>
</kw>
<status starttime="20170512 23:16:54.684" status="PASS" endtime="20170512 23:16:54.685"></status>
</kw>
<status starttime="20170512 23:16:54.682" status="PASS" endtime="20170512 23:16:54.685"></status>
</kw>
<status starttime="20170512 23:16:54.682" status="PASS" endtime="20170512 23:16:54.685"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.751">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:16:54.752">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:54.685" status="PASS" endtime="20170512 23:16:54.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.753">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:54.753" status="PASS" endtime="20170512 23:16:54.753"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:54.754">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:16:54.754" status="PASS" endtime="20170512 23:16:54.754"></status>
</kw>
<status starttime="20170512 23:16:54.754" status="PASS" endtime="20170512 23:16:54.755"></status>
</kw>
<status starttime="20170512 23:16:54.752" status="PASS" endtime="20170512 23:16:54.755"></status>
</kw>
<status starttime="20170512 23:16:54.752" status="PASS" endtime="20170512 23:16:54.755"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:54.755">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:16:54.494" status="PASS" endtime="20170512 23:16:54.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:16:54.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:16:54.755" status="PASS" endtime="20170512 23:16:54.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:16:54.756">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:16:54.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:16:54.756">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:16:54.756" status="PASS" endtime="20170512 23:16:54.756"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:54.757">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:54.493" status="PASS" endtime="20170512 23:16:54.757"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:16:54.757">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:16:54.493" status="PASS" endtime="20170512 23:16:54.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:16:54.757">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:16:54.757" status="FAIL" endtime="20170512 23:16:54.758"></status>
</kw>
<status starttime="20170512 23:16:54.492" status="FAIL" endtime="20170512 23:16:54.758"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:04.763">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:17:04.763" status="PASS" endtime="20170512 23:17:04.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:04.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:17:04.764" status="PASS" endtime="20170512 23:17:04.764"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:04.765">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:17:04.764" status="PASS" endtime="20170512 23:17:04.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:04.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:17:04.765" status="PASS" endtime="20170512 23:17:04.765"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:04.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:17:04.766" status="PASS" endtime="20170512 23:17:04.945"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:04.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:17:04.946">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:04.766" status="PASS" endtime="20170512 23:17:04.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:04.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:04.946" status="PASS" endtime="20170512 23:17:04.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:04.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:04.947" status="PASS" endtime="20170512 23:17:04.947"></status>
</kw>
<status starttime="20170512 23:17:04.762" status="PASS" endtime="20170512 23:17:04.947"></status>
</kw>
<status starttime="20170512 23:17:04.761" status="PASS" endtime="20170512 23:17:04.947"></status>
</kw>
<status starttime="20170512 23:17:04.761" status="PASS" endtime="20170512 23:17:04.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:04.948">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:17:04.948" status="PASS" endtime="20170512 23:17:04.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:04.950">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:04.949" status="PASS" endtime="20170512 23:17:04.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:04.951">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:04.951" status="PASS" endtime="20170512 23:17:04.951"></status>
</kw>
<status starttime="20170512 23:17:04.950" status="PASS" endtime="20170512 23:17:04.951"></status>
</kw>
<status starttime="20170512 23:17:04.949" status="PASS" endtime="20170512 23:17:04.951"></status>
</kw>
<status starttime="20170512 23:17:04.948" status="PASS" endtime="20170512 23:17:04.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:05.019">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:17:05.019">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:04.952" status="PASS" endtime="20170512 23:17:05.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:05.021">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:05.020" status="PASS" endtime="20170512 23:17:05.021"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:05.024">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:05.024" status="PASS" endtime="20170512 23:17:05.024"></status>
</kw>
<status starttime="20170512 23:17:05.021" status="PASS" endtime="20170512 23:17:05.024"></status>
</kw>
<status starttime="20170512 23:17:05.020" status="PASS" endtime="20170512 23:17:05.024"></status>
</kw>
<status starttime="20170512 23:17:05.019" status="PASS" endtime="20170512 23:17:05.024"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:05.025">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:04.760" status="PASS" endtime="20170512 23:17:05.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:05.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:05.025" status="PASS" endtime="20170512 23:17:05.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:05.026">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:17:05.026">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:17:05.026">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:17:05.025" status="PASS" endtime="20170512 23:17:05.026"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:05.026">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:04.759" status="PASS" endtime="20170512 23:17:05.026"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:05.026">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:04.759" status="PASS" endtime="20170512 23:17:05.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:17:05.027">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:17:05.027" status="FAIL" endtime="20170512 23:17:05.027"></status>
</kw>
<status starttime="20170512 23:17:04.758" status="FAIL" endtime="20170512 23:17:05.027"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:15.032">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:17:15.031" status="PASS" endtime="20170512 23:17:15.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:17:15.032" status="PASS" endtime="20170512 23:17:15.033"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.033">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:17:15.033" status="PASS" endtime="20170512 23:17:15.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:17:15.034" status="PASS" endtime="20170512 23:17:15.034"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:15.213">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:17:15.035" status="PASS" endtime="20170512 23:17:15.213"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:15.213">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:17:15.213">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:15.034" status="PASS" endtime="20170512 23:17:15.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:15.214">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:15.213" status="PASS" endtime="20170512 23:17:15.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:15.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:15.214" status="PASS" endtime="20170512 23:17:15.215"></status>
</kw>
<status starttime="20170512 23:17:15.031" status="PASS" endtime="20170512 23:17:15.215"></status>
</kw>
<status starttime="20170512 23:17:15.030" status="PASS" endtime="20170512 23:17:15.215"></status>
</kw>
<status starttime="20170512 23:17:15.030" status="PASS" endtime="20170512 23:17:15.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.216">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:17:15.215" status="PASS" endtime="20170512 23:17:15.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.218">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:15.217" status="PASS" endtime="20170512 23:17:15.218"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:15.219">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:15.218" status="PASS" endtime="20170512 23:17:15.219"></status>
</kw>
<status starttime="20170512 23:17:15.218" status="PASS" endtime="20170512 23:17:15.219"></status>
</kw>
<status starttime="20170512 23:17:15.216" status="PASS" endtime="20170512 23:17:15.219"></status>
</kw>
<status starttime="20170512 23:17:15.216" status="PASS" endtime="20170512 23:17:15.219"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.285">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:17:15.285">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:15.219" status="PASS" endtime="20170512 23:17:15.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.287">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:15.286" status="PASS" endtime="20170512 23:17:15.287"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:15.288">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:15.288" status="PASS" endtime="20170512 23:17:15.288"></status>
</kw>
<status starttime="20170512 23:17:15.287" status="PASS" endtime="20170512 23:17:15.288"></status>
</kw>
<status starttime="20170512 23:17:15.286" status="PASS" endtime="20170512 23:17:15.288"></status>
</kw>
<status starttime="20170512 23:17:15.285" status="PASS" endtime="20170512 23:17:15.288"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:15.288">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:15.029" status="PASS" endtime="20170512 23:17:15.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:15.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:15.289" status="PASS" endtime="20170512 23:17:15.289"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:15.290">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:17:15.290">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:17:15.290">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:17:15.289" status="PASS" endtime="20170512 23:17:15.290"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:15.290">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:15.029" status="PASS" endtime="20170512 23:17:15.290"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:15.290">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:15.028" status="PASS" endtime="20170512 23:17:15.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:17:15.291">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:17:15.291" status="FAIL" endtime="20170512 23:17:15.291"></status>
</kw>
<status starttime="20170512 23:17:15.028" status="FAIL" endtime="20170512 23:17:15.291"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:25.297">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:17:25.296" status="PASS" endtime="20170512 23:17:25.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.298">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:17:25.297" status="PASS" endtime="20170512 23:17:25.298"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.298">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:17:25.298" status="PASS" endtime="20170512 23:17:25.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.299">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:17:25.299" status="PASS" endtime="20170512 23:17:25.299"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:25.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:17:25.300" status="PASS" endtime="20170512 23:17:25.479"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:25.479">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:17:25.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:25.299" status="PASS" endtime="20170512 23:17:25.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:25.480">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:25.480" status="PASS" endtime="20170512 23:17:25.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:25.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:25.480" status="PASS" endtime="20170512 23:17:25.481"></status>
</kw>
<status starttime="20170512 23:17:25.296" status="PASS" endtime="20170512 23:17:25.481"></status>
</kw>
<status starttime="20170512 23:17:25.295" status="PASS" endtime="20170512 23:17:25.481"></status>
</kw>
<status starttime="20170512 23:17:25.294" status="PASS" endtime="20170512 23:17:25.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.482">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:17:25.481" status="PASS" endtime="20170512 23:17:25.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.484">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:25.483" status="PASS" endtime="20170512 23:17:25.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:25.485">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:25.484" status="PASS" endtime="20170512 23:17:25.485"></status>
</kw>
<status starttime="20170512 23:17:25.484" status="PASS" endtime="20170512 23:17:25.485"></status>
</kw>
<status starttime="20170512 23:17:25.482" status="PASS" endtime="20170512 23:17:25.485"></status>
</kw>
<status starttime="20170512 23:17:25.482" status="PASS" endtime="20170512 23:17:25.485"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.551">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:17:25.551">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:25.485" status="PASS" endtime="20170512 23:17:25.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.553">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:25.552" status="PASS" endtime="20170512 23:17:25.553"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:25.554">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:25.554" status="PASS" endtime="20170512 23:17:25.554"></status>
</kw>
<status starttime="20170512 23:17:25.553" status="PASS" endtime="20170512 23:17:25.554"></status>
</kw>
<status starttime="20170512 23:17:25.552" status="PASS" endtime="20170512 23:17:25.554"></status>
</kw>
<status starttime="20170512 23:17:25.551" status="PASS" endtime="20170512 23:17:25.555"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:25.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:25.294" status="PASS" endtime="20170512 23:17:25.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:25.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:25.555" status="PASS" endtime="20170512 23:17:25.555"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:25.556">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:17:25.556">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:17:25.556">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:17:25.556" status="PASS" endtime="20170512 23:17:25.556"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:25.556">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:25.293" status="PASS" endtime="20170512 23:17:25.556"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:25.557">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:25.293" status="PASS" endtime="20170512 23:17:25.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:17:25.557">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:17:25.557" status="FAIL" endtime="20170512 23:17:25.557"></status>
</kw>
<status starttime="20170512 23:17:25.292" status="FAIL" endtime="20170512 23:17:25.558"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:35.562">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:17:35.562" status="PASS" endtime="20170512 23:17:35.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.563">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:17:35.563" status="PASS" endtime="20170512 23:17:35.563"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.564">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:17:35.564" status="PASS" endtime="20170512 23:17:35.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.565">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:17:35.564" status="PASS" endtime="20170512 23:17:35.565"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:35.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:17:35.565" status="PASS" endtime="20170512 23:17:35.744"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:35.744">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:17:35.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:35.565" status="PASS" endtime="20170512 23:17:35.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:35.745">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:35.745" status="PASS" endtime="20170512 23:17:35.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:35.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:35.745" status="PASS" endtime="20170512 23:17:35.746"></status>
</kw>
<status starttime="20170512 23:17:35.561" status="PASS" endtime="20170512 23:17:35.746"></status>
</kw>
<status starttime="20170512 23:17:35.561" status="PASS" endtime="20170512 23:17:35.746"></status>
</kw>
<status starttime="20170512 23:17:35.560" status="PASS" endtime="20170512 23:17:35.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.747">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:17:35.747" status="PASS" endtime="20170512 23:17:35.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.749">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:35.748" status="PASS" endtime="20170512 23:17:35.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:35.750">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:35.750" status="PASS" endtime="20170512 23:17:35.750"></status>
</kw>
<status starttime="20170512 23:17:35.749" status="PASS" endtime="20170512 23:17:35.750"></status>
</kw>
<status starttime="20170512 23:17:35.748" status="PASS" endtime="20170512 23:17:35.750"></status>
</kw>
<status starttime="20170512 23:17:35.747" status="PASS" endtime="20170512 23:17:35.750"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.817">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:17:35.817">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:35.751" status="PASS" endtime="20170512 23:17:35.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.819">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:35.818" status="PASS" endtime="20170512 23:17:35.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:35.820">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:35.819" status="PASS" endtime="20170512 23:17:35.820"></status>
</kw>
<status starttime="20170512 23:17:35.819" status="PASS" endtime="20170512 23:17:35.820"></status>
</kw>
<status starttime="20170512 23:17:35.818" status="PASS" endtime="20170512 23:17:35.820"></status>
</kw>
<status starttime="20170512 23:17:35.817" status="PASS" endtime="20170512 23:17:35.820"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:35.820">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:35.560" status="PASS" endtime="20170512 23:17:35.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:35.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:35.821" status="PASS" endtime="20170512 23:17:35.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:35.822">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:17:35.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:17:35.822">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:17:35.821" status="PASS" endtime="20170512 23:17:35.822"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:35.822">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:35.559" status="PASS" endtime="20170512 23:17:35.822"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:35.822">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:35.559" status="PASS" endtime="20170512 23:17:35.822"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:17:35.823">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:17:35.823" status="FAIL" endtime="20170512 23:17:35.823"></status>
</kw>
<status starttime="20170512 23:17:35.558" status="FAIL" endtime="20170512 23:17:35.823"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:45.828">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:17:45.828" status="PASS" endtime="20170512 23:17:45.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:45.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:17:45.829" status="PASS" endtime="20170512 23:17:45.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:45.830">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:17:45.829" status="PASS" endtime="20170512 23:17:45.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:45.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:17:45.830" status="PASS" endtime="20170512 23:17:45.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:46.020">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:17:45.831" status="PASS" endtime="20170512 23:17:46.020"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:46.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:17:46.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:45.831" status="PASS" endtime="20170512 23:17:46.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:46.020">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:46.020" status="PASS" endtime="20170512 23:17:46.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:46.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:46.021" status="PASS" endtime="20170512 23:17:46.021"></status>
</kw>
<status starttime="20170512 23:17:45.827" status="PASS" endtime="20170512 23:17:46.021"></status>
</kw>
<status starttime="20170512 23:17:45.826" status="PASS" endtime="20170512 23:17:46.022"></status>
</kw>
<status starttime="20170512 23:17:45.826" status="PASS" endtime="20170512 23:17:46.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:46.022">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:17:46.022" status="PASS" endtime="20170512 23:17:46.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:46.024">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:46.024" status="PASS" endtime="20170512 23:17:46.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:46.025">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:46.025" status="PASS" endtime="20170512 23:17:46.025"></status>
</kw>
<status starttime="20170512 23:17:46.024" status="PASS" endtime="20170512 23:17:46.025"></status>
</kw>
<status starttime="20170512 23:17:46.023" status="PASS" endtime="20170512 23:17:46.025"></status>
</kw>
<status starttime="20170512 23:17:46.023" status="PASS" endtime="20170512 23:17:46.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:46.091">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:17:46.092">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:46.026" status="PASS" endtime="20170512 23:17:46.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:46.094">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:46.093" status="PASS" endtime="20170512 23:17:46.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:46.095">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:46.094" status="PASS" endtime="20170512 23:17:46.095"></status>
</kw>
<status starttime="20170512 23:17:46.094" status="PASS" endtime="20170512 23:17:46.095"></status>
</kw>
<status starttime="20170512 23:17:46.093" status="PASS" endtime="20170512 23:17:46.095"></status>
</kw>
<status starttime="20170512 23:17:46.092" status="PASS" endtime="20170512 23:17:46.095"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:46.095">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:45.825" status="PASS" endtime="20170512 23:17:46.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:46.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:46.096" status="PASS" endtime="20170512 23:17:46.096"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:46.097">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:17:46.097">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:17:46.097">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:17:46.096" status="PASS" endtime="20170512 23:17:46.097"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:46.097">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:45.825" status="PASS" endtime="20170512 23:17:46.097"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:46.097">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:45.824" status="PASS" endtime="20170512 23:17:46.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:17:46.098">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:17:46.098" status="FAIL" endtime="20170512 23:17:46.098"></status>
</kw>
<status starttime="20170512 23:17:45.824" status="FAIL" endtime="20170512 23:17:46.098"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:56.104">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:17:56.103" status="PASS" endtime="20170512 23:17:56.104"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.105">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:17:56.105" status="PASS" endtime="20170512 23:17:56.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.106">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:17:56.105" status="PASS" endtime="20170512 23:17:56.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:17:56.106" status="PASS" endtime="20170512 23:17:56.107"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:56.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:17:56.108" status="PASS" endtime="20170512 23:17:56.290"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:56.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:17:56.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:56.107" status="PASS" endtime="20170512 23:17:56.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:56.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:56.291" status="PASS" endtime="20170512 23:17:56.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:56.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:56.292" status="PASS" endtime="20170512 23:17:56.292"></status>
</kw>
<status starttime="20170512 23:17:56.103" status="PASS" endtime="20170512 23:17:56.292"></status>
</kw>
<status starttime="20170512 23:17:56.102" status="PASS" endtime="20170512 23:17:56.292"></status>
</kw>
<status starttime="20170512 23:17:56.101" status="PASS" endtime="20170512 23:17:56.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.293">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:17:56.293" status="PASS" endtime="20170512 23:17:56.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.295">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:56.294" status="PASS" endtime="20170512 23:17:56.295"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:56.296">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:17:56.296" status="PASS" endtime="20170512 23:17:56.296"></status>
</kw>
<status starttime="20170512 23:17:56.295" status="PASS" endtime="20170512 23:17:56.296"></status>
</kw>
<status starttime="20170512 23:17:56.294" status="PASS" endtime="20170512 23:17:56.296"></status>
</kw>
<status starttime="20170512 23:17:56.293" status="PASS" endtime="20170512 23:17:56.296"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.363">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:17:56.363">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:56.297" status="PASS" endtime="20170512 23:17:56.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.365">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:56.364" status="PASS" endtime="20170512 23:17:56.365"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:56.366">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:17:56.366" status="PASS" endtime="20170512 23:17:56.366"></status>
</kw>
<status starttime="20170512 23:17:56.365" status="PASS" endtime="20170512 23:17:56.366"></status>
</kw>
<status starttime="20170512 23:17:56.364" status="PASS" endtime="20170512 23:17:56.366"></status>
</kw>
<status starttime="20170512 23:17:56.364" status="PASS" endtime="20170512 23:17:56.366"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:56.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:17:56.100" status="PASS" endtime="20170512 23:17:56.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:17:56.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:17:56.367" status="PASS" endtime="20170512 23:17:56.367"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:17:56.368">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:17:56.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:17:56.368">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:17:56.367" status="PASS" endtime="20170512 23:17:56.368"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:56.368">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:56.100" status="PASS" endtime="20170512 23:17:56.368"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:17:56.368">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:17:56.099" status="PASS" endtime="20170512 23:17:56.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:17:56.369">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:17:56.369" status="FAIL" endtime="20170512 23:17:56.369"></status>
</kw>
<status starttime="20170512 23:17:56.099" status="FAIL" endtime="20170512 23:17:56.369"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:06.375">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:18:06.375" status="PASS" endtime="20170512 23:18:06.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:18:06.376" status="PASS" endtime="20170512 23:18:06.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:18:06.376" status="PASS" endtime="20170512 23:18:06.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.377">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:18:06.377" status="PASS" endtime="20170512 23:18:06.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:06.559">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:18:06.378" status="PASS" endtime="20170512 23:18:06.559"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:06.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:18:06.559">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:06.377" status="PASS" endtime="20170512 23:18:06.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:06.560">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:06.559" status="PASS" endtime="20170512 23:18:06.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:06.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:06.560" status="PASS" endtime="20170512 23:18:06.560"></status>
</kw>
<status starttime="20170512 23:18:06.374" status="PASS" endtime="20170512 23:18:06.560"></status>
</kw>
<status starttime="20170512 23:18:06.373" status="PASS" endtime="20170512 23:18:06.560"></status>
</kw>
<status starttime="20170512 23:18:06.372" status="PASS" endtime="20170512 23:18:06.561"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.561">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:18:06.561" status="PASS" endtime="20170512 23:18:06.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.563">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:06.563" status="PASS" endtime="20170512 23:18:06.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:06.564">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:06.564" status="PASS" endtime="20170512 23:18:06.564"></status>
</kw>
<status starttime="20170512 23:18:06.563" status="PASS" endtime="20170512 23:18:06.564"></status>
</kw>
<status starttime="20170512 23:18:06.562" status="PASS" endtime="20170512 23:18:06.564"></status>
</kw>
<status starttime="20170512 23:18:06.562" status="PASS" endtime="20170512 23:18:06.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.630">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:18:06.630">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:06.565" status="PASS" endtime="20170512 23:18:06.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.632">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:06.632" status="PASS" endtime="20170512 23:18:06.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:06.633">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:06.633" status="PASS" endtime="20170512 23:18:06.634"></status>
</kw>
<status starttime="20170512 23:18:06.632" status="PASS" endtime="20170512 23:18:06.634"></status>
</kw>
<status starttime="20170512 23:18:06.631" status="PASS" endtime="20170512 23:18:06.634"></status>
</kw>
<status starttime="20170512 23:18:06.631" status="PASS" endtime="20170512 23:18:06.634"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:06.634">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:06.372" status="PASS" endtime="20170512 23:18:06.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:06.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:06.634" status="PASS" endtime="20170512 23:18:06.635"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:06.635">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:18:06.635">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:18:06.635">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:18:06.635" status="PASS" endtime="20170512 23:18:06.635"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:06.636">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:06.371" status="PASS" endtime="20170512 23:18:06.636"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:06.636">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:06.371" status="PASS" endtime="20170512 23:18:06.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:18:06.637">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:18:06.636" status="FAIL" endtime="20170512 23:18:06.637"></status>
</kw>
<status starttime="20170512 23:18:06.370" status="FAIL" endtime="20170512 23:18:06.637"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:16.642">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:18:16.641" status="PASS" endtime="20170512 23:18:16.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.643">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:18:16.642" status="PASS" endtime="20170512 23:18:16.643"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.643">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:18:16.643" status="PASS" endtime="20170512 23:18:16.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.644">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:18:16.644" status="PASS" endtime="20170512 23:18:16.644"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:16.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:18:16.645" status="PASS" endtime="20170512 23:18:16.825"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:16.825">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:18:16.825">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:16.644" status="PASS" endtime="20170512 23:18:16.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:16.826">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:16.826" status="PASS" endtime="20170512 23:18:16.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:16.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:16.826" status="PASS" endtime="20170512 23:18:16.827"></status>
</kw>
<status starttime="20170512 23:18:16.641" status="PASS" endtime="20170512 23:18:16.827"></status>
</kw>
<status starttime="20170512 23:18:16.640" status="PASS" endtime="20170512 23:18:16.827"></status>
</kw>
<status starttime="20170512 23:18:16.640" status="PASS" endtime="20170512 23:18:16.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.828">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:18:16.827" status="PASS" endtime="20170512 23:18:16.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.830">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:16.829" status="PASS" endtime="20170512 23:18:16.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:16.831">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:16.830" status="PASS" endtime="20170512 23:18:16.831"></status>
</kw>
<status starttime="20170512 23:18:16.830" status="PASS" endtime="20170512 23:18:16.831"></status>
</kw>
<status starttime="20170512 23:18:16.828" status="PASS" endtime="20170512 23:18:16.831"></status>
</kw>
<status starttime="20170512 23:18:16.828" status="PASS" endtime="20170512 23:18:16.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.898">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:18:16.899">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:16.831" status="PASS" endtime="20170512 23:18:16.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.900">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:16.900" status="PASS" endtime="20170512 23:18:16.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:16.901">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:16.901" status="PASS" endtime="20170512 23:18:16.901"></status>
</kw>
<status starttime="20170512 23:18:16.900" status="PASS" endtime="20170512 23:18:16.901"></status>
</kw>
<status starttime="20170512 23:18:16.899" status="PASS" endtime="20170512 23:18:16.902"></status>
</kw>
<status starttime="20170512 23:18:16.899" status="PASS" endtime="20170512 23:18:16.902"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:16.902">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:16.639" status="PASS" endtime="20170512 23:18:16.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:16.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:16.902" status="PASS" endtime="20170512 23:18:16.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:16.903">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:18:16.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:18:16.903">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:18:16.903" status="PASS" endtime="20170512 23:18:16.903"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:16.903">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:16.639" status="PASS" endtime="20170512 23:18:16.903"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:16.904">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:16.638" status="PASS" endtime="20170512 23:18:16.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:18:16.904">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:18:16.904" status="FAIL" endtime="20170512 23:18:16.904"></status>
</kw>
<status starttime="20170512 23:18:16.638" status="FAIL" endtime="20170512 23:18:16.905"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:26.909">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:18:26.909" status="PASS" endtime="20170512 23:18:26.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:26.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:18:26.910" status="PASS" endtime="20170512 23:18:26.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:26.911">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:18:26.911" status="PASS" endtime="20170512 23:18:26.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:26.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:18:26.911" status="PASS" endtime="20170512 23:18:26.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:27.091">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:18:26.912" status="PASS" endtime="20170512 23:18:27.091"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:27.091">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:18:27.091">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:26.912" status="PASS" endtime="20170512 23:18:27.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:27.092">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:27.091" status="PASS" endtime="20170512 23:18:27.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:27.092">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:27.092" status="PASS" endtime="20170512 23:18:27.092"></status>
</kw>
<status starttime="20170512 23:18:26.908" status="PASS" endtime="20170512 23:18:27.093"></status>
</kw>
<status starttime="20170512 23:18:26.908" status="PASS" endtime="20170512 23:18:27.093"></status>
</kw>
<status starttime="20170512 23:18:26.907" status="PASS" endtime="20170512 23:18:27.093"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:27.093">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:18:27.093" status="PASS" endtime="20170512 23:18:27.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:27.095">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:27.095" status="PASS" endtime="20170512 23:18:27.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:27.096">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:27.096" status="PASS" endtime="20170512 23:18:27.096"></status>
</kw>
<status starttime="20170512 23:18:27.095" status="PASS" endtime="20170512 23:18:27.096"></status>
</kw>
<status starttime="20170512 23:18:27.094" status="PASS" endtime="20170512 23:18:27.097"></status>
</kw>
<status starttime="20170512 23:18:27.094" status="PASS" endtime="20170512 23:18:27.097"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:27.163">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:18:27.163">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:27.097" status="PASS" endtime="20170512 23:18:27.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:27.165">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:27.164" status="PASS" endtime="20170512 23:18:27.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:27.168">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:27.167" status="PASS" endtime="20170512 23:18:27.168"></status>
</kw>
<status starttime="20170512 23:18:27.165" status="PASS" endtime="20170512 23:18:27.168"></status>
</kw>
<status starttime="20170512 23:18:27.164" status="PASS" endtime="20170512 23:18:27.168"></status>
</kw>
<status starttime="20170512 23:18:27.163" status="PASS" endtime="20170512 23:18:27.168"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:27.168">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:26.907" status="PASS" endtime="20170512 23:18:27.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:27.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:27.168" status="PASS" endtime="20170512 23:18:27.169"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:27.169">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:18:27.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:18:27.170">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:18:27.169" status="PASS" endtime="20170512 23:18:27.170"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:27.170">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:26.906" status="PASS" endtime="20170512 23:18:27.170"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:27.170">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:26.906" status="PASS" endtime="20170512 23:18:27.170"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:18:27.171">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:18:27.170" status="FAIL" endtime="20170512 23:18:27.171"></status>
</kw>
<status starttime="20170512 23:18:26.905" status="FAIL" endtime="20170512 23:18:27.171"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:37.175">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:18:37.175" status="PASS" endtime="20170512 23:18:37.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.176">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:18:37.176" status="PASS" endtime="20170512 23:18:37.176"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.177">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:18:37.177" status="PASS" endtime="20170512 23:18:37.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.178">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:18:37.177" status="PASS" endtime="20170512 23:18:37.178"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:37.356">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:18:37.178" status="PASS" endtime="20170512 23:18:37.356"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:37.356">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:18:37.356">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:37.178" status="PASS" endtime="20170512 23:18:37.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:37.357">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:37.356" status="PASS" endtime="20170512 23:18:37.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:37.358">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:37.357" status="PASS" endtime="20170512 23:18:37.358"></status>
</kw>
<status starttime="20170512 23:18:37.175" status="PASS" endtime="20170512 23:18:37.358"></status>
</kw>
<status starttime="20170512 23:18:37.174" status="PASS" endtime="20170512 23:18:37.358"></status>
</kw>
<status starttime="20170512 23:18:37.174" status="PASS" endtime="20170512 23:18:37.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.359">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:18:37.358" status="PASS" endtime="20170512 23:18:37.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.361">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:37.360" status="PASS" endtime="20170512 23:18:37.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:37.362">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:37.362" status="PASS" endtime="20170512 23:18:37.362"></status>
</kw>
<status starttime="20170512 23:18:37.361" status="PASS" endtime="20170512 23:18:37.362"></status>
</kw>
<status starttime="20170512 23:18:37.360" status="PASS" endtime="20170512 23:18:37.362"></status>
</kw>
<status starttime="20170512 23:18:37.359" status="PASS" endtime="20170512 23:18:37.362"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.436">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:18:37.436">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:37.363" status="PASS" endtime="20170512 23:18:37.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.438">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:37.437" status="PASS" endtime="20170512 23:18:37.438"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:37.439">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:37.439" status="PASS" endtime="20170512 23:18:37.439"></status>
</kw>
<status starttime="20170512 23:18:37.438" status="PASS" endtime="20170512 23:18:37.439"></status>
</kw>
<status starttime="20170512 23:18:37.437" status="PASS" endtime="20170512 23:18:37.439"></status>
</kw>
<status starttime="20170512 23:18:37.437" status="PASS" endtime="20170512 23:18:37.439"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:37.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:37.173" status="PASS" endtime="20170512 23:18:37.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:37.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:37.440" status="PASS" endtime="20170512 23:18:37.440"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:37.441">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:18:37.441">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:18:37.441">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:18:37.440" status="PASS" endtime="20170512 23:18:37.441"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:37.441">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:37.172" status="PASS" endtime="20170512 23:18:37.441"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:37.441">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:37.172" status="PASS" endtime="20170512 23:18:37.441"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:18:37.442">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:18:37.442" status="FAIL" endtime="20170512 23:18:37.442"></status>
</kw>
<status starttime="20170512 23:18:37.171" status="FAIL" endtime="20170512 23:18:37.442"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:47.447">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:18:47.447" status="PASS" endtime="20170512 23:18:47.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.448">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:18:47.448" status="PASS" endtime="20170512 23:18:47.448"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.449">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:18:47.448" status="PASS" endtime="20170512 23:18:47.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:18:47.449" status="PASS" endtime="20170512 23:18:47.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:47.631">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:18:47.450" status="PASS" endtime="20170512 23:18:47.631"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:47.631">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:18:47.631">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:47.450" status="PASS" endtime="20170512 23:18:47.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:47.632">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:47.632" status="PASS" endtime="20170512 23:18:47.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:47.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:47.632" status="PASS" endtime="20170512 23:18:47.633"></status>
</kw>
<status starttime="20170512 23:18:47.446" status="PASS" endtime="20170512 23:18:47.633"></status>
</kw>
<status starttime="20170512 23:18:47.446" status="PASS" endtime="20170512 23:18:47.633"></status>
</kw>
<status starttime="20170512 23:18:47.445" status="PASS" endtime="20170512 23:18:47.633"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.634">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:18:47.633" status="PASS" endtime="20170512 23:18:47.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.636">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:47.635" status="PASS" endtime="20170512 23:18:47.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:47.637">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:47.637" status="PASS" endtime="20170512 23:18:47.637"></status>
</kw>
<status starttime="20170512 23:18:47.636" status="PASS" endtime="20170512 23:18:47.637"></status>
</kw>
<status starttime="20170512 23:18:47.635" status="PASS" endtime="20170512 23:18:47.637"></status>
</kw>
<status starttime="20170512 23:18:47.634" status="PASS" endtime="20170512 23:18:47.637"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.704">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:18:47.704">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:47.638" status="PASS" endtime="20170512 23:18:47.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.705">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:47.705" status="PASS" endtime="20170512 23:18:47.706"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:47.706">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:47.706" status="PASS" endtime="20170512 23:18:47.707"></status>
</kw>
<status starttime="20170512 23:18:47.706" status="PASS" endtime="20170512 23:18:47.707"></status>
</kw>
<status starttime="20170512 23:18:47.705" status="PASS" endtime="20170512 23:18:47.707"></status>
</kw>
<status starttime="20170512 23:18:47.704" status="PASS" endtime="20170512 23:18:47.707"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:47.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:47.444" status="PASS" endtime="20170512 23:18:47.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:47.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:47.708" status="PASS" endtime="20170512 23:18:47.708"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:47.708">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:18:47.709">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:18:47.709">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:18:47.708" status="PASS" endtime="20170512 23:18:47.709"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:47.709">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:47.444" status="PASS" endtime="20170512 23:18:47.709"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:47.709">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:47.443" status="PASS" endtime="20170512 23:18:47.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:18:47.710">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:18:47.709" status="FAIL" endtime="20170512 23:18:47.710"></status>
</kw>
<status starttime="20170512 23:18:47.443" status="FAIL" endtime="20170512 23:18:47.710"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:57.715">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:18:57.714" status="PASS" endtime="20170512 23:18:57.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.716">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:18:57.715" status="PASS" endtime="20170512 23:18:57.716"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.716">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:18:57.716" status="PASS" endtime="20170512 23:18:57.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.717">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:18:57.717" status="PASS" endtime="20170512 23:18:57.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:57.895">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:18:57.718" status="PASS" endtime="20170512 23:18:57.896"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:57.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:18:57.896">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:57.717" status="PASS" endtime="20170512 23:18:57.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:57.896">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:57.896" status="PASS" endtime="20170512 23:18:57.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:57.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:57.897" status="PASS" endtime="20170512 23:18:57.898"></status>
</kw>
<status starttime="20170512 23:18:57.714" status="PASS" endtime="20170512 23:18:57.898"></status>
</kw>
<status starttime="20170512 23:18:57.713" status="PASS" endtime="20170512 23:18:57.898"></status>
</kw>
<status starttime="20170512 23:18:57.713" status="PASS" endtime="20170512 23:18:57.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.898">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:18:57.898" status="PASS" endtime="20170512 23:18:57.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.900">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:57.900" status="PASS" endtime="20170512 23:18:57.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:57.901">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:18:57.901" status="PASS" endtime="20170512 23:18:57.901"></status>
</kw>
<status starttime="20170512 23:18:57.901" status="PASS" endtime="20170512 23:18:57.902"></status>
</kw>
<status starttime="20170512 23:18:57.899" status="PASS" endtime="20170512 23:18:57.902"></status>
</kw>
<status starttime="20170512 23:18:57.899" status="PASS" endtime="20170512 23:18:57.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.969">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:18:57.969">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:57.902" status="PASS" endtime="20170512 23:18:57.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.970">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:57.970" status="PASS" endtime="20170512 23:18:57.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:57.971">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:18:57.971" status="PASS" endtime="20170512 23:18:57.971"></status>
</kw>
<status starttime="20170512 23:18:57.971" status="PASS" endtime="20170512 23:18:57.972"></status>
</kw>
<status starttime="20170512 23:18:57.969" status="PASS" endtime="20170512 23:18:57.972"></status>
</kw>
<status starttime="20170512 23:18:57.969" status="PASS" endtime="20170512 23:18:57.972"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:57.972">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:18:57.712" status="PASS" endtime="20170512 23:18:57.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:18:57.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:18:57.972" status="PASS" endtime="20170512 23:18:57.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:18:57.973">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:18:57.973">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:18:57.973">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:18:57.973" status="PASS" endtime="20170512 23:18:57.973"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:57.974">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:57.712" status="PASS" endtime="20170512 23:18:57.974"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:18:57.974">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:18:57.711" status="PASS" endtime="20170512 23:18:57.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:18:57.975">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:18:57.974" status="FAIL" endtime="20170512 23:18:57.975"></status>
</kw>
<status starttime="20170512 23:18:57.711" status="FAIL" endtime="20170512 23:18:57.975"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:07.980">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:19:07.979" status="PASS" endtime="20170512 23:19:07.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:07.981">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:19:07.980" status="PASS" endtime="20170512 23:19:07.981"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:07.981">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:19:07.981" status="PASS" endtime="20170512 23:19:07.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:07.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:19:07.982" status="PASS" endtime="20170512 23:19:07.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:08.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:19:07.983" status="PASS" endtime="20170512 23:19:08.158"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:08.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:19:08.158">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:07.982" status="PASS" endtime="20170512 23:19:08.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:08.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:08.158" status="PASS" endtime="20170512 23:19:08.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:08.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:08.159" status="PASS" endtime="20170512 23:19:08.159"></status>
</kw>
<status starttime="20170512 23:19:07.979" status="PASS" endtime="20170512 23:19:08.159"></status>
</kw>
<status starttime="20170512 23:19:07.978" status="PASS" endtime="20170512 23:19:08.159"></status>
</kw>
<status starttime="20170512 23:19:07.977" status="PASS" endtime="20170512 23:19:08.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:08.160">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:19:08.160" status="PASS" endtime="20170512 23:19:08.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:08.162">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:08.161" status="PASS" endtime="20170512 23:19:08.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:08.163">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:08.163" status="PASS" endtime="20170512 23:19:08.163"></status>
</kw>
<status starttime="20170512 23:19:08.162" status="PASS" endtime="20170512 23:19:08.163"></status>
</kw>
<status starttime="20170512 23:19:08.161" status="PASS" endtime="20170512 23:19:08.163"></status>
</kw>
<status starttime="20170512 23:19:08.160" status="PASS" endtime="20170512 23:19:08.163"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:08.229">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:19:08.229">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:08.164" status="PASS" endtime="20170512 23:19:08.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:08.231">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:08.230" status="PASS" endtime="20170512 23:19:08.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:08.232">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:08.232" status="PASS" endtime="20170512 23:19:08.233"></status>
</kw>
<status starttime="20170512 23:19:08.231" status="PASS" endtime="20170512 23:19:08.233"></status>
</kw>
<status starttime="20170512 23:19:08.230" status="PASS" endtime="20170512 23:19:08.233"></status>
</kw>
<status starttime="20170512 23:19:08.230" status="PASS" endtime="20170512 23:19:08.233"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:08.233">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:07.977" status="PASS" endtime="20170512 23:19:08.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:08.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:08.233" status="PASS" endtime="20170512 23:19:08.234"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:08.234">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:19:08.234">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:19:08.234">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:19:08.234" status="PASS" endtime="20170512 23:19:08.235"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:08.235">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:07.976" status="PASS" endtime="20170512 23:19:08.235"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:08.235">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:07.976" status="PASS" endtime="20170512 23:19:08.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:19:08.236">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:19:08.235" status="FAIL" endtime="20170512 23:19:08.236"></status>
</kw>
<status starttime="20170512 23:19:07.975" status="FAIL" endtime="20170512 23:19:08.236"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:18.240">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:19:18.240" status="PASS" endtime="20170512 23:19:18.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:19:18.241" status="PASS" endtime="20170512 23:19:18.241"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.242">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:19:18.242" status="PASS" endtime="20170512 23:19:18.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.243">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:19:18.242" status="PASS" endtime="20170512 23:19:18.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:18.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:19:18.244" status="PASS" endtime="20170512 23:19:18.422"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:18.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:19:18.422">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:18.244" status="PASS" endtime="20170512 23:19:18.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:18.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:18.422" status="PASS" endtime="20170512 23:19:18.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:18.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:18.423" status="PASS" endtime="20170512 23:19:18.423"></status>
</kw>
<status starttime="20170512 23:19:18.240" status="PASS" endtime="20170512 23:19:18.424"></status>
</kw>
<status starttime="20170512 23:19:18.239" status="PASS" endtime="20170512 23:19:18.424"></status>
</kw>
<status starttime="20170512 23:19:18.238" status="PASS" endtime="20170512 23:19:18.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.424">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:19:18.424" status="PASS" endtime="20170512 23:19:18.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.427">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:18.426" status="PASS" endtime="20170512 23:19:18.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:18.428">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:18.428" status="PASS" endtime="20170512 23:19:18.429"></status>
</kw>
<status starttime="20170512 23:19:18.428" status="PASS" endtime="20170512 23:19:18.429"></status>
</kw>
<status starttime="20170512 23:19:18.425" status="PASS" endtime="20170512 23:19:18.429"></status>
</kw>
<status starttime="20170512 23:19:18.425" status="PASS" endtime="20170512 23:19:18.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.495">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:19:18.495">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:18.429" status="PASS" endtime="20170512 23:19:18.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.497">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:18.496" status="PASS" endtime="20170512 23:19:18.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:18.498">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:18.498" status="PASS" endtime="20170512 23:19:18.498"></status>
</kw>
<status starttime="20170512 23:19:18.497" status="PASS" endtime="20170512 23:19:18.498"></status>
</kw>
<status starttime="20170512 23:19:18.496" status="PASS" endtime="20170512 23:19:18.498"></status>
</kw>
<status starttime="20170512 23:19:18.495" status="PASS" endtime="20170512 23:19:18.498"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:18.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:18.238" status="PASS" endtime="20170512 23:19:18.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:18.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:18.499" status="PASS" endtime="20170512 23:19:18.499"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:18.500">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:19:18.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:19:18.500">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:19:18.499" status="PASS" endtime="20170512 23:19:18.500"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:18.500">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:18.237" status="PASS" endtime="20170512 23:19:18.500"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:18.500">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:18.237" status="PASS" endtime="20170512 23:19:18.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:19:18.501">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:19:18.501" status="FAIL" endtime="20170512 23:19:18.501"></status>
</kw>
<status starttime="20170512 23:19:18.236" status="FAIL" endtime="20170512 23:19:18.501"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:28.507">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:19:28.506" status="PASS" endtime="20170512 23:19:28.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.508">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:19:28.507" status="PASS" endtime="20170512 23:19:28.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.508">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:19:28.508" status="PASS" endtime="20170512 23:19:28.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:19:28.508" status="PASS" endtime="20170512 23:19:28.509"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:28.687">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:19:28.510" status="PASS" endtime="20170512 23:19:28.687"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:28.687">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:19:28.687">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:28.509" status="PASS" endtime="20170512 23:19:28.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:28.688">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:28.688" status="PASS" endtime="20170512 23:19:28.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:28.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:28.688" status="PASS" endtime="20170512 23:19:28.689"></status>
</kw>
<status starttime="20170512 23:19:28.505" status="PASS" endtime="20170512 23:19:28.689"></status>
</kw>
<status starttime="20170512 23:19:28.505" status="PASS" endtime="20170512 23:19:28.689"></status>
</kw>
<status starttime="20170512 23:19:28.504" status="PASS" endtime="20170512 23:19:28.689"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.690">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:19:28.689" status="PASS" endtime="20170512 23:19:28.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.692">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:28.691" status="PASS" endtime="20170512 23:19:28.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:28.693">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:28.692" status="PASS" endtime="20170512 23:19:28.693"></status>
</kw>
<status starttime="20170512 23:19:28.692" status="PASS" endtime="20170512 23:19:28.693"></status>
</kw>
<status starttime="20170512 23:19:28.690" status="PASS" endtime="20170512 23:19:28.693"></status>
</kw>
<status starttime="20170512 23:19:28.690" status="PASS" endtime="20170512 23:19:28.693"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.760">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:19:28.760">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:28.693" status="PASS" endtime="20170512 23:19:28.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.762">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:28.761" status="PASS" endtime="20170512 23:19:28.762"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:28.763">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:28.763" status="PASS" endtime="20170512 23:19:28.763"></status>
</kw>
<status starttime="20170512 23:19:28.762" status="PASS" endtime="20170512 23:19:28.763"></status>
</kw>
<status starttime="20170512 23:19:28.761" status="PASS" endtime="20170512 23:19:28.763"></status>
</kw>
<status starttime="20170512 23:19:28.760" status="PASS" endtime="20170512 23:19:28.763"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:28.764">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:28.504" status="PASS" endtime="20170512 23:19:28.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:28.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:28.764" status="PASS" endtime="20170512 23:19:28.764"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:28.765">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:19:28.765">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:19:28.765">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:19:28.764" status="PASS" endtime="20170512 23:19:28.765"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:28.765">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:28.503" status="PASS" endtime="20170512 23:19:28.765"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:28.765">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:28.503" status="PASS" endtime="20170512 23:19:28.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:19:28.766">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:19:28.766" status="FAIL" endtime="20170512 23:19:28.766"></status>
</kw>
<status starttime="20170512 23:19:28.502" status="FAIL" endtime="20170512 23:19:28.766"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:38.771">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:19:38.771" status="PASS" endtime="20170512 23:19:38.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:38.772">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:19:38.772" status="PASS" endtime="20170512 23:19:38.772"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:38.773">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:19:38.772" status="PASS" endtime="20170512 23:19:38.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:38.773">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:19:38.773" status="PASS" endtime="20170512 23:19:38.773"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:38.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:19:38.774" status="PASS" endtime="20170512 23:19:38.961"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:38.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:19:38.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:38.774" status="PASS" endtime="20170512 23:19:38.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:38.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:38.962" status="PASS" endtime="20170512 23:19:38.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:38.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:38.962" status="PASS" endtime="20170512 23:19:38.963"></status>
</kw>
<status starttime="20170512 23:19:38.770" status="PASS" endtime="20170512 23:19:38.963"></status>
</kw>
<status starttime="20170512 23:19:38.770" status="PASS" endtime="20170512 23:19:38.963"></status>
</kw>
<status starttime="20170512 23:19:38.769" status="PASS" endtime="20170512 23:19:38.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:38.964">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:19:38.963" status="PASS" endtime="20170512 23:19:38.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:38.966">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:38.965" status="PASS" endtime="20170512 23:19:38.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:38.967">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:38.966" status="PASS" endtime="20170512 23:19:38.967"></status>
</kw>
<status starttime="20170512 23:19:38.966" status="PASS" endtime="20170512 23:19:38.967"></status>
</kw>
<status starttime="20170512 23:19:38.964" status="PASS" endtime="20170512 23:19:38.967"></status>
</kw>
<status starttime="20170512 23:19:38.964" status="PASS" endtime="20170512 23:19:38.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:39.035">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:19:39.036">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:38.967" status="PASS" endtime="20170512 23:19:39.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:39.037">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:39.037" status="PASS" endtime="20170512 23:19:39.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:39.038">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:39.038" status="PASS" endtime="20170512 23:19:39.038"></status>
</kw>
<status starttime="20170512 23:19:39.037" status="PASS" endtime="20170512 23:19:39.038"></status>
</kw>
<status starttime="20170512 23:19:39.036" status="PASS" endtime="20170512 23:19:39.038"></status>
</kw>
<status starttime="20170512 23:19:39.036" status="PASS" endtime="20170512 23:19:39.039"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:39.039">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:38.768" status="PASS" endtime="20170512 23:19:39.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:39.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:39.039" status="PASS" endtime="20170512 23:19:39.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:39.040">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:19:39.040">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:19:39.040">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:19:39.040" status="PASS" endtime="20170512 23:19:39.040"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:39.040">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:38.768" status="PASS" endtime="20170512 23:19:39.041"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:39.041">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:38.767" status="PASS" endtime="20170512 23:19:39.041"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:19:39.041">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:19:39.041" status="FAIL" endtime="20170512 23:19:39.041"></status>
</kw>
<status starttime="20170512 23:19:38.767" status="FAIL" endtime="20170512 23:19:39.042"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:49.047">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:19:49.046" status="PASS" endtime="20170512 23:19:49.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:19:49.047" status="PASS" endtime="20170512 23:19:49.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.048">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:19:49.048" status="PASS" endtime="20170512 23:19:49.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.049">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:19:49.049" status="PASS" endtime="20170512 23:19:49.049"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:49.230">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:19:49.050" status="PASS" endtime="20170512 23:19:49.230"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:49.230">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:19:49.231">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:49.049" status="PASS" endtime="20170512 23:19:49.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:49.231">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:49.231" status="PASS" endtime="20170512 23:19:49.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:49.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:49.232" status="PASS" endtime="20170512 23:19:49.232"></status>
</kw>
<status starttime="20170512 23:19:49.045" status="PASS" endtime="20170512 23:19:49.232"></status>
</kw>
<status starttime="20170512 23:19:49.045" status="PASS" endtime="20170512 23:19:49.232"></status>
</kw>
<status starttime="20170512 23:19:49.044" status="PASS" endtime="20170512 23:19:49.232"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.233">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:19:49.233" status="PASS" endtime="20170512 23:19:49.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.235">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:49.234" status="PASS" endtime="20170512 23:19:49.235"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:49.236">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:49.236" status="PASS" endtime="20170512 23:19:49.236"></status>
</kw>
<status starttime="20170512 23:19:49.235" status="PASS" endtime="20170512 23:19:49.236"></status>
</kw>
<status starttime="20170512 23:19:49.234" status="PASS" endtime="20170512 23:19:49.236"></status>
</kw>
<status starttime="20170512 23:19:49.233" status="PASS" endtime="20170512 23:19:49.237"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.303">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:19:49.303">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:49.237" status="PASS" endtime="20170512 23:19:49.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.305">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:49.304" status="PASS" endtime="20170512 23:19:49.305"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:49.308">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:49.308" status="PASS" endtime="20170512 23:19:49.308"></status>
</kw>
<status starttime="20170512 23:19:49.305" status="PASS" endtime="20170512 23:19:49.308"></status>
</kw>
<status starttime="20170512 23:19:49.304" status="PASS" endtime="20170512 23:19:49.308"></status>
</kw>
<status starttime="20170512 23:19:49.303" status="PASS" endtime="20170512 23:19:49.308"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:49.308">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:49.044" status="PASS" endtime="20170512 23:19:49.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:49.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:49.309" status="PASS" endtime="20170512 23:19:49.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:49.310">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:19:49.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:19:49.310">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:19:49.309" status="PASS" endtime="20170512 23:19:49.310"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:49.310">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:49.043" status="PASS" endtime="20170512 23:19:49.310"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:49.310">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:49.043" status="PASS" endtime="20170512 23:19:49.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:19:49.311">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:19:49.311" status="FAIL" endtime="20170512 23:19:49.311"></status>
</kw>
<status starttime="20170512 23:19:49.042" status="FAIL" endtime="20170512 23:19:49.311"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:59.316">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:19:59.316" status="PASS" endtime="20170512 23:19:59.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:19:59.317" status="PASS" endtime="20170512 23:19:59.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.318">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:19:59.317" status="PASS" endtime="20170512 23:19:59.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:19:59.318" status="PASS" endtime="20170512 23:19:59.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:59.495">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:19:59.319" status="PASS" endtime="20170512 23:19:59.495"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:59.495">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:19:59.495">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:59.319" status="PASS" endtime="20170512 23:19:59.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:59.496">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:59.495" status="PASS" endtime="20170512 23:19:59.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:59.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:59.496" status="PASS" endtime="20170512 23:19:59.497"></status>
</kw>
<status starttime="20170512 23:19:59.315" status="PASS" endtime="20170512 23:19:59.497"></status>
</kw>
<status starttime="20170512 23:19:59.315" status="PASS" endtime="20170512 23:19:59.497"></status>
</kw>
<status starttime="20170512 23:19:59.314" status="PASS" endtime="20170512 23:19:59.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.498">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:19:59.497" status="PASS" endtime="20170512 23:19:59.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.500">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:59.499" status="PASS" endtime="20170512 23:19:59.500"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:59.501">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:19:59.500" status="PASS" endtime="20170512 23:19:59.501"></status>
</kw>
<status starttime="20170512 23:19:59.500" status="PASS" endtime="20170512 23:19:59.501"></status>
</kw>
<status starttime="20170512 23:19:59.499" status="PASS" endtime="20170512 23:19:59.501"></status>
</kw>
<status starttime="20170512 23:19:59.498" status="PASS" endtime="20170512 23:19:59.501"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.567">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:19:59.567">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:59.501" status="PASS" endtime="20170512 23:19:59.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.569">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:59.569" status="PASS" endtime="20170512 23:19:59.569"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:59.570">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:19:59.570" status="PASS" endtime="20170512 23:19:59.570"></status>
</kw>
<status starttime="20170512 23:19:59.569" status="PASS" endtime="20170512 23:19:59.570"></status>
</kw>
<status starttime="20170512 23:19:59.568" status="PASS" endtime="20170512 23:19:59.570"></status>
</kw>
<status starttime="20170512 23:19:59.568" status="PASS" endtime="20170512 23:19:59.570"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:59.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:19:59.313" status="PASS" endtime="20170512 23:19:59.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:19:59.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:19:59.571" status="PASS" endtime="20170512 23:19:59.571"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:19:59.572">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:19:59.572">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:19:59.572">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:19:59.572" status="PASS" endtime="20170512 23:19:59.572"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:59.572">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:59.313" status="PASS" endtime="20170512 23:19:59.572"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:19:59.573">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:19:59.312" status="PASS" endtime="20170512 23:19:59.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:19:59.573">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:19:59.573" status="FAIL" endtime="20170512 23:19:59.574"></status>
</kw>
<status starttime="20170512 23:19:59.312" status="FAIL" endtime="20170512 23:19:59.574"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:09.578">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:09.578" status="PASS" endtime="20170512 23:20:09.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.579">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:09.579" status="PASS" endtime="20170512 23:20:09.579"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.580">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:09.580" status="PASS" endtime="20170512 23:20:09.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.581">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:09.580" status="PASS" endtime="20170512 23:20:09.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:09.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:09.581" status="PASS" endtime="20170512 23:20:09.761"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:09.761">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:09.761">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:09.581" status="PASS" endtime="20170512 23:20:09.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:09.762">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:09.761" status="PASS" endtime="20170512 23:20:09.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:09.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:09.762" status="PASS" endtime="20170512 23:20:09.762"></status>
</kw>
<status starttime="20170512 23:20:09.577" status="PASS" endtime="20170512 23:20:09.763"></status>
</kw>
<status starttime="20170512 23:20:09.577" status="PASS" endtime="20170512 23:20:09.763"></status>
</kw>
<status starttime="20170512 23:20:09.576" status="PASS" endtime="20170512 23:20:09.763"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.763">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:20:09.763" status="PASS" endtime="20170512 23:20:09.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.765">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:20:09.765" status="PASS" endtime="20170512 23:20:09.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:09.766">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:20:09.766" status="PASS" endtime="20170512 23:20:09.767"></status>
</kw>
<status starttime="20170512 23:20:09.766" status="PASS" endtime="20170512 23:20:09.767"></status>
</kw>
<status starttime="20170512 23:20:09.764" status="PASS" endtime="20170512 23:20:09.767"></status>
</kw>
<status starttime="20170512 23:20:09.764" status="PASS" endtime="20170512 23:20:09.767"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.833">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:09.834">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:09.767" status="PASS" endtime="20170512 23:20:09.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.835">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:09.835" status="PASS" endtime="20170512 23:20:09.835"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:09.836">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:09.836" status="PASS" endtime="20170512 23:20:09.837"></status>
</kw>
<status starttime="20170512 23:20:09.836" status="PASS" endtime="20170512 23:20:09.837"></status>
</kw>
<status starttime="20170512 23:20:09.834" status="PASS" endtime="20170512 23:20:09.837"></status>
</kw>
<status starttime="20170512 23:20:09.834" status="PASS" endtime="20170512 23:20:09.837"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:09.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:09.576" status="PASS" endtime="20170512 23:20:09.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:09.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:09.837" status="PASS" endtime="20170512 23:20:09.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:09.838">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:09.838">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:09.839">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:20:09.838" status="PASS" endtime="20170512 23:20:09.839"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:09.839">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:20:09.575" status="PASS" endtime="20170512 23:20:09.839"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:09.839">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:20:09.575" status="PASS" endtime="20170512 23:20:09.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:09.840">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:20:09.839" status="FAIL" endtime="20170512 23:20:09.840"></status>
</kw>
<status starttime="20170512 23:20:09.574" status="FAIL" endtime="20170512 23:20:09.840"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:19.845">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:19.844" status="PASS" endtime="20170512 23:20:19.845"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:19.846">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:19.845" status="PASS" endtime="20170512 23:20:19.846"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:19.846">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:19.846" status="PASS" endtime="20170512 23:20:19.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:19.847">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:19.847" status="PASS" endtime="20170512 23:20:19.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:20.047">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:19.848" status="PASS" endtime="20170512 23:20:20.047"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:20.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:20.047">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:19.847" status="PASS" endtime="20170512 23:20:20.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:20.047">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:20.047" status="PASS" endtime="20170512 23:20:20.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:20.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:20.048" status="PASS" endtime="20170512 23:20:20.049"></status>
</kw>
<status starttime="20170512 23:20:19.844" status="PASS" endtime="20170512 23:20:20.049"></status>
</kw>
<status starttime="20170512 23:20:19.843" status="PASS" endtime="20170512 23:20:20.049"></status>
</kw>
<status starttime="20170512 23:20:19.843" status="PASS" endtime="20170512 23:20:20.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:20.049">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:20:20.049" status="PASS" endtime="20170512 23:20:20.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:20.052">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:20:20.051" status="PASS" endtime="20170512 23:20:20.052"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:20.052">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:20:20.052" status="PASS" endtime="20170512 23:20:20.053"></status>
</kw>
<status starttime="20170512 23:20:20.052" status="PASS" endtime="20170512 23:20:20.053"></status>
</kw>
<status starttime="20170512 23:20:20.050" status="PASS" endtime="20170512 23:20:20.053"></status>
</kw>
<status starttime="20170512 23:20:20.050" status="PASS" endtime="20170512 23:20:20.053"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:20.119">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:20.119">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:20.053" status="PASS" endtime="20170512 23:20:20.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:20.121">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:20.121" status="PASS" endtime="20170512 23:20:20.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:20.122">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:20.122" status="PASS" endtime="20170512 23:20:20.122"></status>
</kw>
<status starttime="20170512 23:20:20.121" status="PASS" endtime="20170512 23:20:20.122"></status>
</kw>
<status starttime="20170512 23:20:20.120" status="PASS" endtime="20170512 23:20:20.122"></status>
</kw>
<status starttime="20170512 23:20:20.120" status="PASS" endtime="20170512 23:20:20.122"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:20.123">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:19.842" status="PASS" endtime="20170512 23:20:20.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:20.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:20.123" status="PASS" endtime="20170512 23:20:20.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:20.124">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:20.124">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:20.124">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:20:20.124" status="PASS" endtime="20170512 23:20:20.124"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:20.124">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:20:19.841" status="PASS" endtime="20170512 23:20:20.125"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:20.125">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:20:19.841" status="PASS" endtime="20170512 23:20:20.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:20.125">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:20:20.125" status="FAIL" endtime="20170512 23:20:20.125"></status>
</kw>
<status starttime="20170512 23:20:19.840" status="FAIL" endtime="20170512 23:20:20.126"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.131">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:30.131" status="PASS" endtime="20170512 23:20:30.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.132">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:30.132" status="PASS" endtime="20170512 23:20:30.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.133">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:30.133" status="PASS" endtime="20170512 23:20:30.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.134">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:30.134" status="PASS" endtime="20170512 23:20:30.134"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:30.135" status="PASS" endtime="20170512 23:20:30.311"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.312">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:30.312">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:30.135" status="PASS" endtime="20170512 23:20:30.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:30.312" status="PASS" endtime="20170512 23:20:30.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:30.313" status="PASS" endtime="20170512 23:20:30.313"></status>
</kw>
<status starttime="20170512 23:20:30.130" status="PASS" endtime="20170512 23:20:30.313"></status>
</kw>
<status starttime="20170512 23:20:30.129" status="PASS" endtime="20170512 23:20:30.313"></status>
</kw>
<status starttime="20170512 23:20:30.128" status="PASS" endtime="20170512 23:20:30.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.314">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170512 23:20:30.314" status="PASS" endtime="20170512 23:20:30.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.316">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:20:30.315" status="PASS" endtime="20170512 23:20:30.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.317">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170512 23:20:30.317" status="PASS" endtime="20170512 23:20:30.317"></status>
</kw>
<status starttime="20170512 23:20:30.316" status="PASS" endtime="20170512 23:20:30.317"></status>
</kw>
<status starttime="20170512 23:20:30.315" status="PASS" endtime="20170512 23:20:30.317"></status>
</kw>
<status starttime="20170512 23:20:30.314" status="PASS" endtime="20170512 23:20:30.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.437">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:30.437">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:30.318" status="PASS" endtime="20170512 23:20:30.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.439">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:30.438" status="PASS" endtime="20170512 23:20:30.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.440">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:30.440" status="PASS" endtime="20170512 23:20:30.440"></status>
</kw>
<status starttime="20170512 23:20:30.439" status="PASS" endtime="20170512 23:20:30.440"></status>
</kw>
<status starttime="20170512 23:20:30.438" status="PASS" endtime="20170512 23:20:30.441"></status>
</kw>
<status starttime="20170512 23:20:30.438" status="PASS" endtime="20170512 23:20:30.441"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.441">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:30.128" status="PASS" endtime="20170512 23:20:30.441"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:30.441" status="PASS" endtime="20170512 23:20:30.441"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.442">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:30.442">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:30.442">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:20:30.442" status="PASS" endtime="20170512 23:20:30.442"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.442">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:20:30.127" status="PASS" endtime="20170512 23:20:30.443"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.443">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170512 23:20:30.127" status="PASS" endtime="20170512 23:20:30.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:30.443">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:20:30.443" status="FAIL" endtime="20170512 23:20:30.444"></status>
</kw>
<status starttime="20170512 23:20:30.126" status="FAIL" endtime="20170512 23:20:30.444"></status>
</kw>
<msg level="FAIL" timestamp="20170512 23:20:30.444">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170512 23:10:24.803" status="FAIL" endtime="20170512 23:20:30.444"></status>
</kw>
<status starttime="20170512 23:09:46.935" status="FAIL" endtime="20170512 23:20:30.444"></status>
</kw>
<status starttime="20170512 23:07:26.290" status="FAIL" endtime="20170512 23:20:30.444"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.449">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:30.449" status="PASS" endtime="20170512 23:20:30.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:30.450" status="PASS" endtime="20170512 23:20:30.450"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.451">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:30.450" status="PASS" endtime="20170512 23:20:30.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:30.451" status="PASS" endtime="20170512 23:20:30.451"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.634">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:30.452" status="PASS" endtime="20170512 23:20:30.634"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.634">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:30.634">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:30.452" status="PASS" endtime="20170512 23:20:30.634"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.635">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:30.634" status="PASS" endtime="20170512 23:20:30.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:30.635" status="PASS" endtime="20170512 23:20:30.635"></status>
</kw>
<status starttime="20170512 23:20:30.448" status="PASS" endtime="20170512 23:20:30.636"></status>
</kw>
<status starttime="20170512 23:20:30.448" status="PASS" endtime="20170512 23:20:30.636"></status>
</kw>
<status starttime="20170512 23:20:30.447" status="PASS" endtime="20170512 23:20:30.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.636">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170512 23:20:30.636" status="PASS" endtime="20170512 23:20:30.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.639">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:20:30.638" status="PASS" endtime="20170512 23:20:30.639"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.640">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170512 23:20:30.640" status="PASS" endtime="20170512 23:20:30.641"></status>
</kw>
<status starttime="20170512 23:20:30.639" status="PASS" endtime="20170512 23:20:30.641"></status>
</kw>
<status starttime="20170512 23:20:30.637" status="PASS" endtime="20170512 23:20:30.641"></status>
</kw>
<status starttime="20170512 23:20:30.637" status="PASS" endtime="20170512 23:20:30.641"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.704">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:30.704">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:30.641" status="PASS" endtime="20170512 23:20:30.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.706">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:30.705" status="PASS" endtime="20170512 23:20:30.706"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.706">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170512 23:20:30.706" status="PASS" endtime="20170512 23:20:30.707"></status>
</kw>
<status starttime="20170512 23:20:30.706" status="PASS" endtime="20170512 23:20:30.707"></status>
</kw>
<status starttime="20170512 23:20:30.705" status="PASS" endtime="20170512 23:20:30.707"></status>
</kw>
<status starttime="20170512 23:20:30.704" status="PASS" endtime="20170512 23:20:30.707"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:30.446" status="PASS" endtime="20170512 23:20:30.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:30.707" status="PASS" endtime="20170512 23:20:30.708"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.708">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:30.708">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:30.709">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170512 23:20:30.708" status="PASS" endtime="20170512 23:20:30.709"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.709">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170512 23:20:30.446" status="PASS" endtime="20170512 23:20:30.709"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.709">${host_state} = Running</msg>
<status starttime="20170512 23:20:30.446" status="PASS" endtime="20170512 23:20:30.709"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:30.710">Running != Quiesced</msg>
<status starttime="20170512 23:20:30.710" status="FAIL" endtime="20170512 23:20:30.710"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.710">${status} = False</msg>
<status starttime="20170512 23:20:30.709" status="PASS" endtime="20170512 23:20:30.710"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:30.711">${status} = False</msg>
<status starttime="20170512 23:20:30.445" status="PASS" endtime="20170512 23:20:30.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:30.882">Length is 12</msg>
<status starttime="20170512 23:20:30.881" status="PASS" endtime="20170512 23:20:30.882"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:30.890">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:20:33.900">${RC} = 0</msg>
<msg level="INFO" timestamp="20170512 23:20:33.900">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.54 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.666 ms
64 bytes from 9.41.166.169...</msg>
<status starttime="20170512 23:20:30.882" status="PASS" endtime="20170512 23:20:33.901"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.903">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.54 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.666 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.662 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.628 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.628/0.874/1.543/0.387 ms</msg>
<status starttime="20170512 23:20:33.903" status="PASS" endtime="20170512 23:20:33.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170512 23:20:33.904" status="PASS" endtime="20170512 23:20:33.904"></status>
</kw>
<status starttime="20170512 23:20:30.881" status="PASS" endtime="20170512 23:20:33.904"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:33.926">${cur_time} = 2017-05-12 23:20:33:925331</msg>
<status starttime="20170512 23:20:33.925" status="PASS" endtime="20170512 23:20:33.926"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:33.926">${cur_time} = 20170512232033925331</msg>
<status starttime="20170512 23:20:33.926" status="PASS" endtime="20170512 23:20:33.926"></status>
</kw>
<status starttime="20170512 23:20:33.925" status="PASS" endtime="20170512 23:20:33.927"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:33.927">${FFDC_TIME} = 20170512232033925331</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:33.936">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170512 23:20:33.935" status="PASS" endtime="20170512 23:20:33.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:33.936">${suite_name} = 20170512232033925331_TestsTestBasicPoweron</msg>
<status starttime="20170512 23:20:33.936" status="PASS" endtime="20170512 23:20:33.936"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:33.937">${test_name} = PowerOnTest</msg>
<status starttime="20170512 23:20:33.936" status="PASS" endtime="20170512 23:20:33.937"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:33.937">${test_name} = 20170512232033925331_PowerOnTest</msg>
<status starttime="20170512 23:20:33.937" status="PASS" endtime="20170512 23:20:33.937"></status>
</kw>
<status starttime="20170512 23:20:33.935" status="PASS" endtime="20170512 23:20:33.938"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:33.938">${FFDC_DIR_PATH} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170512 23:20:33.938">${FFDC_PREFIX} = 20170512232033925331_</msg>
<msg level="INFO" timestamp="20170512 23:20:33.958">${LOG_PREFIX} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.960" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.958" status="PASS" endtime="20170512 23:20:33.960"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:33.964">${FFDC_FILE_PATH} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.983" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.982" status="PASS" endtime="20170512 23:20:33.983"></status>
</kw>
<status starttime="20170512 23:20:33.982" status="PASS" endtime="20170512 23:20:33.983"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.984" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.984" status="PASS" endtime="20170512 23:20:33.984"></status>
</kw>
<status starttime="20170512 23:20:33.983" status="PASS" endtime="20170512 23:20:33.984"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.986" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.985" status="PASS" endtime="20170512 23:20:33.986"></status>
</kw>
<status starttime="20170512 23:20:33.985" status="PASS" endtime="20170512 23:20:33.986"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.987" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.987" status="PASS" endtime="20170512 23:20:33.987"></status>
</kw>
<status starttime="20170512 23:20:33.986" status="PASS" endtime="20170512 23:20:33.987"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.988" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.988" status="PASS" endtime="20170512 23:20:33.989"></status>
</kw>
<status starttime="20170512 23:20:33.987" status="PASS" endtime="20170512 23:20:33.989"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.990" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.989" status="PASS" endtime="20170512 23:20:33.990"></status>
</kw>
<status starttime="20170512 23:20:33.989" status="PASS" endtime="20170512 23:20:33.990"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.991" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.991" status="PASS" endtime="20170512 23:20:33.991"></status>
</kw>
<status starttime="20170512 23:20:33.990" status="PASS" endtime="20170512 23:20:33.991"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.992" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.992" status="PASS" endtime="20170512 23:20:33.992"></status>
</kw>
<status starttime="20170512 23:20:33.991" status="PASS" endtime="20170512 23:20:33.993"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.994" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.993" status="PASS" endtime="20170512 23:20:33.994"></status>
</kw>
<status starttime="20170512 23:20:33.993" status="PASS" endtime="20170512 23:20:33.994"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.995" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.995" status="PASS" endtime="20170512 23:20:33.995"></status>
</kw>
<status starttime="20170512 23:20:33.994" status="PASS" endtime="20170512 23:20:33.995"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.996" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.996" status="PASS" endtime="20170512 23:20:33.997"></status>
</kw>
<status starttime="20170512 23:20:33.996" status="PASS" endtime="20170512 23:20:33.997"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.998" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.997" status="PASS" endtime="20170512 23:20:33.998"></status>
</kw>
<status starttime="20170512 23:20:33.997" status="PASS" endtime="20170512 23:20:33.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:33.999" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:33.999" status="PASS" endtime="20170512 23:20:33.999"></status>
</kw>
<status starttime="20170512 23:20:33.998" status="PASS" endtime="20170512 23:20:33.999"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:34.002">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:20:34.001" status="FAIL" endtime="20170512 23:20:34.002"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:34.002">${has_host} = False</msg>
<status starttime="20170512 23:20:34.001" status="PASS" endtime="20170512 23:20:34.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:20:34.003" status="PASS" endtime="20170512 23:20:34.003"></status>
</kw>
<status starttime="20170512 23:20:34.002" status="PASS" endtime="20170512 23:20:34.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:34.005">${port_num} = 22</msg>
<status starttime="20170512 23:20:34.004" status="PASS" endtime="20170512 23:20:34.005"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:34.005">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:20:34.005" status="PASS" endtime="20170512 23:20:34.005"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:34.006">${https_num} = 443</msg>
<status starttime="20170512 23:20:34.005" status="PASS" endtime="20170512 23:20:34.006"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:34.007">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:20:34.006" status="PASS" endtime="20170512 23:20:34.007"></status>
</kw>
<status starttime="20170512 23:20:34.004" status="PASS" endtime="20170512 23:20:34.007"></status>
</kw>
<status starttime="20170512 23:20:34.003" status="PASS" endtime="20170512 23:20:34.007"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:34.008">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:20:34.007" status="FAIL" endtime="20170512 23:20:34.008"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:34.008">${has_port} = False</msg>
<status starttime="20170512 23:20:34.007" status="PASS" endtime="20170512 23:20:34.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:20:34.009" status="PASS" endtime="20170512 23:20:34.010"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:20:34.010" status="PASS" endtime="20170512 23:20:34.010"></status>
</kw>
<status starttime="20170512 23:20:34.009" status="PASS" endtime="20170512 23:20:34.010"></status>
</kw>
<status starttime="20170512 23:20:34.008" status="PASS" endtime="20170512 23:20:34.011"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:34.011">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:20:35.657">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:20:34.011" status="PASS" endtime="20170512 23:20:35.657"></status>
</kw>
<status starttime="20170512 23:20:34.000" status="PASS" endtime="20170512 23:20:35.657"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:35.658">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170512 23:20:35.729">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:35.729">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170512 23:20:35.729">${stderr} = </msg>
<status starttime="20170512 23:20:35.658" status="PASS" endtime="20170512 23:20:35.729"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.729">Length is 0</msg>
<status starttime="20170512 23:20:35.729" status="PASS" endtime="20170512 23:20:35.730"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.730">Length is 11</msg>
<status starttime="20170512 23:20:35.730" status="PASS" endtime="20170512 23:20:35.730"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:35.730">${model_name} = Witherspoon</msg>
<status starttime="20170512 23:20:33.999" status="PASS" endtime="20170512 23:20:35.730"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.732" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.731" status="PASS" endtime="20170512 23:20:35.732"></status>
</kw>
<status starttime="20170512 23:20:35.730" status="PASS" endtime="20170512 23:20:35.733"></status>
</kw>
<status starttime="20170512 23:20:33.994" status="PASS" endtime="20170512 23:20:35.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.734" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.734" status="PASS" endtime="20170512 23:20:35.734"></status>
</kw>
<status starttime="20170512 23:20:35.733" status="PASS" endtime="20170512 23:20:35.734"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:35.735">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170512 23:20:35.734" status="PASS" endtime="20170512 23:20:35.735"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.736" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.736" status="PASS" endtime="20170512 23:20:35.736"></status>
</kw>
<status starttime="20170512 23:20:35.735" status="PASS" endtime="20170512 23:20:35.736"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.737" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.737" status="PASS" endtime="20170512 23:20:35.738"></status>
</kw>
<status starttime="20170512 23:20:35.737" status="PASS" endtime="20170512 23:20:35.738"></status>
</kw>
<status starttime="20170512 23:20:35.735" status="PASS" endtime="20170512 23:20:35.738"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.739" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.739" status="PASS" endtime="20170512 23:20:35.739"></status>
</kw>
<status starttime="20170512 23:20:35.738" status="PASS" endtime="20170512 23:20:35.739"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.740" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.740" status="PASS" endtime="20170512 23:20:35.740"></status>
</kw>
<status starttime="20170512 23:20:35.739" status="PASS" endtime="20170512 23:20:35.740"></status>
</kw>
<status starttime="20170512 23:20:35.738" status="PASS" endtime="20170512 23:20:35.740"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.742" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.741" status="PASS" endtime="20170512 23:20:35.742"></status>
</kw>
<status starttime="20170512 23:20:35.741" status="PASS" endtime="20170512 23:20:35.742"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.743" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.742" status="PASS" endtime="20170512 23:20:35.743"></status>
</kw>
<status starttime="20170512 23:20:35.742" status="PASS" endtime="20170512 23:20:35.743"></status>
</kw>
<status starttime="20170512 23:20:35.740" status="PASS" endtime="20170512 23:20:35.743"></status>
</kw>
<status starttime="20170512 23:20:35.735" status="PASS" endtime="20170512 23:20:35.743"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.744" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:35.744" status="PASS" endtime="20170512 23:20:35.744"></status>
</kw>
<status starttime="20170512 23:20:35.743" status="PASS" endtime="20170512 23:20:35.744"></status>
</kw>
<status starttime="20170512 23:20:33.981" status="PASS" endtime="20170512 23:20:35.745"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:35.751">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170512 23:20:35.751" status="PASS" endtime="20170512 23:20:35.751"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:35.754">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Ge...</msg>
<status starttime="20170512 23:20:35.753" status="PASS" endtime="20170512 23:20:35.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170512 23:20:35.755" status="PASS" endtime="20170512 23:20:35.755"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:35.755">@{ffdc_function_list} = [ Core Files | OS FFDC | SEL Log | BMC Specific Files | FFDC Generic Report | Get Request FFDC ]</msg>
<status starttime="20170512 23:20:35.754" status="PASS" endtime="20170512 23:20:35.755"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170512 23:20:35.757" status="PASS" endtime="20170512 23:20:35.757"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:35.757">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:35.757">${ret_values} = None</msg>
<status starttime="20170512 23:20:35.756" status="PASS" endtime="20170512 23:20:35.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170512 23:20:35.758" status="PASS" endtime="20170512 23:20:35.758"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:35.786">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:20:35.785" status="FAIL" endtime="20170512 23:20:35.786"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:35.786">${has_host} = False</msg>
<status starttime="20170512 23:20:35.785" status="PASS" endtime="20170512 23:20:35.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:20:35.787" status="PASS" endtime="20170512 23:20:35.787"></status>
</kw>
<status starttime="20170512 23:20:35.786" status="PASS" endtime="20170512 23:20:35.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:35.789">${port_num} = 22</msg>
<status starttime="20170512 23:20:35.788" status="PASS" endtime="20170512 23:20:35.789"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:35.789">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:20:35.789" status="PASS" endtime="20170512 23:20:35.789"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:35.790">${https_num} = 443</msg>
<status starttime="20170512 23:20:35.790" status="PASS" endtime="20170512 23:20:35.790"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.791">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:20:35.790" status="PASS" endtime="20170512 23:20:35.791"></status>
</kw>
<status starttime="20170512 23:20:35.788" status="PASS" endtime="20170512 23:20:35.791"></status>
</kw>
<status starttime="20170512 23:20:35.787" status="PASS" endtime="20170512 23:20:35.791"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:35.792">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:20:35.792" status="FAIL" endtime="20170512 23:20:35.792"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:35.792">${has_port} = False</msg>
<status starttime="20170512 23:20:35.791" status="PASS" endtime="20170512 23:20:35.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:20:35.794" status="PASS" endtime="20170512 23:20:35.794"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:20:35.794" status="PASS" endtime="20170512 23:20:35.795"></status>
</kw>
<status starttime="20170512 23:20:35.793" status="PASS" endtime="20170512 23:20:35.795"></status>
</kw>
<status starttime="20170512 23:20:35.793" status="PASS" endtime="20170512 23:20:35.795"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:35.795">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:20:37.410">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:20:35.795" status="PASS" endtime="20170512 23:20:37.410"></status>
</kw>
<status starttime="20170512 23:20:35.784" status="PASS" endtime="20170512 23:20:37.410"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:37.411">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170512 23:20:37.458">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:37.458">${core_files} = /tmp/core_phosphor-fan-mo.1579
/tmp/core_phosphor-fan-mo.1779
/tmp/core_phosphor-fan-mo.1782
/tmp/core_phosphor-fan-mo.1785
/tmp/core_phosphor-fan-mo.1813
/tmp/core_phosphor-fan-mo.1816
/tmp/core_phos...</msg>
<status starttime="20170512 23:20:37.411" status="PASS" endtime="20170512 23:20:37.458"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:37.459">@{core_list} = [ /tmp/core_phosphor-fan-mo.1579 | /tmp/core_phosphor-fan-mo.1779 | /tmp/core_phosphor-fan-mo.1782 | /tmp/core_phosphor-fan-mo.1785 | /tmp/core_phosphor-fan-mo.1813 | /tmp/core_phosphor-fan-mo.1816 | ...</msg>
<status starttime="20170512 23:20:37.458" status="PASS" endtime="20170512 23:20:37.459"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170512 23:20:37.460" status="PASS" endtime="20170512 23:20:37.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170512 23:20:37.469" status="PASS" endtime="20170512 23:20:38.110"></status>
</kw>
<status starttime="20170512 23:20:37.469" status="PASS" endtime="20170512 23:20:38.111"></status>
</kw>
<status starttime="20170512 23:20:37.468" status="PASS" endtime="20170512 23:20:38.111"></status>
</kw>
<status starttime="20170512 23:20:37.459" status="PASS" endtime="20170512 23:20:38.111"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1579">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:38.111" status="PASS" endtime="20170512 23:20:38.362"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:38.363">Executing command 'rm /tmp/core_phosphor-fan-mo.1579'.</msg>
<msg level="INFO" timestamp="20170512 23:20:38.409">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:38.410">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:38.410">${stderr} = </msg>
<status starttime="20170512 23:20:38.363" status="PASS" endtime="20170512 23:20:38.410"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:38.410">Length is 0</msg>
<status starttime="20170512 23:20:38.410" status="PASS" endtime="20170512 23:20:38.410"></status>
</kw>
<status starttime="20170512 23:20:38.362" status="PASS" endtime="20170512 23:20:38.410"></status>
</kw>
<status starttime="20170512 23:20:38.111" status="PASS" endtime="20170512 23:20:38.411"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1779">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:38.411" status="PASS" endtime="20170512 23:20:38.642"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:38.643">Executing command 'rm /tmp/core_phosphor-fan-mo.1779'.</msg>
<msg level="INFO" timestamp="20170512 23:20:38.690">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:38.690">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:38.690">${stderr} = </msg>
<status starttime="20170512 23:20:38.643" status="PASS" endtime="20170512 23:20:38.690"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:38.690">Length is 0</msg>
<status starttime="20170512 23:20:38.690" status="PASS" endtime="20170512 23:20:38.690"></status>
</kw>
<status starttime="20170512 23:20:38.642" status="PASS" endtime="20170512 23:20:38.691"></status>
</kw>
<status starttime="20170512 23:20:38.411" status="PASS" endtime="20170512 23:20:38.691"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1782">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:38.691" status="PASS" endtime="20170512 23:20:38.962"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:38.963">Executing command 'rm /tmp/core_phosphor-fan-mo.1782'.</msg>
<msg level="INFO" timestamp="20170512 23:20:39.010">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:39.010">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:39.010">${stderr} = </msg>
<status starttime="20170512 23:20:38.963" status="PASS" endtime="20170512 23:20:39.010"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:39.010">Length is 0</msg>
<status starttime="20170512 23:20:39.010" status="PASS" endtime="20170512 23:20:39.011"></status>
</kw>
<status starttime="20170512 23:20:38.962" status="PASS" endtime="20170512 23:20:39.011"></status>
</kw>
<status starttime="20170512 23:20:38.691" status="PASS" endtime="20170512 23:20:39.011"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1785">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:39.011" status="PASS" endtime="20170512 23:20:39.289"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:39.291">Executing command 'rm /tmp/core_phosphor-fan-mo.1785'.</msg>
<msg level="INFO" timestamp="20170512 23:20:39.349">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:39.349">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:39.349">${stderr} = </msg>
<status starttime="20170512 23:20:39.290" status="PASS" endtime="20170512 23:20:39.349"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:39.350">Length is 0</msg>
<status starttime="20170512 23:20:39.349" status="PASS" endtime="20170512 23:20:39.350"></status>
</kw>
<status starttime="20170512 23:20:39.289" status="PASS" endtime="20170512 23:20:39.350"></status>
</kw>
<status starttime="20170512 23:20:39.011" status="PASS" endtime="20170512 23:20:39.350"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1813">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:39.350" status="PASS" endtime="20170512 23:20:39.601"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:39.602">Executing command 'rm /tmp/core_phosphor-fan-mo.1813'.</msg>
<msg level="INFO" timestamp="20170512 23:20:39.649">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:39.649">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:39.649">${stderr} = </msg>
<status starttime="20170512 23:20:39.602" status="PASS" endtime="20170512 23:20:39.649"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:39.649">Length is 0</msg>
<status starttime="20170512 23:20:39.649" status="PASS" endtime="20170512 23:20:39.649"></status>
</kw>
<status starttime="20170512 23:20:39.601" status="PASS" endtime="20170512 23:20:39.650"></status>
</kw>
<status starttime="20170512 23:20:39.350" status="PASS" endtime="20170512 23:20:39.650"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1816">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:39.650" status="PASS" endtime="20170512 23:20:39.973"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:39.975">Executing command 'rm /tmp/core_phosphor-fan-mo.1816'.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.021">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.021">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:40.022">${stderr} = </msg>
<status starttime="20170512 23:20:39.974" status="PASS" endtime="20170512 23:20:40.022"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:40.022">Length is 0</msg>
<status starttime="20170512 23:20:40.022" status="PASS" endtime="20170512 23:20:40.022"></status>
</kw>
<status starttime="20170512 23:20:39.974" status="PASS" endtime="20170512 23:20:40.022"></status>
</kw>
<status starttime="20170512 23:20:39.650" status="PASS" endtime="20170512 23:20:40.022"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1819">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:40.023" status="PASS" endtime="20170512 23:20:40.271"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:40.273">Executing command 'rm /tmp/core_phosphor-fan-mo.1819'.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.321">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.321">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:40.321">${stderr} = </msg>
<status starttime="20170512 23:20:40.272" status="PASS" endtime="20170512 23:20:40.321"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:40.322">Length is 0</msg>
<status starttime="20170512 23:20:40.322" status="PASS" endtime="20170512 23:20:40.322"></status>
</kw>
<status starttime="20170512 23:20:40.272" status="PASS" endtime="20170512 23:20:40.322"></status>
</kw>
<status starttime="20170512 23:20:40.022" status="PASS" endtime="20170512 23:20:40.322"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1822">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:40.322" status="PASS" endtime="20170512 23:20:40.575"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:40.576">Executing command 'rm /tmp/core_phosphor-fan-mo.1822'.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.623">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.623">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:40.623">${stderr} = </msg>
<status starttime="20170512 23:20:40.576" status="PASS" endtime="20170512 23:20:40.623"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:40.624">Length is 0</msg>
<status starttime="20170512 23:20:40.623" status="PASS" endtime="20170512 23:20:40.624"></status>
</kw>
<status starttime="20170512 23:20:40.575" status="PASS" endtime="20170512 23:20:40.624"></status>
</kw>
<status starttime="20170512 23:20:40.322" status="PASS" endtime="20170512 23:20:40.624"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1825">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:40.624" status="PASS" endtime="20170512 23:20:40.880"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:40.881">Executing command 'rm /tmp/core_phosphor-fan-mo.1825'.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.988">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:40.988">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:40.989">${stderr} = </msg>
<status starttime="20170512 23:20:40.881" status="PASS" endtime="20170512 23:20:40.989"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:40.989">Length is 0</msg>
<status starttime="20170512 23:20:40.989" status="PASS" endtime="20170512 23:20:40.989"></status>
</kw>
<status starttime="20170512 23:20:40.880" status="PASS" endtime="20170512 23:20:40.989"></status>
</kw>
<status starttime="20170512 23:20:40.624" status="PASS" endtime="20170512 23:20:40.989"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1828">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:40.990" status="PASS" endtime="20170512 23:20:41.242"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:41.244">Executing command 'rm /tmp/core_phosphor-fan-mo.1828'.</msg>
<msg level="INFO" timestamp="20170512 23:20:41.300">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:41.301">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:41.301">${stderr} = </msg>
<status starttime="20170512 23:20:41.243" status="PASS" endtime="20170512 23:20:41.301"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:41.301">Length is 0</msg>
<status starttime="20170512 23:20:41.301" status="PASS" endtime="20170512 23:20:41.301"></status>
</kw>
<status starttime="20170512 23:20:41.243" status="PASS" endtime="20170512 23:20:41.301"></status>
</kw>
<status starttime="20170512 23:20:40.989" status="PASS" endtime="20170512 23:20:41.302"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.1985">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:41.302" status="PASS" endtime="20170512 23:20:41.554"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:41.555">Executing command 'rm /tmp/core_phosphor-fan-mo.1985'.</msg>
<msg level="INFO" timestamp="20170512 23:20:41.602">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:41.602">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:41.602">${stderr} = </msg>
<status starttime="20170512 23:20:41.555" status="PASS" endtime="20170512 23:20:41.602"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:41.603">Length is 0</msg>
<status starttime="20170512 23:20:41.603" status="PASS" endtime="20170512 23:20:41.603"></status>
</kw>
<status starttime="20170512 23:20:41.554" status="PASS" endtime="20170512 23:20:41.603"></status>
</kw>
<status starttime="20170512 23:20:41.302" status="PASS" endtime="20170512 23:20:41.603"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2198">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:41.604" status="PASS" endtime="20170512 23:20:41.850"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:41.852">Executing command 'rm /tmp/core_phosphor-fan-mo.2198'.</msg>
<msg level="INFO" timestamp="20170512 23:20:41.908">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:41.909">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:41.909">${stderr} = </msg>
<status starttime="20170512 23:20:41.851" status="PASS" endtime="20170512 23:20:41.909"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:41.909">Length is 0</msg>
<status starttime="20170512 23:20:41.909" status="PASS" endtime="20170512 23:20:41.909"></status>
</kw>
<status starttime="20170512 23:20:41.850" status="PASS" endtime="20170512 23:20:41.909"></status>
</kw>
<status starttime="20170512 23:20:41.603" status="PASS" endtime="20170512 23:20:41.909"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2203">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:41.910" status="PASS" endtime="20170512 23:20:42.195"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:42.197">Executing command 'rm /tmp/core_phosphor-fan-mo.2203'.</msg>
<msg level="INFO" timestamp="20170512 23:20:42.243">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:42.243">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:42.243">${stderr} = </msg>
<status starttime="20170512 23:20:42.196" status="PASS" endtime="20170512 23:20:42.243"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:42.244">Length is 0</msg>
<status starttime="20170512 23:20:42.244" status="PASS" endtime="20170512 23:20:42.244"></status>
</kw>
<status starttime="20170512 23:20:42.195" status="PASS" endtime="20170512 23:20:42.244"></status>
</kw>
<status starttime="20170512 23:20:41.910" status="PASS" endtime="20170512 23:20:42.244"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2206">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:42.245" status="PASS" endtime="20170512 23:20:42.500"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:42.501">Executing command 'rm /tmp/core_phosphor-fan-mo.2206'.</msg>
<msg level="INFO" timestamp="20170512 23:20:42.547">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:42.547">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:42.547">${stderr} = </msg>
<status starttime="20170512 23:20:42.500" status="PASS" endtime="20170512 23:20:42.547"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:42.548">Length is 0</msg>
<status starttime="20170512 23:20:42.548" status="PASS" endtime="20170512 23:20:42.548"></status>
</kw>
<status starttime="20170512 23:20:42.500" status="PASS" endtime="20170512 23:20:42.548"></status>
</kw>
<status starttime="20170512 23:20:42.244" status="PASS" endtime="20170512 23:20:42.548"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2234">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:42.548" status="PASS" endtime="20170512 23:20:42.798"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:42.799">Executing command 'rm /tmp/core_phosphor-fan-mo.2234'.</msg>
<msg level="INFO" timestamp="20170512 23:20:42.846">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:42.846">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:42.846">${stderr} = </msg>
<status starttime="20170512 23:20:42.799" status="PASS" endtime="20170512 23:20:42.846"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:42.846">Length is 0</msg>
<status starttime="20170512 23:20:42.846" status="PASS" endtime="20170512 23:20:42.846"></status>
</kw>
<status starttime="20170512 23:20:42.798" status="PASS" endtime="20170512 23:20:42.847"></status>
</kw>
<status starttime="20170512 23:20:42.548" status="PASS" endtime="20170512 23:20:42.847"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2237">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:42.847" status="PASS" endtime="20170512 23:20:43.136"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:43.137">Executing command 'rm /tmp/core_phosphor-fan-mo.2237'.</msg>
<msg level="INFO" timestamp="20170512 23:20:43.184">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:43.185">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:43.185">${stderr} = </msg>
<status starttime="20170512 23:20:43.137" status="PASS" endtime="20170512 23:20:43.185"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:43.185">Length is 0</msg>
<status starttime="20170512 23:20:43.185" status="PASS" endtime="20170512 23:20:43.185"></status>
</kw>
<status starttime="20170512 23:20:43.136" status="PASS" endtime="20170512 23:20:43.186"></status>
</kw>
<status starttime="20170512 23:20:42.847" status="PASS" endtime="20170512 23:20:43.186"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2242">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:43.186" status="PASS" endtime="20170512 23:20:43.449"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:43.450">Executing command 'rm /tmp/core_phosphor-fan-mo.2242'.</msg>
<msg level="INFO" timestamp="20170512 23:20:43.497">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:43.497">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:43.497">${stderr} = </msg>
<status starttime="20170512 23:20:43.450" status="PASS" endtime="20170512 23:20:43.497"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:43.497">Length is 0</msg>
<status starttime="20170512 23:20:43.497" status="PASS" endtime="20170512 23:20:43.497"></status>
</kw>
<status starttime="20170512 23:20:43.449" status="PASS" endtime="20170512 23:20:43.498"></status>
</kw>
<status starttime="20170512 23:20:43.186" status="PASS" endtime="20170512 23:20:43.498"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2245">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:43.498" status="PASS" endtime="20170512 23:20:43.761"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:43.762">Executing command 'rm /tmp/core_phosphor-fan-mo.2245'.</msg>
<msg level="INFO" timestamp="20170512 23:20:43.809">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:43.809">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:43.809">${stderr} = </msg>
<status starttime="20170512 23:20:43.762" status="PASS" endtime="20170512 23:20:43.809"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:43.809">Length is 0</msg>
<status starttime="20170512 23:20:43.809" status="PASS" endtime="20170512 23:20:43.809"></status>
</kw>
<status starttime="20170512 23:20:43.761" status="PASS" endtime="20170512 23:20:43.810"></status>
</kw>
<status starttime="20170512 23:20:43.498" status="PASS" endtime="20170512 23:20:43.810"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2248">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:43.810" status="PASS" endtime="20170512 23:20:44.074"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:44.076">Executing command 'rm /tmp/core_phosphor-fan-mo.2248'.</msg>
<msg level="INFO" timestamp="20170512 23:20:44.132">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:44.132">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:44.132">${stderr} = </msg>
<status starttime="20170512 23:20:44.075" status="PASS" endtime="20170512 23:20:44.132"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:44.133">Length is 0</msg>
<status starttime="20170512 23:20:44.133" status="PASS" endtime="20170512 23:20:44.133"></status>
</kw>
<status starttime="20170512 23:20:44.075" status="PASS" endtime="20170512 23:20:44.133"></status>
</kw>
<status starttime="20170512 23:20:43.810" status="PASS" endtime="20170512 23:20:44.133"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2251">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:44.134" status="PASS" endtime="20170512 23:20:44.397"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:44.398">Executing command 'rm /tmp/core_phosphor-fan-mo.2251'.</msg>
<msg level="INFO" timestamp="20170512 23:20:44.535">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:44.535">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:44.535">${stderr} = </msg>
<status starttime="20170512 23:20:44.398" status="PASS" endtime="20170512 23:20:44.535"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:44.536">Length is 0</msg>
<status starttime="20170512 23:20:44.535" status="PASS" endtime="20170512 23:20:44.536"></status>
</kw>
<status starttime="20170512 23:20:44.397" status="PASS" endtime="20170512 23:20:44.536"></status>
</kw>
<status starttime="20170512 23:20:44.133" status="PASS" endtime="20170512 23:20:44.536"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2254">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:44.537" status="PASS" endtime="20170512 23:20:45.304"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:45.305">Executing command 'rm /tmp/core_phosphor-fan-mo.2254'.</msg>
<msg level="INFO" timestamp="20170512 23:20:45.357">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:45.357">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:45.357">${stderr} = </msg>
<status starttime="20170512 23:20:45.305" status="PASS" endtime="20170512 23:20:45.357"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:45.358">Length is 0</msg>
<status starttime="20170512 23:20:45.358" status="PASS" endtime="20170512 23:20:45.358"></status>
</kw>
<status starttime="20170512 23:20:45.304" status="PASS" endtime="20170512 23:20:45.358"></status>
</kw>
<status starttime="20170512 23:20:44.536" status="PASS" endtime="20170512 23:20:45.358"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2257">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:45.358" status="PASS" endtime="20170512 23:20:45.673"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:45.675">Executing command 'rm /tmp/core_phosphor-fan-mo.2257'.</msg>
<msg level="INFO" timestamp="20170512 23:20:45.722">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:45.722">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:45.722">${stderr} = </msg>
<status starttime="20170512 23:20:45.675" status="PASS" endtime="20170512 23:20:45.722"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:45.722">Length is 0</msg>
<status starttime="20170512 23:20:45.722" status="PASS" endtime="20170512 23:20:45.723"></status>
</kw>
<status starttime="20170512 23:20:45.674" status="PASS" endtime="20170512 23:20:45.723"></status>
</kw>
<status starttime="20170512 23:20:45.358" status="PASS" endtime="20170512 23:20:45.723"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2260">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:45.723" status="PASS" endtime="20170512 23:20:45.968"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:45.970">Executing command 'rm /tmp/core_phosphor-fan-mo.2260'.</msg>
<msg level="INFO" timestamp="20170512 23:20:46.016">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:46.017">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:46.017">${stderr} = </msg>
<status starttime="20170512 23:20:45.969" status="PASS" endtime="20170512 23:20:46.017"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:46.017">Length is 0</msg>
<status starttime="20170512 23:20:46.017" status="PASS" endtime="20170512 23:20:46.017"></status>
</kw>
<status starttime="20170512 23:20:45.969" status="PASS" endtime="20170512 23:20:46.017"></status>
</kw>
<status starttime="20170512 23:20:45.723" status="PASS" endtime="20170512 23:20:46.017"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2263">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:46.018" status="PASS" endtime="20170512 23:20:46.278"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:46.279">Executing command 'rm /tmp/core_phosphor-fan-mo.2263'.</msg>
<msg level="INFO" timestamp="20170512 23:20:46.335">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:46.335">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:46.335">${stderr} = </msg>
<status starttime="20170512 23:20:46.278" status="PASS" endtime="20170512 23:20:46.335"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:46.336">Length is 0</msg>
<status starttime="20170512 23:20:46.336" status="PASS" endtime="20170512 23:20:46.336"></status>
</kw>
<status starttime="20170512 23:20:46.278" status="PASS" endtime="20170512 23:20:46.336"></status>
</kw>
<status starttime="20170512 23:20:46.018" status="PASS" endtime="20170512 23:20:46.336"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2266">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:46.336" status="PASS" endtime="20170512 23:20:46.656"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:46.657">Executing command 'rm /tmp/core_phosphor-fan-mo.2266'.</msg>
<msg level="INFO" timestamp="20170512 23:20:46.704">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:46.704">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:46.704">${stderr} = </msg>
<status starttime="20170512 23:20:46.657" status="PASS" endtime="20170512 23:20:46.704"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:46.704">Length is 0</msg>
<status starttime="20170512 23:20:46.704" status="PASS" endtime="20170512 23:20:46.704"></status>
</kw>
<status starttime="20170512 23:20:46.656" status="PASS" endtime="20170512 23:20:46.704"></status>
</kw>
<status starttime="20170512 23:20:46.336" status="PASS" endtime="20170512 23:20:46.705"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2269">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:46.705" status="PASS" endtime="20170512 23:20:46.954"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:46.956">Executing command 'rm /tmp/core_phosphor-fan-mo.2269'.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.002">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.002">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:47.002">${stderr} = </msg>
<status starttime="20170512 23:20:46.955" status="PASS" endtime="20170512 23:20:47.002"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:47.003">Length is 0</msg>
<status starttime="20170512 23:20:47.003" status="PASS" endtime="20170512 23:20:47.003"></status>
</kw>
<status starttime="20170512 23:20:46.955" status="PASS" endtime="20170512 23:20:47.003"></status>
</kw>
<status starttime="20170512 23:20:46.705" status="PASS" endtime="20170512 23:20:47.003"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2272">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:47.003" status="PASS" endtime="20170512 23:20:47.257"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:47.258">Executing command 'rm /tmp/core_phosphor-fan-mo.2272'.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.304">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.304">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:47.304">${stderr} = </msg>
<status starttime="20170512 23:20:47.257" status="PASS" endtime="20170512 23:20:47.304"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:47.305">Length is 0</msg>
<status starttime="20170512 23:20:47.305" status="PASS" endtime="20170512 23:20:47.305"></status>
</kw>
<status starttime="20170512 23:20:47.257" status="PASS" endtime="20170512 23:20:47.305"></status>
</kw>
<status starttime="20170512 23:20:47.003" status="PASS" endtime="20170512 23:20:47.305"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2275">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:47.305" status="PASS" endtime="20170512 23:20:47.591"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:47.592">Executing command 'rm /tmp/core_phosphor-fan-mo.2275'.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.639">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.639">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:47.639">${stderr} = </msg>
<status starttime="20170512 23:20:47.592" status="PASS" endtime="20170512 23:20:47.639"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:47.640">Length is 0</msg>
<status starttime="20170512 23:20:47.639" status="PASS" endtime="20170512 23:20:47.640"></status>
</kw>
<status starttime="20170512 23:20:47.591" status="PASS" endtime="20170512 23:20:47.640"></status>
</kw>
<status starttime="20170512 23:20:47.305" status="PASS" endtime="20170512 23:20:47.640"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2278">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:47.640" status="PASS" endtime="20170512 23:20:47.890"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:47.891">Executing command 'rm /tmp/core_phosphor-fan-mo.2278'.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.949">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:47.949">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:47.949">${stderr} = </msg>
<status starttime="20170512 23:20:47.891" status="PASS" endtime="20170512 23:20:47.949"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:47.950">Length is 0</msg>
<status starttime="20170512 23:20:47.949" status="PASS" endtime="20170512 23:20:47.950"></status>
</kw>
<status starttime="20170512 23:20:47.890" status="PASS" endtime="20170512 23:20:47.950"></status>
</kw>
<status starttime="20170512 23:20:47.640" status="PASS" endtime="20170512 23:20:47.950"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2434">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:47.950" status="PASS" endtime="20170512 23:20:48.202"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:48.203">Executing command 'rm /tmp/core_phosphor-fan-mo.2434'.</msg>
<msg level="INFO" timestamp="20170512 23:20:48.250">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:48.250">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:48.250">${stderr} = </msg>
<status starttime="20170512 23:20:48.203" status="PASS" endtime="20170512 23:20:48.250"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:48.251">Length is 0</msg>
<status starttime="20170512 23:20:48.250" status="PASS" endtime="20170512 23:20:48.251"></status>
</kw>
<status starttime="20170512 23:20:48.202" status="PASS" endtime="20170512 23:20:48.251"></status>
</kw>
<status starttime="20170512 23:20:47.950" status="PASS" endtime="20170512 23:20:48.251"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2655">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:48.251" status="PASS" endtime="20170512 23:20:48.538"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:48.539">Executing command 'rm /tmp/core_phosphor-fan-mo.2655'.</msg>
<msg level="INFO" timestamp="20170512 23:20:48.589">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:48.589">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:48.589">${stderr} = </msg>
<status starttime="20170512 23:20:48.538" status="PASS" endtime="20170512 23:20:48.589"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:48.590">Length is 0</msg>
<status starttime="20170512 23:20:48.590" status="PASS" endtime="20170512 23:20:48.590"></status>
</kw>
<status starttime="20170512 23:20:48.538" status="PASS" endtime="20170512 23:20:48.590"></status>
</kw>
<status starttime="20170512 23:20:48.251" status="PASS" endtime="20170512 23:20:48.590"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2660">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:48.591" status="PASS" endtime="20170512 23:20:48.821"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:48.822">Executing command 'rm /tmp/core_phosphor-fan-mo.2660'.</msg>
<msg level="INFO" timestamp="20170512 23:20:48.868">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:48.868">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:48.868">${stderr} = </msg>
<status starttime="20170512 23:20:48.821" status="PASS" endtime="20170512 23:20:48.868"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:48.869">Length is 0</msg>
<status starttime="20170512 23:20:48.869" status="PASS" endtime="20170512 23:20:48.869"></status>
</kw>
<status starttime="20170512 23:20:48.821" status="PASS" endtime="20170512 23:20:48.869"></status>
</kw>
<status starttime="20170512 23:20:48.590" status="PASS" endtime="20170512 23:20:48.869"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2688">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:48.870" status="PASS" endtime="20170512 23:20:49.121"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:49.122">Executing command 'rm /tmp/core_phosphor-fan-mo.2688'.</msg>
<msg level="INFO" timestamp="20170512 23:20:49.169">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:49.169">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:49.169">${stderr} = </msg>
<status starttime="20170512 23:20:49.122" status="PASS" endtime="20170512 23:20:49.169"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:49.169">Length is 0</msg>
<status starttime="20170512 23:20:49.169" status="PASS" endtime="20170512 23:20:49.169"></status>
</kw>
<status starttime="20170512 23:20:49.121" status="PASS" endtime="20170512 23:20:49.170"></status>
</kw>
<status starttime="20170512 23:20:48.869" status="PASS" endtime="20170512 23:20:49.170"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2691">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:49.170" status="PASS" endtime="20170512 23:20:49.425"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:49.426">Executing command 'rm /tmp/core_phosphor-fan-mo.2691'.</msg>
<msg level="INFO" timestamp="20170512 23:20:49.473">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:49.473">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:49.473">${stderr} = </msg>
<status starttime="20170512 23:20:49.426" status="PASS" endtime="20170512 23:20:49.473"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:49.474">Length is 0</msg>
<status starttime="20170512 23:20:49.474" status="PASS" endtime="20170512 23:20:49.474"></status>
</kw>
<status starttime="20170512 23:20:49.426" status="PASS" endtime="20170512 23:20:49.474"></status>
</kw>
<status starttime="20170512 23:20:49.170" status="PASS" endtime="20170512 23:20:49.474"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2694">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:49.475" status="PASS" endtime="20170512 23:20:49.772"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:49.773">Executing command 'rm /tmp/core_phosphor-fan-mo.2694'.</msg>
<msg level="INFO" timestamp="20170512 23:20:49.820">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:49.820">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:49.820">${stderr} = </msg>
<status starttime="20170512 23:20:49.773" status="PASS" endtime="20170512 23:20:49.820"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:49.820">Length is 0</msg>
<status starttime="20170512 23:20:49.820" status="PASS" endtime="20170512 23:20:49.820"></status>
</kw>
<status starttime="20170512 23:20:49.772" status="PASS" endtime="20170512 23:20:49.821"></status>
</kw>
<status starttime="20170512 23:20:49.474" status="PASS" endtime="20170512 23:20:49.821"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2697">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:49.821" status="PASS" endtime="20170512 23:20:50.076"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:50.077">Executing command 'rm /tmp/core_phosphor-fan-mo.2697'.</msg>
<msg level="INFO" timestamp="20170512 23:20:50.123">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:50.124">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:50.124">${stderr} = </msg>
<status starttime="20170512 23:20:50.077" status="PASS" endtime="20170512 23:20:50.124"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:50.124">Length is 0</msg>
<status starttime="20170512 23:20:50.124" status="PASS" endtime="20170512 23:20:50.124"></status>
</kw>
<status starttime="20170512 23:20:50.076" status="PASS" endtime="20170512 23:20:50.124"></status>
</kw>
<status starttime="20170512 23:20:49.821" status="PASS" endtime="20170512 23:20:50.124"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2700">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:50.125" status="PASS" endtime="20170512 23:20:50.376"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:50.377">Executing command 'rm /tmp/core_phosphor-fan-mo.2700'.</msg>
<msg level="INFO" timestamp="20170512 23:20:50.424">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:50.424">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:50.424">${stderr} = </msg>
<status starttime="20170512 23:20:50.377" status="PASS" endtime="20170512 23:20:50.424"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:50.424">Length is 0</msg>
<status starttime="20170512 23:20:50.424" status="PASS" endtime="20170512 23:20:50.424"></status>
</kw>
<status starttime="20170512 23:20:50.376" status="PASS" endtime="20170512 23:20:50.425"></status>
</kw>
<status starttime="20170512 23:20:50.124" status="PASS" endtime="20170512 23:20:50.425"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2703">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:50.425" status="PASS" endtime="20170512 23:20:50.752"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:50.754">Executing command 'rm /tmp/core_phosphor-fan-mo.2703'.</msg>
<msg level="INFO" timestamp="20170512 23:20:50.800">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:50.801">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:50.801">${stderr} = </msg>
<status starttime="20170512 23:20:50.753" status="PASS" endtime="20170512 23:20:50.801"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:50.801">Length is 0</msg>
<status starttime="20170512 23:20:50.801" status="PASS" endtime="20170512 23:20:50.801"></status>
</kw>
<status starttime="20170512 23:20:50.753" status="PASS" endtime="20170512 23:20:50.801"></status>
</kw>
<status starttime="20170512 23:20:50.425" status="PASS" endtime="20170512 23:20:50.802"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2706">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:50.802" status="PASS" endtime="20170512 23:20:51.055"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:51.056">Executing command 'rm /tmp/core_phosphor-fan-mo.2706'.</msg>
<msg level="INFO" timestamp="20170512 23:20:51.112">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:51.113">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:51.113">${stderr} = </msg>
<status starttime="20170512 23:20:51.056" status="PASS" endtime="20170512 23:20:51.113"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:51.113">Length is 0</msg>
<status starttime="20170512 23:20:51.113" status="PASS" endtime="20170512 23:20:51.113"></status>
</kw>
<status starttime="20170512 23:20:51.055" status="PASS" endtime="20170512 23:20:51.113"></status>
</kw>
<status starttime="20170512 23:20:50.802" status="PASS" endtime="20170512 23:20:51.113"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2709">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:51.114" status="PASS" endtime="20170512 23:20:51.365"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:51.366">Executing command 'rm /tmp/core_phosphor-fan-mo.2709'.</msg>
<msg level="INFO" timestamp="20170512 23:20:51.413">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:51.413">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:51.413">${stderr} = </msg>
<status starttime="20170512 23:20:51.366" status="PASS" endtime="20170512 23:20:51.413"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:51.414">Length is 0</msg>
<status starttime="20170512 23:20:51.414" status="PASS" endtime="20170512 23:20:51.414"></status>
</kw>
<status starttime="20170512 23:20:51.366" status="PASS" endtime="20170512 23:20:51.414"></status>
</kw>
<status starttime="20170512 23:20:51.114" status="PASS" endtime="20170512 23:20:51.414"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2712">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:51.414" status="PASS" endtime="20170512 23:20:51.664"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:51.665">Executing command 'rm /tmp/core_phosphor-fan-mo.2712'.</msg>
<msg level="INFO" timestamp="20170512 23:20:51.721">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:51.722">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:51.722">${stderr} = </msg>
<status starttime="20170512 23:20:51.665" status="PASS" endtime="20170512 23:20:51.722"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:51.722">Length is 0</msg>
<status starttime="20170512 23:20:51.722" status="PASS" endtime="20170512 23:20:51.722"></status>
</kw>
<status starttime="20170512 23:20:51.664" status="PASS" endtime="20170512 23:20:51.722"></status>
</kw>
<status starttime="20170512 23:20:51.414" status="PASS" endtime="20170512 23:20:51.722"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2715">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:51.723" status="PASS" endtime="20170512 23:20:52.001"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:52.002">Executing command 'rm /tmp/core_phosphor-fan-mo.2715'.</msg>
<msg level="INFO" timestamp="20170512 23:20:52.048">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:52.048">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:52.049">${stderr} = </msg>
<status starttime="20170512 23:20:52.002" status="PASS" endtime="20170512 23:20:52.049"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:52.049">Length is 0</msg>
<status starttime="20170512 23:20:52.049" status="PASS" endtime="20170512 23:20:52.049"></status>
</kw>
<status starttime="20170512 23:20:52.001" status="PASS" endtime="20170512 23:20:52.049"></status>
</kw>
<status starttime="20170512 23:20:51.722" status="PASS" endtime="20170512 23:20:52.049"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2718">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:52.050" status="PASS" endtime="20170512 23:20:52.309"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:52.311">Executing command 'rm /tmp/core_phosphor-fan-mo.2718'.</msg>
<msg level="INFO" timestamp="20170512 23:20:52.369">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:52.369">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:52.369">${stderr} = </msg>
<status starttime="20170512 23:20:52.310" status="PASS" endtime="20170512 23:20:52.369"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:52.370">Length is 0</msg>
<status starttime="20170512 23:20:52.370" status="PASS" endtime="20170512 23:20:52.370"></status>
</kw>
<status starttime="20170512 23:20:52.309" status="PASS" endtime="20170512 23:20:52.370"></status>
</kw>
<status starttime="20170512 23:20:52.049" status="PASS" endtime="20170512 23:20:52.370"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2721">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:52.370" status="PASS" endtime="20170512 23:20:52.631"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:52.632">Executing command 'rm /tmp/core_phosphor-fan-mo.2721'.</msg>
<msg level="INFO" timestamp="20170512 23:20:52.679">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:52.679">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:52.679">${stderr} = </msg>
<status starttime="20170512 23:20:52.632" status="PASS" endtime="20170512 23:20:52.679"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:52.680">Length is 0</msg>
<status starttime="20170512 23:20:52.679" status="PASS" endtime="20170512 23:20:52.680"></status>
</kw>
<status starttime="20170512 23:20:52.631" status="PASS" endtime="20170512 23:20:52.680"></status>
</kw>
<status starttime="20170512 23:20:52.370" status="PASS" endtime="20170512 23:20:52.680"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2724">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:52.680" status="PASS" endtime="20170512 23:20:52.962"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:52.963">Executing command 'rm /tmp/core_phosphor-fan-mo.2724'.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.010">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.010">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:53.010">${stderr} = </msg>
<status starttime="20170512 23:20:52.963" status="PASS" endtime="20170512 23:20:53.010"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:53.010">Length is 0</msg>
<status starttime="20170512 23:20:53.010" status="PASS" endtime="20170512 23:20:53.010"></status>
</kw>
<status starttime="20170512 23:20:52.962" status="PASS" endtime="20170512 23:20:53.011"></status>
</kw>
<status starttime="20170512 23:20:52.680" status="PASS" endtime="20170512 23:20:53.011"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2727">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:53.011" status="PASS" endtime="20170512 23:20:53.270"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:53.271">Executing command 'rm /tmp/core_phosphor-fan-mo.2727'.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.328">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.328">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:53.328">${stderr} = </msg>
<status starttime="20170512 23:20:53.271" status="PASS" endtime="20170512 23:20:53.328"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:53.329">Length is 0</msg>
<status starttime="20170512 23:20:53.329" status="PASS" endtime="20170512 23:20:53.329"></status>
</kw>
<status starttime="20170512 23:20:53.271" status="PASS" endtime="20170512 23:20:53.329"></status>
</kw>
<status starttime="20170512 23:20:53.011" status="PASS" endtime="20170512 23:20:53.329"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2730">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:53.329" status="PASS" endtime="20170512 23:20:53.582"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:53.583">Executing command 'rm /tmp/core_phosphor-fan-mo.2730'.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.629">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.629">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:53.629">${stderr} = </msg>
<status starttime="20170512 23:20:53.582" status="PASS" endtime="20170512 23:20:53.629"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:53.630">Length is 0</msg>
<status starttime="20170512 23:20:53.629" status="PASS" endtime="20170512 23:20:53.630"></status>
</kw>
<status starttime="20170512 23:20:53.582" status="PASS" endtime="20170512 23:20:53.630"></status>
</kw>
<status starttime="20170512 23:20:53.329" status="PASS" endtime="20170512 23:20:53.630"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2733">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:53.630" status="PASS" endtime="20170512 23:20:53.932"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:53.934">Executing command 'rm /tmp/core_phosphor-fan-mo.2733'.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.980">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:53.980">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:53.980">${stderr} = </msg>
<status starttime="20170512 23:20:53.933" status="PASS" endtime="20170512 23:20:53.980"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:53.981">Length is 0</msg>
<status starttime="20170512 23:20:53.980" status="PASS" endtime="20170512 23:20:53.981"></status>
</kw>
<status starttime="20170512 23:20:53.933" status="PASS" endtime="20170512 23:20:53.981"></status>
</kw>
<status starttime="20170512 23:20:53.630" status="PASS" endtime="20170512 23:20:53.981"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2736">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:53.981" status="PASS" endtime="20170512 23:20:54.240"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:54.241">Executing command 'rm /tmp/core_phosphor-fan-mo.2736'.</msg>
<msg level="INFO" timestamp="20170512 23:20:54.288">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:54.288">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:54.288">${stderr} = </msg>
<status starttime="20170512 23:20:54.241" status="PASS" endtime="20170512 23:20:54.288"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:54.289">Length is 0</msg>
<status starttime="20170512 23:20:54.288" status="PASS" endtime="20170512 23:20:54.289"></status>
</kw>
<status starttime="20170512 23:20:54.240" status="PASS" endtime="20170512 23:20:54.289"></status>
</kw>
<status starttime="20170512 23:20:53.981" status="PASS" endtime="20170512 23:20:54.289"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2739">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:54.289" status="PASS" endtime="20170512 23:20:54.539"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:54.540">Executing command 'rm /tmp/core_phosphor-fan-mo.2739'.</msg>
<msg level="INFO" timestamp="20170512 23:20:54.587">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:54.587">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:54.587">${stderr} = </msg>
<status starttime="20170512 23:20:54.540" status="PASS" endtime="20170512 23:20:54.587"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:54.588">Length is 0</msg>
<status starttime="20170512 23:20:54.587" status="PASS" endtime="20170512 23:20:54.588"></status>
</kw>
<status starttime="20170512 23:20:54.539" status="PASS" endtime="20170512 23:20:54.588"></status>
</kw>
<status starttime="20170512 23:20:54.289" status="PASS" endtime="20170512 23:20:54.588"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2743">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:54.588" status="PASS" endtime="20170512 23:20:54.846"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:54.847">Executing command 'rm /tmp/core_phosphor-fan-mo.2743'.</msg>
<msg level="INFO" timestamp="20170512 23:20:54.904">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:54.904">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:54.904">${stderr} = </msg>
<status starttime="20170512 23:20:54.847" status="PASS" endtime="20170512 23:20:54.904"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:54.904">Length is 0</msg>
<status starttime="20170512 23:20:54.904" status="PASS" endtime="20170512 23:20:54.904"></status>
</kw>
<status starttime="20170512 23:20:54.846" status="PASS" endtime="20170512 23:20:54.905"></status>
</kw>
<status starttime="20170512 23:20:54.588" status="PASS" endtime="20170512 23:20:54.905"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2746">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:54.905" status="PASS" endtime="20170512 23:20:55.180"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:55.182">Executing command 'rm /tmp/core_phosphor-fan-mo.2746'.</msg>
<msg level="INFO" timestamp="20170512 23:20:55.230">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:55.230">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:55.230">${stderr} = </msg>
<status starttime="20170512 23:20:55.182" status="PASS" endtime="20170512 23:20:55.230"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:55.230">Length is 0</msg>
<status starttime="20170512 23:20:55.230" status="PASS" endtime="20170512 23:20:55.230"></status>
</kw>
<status starttime="20170512 23:20:55.181" status="PASS" endtime="20170512 23:20:55.231"></status>
</kw>
<status starttime="20170512 23:20:54.905" status="PASS" endtime="20170512 23:20:55.231"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1225">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:55.231" status="PASS" endtime="20170512 23:20:55.504"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:55.505">Executing command 'rm /tmp/core_phosphor-hwmon-.1225'.</msg>
<msg level="INFO" timestamp="20170512 23:20:55.551">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:55.551">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:55.551">${stderr} = </msg>
<status starttime="20170512 23:20:55.504" status="PASS" endtime="20170512 23:20:55.551"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:55.552">Length is 0</msg>
<status starttime="20170512 23:20:55.551" status="PASS" endtime="20170512 23:20:55.552"></status>
</kw>
<status starttime="20170512 23:20:55.504" status="PASS" endtime="20170512 23:20:55.552"></status>
</kw>
<status starttime="20170512 23:20:55.231" status="PASS" endtime="20170512 23:20:55.552"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1731">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170512 23:20:55.552" status="PASS" endtime="20170512 23:20:55.812"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:55.813">Executing command 'rm /tmp/core_phosphor-hwmon-.1731'.</msg>
<msg level="INFO" timestamp="20170512 23:20:55.859">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:20:55.859">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:20:55.860">${stderr} = </msg>
<status starttime="20170512 23:20:55.813" status="PASS" endtime="20170512 23:20:55.860"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:55.860">Length is 0</msg>
<status starttime="20170512 23:20:55.860" status="PASS" endtime="20170512 23:20:55.860"></status>
</kw>
<status starttime="20170512 23:20:55.812" status="PASS" endtime="20170512 23:20:55.860"></status>
</kw>
<status starttime="20170512 23:20:55.552" status="PASS" endtime="20170512 23:20:55.860"></status>
</kw>
<status starttime="20170512 23:20:38.111" status="PASS" endtime="20170512 23:20:55.860"></status>
</kw>
<status starttime="20170512 23:20:35.784" status="PASS" endtime="20170512 23:20:55.860"></status>
</kw>
<status starttime="20170512 23:20:35.758" status="PASS" endtime="20170512 23:20:55.861"></status>
</kw>
<status starttime="20170512 23:20:35.756" status="PASS" endtime="20170512 23:20:55.861"></status>
</kw>
<status starttime="20170512 23:20:35.755" status="PASS" endtime="20170512 23:20:55.861"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170512 23:20:55.862" status="PASS" endtime="20170512 23:20:55.863"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:55.863">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:55.863">${ret_values} = None</msg>
<status starttime="20170512 23:20:55.862" status="PASS" endtime="20170512 23:20:55.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170512 23:20:55.863" status="PASS" endtime="20170512 23:20:55.863"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:55.889">Returning from the enclosing user keyword.</msg>
<status starttime="20170512 23:20:55.888" status="PASS" endtime="20170512 23:20:55.889"></status>
</kw>
<status starttime="20170512 23:20:55.888" status="PASS" endtime="20170512 23:20:55.889"></status>
</kw>
<status starttime="20170512 23:20:55.864" status="PASS" endtime="20170512 23:20:55.889"></status>
</kw>
<status starttime="20170512 23:20:55.861" status="PASS" endtime="20170512 23:20:55.889"></status>
</kw>
<status starttime="20170512 23:20:55.861" status="PASS" endtime="20170512 23:20:55.889"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170512 23:20:55.891" status="PASS" endtime="20170512 23:20:55.891"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:55.891">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:55.891">${ret_values} = None</msg>
<status starttime="20170512 23:20:55.890" status="PASS" endtime="20170512 23:20:55.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170512 23:20:55.892" status="PASS" endtime="20170512 23:20:55.892"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:55.921">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:55.920" status="PASS" endtime="20170512 23:20:55.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:55.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:55.922" status="PASS" endtime="20170512 23:20:55.922"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:55.923">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:55.922" status="PASS" endtime="20170512 23:20:55.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:55.923">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:55.923" status="PASS" endtime="20170512 23:20:55.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:55.924" status="PASS" endtime="20170512 23:20:56.126"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:56.126">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:56.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:55.924" status="PASS" endtime="20170512 23:20:56.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.127">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.127" status="PASS" endtime="20170512 23:20:56.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.127" status="PASS" endtime="20170512 23:20:56.128"></status>
</kw>
<status starttime="20170512 23:20:55.920" status="PASS" endtime="20170512 23:20:56.128"></status>
</kw>
<status starttime="20170512 23:20:55.919" status="PASS" endtime="20170512 23:20:56.128"></status>
</kw>
<status starttime="20170512 23:20:55.918" status="PASS" endtime="20170512 23:20:56.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.129">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170512 23:20:56.128" status="PASS" endtime="20170512 23:20:56.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:56.129" status="PASS" endtime="20170512 23:20:56.129"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.445">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:56.445">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:56.130" status="PASS" endtime="20170512 23:20:56.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:56.445" status="PASS" endtime="20170512 23:20:56.446"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:56.446">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:55.918" status="PASS" endtime="20170512 23:20:56.446"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.447" status="PASS" endtime="20170512 23:20:56.447"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:56.447">${status} = True</msg>
<status starttime="20170512 23:20:56.447" status="PASS" endtime="20170512 23:20:56.448"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170512 23:20:56.448" status="PASS" endtime="20170512 23:20:56.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.449">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 52 cd b6 8f 00 00 00 04 52 d4 3f 19 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710123524, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 30 0c 1f 1d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 30 0f 38 34 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 30 0f 49 40 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 30 0f 7a f2 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 31 3d 34 f9 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710556000, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 73 1b a9 cc 00 00 00 05 74 aa 7b 89 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 16 90 00 00 16 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 04 26 01 00 02 00 05 01 25 01 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 2a 89 79 ac 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 93 62 ff 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 98 2a 0a 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 22 42 0c eb 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 44 6e 24 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 46 c7 a6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 49 19 99 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 98 38 24 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 2a 98 43 43 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 2a 98 90 ac 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710559960, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 74 a9 df 13 00 00 00 05 8c e5 db 86 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 18 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 17 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 17 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 12, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710560929, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 92 ad 76 00 00 00 04 c2 93 c1 7d 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 04 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 36 30 d4 4a 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 36 33 e1 53 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 36 33 f2 1c 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 36 34 25 5b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 37 71 a2 6d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710126230, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710261527, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710264581, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 05 26 01 00 02 00 05 01 25 00 0b 01 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 33 19 8e bd 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 23 65 37 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 11 fa 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2d 26 91 c6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 28 b8 20 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2a cc 8f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2c d8 61 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 1f b2 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 33 28 2b ae 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 33 28 75 32 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710270543, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 05 26 01 00 02 00 05 01 25 00 0b 01 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 33 19 8e bd 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 23 65 37 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 11 fa 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2d 26 91 c6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 28 b8 20 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2a cc 8f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2c d8 61 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 1f b2 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 33 28 2b ae 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 33 28 75 32 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710274306, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 79 09 f5 c9 00 00 00 05 94 78 bb f0 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 12 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 11 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 11 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710275274, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 4f ba 96 7f 00 00 00 04 4f bb 22 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710547097, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 30 0c 1f 1d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 30 0f 38 34 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 30 0f 49 40 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 30 0f 7a f2 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 31 3d 34 f9 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710550157, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:56.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:56.450">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/9': {u'Id': 9, u'Message': u'org.open_power.Error.Host.Event.Event', u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Informational', u'Resolved':...</msg>
<status starttime="20170512 23:20:56.448" status="PASS" endtime="20170512 23:20:56.450"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.451">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/12', u'/xyz/openbmc_project/logging/e...</msg>
<status starttime="20170512 23:20:56.451" status="PASS" endtime="20170512 23:20:56.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.452">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel</msg>
<status starttime="20170512 23:20:56.451" status="PASS" endtime="20170512 23:20:56.452"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.452" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:56.452" status="PASS" endtime="20170512 23:20:56.452"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.457">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:56.457" status="PASS" endtime="20170512 23:20:56.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:56.458" status="PASS" endtime="20170512 23:20:56.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.460">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:56.459" status="PASS" endtime="20170512 23:20:56.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.460">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:56.460" status="PASS" endtime="20170512 23:20:56.460"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:56.461" status="PASS" endtime="20170512 23:20:56.640"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:56.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:56.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:56.461" status="PASS" endtime="20170512 23:20:56.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.640" status="PASS" endtime="20170512 23:20:56.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.641" status="PASS" endtime="20170512 23:20:56.641"></status>
</kw>
<status starttime="20170512 23:20:56.456" status="PASS" endtime="20170512 23:20:56.642"></status>
</kw>
<status starttime="20170512 23:20:56.456" status="PASS" endtime="20170512 23:20:56.642"></status>
</kw>
<status starttime="20170512 23:20:56.455" status="PASS" endtime="20170512 23:20:56.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.642">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20170512 23:20:56.642" status="PASS" endtime="20170512 23:20:56.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:56.643" status="PASS" endtime="20170512 23:20:56.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.726">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:56.726">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:56.643" status="PASS" endtime="20170512 23:20:56.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:56.726" status="PASS" endtime="20170512 23:20:56.727"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:56.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:56.454" status="PASS" endtime="20170512 23:20:56.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.728" status="PASS" endtime="20170512 23:20:56.728"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.729">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 52 cd b6 8f 00 00 00 04 52 d4 3f 19 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:56.729">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:56.729">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 52 cd b6 8f 00 00 00 04 52 d4 3f 19 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90...</msg>
<status starttime="20170512 23:20:56.729" status="PASS" endtime="20170512 23:20:56.729"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:56.729">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 52 cd b6 8f 00 00 00 04 52 d4 3f 19 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b ...</msg>
<status starttime="20170512 23:20:56.453" status="PASS" endtime="20170512 23:20:56.729"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.730">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:56.730">${length} = 1</msg>
<status starttime="20170512 23:20:56.730" status="PASS" endtime="20170512 23:20:56.730"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:56.730" status="PASS" endtime="20170512 23:20:56.731"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.732" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:56.732" status="PASS" endtime="20170512 23:20:56.732"></status>
</kw>
<status starttime="20170512 23:20:56.731" status="PASS" endtime="20170512 23:20:56.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.734" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:56.733" status="PASS" endtime="20170512 23:20:56.734"></status>
</kw>
<status starttime="20170512 23:20:56.733" status="PASS" endtime="20170512 23:20:56.734"></status>
</kw>
<status starttime="20170512 23:20:56.453" status="PASS" endtime="20170512 23:20:56.734"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/10">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.737">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:56.737" status="PASS" endtime="20170512 23:20:56.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.738">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:56.738" status="PASS" endtime="20170512 23:20:56.738"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.739">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:56.739" status="PASS" endtime="20170512 23:20:56.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.740">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:56.739" status="PASS" endtime="20170512 23:20:56.740"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:56.740" status="PASS" endtime="20170512 23:20:56.919"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:56.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:56.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:56.740" status="PASS" endtime="20170512 23:20:56.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.920">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.920" status="PASS" endtime="20170512 23:20:56.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:56.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:56.921" status="PASS" endtime="20170512 23:20:56.922"></status>
</kw>
<status starttime="20170512 23:20:56.736" status="PASS" endtime="20170512 23:20:56.922"></status>
</kw>
<status starttime="20170512 23:20:56.736" status="PASS" endtime="20170512 23:20:56.922"></status>
</kw>
<status starttime="20170512 23:20:56.735" status="PASS" endtime="20170512 23:20:56.922"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:56.923">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status starttime="20170512 23:20:56.922" status="PASS" endtime="20170512 23:20:56.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:56.923" status="PASS" endtime="20170512 23:20:56.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.010">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:57.010">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:56.924" status="PASS" endtime="20170512 23:20:57.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:57.010" status="PASS" endtime="20170512 23:20:57.011"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.011">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:56.735" status="PASS" endtime="20170512 23:20:57.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.012">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.011" status="PASS" endtime="20170512 23:20:57.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.012">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 30 0c 1f 1d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 30 0f 38 34 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 30 0f 49 40 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 30 0f 7a f2 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 31 3d 34 f9 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:57.012">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:57.013">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90...</msg>
<status starttime="20170512 23:20:57.012" status="PASS" endtime="20170512 23:20:57.013"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.013">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 ...</msg>
<status starttime="20170512 23:20:56.734" status="PASS" endtime="20170512 23:20:57.013"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.013">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:57.014">${length} = 1</msg>
<status starttime="20170512 23:20:57.013" status="PASS" endtime="20170512 23:20:57.014"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:57.014" status="PASS" endtime="20170512 23:20:57.014"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.016" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.015" status="PASS" endtime="20170512 23:20:57.016"></status>
</kw>
<status starttime="20170512 23:20:57.014" status="PASS" endtime="20170512 23:20:57.016"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.017" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.016" status="PASS" endtime="20170512 23:20:57.017"></status>
</kw>
<status starttime="20170512 23:20:57.016" status="PASS" endtime="20170512 23:20:57.017"></status>
</kw>
<status starttime="20170512 23:20:56.734" status="PASS" endtime="20170512 23:20:57.017"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/11">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.020">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:57.020" status="PASS" endtime="20170512 23:20:57.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.021">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:57.021" status="PASS" endtime="20170512 23:20:57.021"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.022">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:57.021" status="PASS" endtime="20170512 23:20:57.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.023">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:57.022" status="PASS" endtime="20170512 23:20:57.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:57.024" status="PASS" endtime="20170512 23:20:57.214"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:57.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.023" status="PASS" endtime="20170512 23:20:57.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.215">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.215" status="PASS" endtime="20170512 23:20:57.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.215" status="PASS" endtime="20170512 23:20:57.216"></status>
</kw>
<status starttime="20170512 23:20:57.019" status="PASS" endtime="20170512 23:20:57.216"></status>
</kw>
<status starttime="20170512 23:20:57.019" status="PASS" endtime="20170512 23:20:57.216"></status>
</kw>
<status starttime="20170512 23:20:57.018" status="PASS" endtime="20170512 23:20:57.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.217">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status starttime="20170512 23:20:57.217" status="PASS" endtime="20170512 23:20:57.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:57.217" status="PASS" endtime="20170512 23:20:57.217"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.310">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:57.310">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.218" status="PASS" endtime="20170512 23:20:57.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:57.311" status="PASS" endtime="20170512 23:20:57.311"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.018" status="PASS" endtime="20170512 23:20:57.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.311" status="PASS" endtime="20170512 23:20:57.312"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.312">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 73 1b a9 cc 00 00 00 05 74 aa 7b 89 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 16 90 00 00 16 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 04 26 01 00 02 00 05 01 25 01 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 2a 89 79 ac 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 93 62 ff 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 98 2a 0a 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 22 42 0c eb 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 44 6e 24 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 46 c7 a6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 49 19 99 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 98 38 24 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 2a 98 43 43 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 2a 98 90 ac 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:57.313">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:57.313">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 73 1b a9 cc 00 00 00 05 74 aa 7b 89 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 16 90...</msg>
<status starttime="20170512 23:20:57.312" status="PASS" endtime="20170512 23:20:57.313"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.313">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 73 1b a9 cc 00 00 00 05 74 aa 7b 89 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 16 90 00 00 16 ...</msg>
<status starttime="20170512 23:20:57.017" status="PASS" endtime="20170512 23:20:57.313"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.314">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:57.314">${length} = 1</msg>
<status starttime="20170512 23:20:57.313" status="PASS" endtime="20170512 23:20:57.314"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:57.314" status="PASS" endtime="20170512 23:20:57.314"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.316" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.315" status="PASS" endtime="20170512 23:20:57.316"></status>
</kw>
<status starttime="20170512 23:20:57.315" status="PASS" endtime="20170512 23:20:57.316"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.317" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.317" status="PASS" endtime="20170512 23:20:57.317"></status>
</kw>
<status starttime="20170512 23:20:57.316" status="PASS" endtime="20170512 23:20:57.317"></status>
</kw>
<status starttime="20170512 23:20:57.017" status="PASS" endtime="20170512 23:20:57.317"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/12">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.321">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:57.320" status="PASS" endtime="20170512 23:20:57.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.322">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:57.321" status="PASS" endtime="20170512 23:20:57.322"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.322">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:57.322" status="PASS" endtime="20170512 23:20:57.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:57.323" status="PASS" endtime="20170512 23:20:57.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:57.324" status="PASS" endtime="20170512 23:20:57.503"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:57.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.323" status="PASS" endtime="20170512 23:20:57.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.504" status="PASS" endtime="20170512 23:20:57.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.505" status="PASS" endtime="20170512 23:20:57.505"></status>
</kw>
<status starttime="20170512 23:20:57.320" status="PASS" endtime="20170512 23:20:57.506"></status>
</kw>
<status starttime="20170512 23:20:57.319" status="PASS" endtime="20170512 23:20:57.506"></status>
</kw>
<status starttime="20170512 23:20:57.319" status="PASS" endtime="20170512 23:20:57.506"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.507">${base_uri} = /xyz/openbmc_project/logging/entry/12/attr/AdditionalData</msg>
<status starttime="20170512 23:20:57.506" status="PASS" endtime="20170512 23:20:57.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:57.507" status="PASS" endtime="20170512 23:20:57.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.592">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/12/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:57.592">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.508" status="PASS" endtime="20170512 23:20:57.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:57.593" status="PASS" endtime="20170512 23:20:57.593"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.593">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.318" status="PASS" endtime="20170512 23:20:57.593"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.594" status="PASS" endtime="20170512 23:20:57.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.595">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 74 a9 df 13 00 00 00 05 8c e5 db 86 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 18 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 17 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 17 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:57.595">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:57.595">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 74 a9 df 13 00 00 00 05 8c e5 db 86 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90...</msg>
<status starttime="20170512 23:20:57.594" status="PASS" endtime="20170512 23:20:57.595"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.595">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 74 a9 df 13 00 00 00 05 8c e5 db 86 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 18 ...</msg>
<status starttime="20170512 23:20:57.317" status="PASS" endtime="20170512 23:20:57.595"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.596">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:57.596">${length} = 1</msg>
<status starttime="20170512 23:20:57.596" status="PASS" endtime="20170512 23:20:57.596"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:57.596" status="PASS" endtime="20170512 23:20:57.597"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.598" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.597" status="PASS" endtime="20170512 23:20:57.598"></status>
</kw>
<status starttime="20170512 23:20:57.597" status="PASS" endtime="20170512 23:20:57.598"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.599" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.599" status="PASS" endtime="20170512 23:20:57.599"></status>
</kw>
<status starttime="20170512 23:20:57.598" status="PASS" endtime="20170512 23:20:57.599"></status>
</kw>
<status starttime="20170512 23:20:57.317" status="PASS" endtime="20170512 23:20:57.599"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.603">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:57.603" status="PASS" endtime="20170512 23:20:57.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.604">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:57.604" status="PASS" endtime="20170512 23:20:57.604"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.605">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:57.604" status="PASS" endtime="20170512 23:20:57.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.605">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:57.605" status="PASS" endtime="20170512 23:20:57.605"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:57.606" status="PASS" endtime="20170512 23:20:57.783"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.783">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:57.783">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.606" status="PASS" endtime="20170512 23:20:57.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.784">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.784" status="PASS" endtime="20170512 23:20:57.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.784" status="PASS" endtime="20170512 23:20:57.785"></status>
</kw>
<status starttime="20170512 23:20:57.602" status="PASS" endtime="20170512 23:20:57.785"></status>
</kw>
<status starttime="20170512 23:20:57.602" status="PASS" endtime="20170512 23:20:57.785"></status>
</kw>
<status starttime="20170512 23:20:57.601" status="PASS" endtime="20170512 23:20:57.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.786">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170512 23:20:57.785" status="PASS" endtime="20170512 23:20:57.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:57.786" status="PASS" endtime="20170512 23:20:57.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.872">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:57.872">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.787" status="PASS" endtime="20170512 23:20:57.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:57.873" status="PASS" endtime="20170512 23:20:57.873"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.873">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.600" status="PASS" endtime="20170512 23:20:57.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:57.873" status="PASS" endtime="20170512 23:20:57.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.874">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 92 ad 76 00 00 00 04 c2 93 c1 7d 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 04 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 36 30 d4 4a 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 36 33 e1 53 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 36 33 f2 1c 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 36 34 25 5b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 37 71 a2 6d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:57.875">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:57.875">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 92 ad 76 00 00 00 04 c2 93 c1 7d 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90...</msg>
<status starttime="20170512 23:20:57.874" status="PASS" endtime="20170512 23:20:57.875"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:57.875">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 92 ad 76 00 00 00 04 c2 93 c1 7d 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c ...</msg>
<status starttime="20170512 23:20:57.600" status="PASS" endtime="20170512 23:20:57.875"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.876">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:57.876">${length} = 1</msg>
<status starttime="20170512 23:20:57.876" status="PASS" endtime="20170512 23:20:57.876"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:57.876" status="PASS" endtime="20170512 23:20:57.876"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.878" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.877" status="PASS" endtime="20170512 23:20:57.878"></status>
</kw>
<status starttime="20170512 23:20:57.877" status="PASS" endtime="20170512 23:20:57.878"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.879" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:57.879" status="PASS" endtime="20170512 23:20:57.879"></status>
</kw>
<status starttime="20170512 23:20:57.878" status="PASS" endtime="20170512 23:20:57.879"></status>
</kw>
<status starttime="20170512 23:20:57.600" status="PASS" endtime="20170512 23:20:57.880"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:57.883">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:57.882" status="PASS" endtime="20170512 23:20:57.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:57.883" status="PASS" endtime="20170512 23:20:57.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.884">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:57.884" status="PASS" endtime="20170512 23:20:57.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:57.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:57.885" status="PASS" endtime="20170512 23:20:57.885"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.102">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:57.886" status="PASS" endtime="20170512 23:20:58.102"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.102">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:58.102">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.885" status="PASS" endtime="20170512 23:20:58.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.103">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.102" status="PASS" endtime="20170512 23:20:58.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.103" status="PASS" endtime="20170512 23:20:58.104"></status>
</kw>
<status starttime="20170512 23:20:57.882" status="PASS" endtime="20170512 23:20:58.104"></status>
</kw>
<status starttime="20170512 23:20:57.882" status="PASS" endtime="20170512 23:20:58.104"></status>
</kw>
<status starttime="20170512 23:20:57.881" status="PASS" endtime="20170512 23:20:58.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.104">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170512 23:20:58.104" status="PASS" endtime="20170512 23:20:58.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:58.105" status="PASS" endtime="20170512 23:20:58.105"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.187">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:58.187">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.105" status="PASS" endtime="20170512 23:20:58.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:58.187" status="PASS" endtime="20170512 23:20:58.188"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.188">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:57.880" status="PASS" endtime="20170512 23:20:58.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.188" status="PASS" endtime="20170512 23:20:58.189"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.190">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:58.190">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:58.190">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90...</msg>
<status starttime="20170512 23:20:58.189" status="PASS" endtime="20170512 23:20:58.190"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.190">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e ...</msg>
<status starttime="20170512 23:20:57.880" status="PASS" endtime="20170512 23:20:58.190"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.191">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:58.191">${length} = 1</msg>
<status starttime="20170512 23:20:58.190" status="PASS" endtime="20170512 23:20:58.191"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:58.191" status="PASS" endtime="20170512 23:20:58.191"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.193" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:58.192" status="PASS" endtime="20170512 23:20:58.193"></status>
</kw>
<status starttime="20170512 23:20:58.191" status="PASS" endtime="20170512 23:20:58.193"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.194" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:58.194" status="PASS" endtime="20170512 23:20:58.194"></status>
</kw>
<status starttime="20170512 23:20:58.193" status="PASS" endtime="20170512 23:20:58.194"></status>
</kw>
<status starttime="20170512 23:20:57.880" status="PASS" endtime="20170512 23:20:58.194"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.197">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:58.197" status="PASS" endtime="20170512 23:20:58.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.198">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:58.198" status="PASS" endtime="20170512 23:20:58.198"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.199">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:58.199" status="PASS" endtime="20170512 23:20:58.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.200">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:58.199" status="PASS" endtime="20170512 23:20:58.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.376">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:58.200" status="PASS" endtime="20170512 23:20:58.376"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.376">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:58.376">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.200" status="PASS" endtime="20170512 23:20:58.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.377">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.377" status="PASS" endtime="20170512 23:20:58.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.377" status="PASS" endtime="20170512 23:20:58.378"></status>
</kw>
<status starttime="20170512 23:20:58.197" status="PASS" endtime="20170512 23:20:58.378"></status>
</kw>
<status starttime="20170512 23:20:58.196" status="PASS" endtime="20170512 23:20:58.378"></status>
</kw>
<status starttime="20170512 23:20:58.196" status="PASS" endtime="20170512 23:20:58.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.378">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170512 23:20:58.378" status="PASS" endtime="20170512 23:20:58.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:58.379" status="PASS" endtime="20170512 23:20:58.379"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.463">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:58.463">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.379" status="PASS" endtime="20170512 23:20:58.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:58.464" status="PASS" endtime="20170512 23:20:58.464"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.195" status="PASS" endtime="20170512 23:20:58.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.465" status="PASS" endtime="20170512 23:20:58.465"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.466">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:58.466">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:58.466">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90...</msg>
<status starttime="20170512 23:20:58.465" status="PASS" endtime="20170512 23:20:58.466"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.466">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e ...</msg>
<status starttime="20170512 23:20:58.194" status="PASS" endtime="20170512 23:20:58.466"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.467">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:58.467">${length} = 1</msg>
<status starttime="20170512 23:20:58.467" status="PASS" endtime="20170512 23:20:58.467"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:58.467" status="PASS" endtime="20170512 23:20:58.468"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.469" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:58.468" status="PASS" endtime="20170512 23:20:58.469"></status>
</kw>
<status starttime="20170512 23:20:58.468" status="PASS" endtime="20170512 23:20:58.469"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.470" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:58.470" status="PASS" endtime="20170512 23:20:58.470"></status>
</kw>
<status starttime="20170512 23:20:58.469" status="PASS" endtime="20170512 23:20:58.470"></status>
</kw>
<status starttime="20170512 23:20:58.194" status="PASS" endtime="20170512 23:20:58.470"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.474">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:58.473" status="PASS" endtime="20170512 23:20:58.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.475">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:58.474" status="PASS" endtime="20170512 23:20:58.475"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.476">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:58.475" status="PASS" endtime="20170512 23:20:58.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.476">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:58.476" status="PASS" endtime="20170512 23:20:58.476"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:58.477" status="PASS" endtime="20170512 23:20:58.654"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.654">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:58.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.477" status="PASS" endtime="20170512 23:20:58.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.655">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.655" status="PASS" endtime="20170512 23:20:58.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.655" status="PASS" endtime="20170512 23:20:58.656"></status>
</kw>
<status starttime="20170512 23:20:58.473" status="PASS" endtime="20170512 23:20:58.656"></status>
</kw>
<status starttime="20170512 23:20:58.472" status="PASS" endtime="20170512 23:20:58.656"></status>
</kw>
<status starttime="20170512 23:20:58.472" status="PASS" endtime="20170512 23:20:58.656"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.657">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170512 23:20:58.656" status="PASS" endtime="20170512 23:20:58.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:58.657" status="PASS" endtime="20170512 23:20:58.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.743">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:58.743">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.658" status="PASS" endtime="20170512 23:20:58.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:58.743" status="PASS" endtime="20170512 23:20:58.744"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.471" status="PASS" endtime="20170512 23:20:58.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.744" status="PASS" endtime="20170512 23:20:58.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.745">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 05 26 01 00 02 00 05 01 25 00 0b 01 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 33 19 8e bd 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 23 65 37 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 11 fa 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2d 26 91 c6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 28 b8 20 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2a cc 8f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2c d8 61 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 1f b2 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 33 28 2b ae 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 33 28 75 32 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:58.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:58.746">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90...</msg>
<status starttime="20170512 23:20:58.745" status="PASS" endtime="20170512 23:20:58.746"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.746">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 ...</msg>
<status starttime="20170512 23:20:58.471" status="PASS" endtime="20170512 23:20:58.746"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.747">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:58.747">${length} = 1</msg>
<status starttime="20170512 23:20:58.746" status="PASS" endtime="20170512 23:20:58.747"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:58.747" status="PASS" endtime="20170512 23:20:58.747"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.749" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:58.748" status="PASS" endtime="20170512 23:20:58.749"></status>
</kw>
<status starttime="20170512 23:20:58.748" status="PASS" endtime="20170512 23:20:58.749"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.750" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:58.750" status="PASS" endtime="20170512 23:20:58.750"></status>
</kw>
<status starttime="20170512 23:20:58.749" status="PASS" endtime="20170512 23:20:58.750"></status>
</kw>
<status starttime="20170512 23:20:58.470" status="PASS" endtime="20170512 23:20:58.750"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.755">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:58.755" status="PASS" endtime="20170512 23:20:58.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.756">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:58.756" status="PASS" endtime="20170512 23:20:58.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.757">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:58.756" status="PASS" endtime="20170512 23:20:58.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:58.757" status="PASS" endtime="20170512 23:20:58.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.942">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:58.758" status="PASS" endtime="20170512 23:20:58.942"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:58.942">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:58.942">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.758" status="PASS" endtime="20170512 23:20:58.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.943">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.942" status="PASS" endtime="20170512 23:20:58.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:58.943">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:58.943" status="PASS" endtime="20170512 23:20:58.943"></status>
</kw>
<status starttime="20170512 23:20:58.753" status="PASS" endtime="20170512 23:20:58.944"></status>
</kw>
<status starttime="20170512 23:20:58.752" status="PASS" endtime="20170512 23:20:58.944"></status>
</kw>
<status starttime="20170512 23:20:58.752" status="PASS" endtime="20170512 23:20:58.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:58.944">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status starttime="20170512 23:20:58.944" status="PASS" endtime="20170512 23:20:58.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:58.945" status="PASS" endtime="20170512 23:20:58.945"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:59.028">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.945" status="PASS" endtime="20170512 23:20:59.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:59.029" status="PASS" endtime="20170512 23:20:59.029"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.029">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:58.751" status="PASS" endtime="20170512 23:20:59.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.029" status="PASS" endtime="20170512 23:20:59.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.030">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 05 26 01 00 02 00 05 01 25 00 0b 01 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 33 19 8e bd 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 23 65 37 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 11 fa 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2d 26 91 c6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 28 b8 20 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2a cc 8f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2c d8 61 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 1f b2 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 33 28 2b ae 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 33 28 75 32 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:59.031">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:59.031">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90...</msg>
<status starttime="20170512 23:20:59.030" status="PASS" endtime="20170512 23:20:59.031"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.031">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 ...</msg>
<status starttime="20170512 23:20:58.750" status="PASS" endtime="20170512 23:20:59.031"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.032">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:59.032">${length} = 1</msg>
<status starttime="20170512 23:20:59.031" status="PASS" endtime="20170512 23:20:59.032"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:59.032" status="PASS" endtime="20170512 23:20:59.032"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.034" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.033" status="PASS" endtime="20170512 23:20:59.034"></status>
</kw>
<status starttime="20170512 23:20:59.032" status="PASS" endtime="20170512 23:20:59.034"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.035" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.035" status="PASS" endtime="20170512 23:20:59.035"></status>
</kw>
<status starttime="20170512 23:20:59.034" status="PASS" endtime="20170512 23:20:59.035"></status>
</kw>
<status starttime="20170512 23:20:58.750" status="PASS" endtime="20170512 23:20:59.035"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.039">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:59.038" status="PASS" endtime="20170512 23:20:59.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.040">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:59.039" status="PASS" endtime="20170512 23:20:59.040"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.040">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:59.040" status="PASS" endtime="20170512 23:20:59.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.041">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:59.041" status="PASS" endtime="20170512 23:20:59.041"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.258">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:59.042" status="PASS" endtime="20170512 23:20:59.258"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:59.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.041" status="PASS" endtime="20170512 23:20:59.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.258" status="PASS" endtime="20170512 23:20:59.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.259" status="PASS" endtime="20170512 23:20:59.260"></status>
</kw>
<status starttime="20170512 23:20:59.038" status="PASS" endtime="20170512 23:20:59.260"></status>
</kw>
<status starttime="20170512 23:20:59.037" status="PASS" endtime="20170512 23:20:59.260"></status>
</kw>
<status starttime="20170512 23:20:59.037" status="PASS" endtime="20170512 23:20:59.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.260">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status starttime="20170512 23:20:59.260" status="PASS" endtime="20170512 23:20:59.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:59.261" status="PASS" endtime="20170512 23:20:59.261"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.343">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:59.344">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.261" status="PASS" endtime="20170512 23:20:59.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:59.344" status="PASS" endtime="20170512 23:20:59.344"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.344">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.036" status="PASS" endtime="20170512 23:20:59.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.345">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.345" status="PASS" endtime="20170512 23:20:59.345"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.346">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 79 09 f5 c9 00 00 00 05 94 78 bb f0 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 12 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 11 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 11 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:59.346">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:59.346">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 79 09 f5 c9 00 00 00 05 94 78 bb f0 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90...</msg>
<status starttime="20170512 23:20:59.345" status="PASS" endtime="20170512 23:20:59.346"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.348">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 79 09 f5 c9 00 00 00 05 94 78 bb f0 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 12 ...</msg>
<status starttime="20170512 23:20:59.035" status="PASS" endtime="20170512 23:20:59.348"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.348">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:59.348">${length} = 1</msg>
<status starttime="20170512 23:20:59.348" status="PASS" endtime="20170512 23:20:59.348"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:59.349" status="PASS" endtime="20170512 23:20:59.349"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.350" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.350" status="PASS" endtime="20170512 23:20:59.350"></status>
</kw>
<status starttime="20170512 23:20:59.349" status="PASS" endtime="20170512 23:20:59.351"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.352" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.351" status="PASS" endtime="20170512 23:20:59.352"></status>
</kw>
<status starttime="20170512 23:20:59.351" status="PASS" endtime="20170512 23:20:59.352"></status>
</kw>
<status starttime="20170512 23:20:59.035" status="PASS" endtime="20170512 23:20:59.352"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.355">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:59.355" status="PASS" endtime="20170512 23:20:59.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.356">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:59.356" status="PASS" endtime="20170512 23:20:59.356"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.357">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:59.357" status="PASS" endtime="20170512 23:20:59.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.358">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:59.357" status="PASS" endtime="20170512 23:20:59.358"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.534">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:59.358" status="PASS" endtime="20170512 23:20:59.535"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.535">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:59.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.358" status="PASS" endtime="20170512 23:20:59.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.535">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.535" status="PASS" endtime="20170512 23:20:59.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.536" status="PASS" endtime="20170512 23:20:59.536"></status>
</kw>
<status starttime="20170512 23:20:59.355" status="PASS" endtime="20170512 23:20:59.536"></status>
</kw>
<status starttime="20170512 23:20:59.354" status="PASS" endtime="20170512 23:20:59.536"></status>
</kw>
<status starttime="20170512 23:20:59.354" status="PASS" endtime="20170512 23:20:59.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.537">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status starttime="20170512 23:20:59.537" status="PASS" endtime="20170512 23:20:59.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:59.537" status="PASS" endtime="20170512 23:20:59.538"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.623">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:59.623">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.538" status="PASS" endtime="20170512 23:20:59.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:59.623" status="PASS" endtime="20170512 23:20:59.624"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.624">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.353" status="PASS" endtime="20170512 23:20:59.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.624" status="PASS" endtime="20170512 23:20:59.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.625">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 4f ba 96 7f 00 00 00 04 4f bb 22 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:59.625">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:59.626">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 4f ba 96 7f 00 00 00 04 4f bb 22 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90...</msg>
<status starttime="20170512 23:20:59.625" status="PASS" endtime="20170512 23:20:59.626"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.626">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 4f ba 96 7f 00 00 00 04 4f bb 22 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 ...</msg>
<status starttime="20170512 23:20:59.352" status="PASS" endtime="20170512 23:20:59.626"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.626">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:59.627">${length} = 1</msg>
<status starttime="20170512 23:20:59.626" status="PASS" endtime="20170512 23:20:59.627"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:59.627" status="PASS" endtime="20170512 23:20:59.627"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.629" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.628" status="PASS" endtime="20170512 23:20:59.629"></status>
</kw>
<status starttime="20170512 23:20:59.627" status="PASS" endtime="20170512 23:20:59.629"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.630" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.629" status="PASS" endtime="20170512 23:20:59.630"></status>
</kw>
<status starttime="20170512 23:20:59.629" status="PASS" endtime="20170512 23:20:59.630"></status>
</kw>
<status starttime="20170512 23:20:59.352" status="PASS" endtime="20170512 23:20:59.630"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.633">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:20:59.633" status="PASS" endtime="20170512 23:20:59.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.634">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:20:59.634" status="PASS" endtime="20170512 23:20:59.634"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.635">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:20:59.635" status="PASS" endtime="20170512 23:20:59.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:20:59.635" status="PASS" endtime="20170512 23:20:59.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:20:59.636" status="PASS" endtime="20170512 23:20:59.812"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:59.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.636" status="PASS" endtime="20170512 23:20:59.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.813" status="PASS" endtime="20170512 23:20:59.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.813" status="PASS" endtime="20170512 23:20:59.814"></status>
</kw>
<status starttime="20170512 23:20:59.632" status="PASS" endtime="20170512 23:20:59.814"></status>
</kw>
<status starttime="20170512 23:20:59.632" status="PASS" endtime="20170512 23:20:59.814"></status>
</kw>
<status starttime="20170512 23:20:59.632" status="PASS" endtime="20170512 23:20:59.814"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.815">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status starttime="20170512 23:20:59.815" status="PASS" endtime="20170512 23:20:59.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:20:59.815" status="PASS" endtime="20170512 23:20:59.815"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.899">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:20:59.899">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.816" status="PASS" endtime="20170512 23:20:59.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:20:59.899" status="PASS" endtime="20170512 23:20:59.899"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:20:59.631" status="PASS" endtime="20170512 23:20:59.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:20:59.900" status="PASS" endtime="20170512 23:20:59.900"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.901">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 30 0c 1f 1d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 30 0f 38 34 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 30 0f 49 40 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 30 0f 7a f2 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 31 3d 34 f9 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:20:59.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170512 23:20:59.901">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90...</msg>
<status starttime="20170512 23:20:59.901" status="PASS" endtime="20170512 23:20:59.901"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.901">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 ...</msg>
<status starttime="20170512 23:20:59.630" status="PASS" endtime="20170512 23:20:59.902"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.902">Length is 1</msg>
<msg level="INFO" timestamp="20170512 23:20:59.902">${length} = 1</msg>
<status starttime="20170512 23:20:59.902" status="PASS" endtime="20170512 23:20:59.902"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170512 23:20:59.902" status="PASS" endtime="20170512 23:20:59.903"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.904" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.904" status="PASS" endtime="20170512 23:20:59.904"></status>
</kw>
<status starttime="20170512 23:20:59.903" status="PASS" endtime="20170512 23:20:59.904"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.905" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_esel&lt;/a&gt;'.</msg>
<status starttime="20170512 23:20:59.905" status="PASS" endtime="20170512 23:20:59.905"></status>
</kw>
<status starttime="20170512 23:20:59.904" status="PASS" endtime="20170512 23:20:59.905"></status>
</kw>
<status starttime="20170512 23:20:59.630" status="PASS" endtime="20170512 23:20:59.905"></status>
</kw>
<status starttime="20170512 23:20:56.453" status="PASS" endtime="20170512 23:20:59.906"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.912">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:20:59.917">${out} = </msg>
<status starttime="20170512 23:20:59.906" status="PASS" endtime="20170512 23:20:59.917"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:59.920">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170512 23:20:59.920" status="FAIL" endtime="20170512 23:20:59.920"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.921">${status} = False</msg>
<status starttime="20170512 23:20:59.919" status="PASS" endtime="20170512 23:20:59.921"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.921">Returning from the enclosing user keyword.</msg>
<status starttime="20170512 23:20:59.921" status="PASS" endtime="20170512 23:20:59.922"></status>
</kw>
<status starttime="20170512 23:20:55.917" status="PASS" endtime="20170512 23:20:59.922"></status>
</kw>
<status starttime="20170512 23:20:55.892" status="PASS" endtime="20170512 23:20:59.922"></status>
</kw>
<status starttime="20170512 23:20:55.889" status="PASS" endtime="20170512 23:20:59.923"></status>
</kw>
<status starttime="20170512 23:20:55.889" status="PASS" endtime="20170512 23:20:59.923"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170512 23:20:59.925" status="PASS" endtime="20170512 23:20:59.925"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:20:59.925">${ret_values} = None</msg>
<status starttime="20170512 23:20:59.924" status="PASS" endtime="20170512 23:20:59.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170512 23:20:59.925" status="PASS" endtime="20170512 23:20:59.926"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:59.953">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:20:59.952" status="FAIL" endtime="20170512 23:20:59.953"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.953">${has_host} = False</msg>
<status starttime="20170512 23:20:59.952" status="PASS" endtime="20170512 23:20:59.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:20:59.954" status="PASS" endtime="20170512 23:20:59.954"></status>
</kw>
<status starttime="20170512 23:20:59.953" status="PASS" endtime="20170512 23:20:59.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.956">${port_num} = 22</msg>
<status starttime="20170512 23:20:59.956" status="PASS" endtime="20170512 23:20:59.956"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.957">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:20:59.957" status="PASS" endtime="20170512 23:20:59.957"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:20:59.957">${https_num} = 443</msg>
<status starttime="20170512 23:20:59.957" status="PASS" endtime="20170512 23:20:59.957"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.959">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:20:59.958" status="PASS" endtime="20170512 23:20:59.959"></status>
</kw>
<status starttime="20170512 23:20:59.955" status="PASS" endtime="20170512 23:20:59.959"></status>
</kw>
<status starttime="20170512 23:20:59.954" status="PASS" endtime="20170512 23:20:59.960"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:20:59.960">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:20:59.960" status="FAIL" endtime="20170512 23:20:59.961"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:20:59.961">${has_port} = False</msg>
<status starttime="20170512 23:20:59.960" status="PASS" endtime="20170512 23:20:59.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:20:59.962" status="PASS" endtime="20170512 23:20:59.962"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:20:59.963" status="PASS" endtime="20170512 23:20:59.963"></status>
</kw>
<status starttime="20170512 23:20:59.962" status="PASS" endtime="20170512 23:20:59.964"></status>
</kw>
<status starttime="20170512 23:20:59.961" status="PASS" endtime="20170512 23:20:59.964"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:20:59.964">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:21:02.015">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:20:59.964" status="PASS" endtime="20170512 23:21:02.015"></status>
</kw>
<status starttime="20170512 23:20:59.951" status="PASS" endtime="20170512 23:21:02.015"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:02.015">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170512 23:21:02.015" status="PASS" endtime="20170512 23:21:02.016"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:02.017">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20170512 23:21:02.017" status="PASS" endtime="20170512 23:21:02.017"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:02.018">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_journalctl.txt</msg>
<status starttime="20170512 23:21:02.018" status="PASS" endtime="20170512 23:21:02.018"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170512 23:21:02.020" status="PASS" endtime="20170512 23:21:02.020"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:02.021">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170512 23:21:08.741">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:08.748">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:23 UTC, end at Thu 2017-04-20 17:54:20 UTC. --
Apr 20 17:29:23 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:23 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170512 23:21:08.748">${stderr} = </msg>
<status starttime="20170512 23:21:02.021" status="PASS" endtime="20170512 23:21:08.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:08.763" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_journalctl.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:08.757" status="PASS" endtime="20170512 23:21:08.763"></status>
</kw>
<status starttime="20170512 23:21:08.753" status="PASS" endtime="20170512 23:21:08.763"></status>
</kw>
<status starttime="20170512 23:21:08.749" status="PASS" endtime="20170512 23:21:08.763"></status>
</kw>
<status starttime="20170512 23:21:02.019" status="PASS" endtime="20170512 23:21:08.764"></status>
</kw>
<status starttime="20170512 23:21:02.017" status="PASS" endtime="20170512 23:21:08.764"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:08.765">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_meminfo.txt</msg>
<status starttime="20170512 23:21:08.764" status="PASS" endtime="20170512 23:21:08.765"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170512 23:21:08.766" status="PASS" endtime="20170512 23:21:08.766"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:08.766">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170512 23:21:08.813">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:08.813">${stdout} = MemTotal:         432932 kB
MemFree:          277300 kB
MemAvailable:     319120 kB
Buffers:           10524 kB
Cached:            50476 kB
SwapCached:            0 kB
Active:           106052 kB
Inac...</msg>
<msg level="INFO" timestamp="20170512 23:21:08.813">${stderr} = </msg>
<status starttime="20170512 23:21:08.766" status="PASS" endtime="20170512 23:21:08.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:08.819" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_meminfo.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:08.818" status="PASS" endtime="20170512 23:21:08.819"></status>
</kw>
<status starttime="20170512 23:21:08.818" status="PASS" endtime="20170512 23:21:08.819"></status>
</kw>
<status starttime="20170512 23:21:08.813" status="PASS" endtime="20170512 23:21:08.819"></status>
</kw>
<status starttime="20170512 23:21:08.765" status="PASS" endtime="20170512 23:21:08.819"></status>
</kw>
<status starttime="20170512 23:21:08.764" status="PASS" endtime="20170512 23:21:08.819"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:08.820">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_proc_list.txt</msg>
<status starttime="20170512 23:21:08.820" status="PASS" endtime="20170512 23:21:08.820"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170512 23:21:08.821" status="PASS" endtime="20170512 23:21:08.821"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:08.822">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170512 23:21:09.118">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:09.118">${stdout} = Mem: 155756K used, 277176K free, 15140K shrd, 10524K buff, 50480K cached
CPU:   9% usr  18% sys   0% nic  72% idle   0% io   0% irq   0% sirq
Load average: 1.65 1.54 1.52 1/135 2883
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170512 23:21:09.118">${stderr} = </msg>
<status starttime="20170512 23:21:08.822" status="PASS" endtime="20170512 23:21:09.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:09.124" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_proc_list.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:09.124" status="PASS" endtime="20170512 23:21:09.124"></status>
</kw>
<status starttime="20170512 23:21:09.123" status="PASS" endtime="20170512 23:21:09.125"></status>
</kw>
<status starttime="20170512 23:21:09.119" status="PASS" endtime="20170512 23:21:09.125"></status>
</kw>
<status starttime="20170512 23:21:08.820" status="PASS" endtime="20170512 23:21:09.125"></status>
</kw>
<status starttime="20170512 23:21:08.820" status="PASS" endtime="20170512 23:21:09.125"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:09.125">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_dmesg.txt</msg>
<status starttime="20170512 23:21:09.125" status="PASS" endtime="20170512 23:21:09.126"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170512 23:21:09.126" status="PASS" endtime="20170512 23:21:09.127"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:09.127">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170512 23:21:09.212">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:09.212">${stdout} = Freeing unused kernel memory: 1024K (80600000 - 80700000)
jffs2: notice: (432) jffs2_build_xattr_subsystem: complete building xattr subsystem, 0 of xdatum (0 unchecked, 0 orphan) and 0 of xref (0 dead...</msg>
<msg level="INFO" timestamp="20170512 23:21:09.212">${stderr} = </msg>
<status starttime="20170512 23:21:09.127" status="PASS" endtime="20170512 23:21:09.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:09.219" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_dmesg.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:09.218" status="PASS" endtime="20170512 23:21:09.219"></status>
</kw>
<status starttime="20170512 23:21:09.217" status="PASS" endtime="20170512 23:21:09.219"></status>
</kw>
<status starttime="20170512 23:21:09.213" status="PASS" endtime="20170512 23:21:09.219"></status>
</kw>
<status starttime="20170512 23:21:09.126" status="PASS" endtime="20170512 23:21:09.219"></status>
</kw>
<status starttime="20170512 23:21:09.125" status="PASS" endtime="20170512 23:21:09.219"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:09.220">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_procinfo.txt</msg>
<status starttime="20170512 23:21:09.219" status="PASS" endtime="20170512 23:21:09.220"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170512 23:21:09.221" status="PASS" endtime="20170512 23:21:09.221"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:09.222">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170512 23:21:09.296">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:09.296">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170512 23:21:09.296">${stderr} = </msg>
<status starttime="20170512 23:21:09.221" status="PASS" endtime="20170512 23:21:09.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:09.302" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_procinfo.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:09.302" status="PASS" endtime="20170512 23:21:09.302"></status>
</kw>
<status starttime="20170512 23:21:09.301" status="PASS" endtime="20170512 23:21:09.302"></status>
</kw>
<status starttime="20170512 23:21:09.297" status="PASS" endtime="20170512 23:21:09.302"></status>
</kw>
<status starttime="20170512 23:21:09.220" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:21:09.219" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:21:02.017" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:21:02.016" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:21:02.016" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:21:02.016" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:20:59.951" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:20:59.926" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:20:59.923" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<status starttime="20170512 23:20:59.923" status="PASS" endtime="20170512 23:21:09.303"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170512 23:21:09.305" status="PASS" endtime="20170512 23:21:09.305"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:09.305">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:21:09.305">${ret_values} = None</msg>
<status starttime="20170512 23:21:09.304" status="PASS" endtime="20170512 23:21:09.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170512 23:21:09.305" status="PASS" endtime="20170512 23:21:09.306"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:21:09.332">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:21:09.331" status="FAIL" endtime="20170512 23:21:09.332"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:09.332">${has_host} = False</msg>
<status starttime="20170512 23:21:09.331" status="PASS" endtime="20170512 23:21:09.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:21:09.333" status="PASS" endtime="20170512 23:21:09.333"></status>
</kw>
<status starttime="20170512 23:21:09.332" status="PASS" endtime="20170512 23:21:09.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:09.335">${port_num} = 22</msg>
<status starttime="20170512 23:21:09.334" status="PASS" endtime="20170512 23:21:09.335"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:09.335">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:21:09.335" status="PASS" endtime="20170512 23:21:09.335"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:09.336">${https_num} = 443</msg>
<status starttime="20170512 23:21:09.335" status="PASS" endtime="20170512 23:21:09.336"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:09.337">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:21:09.336" status="PASS" endtime="20170512 23:21:09.337"></status>
</kw>
<status starttime="20170512 23:21:09.334" status="PASS" endtime="20170512 23:21:09.337"></status>
</kw>
<status starttime="20170512 23:21:09.333" status="PASS" endtime="20170512 23:21:09.337"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:21:09.338">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:21:09.337" status="FAIL" endtime="20170512 23:21:09.338"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:09.338">${has_port} = False</msg>
<status starttime="20170512 23:21:09.337" status="PASS" endtime="20170512 23:21:09.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:21:09.339" status="PASS" endtime="20170512 23:21:09.340"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:21:09.340" status="PASS" endtime="20170512 23:21:09.341"></status>
</kw>
<status starttime="20170512 23:21:09.339" status="PASS" endtime="20170512 23:21:09.341"></status>
</kw>
<status starttime="20170512 23:21:09.338" status="PASS" endtime="20170512 23:21:09.341"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:09.341">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:21:10.986">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:21:09.341" status="PASS" endtime="20170512 23:21:10.986"></status>
</kw>
<status starttime="20170512 23:21:09.330" status="PASS" endtime="20170512 23:21:10.986"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:10.987">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170512 23:21:10.987" status="PASS" endtime="20170512 23:21:10.987"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:10.988">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170512 23:21:10.988" status="PASS" endtime="20170512 23:21:10.988"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:10.993">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170512 23:21:10.989" status="PASS" endtime="20170512 23:21:10.993"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:10.996" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:10.996" status="PASS" endtime="20170512 23:21:10.996"></status>
</kw>
<status starttime="20170512 23:21:10.995" status="PASS" endtime="20170512 23:21:10.997"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:10.998" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:10.998" status="PASS" endtime="20170512 23:21:10.998"></status>
</kw>
<status starttime="20170512 23:21:10.997" status="PASS" endtime="20170512 23:21:10.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.000" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:10.999" status="PASS" endtime="20170512 23:21:11.000"></status>
</kw>
<status starttime="20170512 23:21:10.999" status="PASS" endtime="20170512 23:21:11.000"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.001" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.001" status="PASS" endtime="20170512 23:21:11.001"></status>
</kw>
<status starttime="20170512 23:21:11.000" status="PASS" endtime="20170512 23:21:11.001"></status>
</kw>
<status starttime="20170512 23:21:10.995" status="PASS" endtime="20170512 23:21:11.001"></status>
</kw>
<status starttime="20170512 23:21:10.994" status="PASS" endtime="20170512 23:21:11.001"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.002">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.049">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.049">${stdout} = </msg>
<msg level="INFO" timestamp="20170512 23:21:11.049">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170512 23:21:11.002" status="PASS" endtime="20170512 23:21:11.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.055" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.054" status="PASS" endtime="20170512 23:21:11.055"></status>
</kw>
<status starttime="20170512 23:21:11.054" status="PASS" endtime="20170512 23:21:11.055"></status>
</kw>
<status starttime="20170512 23:21:11.049" status="PASS" endtime="20170512 23:21:11.055"></status>
</kw>
<status starttime="20170512 23:21:10.994" status="PASS" endtime="20170512 23:21:11.055"></status>
</kw>
<status starttime="20170512 23:21:10.993" status="PASS" endtime="20170512 23:21:11.055"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.058" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.058" status="PASS" endtime="20170512 23:21:11.058"></status>
</kw>
<status starttime="20170512 23:21:11.057" status="PASS" endtime="20170512 23:21:11.058"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.060" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.059" status="PASS" endtime="20170512 23:21:11.060"></status>
</kw>
<status starttime="20170512 23:21:11.059" status="PASS" endtime="20170512 23:21:11.060"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.061" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.060" status="PASS" endtime="20170512 23:21:11.061"></status>
</kw>
<status starttime="20170512 23:21:11.060" status="PASS" endtime="20170512 23:21:11.061"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.062" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.062" status="PASS" endtime="20170512 23:21:11.062"></status>
</kw>
<status starttime="20170512 23:21:11.061" status="PASS" endtime="20170512 23:21:11.062"></status>
</kw>
<status starttime="20170512 23:21:11.057" status="PASS" endtime="20170512 23:21:11.062"></status>
</kw>
<status starttime="20170512 23:21:11.056" status="PASS" endtime="20170512 23:21:11.062"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.063">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.216">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.216">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-37"
VERSION_ID="v1.99.5-37-g77e75ff"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170512 23:21:11.216">${stderr} = </msg>
<status starttime="20170512 23:21:11.063" status="PASS" endtime="20170512 23:21:11.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.222" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.222" status="PASS" endtime="20170512 23:21:11.222"></status>
</kw>
<status starttime="20170512 23:21:11.221" status="PASS" endtime="20170512 23:21:11.222"></status>
</kw>
<status starttime="20170512 23:21:11.217" status="PASS" endtime="20170512 23:21:11.222"></status>
</kw>
<status starttime="20170512 23:21:11.056" status="PASS" endtime="20170512 23:21:11.223"></status>
</kw>
<status starttime="20170512 23:21:11.055" status="PASS" endtime="20170512 23:21:11.223"></status>
</kw>
<status starttime="20170512 23:21:10.993" status="PASS" endtime="20170512 23:21:11.223"></status>
</kw>
<status starttime="20170512 23:21:10.987" status="PASS" endtime="20170512 23:21:11.223"></status>
</kw>
<status starttime="20170512 23:21:10.987" status="PASS" endtime="20170512 23:21:11.223"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.224">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170512 23:21:11.223" status="PASS" endtime="20170512 23:21:11.224"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.225">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170512 23:21:11.224" status="PASS" endtime="20170512 23:21:11.225"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.228" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.228" status="PASS" endtime="20170512 23:21:11.228"></status>
</kw>
<status starttime="20170512 23:21:11.227" status="PASS" endtime="20170512 23:21:11.228"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.229" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.229" status="PASS" endtime="20170512 23:21:11.230"></status>
</kw>
<status starttime="20170512 23:21:11.228" status="PASS" endtime="20170512 23:21:11.230"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.231" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.230" status="PASS" endtime="20170512 23:21:11.231"></status>
</kw>
<status starttime="20170512 23:21:11.230" status="PASS" endtime="20170512 23:21:11.231"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.232" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.232" status="PASS" endtime="20170512 23:21:11.232"></status>
</kw>
<status starttime="20170512 23:21:11.231" status="PASS" endtime="20170512 23:21:11.232"></status>
</kw>
<status starttime="20170512 23:21:11.227" status="PASS" endtime="20170512 23:21:11.232"></status>
</kw>
<status starttime="20170512 23:21:11.226" status="PASS" endtime="20170512 23:21:11.232"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.233">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.291">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.291">${stdout} =  17:54:30 up 25 min,  load average: 1.84, 1.57, 1.53</msg>
<msg level="INFO" timestamp="20170512 23:21:11.291">${stderr} = </msg>
<status starttime="20170512 23:21:11.233" status="PASS" endtime="20170512 23:21:11.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.297" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.297" status="PASS" endtime="20170512 23:21:11.297"></status>
</kw>
<status starttime="20170512 23:21:11.296" status="PASS" endtime="20170512 23:21:11.297"></status>
</kw>
<status starttime="20170512 23:21:11.292" status="PASS" endtime="20170512 23:21:11.297"></status>
</kw>
<status starttime="20170512 23:21:11.225" status="PASS" endtime="20170512 23:21:11.297"></status>
</kw>
<status starttime="20170512 23:21:11.225" status="PASS" endtime="20170512 23:21:11.298"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.300" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.300" status="PASS" endtime="20170512 23:21:11.301"></status>
</kw>
<status starttime="20170512 23:21:11.300" status="PASS" endtime="20170512 23:21:11.301"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.302" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.301" status="PASS" endtime="20170512 23:21:11.302"></status>
</kw>
<status starttime="20170512 23:21:11.301" status="PASS" endtime="20170512 23:21:11.302"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.303" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.303" status="PASS" endtime="20170512 23:21:11.303"></status>
</kw>
<status starttime="20170512 23:21:11.302" status="PASS" endtime="20170512 23:21:11.304"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.305" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.304" status="PASS" endtime="20170512 23:21:11.305"></status>
</kw>
<status starttime="20170512 23:21:11.304" status="PASS" endtime="20170512 23:21:11.305"></status>
</kw>
<status starttime="20170512 23:21:11.299" status="PASS" endtime="20170512 23:21:11.305"></status>
</kw>
<status starttime="20170512 23:21:11.299" status="PASS" endtime="20170512 23:21:11.305"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.306">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.381">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.381">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170512 23:21:11.381">${stderr} = </msg>
<status starttime="20170512 23:21:11.305" status="PASS" endtime="20170512 23:21:11.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.388" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.387" status="PASS" endtime="20170512 23:21:11.388"></status>
</kw>
<status starttime="20170512 23:21:11.387" status="PASS" endtime="20170512 23:21:11.388"></status>
</kw>
<status starttime="20170512 23:21:11.381" status="PASS" endtime="20170512 23:21:11.388"></status>
</kw>
<status starttime="20170512 23:21:11.298" status="PASS" endtime="20170512 23:21:11.388"></status>
</kw>
<status starttime="20170512 23:21:11.298" status="PASS" endtime="20170512 23:21:11.388"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.391" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.391" status="PASS" endtime="20170512 23:21:11.391"></status>
</kw>
<status starttime="20170512 23:21:11.390" status="PASS" endtime="20170512 23:21:11.391"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.393" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.392" status="PASS" endtime="20170512 23:21:11.393"></status>
</kw>
<status starttime="20170512 23:21:11.392" status="PASS" endtime="20170512 23:21:11.393"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.394" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.394" status="PASS" endtime="20170512 23:21:11.394"></status>
</kw>
<status starttime="20170512 23:21:11.393" status="PASS" endtime="20170512 23:21:11.394"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.395" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.395" status="PASS" endtime="20170512 23:21:11.395"></status>
</kw>
<status starttime="20170512 23:21:11.394" status="PASS" endtime="20170512 23:21:11.395"></status>
</kw>
<status starttime="20170512 23:21:11.390" status="PASS" endtime="20170512 23:21:11.396"></status>
</kw>
<status starttime="20170512 23:21:11.389" status="PASS" endtime="20170512 23:21:11.396"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.396">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.452">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:11.453">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Fri May 12 22:21:55 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170512 23:21:11.453">${stderr} = </msg>
<status starttime="20170512 23:21:11.396" status="PASS" endtime="20170512 23:21:11.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.458" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.458" status="PASS" endtime="20170512 23:21:11.458"></status>
</kw>
<status starttime="20170512 23:21:11.457" status="PASS" endtime="20170512 23:21:11.458"></status>
</kw>
<status starttime="20170512 23:21:11.453" status="PASS" endtime="20170512 23:21:11.459"></status>
</kw>
<status starttime="20170512 23:21:11.389" status="PASS" endtime="20170512 23:21:11.459"></status>
</kw>
<status starttime="20170512 23:21:11.389" status="PASS" endtime="20170512 23:21:11.459"></status>
</kw>
<status starttime="20170512 23:21:11.225" status="PASS" endtime="20170512 23:21:11.459"></status>
</kw>
<status starttime="20170512 23:21:11.223" status="PASS" endtime="20170512 23:21:11.459"></status>
</kw>
<status starttime="20170512 23:21:11.223" status="PASS" endtime="20170512 23:21:11.459"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.460">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170512 23:21:11.460" status="PASS" endtime="20170512 23:21:11.460"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.461">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170512 23:21:11.460" status="PASS" endtime="20170512 23:21:11.461"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.467" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.466" status="PASS" endtime="20170512 23:21:11.467"></status>
</kw>
<status starttime="20170512 23:21:11.466" status="PASS" endtime="20170512 23:21:11.467"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.468" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.468" status="PASS" endtime="20170512 23:21:11.468"></status>
</kw>
<status starttime="20170512 23:21:11.467" status="PASS" endtime="20170512 23:21:11.468"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.469" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.469" status="PASS" endtime="20170512 23:21:11.470"></status>
</kw>
<status starttime="20170512 23:21:11.469" status="PASS" endtime="20170512 23:21:11.470"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:11.471" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:11.470" status="PASS" endtime="20170512 23:21:11.471"></status>
</kw>
<status starttime="20170512 23:21:11.470" status="PASS" endtime="20170512 23:21:11.471"></status>
</kw>
<status starttime="20170512 23:21:11.465" status="PASS" endtime="20170512 23:21:11.471"></status>
</kw>
<status starttime="20170512 23:21:11.462" status="PASS" endtime="20170512 23:21:11.471"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:11.472">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170512 23:21:12.741">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170512 23:21:12.741">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170512 23:21:12.741">${stderr} = </msg>
<status starttime="20170512 23:21:11.471" status="PASS" endtime="20170512 23:21:12.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:12.747" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:12.746" status="PASS" endtime="20170512 23:21:12.747"></status>
</kw>
<status starttime="20170512 23:21:12.746" status="PASS" endtime="20170512 23:21:12.747"></status>
</kw>
<status starttime="20170512 23:21:12.741" status="PASS" endtime="20170512 23:21:12.747"></status>
</kw>
<status starttime="20170512 23:21:11.461" status="PASS" endtime="20170512 23:21:12.747"></status>
</kw>
<status starttime="20170512 23:21:11.461" status="PASS" endtime="20170512 23:21:12.747"></status>
</kw>
<status starttime="20170512 23:21:11.461" status="PASS" endtime="20170512 23:21:12.747"></status>
</kw>
<status starttime="20170512 23:21:11.459" status="PASS" endtime="20170512 23:21:12.748"></status>
</kw>
<status starttime="20170512 23:21:11.459" status="PASS" endtime="20170512 23:21:12.748"></status>
</kw>
<status starttime="20170512 23:21:10.987" status="PASS" endtime="20170512 23:21:12.748"></status>
</kw>
<status starttime="20170512 23:21:09.330" status="PASS" endtime="20170512 23:21:12.748"></status>
</kw>
<status starttime="20170512 23:21:09.306" status="PASS" endtime="20170512 23:21:12.748"></status>
</kw>
<status starttime="20170512 23:21:09.303" status="PASS" endtime="20170512 23:21:12.748"></status>
</kw>
<status starttime="20170512 23:21:09.303" status="PASS" endtime="20170512 23:21:12.748"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170512 23:21:12.750" status="PASS" endtime="20170512 23:21:12.750"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:12.750">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:21:12.750">${ret_values} = None</msg>
<status starttime="20170512 23:21:12.749" status="PASS" endtime="20170512 23:21:12.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170512 23:21:12.750" status="PASS" endtime="20170512 23:21:12.751"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:21:12.776">Dictionary does not contain key 'host'.</msg>
<status starttime="20170512 23:21:12.776" status="FAIL" endtime="20170512 23:21:12.776"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:12.776">${has_host} = False</msg>
<status starttime="20170512 23:21:12.775" status="PASS" endtime="20170512 23:21:12.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170512 23:21:12.777" status="PASS" endtime="20170512 23:21:12.778"></status>
</kw>
<status starttime="20170512 23:21:12.777" status="PASS" endtime="20170512 23:21:12.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:12.779">${port_num} = 22</msg>
<status starttime="20170512 23:21:12.779" status="PASS" endtime="20170512 23:21:12.779"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:12.780">${SSH_PORT} = 22</msg>
<status starttime="20170512 23:21:12.779" status="PASS" endtime="20170512 23:21:12.780"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:12.843">${https_num} = 443</msg>
<status starttime="20170512 23:21:12.780" status="PASS" endtime="20170512 23:21:12.843"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:12.844">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170512 23:21:12.843" status="PASS" endtime="20170512 23:21:12.844"></status>
</kw>
<status starttime="20170512 23:21:12.778" status="PASS" endtime="20170512 23:21:12.845"></status>
</kw>
<status starttime="20170512 23:21:12.778" status="PASS" endtime="20170512 23:21:12.845"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170512 23:21:12.846">Dictionary does not contain key 'port'.</msg>
<status starttime="20170512 23:21:12.846" status="FAIL" endtime="20170512 23:21:12.846"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:12.846">${has_port} = False</msg>
<status starttime="20170512 23:21:12.845" status="PASS" endtime="20170512 23:21:12.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170512 23:21:12.848" status="PASS" endtime="20170512 23:21:12.849"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170512 23:21:12.849" status="PASS" endtime="20170512 23:21:12.850"></status>
</kw>
<status starttime="20170512 23:21:12.848" status="PASS" endtime="20170512 23:21:12.850"></status>
</kw>
<status starttime="20170512 23:21:12.847" status="PASS" endtime="20170512 23:21:12.850"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:12.850">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170512 23:21:14.499">Read output: root@witherspoon:~#</msg>
<status starttime="20170512 23:21:12.850" status="PASS" endtime="20170512 23:21:14.499"></status>
</kw>
<status starttime="20170512 23:21:12.775" status="PASS" endtime="20170512 23:21:14.499"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.500">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170512 23:21:14.500" status="PASS" endtime="20170512 23:21:14.500"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.501">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status starttime="20170512 23:21:14.501" status="PASS" endtime="20170512 23:21:14.501"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.502">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_record_log.txt</msg>
<status starttime="20170512 23:21:14.502" status="PASS" endtime="20170512 23:21:14.502"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.505">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:21:14.505" status="PASS" endtime="20170512 23:21:14.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:21:14.506" status="PASS" endtime="20170512 23:21:14.506"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.507">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:21:14.507" status="PASS" endtime="20170512 23:21:14.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.507">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:21:14.507" status="PASS" endtime="20170512 23:21:14.508"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:21:14.508" status="PASS" endtime="20170512 23:21:14.685"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:14.686">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:21:14.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:14.508" status="PASS" endtime="20170512 23:21:14.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:14.686" status="PASS" endtime="20170512 23:21:14.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:14.687" status="PASS" endtime="20170512 23:21:14.687"></status>
</kw>
<status starttime="20170512 23:21:14.504" status="PASS" endtime="20170512 23:21:14.687"></status>
</kw>
<status starttime="20170512 23:21:14.504" status="PASS" endtime="20170512 23:21:14.687"></status>
</kw>
<status starttime="20170512 23:21:14.503" status="PASS" endtime="20170512 23:21:14.687"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.688">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170512 23:21:14.688" status="PASS" endtime="20170512 23:21:14.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:21:14.688" status="PASS" endtime="20170512 23:21:14.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.734">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:21:14.735">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170512 23:21:14.689" status="PASS" endtime="20170512 23:21:14.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:21:14.735" status="PASS" endtime="20170512 23:21:14.735"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:14.735">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170512 23:21:14.502" status="PASS" endtime="20170512 23:21:14.735"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170512 23:21:14.737">404 != 200</msg>
<status starttime="20170512 23:21:14.736" status="FAIL" endtime="20170512 23:21:14.737"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:14.737">${status} = False</msg>
<status starttime="20170512 23:21:14.736" status="PASS" endtime="20170512 23:21:14.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170512 23:21:14.738">Continuing for loop from the next iteration.</msg>
<status starttime="20170512 23:21:14.738" status="PASS" endtime="20170512 23:21:14.738"></status>
</kw>
<status starttime="20170512 23:21:14.737" status="PASS" endtime="20170512 23:21:14.738"></status>
</kw>
<status starttime="20170512 23:21:14.501" status="PASS" endtime="20170512 23:21:14.738"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.739">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_elog.txt</msg>
<status starttime="20170512 23:21:14.738" status="PASS" endtime="20170512 23:21:14.739"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.742">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:21:14.741" status="PASS" endtime="20170512 23:21:14.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:21:14.742" status="PASS" endtime="20170512 23:21:14.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.743">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:21:14.743" status="PASS" endtime="20170512 23:21:14.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.744">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:21:14.743" status="PASS" endtime="20170512 23:21:14.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:21:14.745" status="PASS" endtime="20170512 23:21:14.922"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:14.922">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:21:14.922">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:14.744" status="PASS" endtime="20170512 23:21:14.922"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.923">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:14.922" status="PASS" endtime="20170512 23:21:14.923"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:14.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:14.923" status="PASS" endtime="20170512 23:21:14.924"></status>
</kw>
<status starttime="20170512 23:21:14.741" status="PASS" endtime="20170512 23:21:14.924"></status>
</kw>
<status starttime="20170512 23:21:14.740" status="PASS" endtime="20170512 23:21:14.924"></status>
</kw>
<status starttime="20170512 23:21:14.740" status="PASS" endtime="20170512 23:21:14.924"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:14.925">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170512 23:21:14.924" status="PASS" endtime="20170512 23:21:14.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:21:14.925" status="PASS" endtime="20170512 23:21:14.925"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:21:15.236">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:14.925" status="PASS" endtime="20170512 23:21:15.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:21:15.237" status="PASS" endtime="20170512 23:21:15.237"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:15.237">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:14.739" status="PASS" endtime="20170512 23:21:15.237"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:15.238" status="PASS" endtime="20170512 23:21:15.239"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:15.239">${status} = True</msg>
<status starttime="20170512 23:21:15.238" status="PASS" endtime="20170512 23:21:15.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170512 23:21:15.239" status="PASS" endtime="20170512 23:21:15.239"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.241">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 52 cd b6 8f 00 00 00 04 52 d4 3f 19 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710123524, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 30 0c 1f 1d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 30 0f 38 34 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 30 0f 49 40 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 30 0f 7a f2 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 31 3d 34 f9 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710556000, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 73 1b a9 cc 00 00 00 05 74 aa 7b 89 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 16 90 00 00 16 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 04 26 01 00 02 00 05 01 25 01 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 2a 89 79 ac 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 93 62 ff 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 98 2a 0a 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 22 42 0c eb 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 44 6e 24 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 46 c7 a6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 22 49 19 99 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 2a 98 38 24 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 2a 98 43 43 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 2a 98 90 ac 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710559960, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 74 a9 df 13 00 00 00 05 8c e5 db 86 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 18 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 17 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 17 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 12, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710560929, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c2 92 ad 76 00 00 00 04 c2 93 c1 7d 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 04 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 36 30 d4 4a 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 36 33 e1 53 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 36 33 f2 1c 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 36 34 25 5b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 37 71 a2 6d 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710126230, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710261527, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5c ad 39 59 00 00 00 04 5c ae c4 f9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710264581, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 05 26 01 00 02 00 05 01 25 00 0b 01 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 33 19 8e bd 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 23 65 37 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 11 fa 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2d 26 91 c6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 28 b8 20 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2a cc 8f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2c d8 61 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 1f b2 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 33 28 2b ae 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 33 28 75 32 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710270543, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 77 7b eb 58 00 00 00 05 79 0c 60 97 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 10 90 00 00 10 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 05 26 01 00 02 00 05 01 25 00 0b 01 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 33 19 8e bd 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 23 65 37 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 11 fa 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2d 26 91 c6 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 31 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 28 b8 20 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2a cc 8f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 34 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2d 2c d8 61 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 35 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 33 28 1f b2 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 33 28 2b ae 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 33 28 75 32 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710274306, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 79 09 f5 c9 00 00 00 05 94 78 bb f0 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 12 55 48 00 18 01 00 05 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 03 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 90 00 00 11 00 00 09 0f 00 00 00 01 00 00 0d 09 42 43 38 41 31 37 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 63 2e 73 6f 00 00 00 00 55 44 00 10 01 03 09 00 90 00 00 11 00 00 09 0f 55 44 00 3c 01 01 01 00 6d 73 73 5f 64 64 72 5f 70 68 79 5f 72 65 73 65 74 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 16 17 b0 00 00 00 00 40 0e d2 90 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710275274, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 4f ba 96 7f 00 00 00 04 4f bb 22 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710547097, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf 65 67 0d 00 00 00 04 bf 68 5c 75 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 15 90 00 00 15 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 30 0c 1f 1d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 30 0f 38 34 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 30 0f 49 40 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 30 0f 7a f2 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 31 3d 34 f9 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710550157, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:21:15.242">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170512 23:21:15.242">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status starttime="20170512 23:21:15.239" status="PASS" endtime="20170512 23:21:15.242"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.244" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_elog.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:15.244" status="PASS" endtime="20170512 23:21:15.244"></status>
</kw>
<status starttime="20170512 23:21:15.243" status="PASS" endtime="20170512 23:21:15.244"></status>
</kw>
<status starttime="20170512 23:21:14.738" status="PASS" endtime="20170512 23:21:15.244"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.245">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_sensor_list.txt</msg>
<status starttime="20170512 23:21:15.245" status="PASS" endtime="20170512 23:21:15.245"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.248">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:21:15.247" status="PASS" endtime="20170512 23:21:15.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:21:15.248" status="PASS" endtime="20170512 23:21:15.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.249">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:21:15.249" status="PASS" endtime="20170512 23:21:15.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:21:15.250" status="PASS" endtime="20170512 23:21:15.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:21:15.251" status="PASS" endtime="20170512 23:21:15.460"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:15.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:21:15.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:15.250" status="PASS" endtime="20170512 23:21:15.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:15.460" status="PASS" endtime="20170512 23:21:15.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:15.461" status="PASS" endtime="20170512 23:21:15.461"></status>
</kw>
<status starttime="20170512 23:21:15.247" status="PASS" endtime="20170512 23:21:15.461"></status>
</kw>
<status starttime="20170512 23:21:15.247" status="PASS" endtime="20170512 23:21:15.462"></status>
</kw>
<status starttime="20170512 23:21:15.246" status="PASS" endtime="20170512 23:21:15.462"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.462">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170512 23:21:15.462" status="PASS" endtime="20170512 23:21:15.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:21:15.463" status="PASS" endtime="20170512 23:21:15.463"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.674">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:21:15.674">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:15.463" status="PASS" endtime="20170512 23:21:15.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:21:15.674" status="PASS" endtime="20170512 23:21:15.675"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:15.675">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:15.245" status="PASS" endtime="20170512 23:21:15.675"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:15.676" status="PASS" endtime="20170512 23:21:15.676"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:15.676">${status} = True</msg>
<status starttime="20170512 23:21:15.675" status="PASS" endtime="20170512 23:21:15.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170512 23:21:15.676" status="PASS" endtime="20170512 23:21:15.677"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.677">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:21:15.677">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170512 23:21:15.678">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170512 23:21:15.677" status="PASS" endtime="20170512 23:21:15.678"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.679" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_sensor_list.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:15.679" status="PASS" endtime="20170512 23:21:15.679"></status>
</kw>
<status starttime="20170512 23:21:15.678" status="PASS" endtime="20170512 23:21:15.679"></status>
</kw>
<status starttime="20170512 23:21:15.244" status="PASS" endtime="20170512 23:21:15.679"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.680">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_inventory.txt</msg>
<status starttime="20170512 23:21:15.680" status="PASS" endtime="20170512 23:21:15.680"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.683">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:21:15.682" status="PASS" endtime="20170512 23:21:15.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.684">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:21:15.683" status="PASS" endtime="20170512 23:21:15.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.684">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:21:15.684" status="PASS" endtime="20170512 23:21:15.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.685">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:21:15.685" status="PASS" endtime="20170512 23:21:15.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:21:15.686" status="PASS" endtime="20170512 23:21:15.866"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:15.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:21:15.866">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:15.685" status="PASS" endtime="20170512 23:21:15.866"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.866">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:15.866" status="PASS" endtime="20170512 23:21:15.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:15.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:15.867" status="PASS" endtime="20170512 23:21:15.867"></status>
</kw>
<status starttime="20170512 23:21:15.682" status="PASS" endtime="20170512 23:21:15.867"></status>
</kw>
<status starttime="20170512 23:21:15.681" status="PASS" endtime="20170512 23:21:15.867"></status>
</kw>
<status starttime="20170512 23:21:15.681" status="PASS" endtime="20170512 23:21:15.868"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:15.868">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170512 23:21:15.868" status="PASS" endtime="20170512 23:21:15.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:21:15.868" status="PASS" endtime="20170512 23:21:15.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:21:18.189">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:15.869" status="PASS" endtime="20170512 23:21:18.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:21:18.190" status="PASS" endtime="20170512 23:21:18.190"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:15.680" status="PASS" endtime="20170512 23:21:18.190"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:18.191" status="PASS" endtime="20170512 23:21:18.191"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.191">${status} = True</msg>
<status starttime="20170512 23:21:18.190" status="PASS" endtime="20170512 23:21:18.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170512 23:21:18.192" status="PASS" endtime="20170512 23:21:18.192"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.195">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:21:18.196">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170512 23:21:18.196">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status starttime="20170512 23:21:18.192" status="PASS" endtime="20170512 23:21:18.196"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.198" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_inventory.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:18.197" status="PASS" endtime="20170512 23:21:18.198"></status>
</kw>
<status starttime="20170512 23:21:18.196" status="PASS" endtime="20170512 23:21:18.198"></status>
</kw>
<status starttime="20170512 23:21:15.679" status="PASS" endtime="20170512 23:21:18.198"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.199">${logpath} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_led.txt</msg>
<status starttime="20170512 23:21:18.198" status="PASS" endtime="20170512 23:21:18.199"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.201">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170512 23:21:18.201" status="PASS" endtime="20170512 23:21:18.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.202">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170512 23:21:18.202" status="PASS" endtime="20170512 23:21:18.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.203">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170512 23:21:18.202" status="PASS" endtime="20170512 23:21:18.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.204">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170512 23:21:18.203" status="PASS" endtime="20170512 23:21:18.204"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.384">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170512 23:21:18.204" status="PASS" endtime="20170512 23:21:18.384"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.384">${status} = PASS</msg>
<msg level="INFO" timestamp="20170512 23:21:18.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:18.204" status="PASS" endtime="20170512 23:21:18.384"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.385">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:18.384" status="PASS" endtime="20170512 23:21:18.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:18.385" status="PASS" endtime="20170512 23:21:18.386"></status>
</kw>
<status starttime="20170512 23:21:18.200" status="PASS" endtime="20170512 23:21:18.386"></status>
</kw>
<status starttime="20170512 23:21:18.200" status="PASS" endtime="20170512 23:21:18.386"></status>
</kw>
<status starttime="20170512 23:21:18.199" status="PASS" endtime="20170512 23:21:18.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.386">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170512 23:21:18.386" status="PASS" endtime="20170512 23:21:18.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170512 23:21:18.387" status="PASS" endtime="20170512 23:21:18.387"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.469">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170512 23:21:18.469">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:18.387" status="PASS" endtime="20170512 23:21:18.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170512 23:21:18.470" status="PASS" endtime="20170512 23:21:18.470"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170512 23:21:18.199" status="PASS" endtime="20170512 23:21:18.470"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170512 23:21:18.471" status="PASS" endtime="20170512 23:21:18.471"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.471">${status} = True</msg>
<status starttime="20170512 23:21:18.470" status="PASS" endtime="20170512 23:21:18.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170512 23:21:18.472" status="PASS" endtime="20170512 23:21:18.472"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.472">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170512 23:21:18.473">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170512 23:21:18.473">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170512 23:21:18.472" status="PASS" endtime="20170512 23:21:18.473"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.475" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_led.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/20170512232033925331_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:18.474" status="PASS" endtime="20170512 23:21:18.475"></status>
</kw>
<status starttime="20170512 23:21:18.473" status="PASS" endtime="20170512 23:21:18.475"></status>
</kw>
<status starttime="20170512 23:21:18.198" status="PASS" endtime="20170512 23:21:18.475"></status>
</kw>
<status starttime="20170512 23:21:14.501" status="PASS" endtime="20170512 23:21:18.475"></status>
</kw>
<status starttime="20170512 23:21:14.500" status="PASS" endtime="20170512 23:21:18.475"></status>
</kw>
<status starttime="20170512 23:21:14.500" status="PASS" endtime="20170512 23:21:18.475"></status>
</kw>
<status starttime="20170512 23:21:14.500" status="PASS" endtime="20170512 23:21:18.475"></status>
</kw>
<status starttime="20170512 23:21:12.774" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<status starttime="20170512 23:21:12.751" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<status starttime="20170512 23:21:12.748" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<status starttime="20170512 23:21:12.748" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<status starttime="20170512 23:20:35.755" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<status starttime="20170512 23:20:35.752" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<status starttime="20170512 23:20:35.752" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<status starttime="20170512 23:20:35.752" status="PASS" endtime="20170512 23:21:18.476"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170512 23:21:18.476" status="PASS" endtime="20170512 23:21:18.599"></status>
</kw>
<status starttime="20170512 23:20:35.751" status="PASS" endtime="20170512 23:21:18.599"></status>
</kw>
<status starttime="20170512 23:20:30.712" status="PASS" endtime="20170512 23:21:18.599"></status>
</kw>
<status starttime="20170512 23:20:30.711" status="PASS" endtime="20170512 23:21:18.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170512 23:21:18.600" status="PASS" endtime="20170512 23:21:18.600"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.608">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170512 23:21:18.601" status="PASS" endtime="20170512 23:21:18.608"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.609">${FFDC_DIR_PATH} = /tmp/fspcibld/18816/obmc-robot/logs/20170512232033925331_TestsTestBasicPoweron/20170512232033925331_PowerOnTest/</msg>
<status starttime="20170512 23:21:18.609" status="PASS" endtime="20170512 23:21:18.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170512 23:21:18.609" status="PASS" endtime="20170512 23:21:18.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170512 23:21:18.610" status="PASS" endtime="20170512 23:21:18.610"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.611" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs"&gt;/tmp/fspcibld/18816/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170512 23:21:18.610" status="PASS" endtime="20170512 23:21:18.611"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.612" html="yes">File '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170512 23:21:18.611" status="PASS" endtime="20170512 23:21:18.612"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.612">${exist} = True</msg>
<status starttime="20170512 23:21:18.611" status="PASS" endtime="20170512 23:21:18.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170512 23:21:18.612" status="PASS" endtime="20170512 23:21:18.612"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170512 23:21:18.613" status="PASS" endtime="20170512 23:21:18.613"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.614">${cur_time} = 2017-05-12 23:21:18:613814</msg>
<status starttime="20170512 23:21:18.614" status="PASS" endtime="20170512 23:21:18.614"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.615">${cur_time} = 20170512232118613814</msg>
<status starttime="20170512 23:21:18.614" status="PASS" endtime="20170512 23:21:18.615"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.615">${cur_time} = 20170512232118613814</msg>
<status starttime="20170512 23:21:18.613" status="PASS" endtime="20170512 23:21:18.615"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.616" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/18816/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18816/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170512 23:21:18.615" status="PASS" endtime="20170512 23:21:18.616"></status>
</kw>
<status starttime="20170512 23:21:18.600" status="PASS" endtime="20170512 23:21:18.616"></status>
</kw>
<status starttime="20170512 23:20:30.445" status="PASS" endtime="20170512 23:21:18.616"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.617">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:21:18.617" status="PASS" endtime="20170512 23:21:18.618"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.618">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:21:18.618" status="PASS" endtime="20170512 23:21:18.618"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.618">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170512 23:21:18.617" status="PASS" endtime="20170512 23:21:18.618"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.619">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170512 23:21:18.619" status="PASS" endtime="20170512 23:21:18.619"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:21:18.620" status="PASS" endtime="20170512 23:21:18.627"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.641">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:21:18.667">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:21:18.667">${output} = /tmp/fspcibld/18816/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170512 23:21:18.627" status="PASS" endtime="20170512 23:21:18.668"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170512 23:21:18.680" status="PASS" endtime="20170512 23:21:18.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170512 23:21:18.698" status="PASS" endtime="20170512 23:21:18.699"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.699">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170512 23:21:18.699" status="PASS" endtime="20170512 23:21:18.700"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.701">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170512 23:21:18.619" status="PASS" endtime="20170512 23:21:18.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.704">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170512 23:21:18.701" status="PASS" endtime="20170512 23:21:18.704"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:21:18.704" status="PASS" endtime="20170512 23:21:18.719"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.735">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:21:18.747">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:21:18.747">${os_con_pid} = 194</msg>
<status starttime="20170512 23:21:18.720" status="PASS" endtime="20170512 23:21:18.747"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170512 23:21:18.749" status="PASS" endtime="20170512 23:21:18.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.758">${cmd_buf} = kill -9 194</msg>
<status starttime="20170512 23:21:18.758" status="PASS" endtime="20170512 23:21:18.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:21:18.759" status="PASS" endtime="20170512 23:21:18.766"></status>
</kw>
<status starttime="20170512 23:21:18.759" status="PASS" endtime="20170512 23:21:18.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.771">Running command 'kill -9 194 2&gt;&amp;1'.</msg>
<status starttime="20170512 23:21:18.767" status="PASS" endtime="20170512 23:21:18.774"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.775">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:21:18.775">${output} = </msg>
<status starttime="20170512 23:21:18.767" status="PASS" endtime="20170512 23:21:18.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170512 23:21:18.778" status="PASS" endtime="20170512 23:21:18.787"></status>
</kw>
<status starttime="20170512 23:21:18.777" status="PASS" endtime="20170512 23:21:18.787"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.788">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170512 23:21:18.788" status="PASS" endtime="20170512 23:21:18.788"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170512 23:21:18.788" status="PASS" endtime="20170512 23:21:18.795"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170512 23:21:18.800">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170512 23:21:18.805">${rc} = 0</msg>
<msg level="INFO" timestamp="20170512 23:21:18.805">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170512 23:21:18.796" status="PASS" endtime="20170512 23:21:18.805"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170512 23:21:18.807" status="PASS" endtime="20170512 23:21:18.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170512 23:21:18.820" status="PASS" endtime="20170512 23:21:18.820"></status>
</kw>
<msg level="INFO" timestamp="20170512 23:21:18.821">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170512 23:21:18.616" status="PASS" endtime="20170512 23:21:18.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170512 23:21:18.822">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
/dev/mapper/21762--vg-root: |========================                \ 59.6%   /dev/mapper/21762--vg-root: |========================                | 59.7%   /dev/mapper/21762--vg-root: |========================                / 59.8%   /dev/mapper/21762--vg-root: |========================                - 59.9%   /dev/mapper/21762--vg-root: |========================                \ 60.0%   

--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37950|secure|SecureROM invalid - skipping functionality
 12.05389|ISTEP  6. 5
 12.73777|ISTEP  6. 6
 12.73841|ISTEP  6. 7
 13.50498|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.50499|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.80957|ISTEP  6. 8
 13.86176|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.86176|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.86193|ISTEP  6. 9
 14.49787|ISTEP  6.10
 14.54882|ISTEP  6.11
 14.54954|ISTEP  6.12
 14.80466|ISTEP  7. 2
 16.82269|ISTEP  7. 3
 17.46728|ISTEP  7. 4
 20.28477|ISTEP  7. 5
 20.36338|ISTEP  8. 1
 20.79308|ISTEP  8. 2
 20.84498|ISTEP  8. 3
 20.92300|ISTEP  8. 4
 31.30426|ISTEP  8. 5
 31.32975|ISTEP  8. 6
 31.33259|ISTEP  8. 7
 31.51923|ISTEP  8. 8
 31.56969|ISTEP  8. 9
 31.69671|ISTEP  8.10
 31.69866|ISTEP  8.11
 31.69986|ISTEP  8.12
 32.17471|ISTEP  8.13
 35.88252|ISTEP  8.14
 35.88526|ISTEP  8.15
 35.88686|ISTEP  8.16
 36.14822|ISTEP  8.17
 36.44508|================================================
 36.44509|Error reported by istep (0x1700) PLID 0x9000000B
 36.47044|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.47045|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.47046|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.47047|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.47048|  UserData2  Target PEC HUID : 0x0000000000000000
 36.49585|------------------------------------------------
 36.49586|  Callout type             : Procedure Callout
 36.49586|  Procedure                : EPUB_PRC_HB_CODE
 36.49587|  Priority                 : SRCI_PRIORITY_HIGH
 36.49588|------------------------------------------------
 36.49589|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.49589|================================================
 37.49490|ISTEP  8.18
 37.49648|ISTEP  8.19
 37.51114|ISTEP  8.20
 37.51989|ISTEP  9. 1
 37.64634|ISTEP  9. 2
 38.73656|ISTEP  9. 3
 38.76212|ISTEP  9. 4
 39.12994|ISTEP  9. 5
 39.15599|ISTEP  9. 6
 39.20900|ISTEP  9. 7
 39.29824|ISTEP  9. 8
 39.32905|ISTEP 10. 1
 39.90676|ISTEP 10. 2
 40.00634|================================================
 40.00635|Error reported by i2c (0x0700) PLID 0x9000000C
 40.03229|  Timed out waiting for command complete.
 40.03229|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.03230|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.05910|  UserData1  Status Register Value : 0x0001000000050001
 40.05911|  UserData2  Master Target : 0x0200ffff0190004d
 40.05912|------------------------------------------------
 40.05913|  Callout type             : Hardware Callout
 40.05913|  CPU id                   : 4
 40.05915|  Target                   : Physical:/Sys0/Node0/Proc1
 40.05916|  Deconfig State           : NO_DECONFIG
 40.05916|  GARD Error Type          : GARD_NULL
 40.05917|  Priority                 : SRCI_PRIORITY_HIGH
 40.05918|------------------------------------------------
 40.05919|  Callout type             : Procedure Callout
 40.05920|  Procedure                : EPUB_PRC_HB_CODE
 40.05921|  Priority                 : SRCI_PRIORITY_LOW
 40.05922|------------------------------------------------
 40.05923|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.05924|================================================
 43.64953|ISTEP 10. 3
 43.90468|ISTEP 11. 1
 43.98245|ISTEP 12. 1
 44.03557|ISTEP 13. 1
 45.15578|ISTEP 13. 2
 45.31509|ISTEP 13. 3
 45.62785|ISTEP 13. 4
 45.65227|ISTEP 13. 6
 45.86141|ISTEP 13. 7
 45.86311|ISTEP 13. 8
 48.14037|ISTEP 13. 9
 48.69389|ISTEP 13.10
 50.08938|ISTEP 13.11
 50.74564|ISTEP 13.12
 50.74925|ISTEP 13.13
 50.96881|ISTEP 14. 1
 99.47028|ISTEP 14. 2
 99.52664|ISTEP 14. 3
 99.63554|ISTEP 14. 4
 99.63788|ISTEP 14. 5
 99.95272|ISTEP 14. 6
100.00690|ISTEP 14. 7
100.01239|ISTEP 15. 1
103.05352|ISTEP 15. 2
103.08168|ISTEP 15. 3
103.14032|ISTEP 15. 4
103.31068|ISTEP 16. 1
104.72428|ISTEP 16. 2
104.91042|ISTEP 16. 3
104.93877|ISTEP 16. 4
105.03156|ISTEP 16. 5
105.08476|ISTEP 18.11
105.92754|ISTEP 18.12
105.95130|ISTEP 20. 1
107.93270|ISTEP 20. 2
111.06148|ISTEP 21. 1


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37949|secure|SecureROM invalid - skipping functionality
  8.23801|ERRL|Dumping errors reported prior to registration
  8.38707|================================================
  8.38708|Error reported by istep (0x1700) PLID 0x9000000B
  8.41204|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
  8.41204|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
  8.41205|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
  8.41206|  UserData1  Target processor chip's HUID : 0x00050001002d0004
  8.41206|  UserData2  Target PEC HUID : 0x0000000000000000
  8.46259|------------------------------------------------
  8.46259|  Callout type             : Procedure Callout
  8.46260|  Procedure                : EPUB_PRC_HB_CODE
  8.46261|  Priority                 : SRCI_PRIORITY_HIGH
  8.46261|------------------------------------------------
  8.46262|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
  8.46263|================================================
 10.48105|================================================
 10.48106|Error reported by i2c (0x0700) PLID 0x9000000C
 10.53116|  Timed out waiting for command complete.
 10.53117|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 10.53118|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 10.55651|  UserData1  Status Register Value : 0x0001000000050001
 10.55652|  UserData2  Master Target : 0x0200ffff0190004d
 10.55653|------------------------------------------------
 10.55653|  Callout type             : Hardware Callout
 10.55654|  CPU id                   : 4
 10.55655|  Target                   : Physical:/Sys0/Node0/Proc1
 10.55656|  Deconfig State           : NO_DECONFIG
 10.55657|  GARD Error Type          : GARD_NULL
 10.55657|  Priority                 : SRCI_PRIORITY_HIGH
 10.55658|------------------------------------------------
 10.55659|  Callout type             : Procedure Callout
 10.55660|  Procedure                : EPUB_PRC_HB_CODE
 10.55661|  Priority                 : SRCI_PRIORITY_LOW
 10.55661|------------------------------------------------
 10.55662|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 10.55663|================================================
 12.41109|ISTEP  6. 5
 13.07050|ISTEP  6. 6
 13.07173|ISTEP  6. 7
 13.83946|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.83947|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 14.14488|ISTEP  6. 8
 14.19693|SECURE|Security Access Bit&gt; 0x0000000000000000
 14.19694|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 14.19710|ISTEP  6. 9
 14.83214|ISTEP  6.10
 14.88362|ISTEP  6.11
 14.88438|ISTEP  6.12
 15.14004|ISTEP  7. 2
 17.15838|ISTEP  7. 3
 17.80246|ISTEP  7. 4
 20.61883|ISTEP  7. 5
 20.69715|ISTEP  8. 1
 21.12633|ISTEP  8. 2
 21.17858|ISTEP  8. 3
 21.25735|ISTEP  8. 4
 31.64004|ISTEP  8. 5
 31.66557|ISTEP  8. 6
 31.66835|ISTEP  8. 7
 31.85552|ISTEP  8. 8
 31.90591|ISTEP  8. 9
 32.03323|ISTEP  8.10
 32.03458|ISTEP  8.11
 32.03528|ISTEP  8.12
 32.51253|ISTEP  8.13
 36.20672|ISTEP  8.14
 36.20856|ISTEP  8.15
 36.21007|ISTEP  8.16
 36.47171|ISTEP  8.17
 36.59147|================================================
 36.59148|Error reported by istep (0x1700) PLID 0x9000000E
 36.59150|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.59151|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.59151|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.59152|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.59153|  UserData2  Target PEC HUID : 0x0000000000000000
 36.59154|------------------------------------------------
 36.59155|  Callout type             : Procedure Callout
 36.59156|  Procedure                : EPUB_PRC_HB_CODE
 36.59157|  Priority                 : SRCI_PRIORITY_HIGH
 36.59158|------------------------------------------------
 36.59158|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.59159|================================================
 37.67227|ISTEP  8.18
 37.67356|ISTEP  8.19
 37.68860|ISTEP  8.20
 37.69676|ISTEP  9. 1
 37.82263|ISTEP  9. 2
 38.93290|ISTEP  9. 3
 38.95846|ISTEP  9. 4
 39.30046|ISTEP  9. 5
 39.32646|ISTEP  9. 6
 39.38036|ISTEP  9. 7
 39.46984|ISTEP  9. 8
 39.50064|ISTEP 10. 1
 40.07660|ISTEP 10. 2
 40.09925|================================================
 40.09926|Error reported by i2c (0x0700) PLID 0x9000000F
 40.09927|  Timed out waiting for command complete.
 40.09928|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.09928|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.09929|  UserData1  Status Register Value : 0x0001000000050001
 40.09930|  UserData2  Master Target : 0x0200ffff0190004d
 40.09931|------------------------------------------------
 40.09932|  Callout type             : Hardware Callout
 40.09933|  CPU id                   : 7
 40.09934|  Target                   : Physical:/Sys0/Node0/Proc1
 40.09935|  Deconfig State           : NO_DECONFIG
 40.09936|  GARD Error Type          : GARD_NULL
 40.09937|  Priority                 : SRCI_PRIORITY_HIGH
 40.09938|------------------------------------------------
 40.09938|  Callout type             : Procedure Callout
 40.09939|  Procedure                : EPUB_PRC_HB_CODE
 40.09940|  Priority                 : SRCI_PRIORITY_LOW
 40.09941|------------------------------------------------
 40.09942|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.09943|================================================
 42.79254|ISTEP 10. 3
 42.79497|ISTEP 11. 1
 42.82208|ISTEP 12. 1
 42.87414|ISTEP 13. 1
 43.02965|ISTEP 13. 2
 43.13573|ISTEP 13. 3
 43.21304|ISTEP 13. 4
 43.23844|ISTEP 13. 6
 43.44845|ISTEP 13. 7
 43.45040|ISTEP 13. 8
 45.34920|ISTEP 13. 9
 45.93610|================================================
 45.93611|Error reported by hwpf (0x0900) PLID 0x90000010
 45.96243|  HW Procedure generated error. See User Data.
 45.96244|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 45.96245|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 45.96246|  UserData1  RC value from HWP : 0x000000000033e21a
 45.96246|  UserData2  &lt;unused&gt; : 0x0000000000000000
 45.96247|------------------------------------------------
 46.01500|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.01502|  HWP Error description      : The port noted has set an error bit during PHY reset
 46.01503|------------------------------------------------
 46.06721|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.09409|  FFDC                       : CAL_FIR
 46.14593|    00000000 00000000 
 46.14594|------------------------------------------------
 46.24903|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.24903|  FFDC                       : PHY_FIR
 46.24905|    00000000 000000A0 
 46.24905|------------------------------------------------
 46.24906|  Callout type             : Hardware Callout
 46.24907|  CPU id                   : 5
 46.24910|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST0/MCS1/MCA1
 46.24911|  Deconfig State           : DELAYED_DECONFIG
 46.24911|  GARD Error Type          : GARD_NULL
 46.24912|  Priority                 : SRCI_PRIORITY_HIGH
 46.24913|------------------------------------------------
 46.24914|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.24915|================================================
 46.50757|================================================
 46.50757|Error reported by hwpf (0x0900) PLID 0x90000011
 46.50758|  HW Procedure generated error. See User Data.
 46.50759|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 46.50760|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 46.50761|  UserData1  RC value from HWP : 0x000000000059a8ca
 46.50762|  UserData2  &lt;unused&gt; : 0x0000000000000000
 46.50762|------------------------------------------------
 46.53353|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIRS_REPORTED
 46.53355|  HWP Error description      : One or more ports noted a set error bit during PHY reset
 46.53356|------------------------------------------------
 46.53357|  Callout type             : Hardware Callout
 46.53358|  CPU id                   : 4
 46.53360|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST0
 46.53361|  Deconfig State           : NO_DECONFIG
 46.53361|  GARD Error Type          : GARD_NULL
 46.53362|  Priority                 : SRCI_PRIORITY_HIGH
 46.53363|------------------------------------------------
 46.53364|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.53365|================================================
 46.80814|System shutting down with error status 0x90000011
 46.80819|================================================
 46.80820|Error reported by istep (0x1700) PLID 0x90000011
 46.83390|  IStep failed, see other log(s) with the same PLID for reason.
 46.83390|  ModuleId   0x01 MOD_REPORTING_ERROR
 46.83391|  ReasonCode 0x1703 RC_FAILURE
 46.83392|  UserData1  eid of first error : 0x900000110000090f
 46.83393|  UserData2  Reason code of first error : 0x0000000100000d09
 46.83394|------------------------------------------------
 46.83394|  mss_ddr_phy_reset
 46.83395|------------------------------------------------
 46.83396|  Callout type             : Procedure Callout
 46.83396|  Procedure                : EPUB_PRC_HB_CODE
 46.83397|  Priority                 : SRCI_PRIORITY_LOW
 46.83398|------------------------------------------------
 46.83398|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.83399|================================================


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37948|secure|SecureROM invalid - skipping functionality
 11.96228|ISTEP  6. 5
 12.64667|ISTEP  6. 6
 12.64742|ISTEP  6. 7
 13.41386|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.41387|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.71871|ISTEP  6. 8
 13.77079|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.77080|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.77096|ISTEP  6. 9
 14.40718|ISTEP  6.10
 14.45857|ISTEP  6.11
 14.45915|ISTEP  6.12
 14.71395|ISTEP  7. 2
 16.72904|ISTEP  7. 3
 17.37467|ISTEP  7. 4
 20.19041|ISTEP  7. 5
 20.26880|ISTEP  8. 1
 20.70017|ISTEP  8. 2
 20.75239|ISTEP  8. 3
 20.83030|ISTEP  8. 4
 31.21366|ISTEP  8. 5
 31.23916|ISTEP  8. 6
 31.24205|ISTEP  8. 7
 31.42758|ISTEP  8. 8
 31.47965|ISTEP  8. 9
 31.60700|ISTEP  8.10
 31.60861|ISTEP  8.11
 31.60920|ISTEP  8.12
 32.08737|ISTEP  8.13
 35.78072|ISTEP  8.14
 35.78351|ISTEP  8.15
 35.78497|ISTEP  8.16
 36.04726|ISTEP  8.17
 36.34205|================================================
 36.34206|Error reported by istep (0x1700) PLID 0x90000014
 36.36740|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.36741|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.36742|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.36742|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.36743|  UserData2  Target PEC HUID : 0x0000000000000000
 36.39281|------------------------------------------------
 36.39282|  Callout type             : Procedure Callout
 36.39282|  Procedure                : EPUB_PRC_HB_CODE
 36.39283|  Priority                 : SRCI_PRIORITY_HIGH
 36.39284|------------------------------------------------
 36.39285|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.39285|================================================
 37.39018|ISTEP  8.18
 37.39178|ISTEP  8.19
 37.40659|ISTEP  8.20
 37.41502|ISTEP  9. 1
 37.54106|ISTEP  9. 2
 38.65658|ISTEP  9. 3
 38.68263|ISTEP  9. 4
 39.02505|ISTEP  9. 5
 39.05168|ISTEP  9. 6
 39.10436|ISTEP  9. 7
 39.19404|ISTEP  9. 8
 39.22497|ISTEP 10. 1
 39.80369|ISTEP 10. 2
 39.90220|================================================
 39.90221|Error reported by i2c (0x0700) PLID 0x90000015
 39.92785|  Timed out waiting for command complete.
 39.92786|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 39.92787|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 39.95381|  UserData1  Status Register Value : 0x0001000000050001
 39.95381|  UserData2  Master Target : 0x0200ffff0190004d
 39.95382|------------------------------------------------
 39.95383|  Callout type             : Hardware Callout
 39.95384|  CPU id                   : 6
 39.95385|  Target                   : Physical:/Sys0/Node0/Proc1
 39.95386|  Deconfig State           : NO_DECONFIG
 39.95386|  GARD Error Type          : GARD_NULL
 39.95387|  Priority                 : SRCI_PRIORITY_HIGH
 39.95388|------------------------------------------------
 39.95389|  Callout type             : Procedure Callout
 39.95390|  Procedure                : EPUB_PRC_HB_CODE
 39.95391|  Priority                 : SRCI_PRIORITY_LOW
 39.95391|------------------------------------------------
 39.95392|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 39.95393|================================================
 42.60997|ISTEP 10. 3
 42.61243|ISTEP 11. 1
 42.63957|ISTEP 12. 1
 42.69177|ISTEP 13. 1
 42.84794|ISTEP 13. 2
 42.95407|ISTEP 13. 3
 43.02975|ISTEP 13. 4
 43.05417|ISTEP 13. 6
 43.26411|ISTEP 13. 7
 43.26581|ISTEP 13. 8
 45.16151|ISTEP 13. 9
 45.79258|================================================
 45.79259|Error reported by hwpf (0x0900) PLID 0x90000016
 45.81818|  HW Procedure generated error. See User Data.
 45.81819|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 45.81820|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 45.81820|  UserData1  RC value from HWP : 0x000000000033e21a
 45.81821|  UserData2  &lt;unused&gt; : 0x0000000000000000
 45.81822|------------------------------------------------
 45.86960|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 45.86962|  HWP Error description      : The port noted has set an error bit during PHY reset
 45.86963|------------------------------------------------
 45.92078|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 45.94628|  FFDC                       : CAL_FIR
 45.99899|    00000000 00000000 
 45.99900|------------------------------------------------
 46.10031|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.10032|  FFDC                       : PHY_FIR
 46.10033|    00000000 000000A0 
 46.10033|------------------------------------------------
 46.10034|  Callout type             : Hardware Callout
 46.10035|  CPU id                   : 4
 46.10037|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST1/MCS0/MCA1
 46.10038|  Deconfig State           : DELAYED_DECONFIG
 46.10039|  GARD Error Type          : GARD_NULL
 46.10040|  Priority                 : SRCI_PRIORITY_HIGH
 46.10041|------------------------------------------------
 46.10042|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.10043|================================================
 46.25858|================================================
 46.25859|Error reported by hwpf (0x0900) PLID 0x90000017
 46.25860|  HW Procedure generated error. See User Data.
 46.25861|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 46.25861|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 46.25862|  UserData1  RC value from HWP : 0x000000000059a8ca
 46.25863|  UserData2  &lt;unused&gt; : 0x0000000000000000
 46.25864|------------------------------------------------
 46.28455|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIRS_REPORTED
 46.28457|  HWP Error description      : One or more ports noted a set error bit during PHY reset
 46.28457|------------------------------------------------
 46.28458|  Callout type             : Hardware Callout
 46.28459|  CPU id                   : 4
 46.28461|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST1
 46.28461|  Deconfig State           : NO_DECONFIG
 46.28462|  GARD Error Type          : GARD_NULL
 46.28463|  Priority                 : SRCI_PRIORITY_HIGH
 46.28464|------------------------------------------------
 46.28464|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.28465|================================================
 46.55997|System shutting down with error status 0x90000017
 46.56000|================================================
 46.56001|Error reported by istep (0x1700) PLID 0x90000017
 46.58582|  IStep failed, see other log(s) with the same PLID for reason.
 46.58583|  ModuleId   0x01 MOD_REPORTING_ERROR
 46.58584|  ReasonCode 0x1703 RC_FAILURE
 46.58585|  UserData1  eid of first error : 0x900000170000090f
 46.58585|  UserData2  Reason code of first error : 0x0000000100000d09
 46.58586|------------------------------------------------
 46.58587|  mss_ddr_phy_reset
 46.58587|------------------------------------------------
 46.58588|  Callout type             : Procedure Callout
 46.58589|  Procedure                : EPUB_PRC_HB_CODE
 46.58590|  Priority                 : SRCI_PRIORITY_LOW
 46.58590|------------------------------------------------
 46.58591|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.58592|================================================</msg>
<status starttime="20170512 23:21:18.821" status="PASS" endtime="20170512 23:21:18.823"></status>
</kw>
<status starttime="20170512 23:20:30.444" status="PASS" endtime="20170512 23:21:18.823"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170512 23:07:26.039" critical="yes" status="FAIL" endtime="20170512 23:21:18.823">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170512 23:07:25.977" status="FAIL" endtime="20170512 23:21:18.825"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170512 23:07:10.472" status="FAIL" endtime="20170512 23:21:18.828"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
