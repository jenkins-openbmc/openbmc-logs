<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170809 00:59:51.149">
<suite id="s1" name="Tests" source="/tmp/fspcibld/16110/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 00:59:51.766" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170809 00:59:51.767" status="FAIL" starttime="20170809 00:59:51.766"></status>
</kw>
<msg timestamp="20170809 00:59:51.767" level="INFO">${has_host} = False</msg>
<status endtime="20170809 00:59:51.767" status="PASS" starttime="20170809 00:59:51.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170809 00:59:51.768" status="PASS" starttime="20170809 00:59:51.767"></status>
</kw>
<status endtime="20170809 00:59:51.768" status="PASS" starttime="20170809 00:59:51.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170809 00:59:51.770" level="INFO">${port_num} = 22</msg>
<status endtime="20170809 00:59:51.770" status="PASS" starttime="20170809 00:59:51.769"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170809 00:59:51.770" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170809 00:59:51.770" status="PASS" starttime="20170809 00:59:51.770"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170809 00:59:51.771" level="INFO">${https_num} = 443</msg>
<status endtime="20170809 00:59:51.771" status="PASS" starttime="20170809 00:59:51.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170809 00:59:51.771" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170809 00:59:51.771" status="PASS" starttime="20170809 00:59:51.771"></status>
</kw>
<status endtime="20170809 00:59:51.772" status="PASS" starttime="20170809 00:59:51.769"></status>
</kw>
<status endtime="20170809 00:59:51.772" status="PASS" starttime="20170809 00:59:51.768"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 00:59:51.772" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170809 00:59:51.773" status="FAIL" starttime="20170809 00:59:51.772"></status>
</kw>
<msg timestamp="20170809 00:59:51.773" level="INFO">${has_port} = False</msg>
<status endtime="20170809 00:59:51.773" status="PASS" starttime="20170809 00:59:51.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170809 00:59:51.774" status="PASS" starttime="20170809 00:59:51.774"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170809 00:59:51.775" status="PASS" starttime="20170809 00:59:51.775"></status>
</kw>
<status endtime="20170809 00:59:51.775" status="PASS" starttime="20170809 00:59:51.774"></status>
</kw>
<status endtime="20170809 00:59:51.775" status="PASS" starttime="20170809 00:59:51.773"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 00:59:51.775" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 00:59:53.566" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170809 00:59:53.566" status="PASS" starttime="20170809 00:59:51.775"></status>
</kw>
<status endtime="20170809 00:59:53.566" status="PASS" starttime="20170809 00:59:51.765"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 00:59:53.568" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170809 00:59:53.645" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 00:59:53.645" level="INFO">${output} = VERSION_ID="v1.99.8-201-gb983102"</msg>
<msg timestamp="20170809 00:59:53.645" level="INFO">${stderr} = </msg>
<status endtime="20170809 00:59:53.645" status="PASS" starttime="20170809 00:59:53.567"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 00:59:53.646" level="INFO">Length is 0</msg>
<status endtime="20170809 00:59:53.646" status="PASS" starttime="20170809 00:59:53.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170809 00:59:53.646" level="INFO">VERSION_ID="v1.99.8-201-gb983102"</msg>
<status endtime="20170809 00:59:53.646" status="PASS" starttime="20170809 00:59:53.646"></status>
</kw>
<status endtime="20170809 00:59:53.646" status="PASS" starttime="20170809 00:59:53.567"></status>
</kw>
<status endtime="20170809 00:59:53.647" status="PASS" starttime="20170809 00:59:53.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 00:59:53.648" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170809 00:59:53.783" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170809 00:59:53.783" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170809 00:59:53.783" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170809 00:59:53.783" status="PASS" starttime="20170809 00:59:53.648"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 00:59:53.784" level="INFO">Length is 81</msg>
<msg timestamp="20170809 00:59:53.784" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170809 00:59:53.784" status="FAIL" starttime="20170809 00:59:53.783"></status>
</kw>
<status endtime="20170809 00:59:53.784" status="FAIL" starttime="20170809 00:59:53.647"></status>
</kw>
<status endtime="20170809 00:59:53.784" status="FAIL" starttime="20170809 00:59:53.647"></status>
</kw>
<status endtime="20170809 00:59:53.784" status="PASS" starttime="20170809 00:59:53.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 00:59:54.207" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 00:59:54.207" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 00:59:54.930" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170809 00:59:54.930" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170809 00:59:55.007" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 00:59:55.018" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170809 00:59:55.018" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 00:59:55.018" level="INFO">${rc} = 0</msg>
<status endtime="20170809 00:59:55.018" status="PASS" starttime="20170809 00:59:53.785"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 00:59:55.018" level="INFO">Length is 0</msg>
<status endtime="20170809 00:59:55.018" status="PASS" starttime="20170809 00:59:55.018"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 00:59:55.019" level="INFO">Length is 11</msg>
<status endtime="20170809 00:59:55.019" status="PASS" starttime="20170809 00:59:55.019"></status>
</kw>
<msg timestamp="20170809 00:59:55.019" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170809 00:59:55.019" status="PASS" starttime="20170809 00:59:53.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 00:59:55.020" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170809 00:59:55.020" status="PASS" starttime="20170809 00:59:55.019"></status>
</kw>
<status endtime="20170809 00:59:55.020" status="PASS" starttime="20170809 00:59:53.785"></status>
</kw>
<status endtime="20170809 00:59:55.020" status="PASS" starttime="20170809 00:59:53.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 00:59:55.022" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170809 00:59:55.022" status="FAIL" starttime="20170809 00:59:55.022"></status>
</kw>
<msg timestamp="20170809 00:59:55.023" level="INFO">${has_host} = False</msg>
<status endtime="20170809 00:59:55.023" status="PASS" starttime="20170809 00:59:55.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170809 00:59:55.024" status="PASS" starttime="20170809 00:59:55.023"></status>
</kw>
<status endtime="20170809 00:59:55.024" status="PASS" starttime="20170809 00:59:55.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170809 00:59:55.026" level="INFO">${port_num} = 22</msg>
<status endtime="20170809 00:59:55.026" status="PASS" starttime="20170809 00:59:55.025"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170809 00:59:55.026" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170809 00:59:55.026" status="PASS" starttime="20170809 00:59:55.026"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170809 00:59:55.027" level="INFO">${https_num} = 443</msg>
<status endtime="20170809 00:59:55.027" status="PASS" starttime="20170809 00:59:55.027"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170809 00:59:55.028" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170809 00:59:55.028" status="PASS" starttime="20170809 00:59:55.027"></status>
</kw>
<status endtime="20170809 00:59:55.028" status="PASS" starttime="20170809 00:59:55.025"></status>
</kw>
<status endtime="20170809 00:59:55.028" status="PASS" starttime="20170809 00:59:55.024"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 00:59:55.029" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170809 00:59:55.029" status="FAIL" starttime="20170809 00:59:55.028"></status>
</kw>
<msg timestamp="20170809 00:59:55.029" level="INFO">${has_port} = False</msg>
<status endtime="20170809 00:59:55.029" status="PASS" starttime="20170809 00:59:55.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170809 00:59:55.031" status="PASS" starttime="20170809 00:59:55.030"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170809 00:59:55.031" status="PASS" starttime="20170809 00:59:55.031"></status>
</kw>
<status endtime="20170809 00:59:55.031" status="PASS" starttime="20170809 00:59:55.030"></status>
</kw>
<status endtime="20170809 00:59:55.031" status="PASS" starttime="20170809 00:59:55.029"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 00:59:55.032" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 00:59:56.742" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170809 00:59:56.742" status="PASS" starttime="20170809 00:59:55.031"></status>
</kw>
<status endtime="20170809 00:59:56.742" status="PASS" starttime="20170809 00:59:55.021"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 00:59:56.743" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170809 00:59:56.820" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 00:59:56.820" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170809 00:59:56.820" level="INFO">${stderr} = </msg>
<status endtime="20170809 00:59:56.820" status="PASS" starttime="20170809 00:59:56.743"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 00:59:56.821" level="INFO">Length is 0</msg>
<status endtime="20170809 00:59:56.821" status="PASS" starttime="20170809 00:59:56.820"></status>
</kw>
<msg timestamp="20170809 00:59:56.821" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170809 00:59:56.821" status="PASS" starttime="20170809 00:59:56.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170809 00:59:56.821" status="PASS" starttime="20170809 00:59:56.821"></status>
</kw>
<status endtime="20170809 00:59:56.822" status="PASS" starttime="20170809 00:59:55.021"></status>
</kw>
<status endtime="20170809 00:59:56.822" status="PASS" starttime="20170809 00:59:55.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170809 00:59:56.822" status="PASS" starttime="20170809 00:59:56.822"></status>
</kw>
<status endtime="20170809 00:59:56.822" status="PASS" starttime="20170809 00:59:51.765"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/16110/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/16110/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 00:59:56.906" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 00:59:56.906" status="PASS" starttime="20170809 00:59:56.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 00:59:56.907" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 00:59:56.907" status="PASS" starttime="20170809 00:59:56.906"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 00:59:56.907" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 00:59:56.907" status="PASS" starttime="20170809 00:59:56.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 00:59:56.908" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 00:59:56.908" status="PASS" starttime="20170809 00:59:56.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.087" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 00:59:57.087" status="PASS" starttime="20170809 00:59:56.909"></status>
</kw>
<msg timestamp="20170809 00:59:57.087" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 00:59:57.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:57.087" status="PASS" starttime="20170809 00:59:56.908"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.088" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:57.088" status="PASS" starttime="20170809 00:59:57.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:57.089" status="PASS" starttime="20170809 00:59:57.088"></status>
</kw>
<status endtime="20170809 00:59:57.089" status="PASS" starttime="20170809 00:59:56.905"></status>
</kw>
<status endtime="20170809 00:59:57.089" status="PASS" starttime="20170809 00:59:56.904"></status>
</kw>
<status endtime="20170809 00:59:57.089" status="PASS" starttime="20170809 00:59:56.904"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 00:59:57.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 00:59:57.094" status="PASS" starttime="20170809 00:59:57.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 00:59:57.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 00:59:57.095" status="PASS" starttime="20170809 00:59:57.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 00:59:57.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 00:59:57.095" status="PASS" starttime="20170809 00:59:57.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 00:59:57.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 00:59:57.096" status="PASS" starttime="20170809 00:59:57.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.289" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 00:59:57.289" status="PASS" starttime="20170809 00:59:57.097"></status>
</kw>
<msg timestamp="20170809 00:59:57.289" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 00:59:57.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:57.289" status="PASS" starttime="20170809 00:59:57.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.290" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:57.290" status="PASS" starttime="20170809 00:59:57.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:57.290" status="PASS" starttime="20170809 00:59:57.290"></status>
</kw>
<status endtime="20170809 00:59:57.291" status="PASS" starttime="20170809 00:59:57.093"></status>
</kw>
<status endtime="20170809 00:59:57.291" status="PASS" starttime="20170809 00:59:57.092"></status>
</kw>
<status endtime="20170809 00:59:57.291" status="PASS" starttime="20170809 00:59:57.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 00:59:57.291" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 00:59:57.291" status="PASS" starttime="20170809 00:59:57.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 00:59:57.293" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 00:59:57.293" status="PASS" starttime="20170809 00:59:57.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 00:59:57.294" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 00:59:57.294" status="PASS" starttime="20170809 00:59:57.294"></status>
</kw>
<status endtime="20170809 00:59:57.295" status="PASS" starttime="20170809 00:59:57.294"></status>
</kw>
<status endtime="20170809 00:59:57.295" status="PASS" starttime="20170809 00:59:57.292"></status>
</kw>
<status endtime="20170809 00:59:57.295" status="PASS" starttime="20170809 00:59:57.292"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 00:59:57.420" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 00:59:57.420" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:57.420" status="PASS" starttime="20170809 00:59:57.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 00:59:57.422" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 00:59:57.422" status="PASS" starttime="20170809 00:59:57.421"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 00:59:57.423" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 00:59:57.423" status="PASS" starttime="20170809 00:59:57.423"></status>
</kw>
<status endtime="20170809 00:59:57.423" status="PASS" starttime="20170809 00:59:57.422"></status>
</kw>
<status endtime="20170809 00:59:57.423" status="PASS" starttime="20170809 00:59:57.421"></status>
</kw>
<status endtime="20170809 00:59:57.423" status="PASS" starttime="20170809 00:59:57.420"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 00:59:57.424" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 00:59:57.424" status="PASS" starttime="20170809 00:59:57.423"></status>
</kw>
<msg timestamp="20170809 00:59:57.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:57.424" status="PASS" starttime="20170809 00:59:57.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:57.425" status="PASS" starttime="20170809 00:59:57.424"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 00:59:57.425" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 00:59:57.425" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 00:59:57.425" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170809 00:59:57.425" status="PASS" starttime="20170809 00:59:57.425"></status>
</kw>
<msg timestamp="20170809 00:59:57.426" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170809 00:59:57.426" status="PASS" starttime="20170809 00:59:57.090"></status>
</kw>
<msg timestamp="20170809 00:59:57.426" level="INFO">${host_state} = Off</msg>
<status endtime="20170809 00:59:57.426" status="PASS" starttime="20170809 00:59:57.090"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170809 00:59:57.427" level="FAIL">Off != Quiesced</msg>
<status endtime="20170809 00:59:57.427" status="FAIL" starttime="20170809 00:59:57.427"></status>
</kw>
<msg timestamp="20170809 00:59:57.427" level="INFO">${status} = False</msg>
<status endtime="20170809 00:59:57.427" status="PASS" starttime="20170809 00:59:57.426"></status>
</kw>
<msg timestamp="20170809 00:59:57.427" level="INFO">${status} = False</msg>
<status endtime="20170809 00:59:57.427" status="PASS" starttime="20170809 00:59:57.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170809 00:59:57.428" status="PASS" starttime="20170809 00:59:57.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170809 00:59:57.429" status="PASS" starttime="20170809 00:59:57.428"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 00:59:57.438" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170809 00:59:57.438" status="PASS" starttime="20170809 00:59:57.429"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 00:59:57.447" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170809 00:59:57.447" status="PASS" starttime="20170809 00:59:57.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 00:59:57.449" level="INFO">${cur_time} = 2017-08-09 00:59:57:448743</msg>
<status endtime="20170809 00:59:57.449" status="PASS" starttime="20170809 00:59:57.449"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 00:59:57.450" level="INFO">${cur_time} = 20170809005957448743</msg>
<status endtime="20170809 00:59:57.450" status="PASS" starttime="20170809 00:59:57.449"></status>
</kw>
<status endtime="20170809 00:59:57.450" status="PASS" starttime="20170809 00:59:57.448"></status>
</kw>
<msg timestamp="20170809 00:59:57.454" level="INFO">${FFDC_TIME} = 20170809005957448743</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 00:59:57.455" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170809 00:59:57.455" status="PASS" starttime="20170809 00:59:57.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 00:59:57.456" level="INFO">${suite_name} = 20170809005957448743_TestsSecurityTestSsl</msg>
<status endtime="20170809 00:59:57.456" status="PASS" starttime="20170809 00:59:57.455"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 00:59:57.456" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170809 00:59:57.456" status="PASS" starttime="20170809 00:59:57.456"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 00:59:57.457" level="INFO">${test_name} = 20170809005957448743_TestSSLConnection</msg>
<status endtime="20170809 00:59:57.457" status="PASS" starttime="20170809 00:59:57.456"></status>
</kw>
<status endtime="20170809 00:59:57.457" status="PASS" starttime="20170809 00:59:57.454"></status>
</kw>
<msg timestamp="20170809 00:59:57.457" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/16110/obmc-robot/logs/20170809005957448743_TestsSecurityTestSsl/20170809005957448743_TestSSLConnection/</msg>
<msg timestamp="20170809 00:59:57.462" level="INFO">${FFDC_PREFIX} = 20170809005957448743_</msg>
<status endtime="20170809 00:59:57.462" status="PASS" starttime="20170809 00:59:57.448"></status>
</kw>
<status endtime="20170809 00:59:57.462" status="PASS" starttime="20170809 00:59:57.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170809 00:59:57.463" status="PASS" starttime="20170809 00:59:57.462"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.463" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs"&gt;/tmp/fspcibld/16110/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170809 00:59:57.464" status="PASS" starttime="20170809 00:59:57.463"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.465" level="FAIL">File '/tmp/fspcibld/16110/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170809 00:59:57.465" status="FAIL" starttime="20170809 00:59:57.464"></status>
</kw>
<msg timestamp="20170809 00:59:57.465" level="INFO">${exist} = False</msg>
<status endtime="20170809 00:59:57.465" status="PASS" starttime="20170809 00:59:57.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.466" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 00:59:57.466" status="PASS" starttime="20170809 00:59:57.466"></status>
</kw>
<status endtime="20170809 00:59:57.466" status="PASS" starttime="20170809 00:59:57.465"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170809 00:59:57.467" status="PASS" starttime="20170809 00:59:57.466"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 00:59:57.468" level="INFO">${cur_time} = 2017-08-09 00:59:57:467458</msg>
<status endtime="20170809 00:59:57.468" status="PASS" starttime="20170809 00:59:57.467"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 00:59:57.468" level="INFO">${cur_time} = 20170809005957467458</msg>
<status endtime="20170809 00:59:57.468" status="PASS" starttime="20170809 00:59:57.468"></status>
</kw>
<msg timestamp="20170809 00:59:57.468" level="INFO">${cur_time} = 20170809005957467458</msg>
<status endtime="20170809 00:59:57.468" status="PASS" starttime="20170809 00:59:57.467"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.469" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 00:59:57.469" status="PASS" starttime="20170809 00:59:57.469"></status>
</kw>
<status endtime="20170809 00:59:57.470" status="PASS" starttime="20170809 00:59:57.429"></status>
</kw>
<status endtime="20170809 00:59:57.470" status="PASS" starttime="20170809 00:59:57.089"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170809 00:59:57.470" status="PASS" starttime="20170809 00:59:56.903"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 00:59:57.471" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 00:59:57.471" status="PASS" starttime="20170809 00:59:57.471"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170809 00:59:57.471" status="PASS" starttime="20170809 00:59:56.825"></status>
</suite>
<status endtime="20170809 00:59:57.474" status="PASS" starttime="20170809 00:59:56.822"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/16110/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170809 00:59:57.514" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 00:59:57.514" status="PASS" starttime="20170809 00:59:57.513"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170809 00:59:57.514" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 00:59:57.514" status="PASS" starttime="20170809 00:59:57.514"></status>
</kw>
<msg timestamp="20170809 00:59:57.515" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 00:59:57.515" status="PASS" starttime="20170809 00:59:57.513"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170809 00:59:57.517" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 00:59:57.517" status="PASS" starttime="20170809 00:59:57.516"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170809 00:59:57.517" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 00:59:57.517" status="PASS" starttime="20170809 00:59:57.517"></status>
</kw>
<msg timestamp="20170809 00:59:57.518" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 00:59:57.518" status="PASS" starttime="20170809 00:59:57.515"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 00:59:57.519" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 00:59:57.519" status="PASS" starttime="20170809 00:59:57.518"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 00:59:57.520" status="PASS" starttime="20170809 00:59:57.519"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 00:59:57.525" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 00:59:57.528" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 00:59:57.528" level="INFO">${output} = /tmp/fspcibld/16110/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 00:59:57.528" status="PASS" starttime="20170809 00:59:57.520"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 00:59:57.531" status="PASS" starttime="20170809 00:59:57.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 00:59:57.532" status="PASS" starttime="20170809 00:59:57.531"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 00:59:57.533" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 00:59:57.533" status="PASS" starttime="20170809 00:59:57.532"></status>
</kw>
<msg timestamp="20170809 00:59:57.533" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 00:59:57.533" status="PASS" starttime="20170809 00:59:57.518"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 00:59:57.534" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170809 00:59:57.534" status="PASS" starttime="20170809 00:59:57.533"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 00:59:57.534" status="PASS" starttime="20170809 00:59:57.534"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170809 00:59:57.538" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 00:59:57.548" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 00:59:57.548" level="INFO">${os_con_pid} = </msg>
<status endtime="20170809 00:59:57.548" status="PASS" starttime="20170809 00:59:57.535"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170809 00:59:57.551" status="PASS" starttime="20170809 00:59:57.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 00:59:57.552" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170809 00:59:57.552" status="PASS" starttime="20170809 00:59:57.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 00:59:57.553" status="PASS" starttime="20170809 00:59:57.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 00:59:57.553" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 00:59:57.553" level="INFO">${output} = None</msg>
<status endtime="20170809 00:59:57.554" status="PASS" starttime="20170809 00:59:57.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 00:59:57.554" status="PASS" starttime="20170809 00:59:57.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.562" level="FAIL">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170809 00:59:57.562" status="FAIL" starttime="20170809 00:59:57.556"></status>
</kw>
<status endtime="20170809 00:59:57.562" status="PASS" starttime="20170809 00:59:57.555"></status>
</kw>
<status endtime="20170809 00:59:57.562" status="PASS" starttime="20170809 00:59:57.554"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170809 00:59:57.562" level="INFO">${output} = </msg>
<status endtime="20170809 00:59:57.563" status="PASS" starttime="20170809 00:59:57.562"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170809 00:59:57.563" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170809 00:59:57.563" status="PASS" starttime="20170809 00:59:57.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170809 00:59:57.630" status="PASS" starttime="20170809 00:59:57.564"></status>
</kw>
<msg timestamp="20170809 00:59:57.631" level="INFO">${rc} = 1</msg>
<msg timestamp="20170809 00:59:57.631" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170809 00:59:57.631" status="PASS" starttime="20170809 00:59:57.563"></status>
</kw>
<msg timestamp="20170809 00:59:57.632" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170809 00:59:57.632" status="PASS" starttime="20170809 00:59:57.515"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170809 00:59:57.634" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170809 00:59:57.634" status="PASS" starttime="20170809 00:59:57.633"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 00:59:57.635" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 00:59:57.635" status="PASS" starttime="20170809 00:59:57.635"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 00:59:57.636" status="PASS" starttime="20170809 00:59:57.635"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 00:59:57.640" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 00:59:57.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 00:59:57.643" level="INFO">${output} = /tmp/fspcibld/16110/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 00:59:57.643" status="PASS" starttime="20170809 00:59:57.636"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 00:59:57.647" status="PASS" starttime="20170809 00:59:57.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 00:59:57.648" status="PASS" starttime="20170809 00:59:57.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 00:59:57.648" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 00:59:57.648" status="PASS" starttime="20170809 00:59:57.648"></status>
</kw>
<msg timestamp="20170809 00:59:57.649" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 00:59:57.649" status="PASS" starttime="20170809 00:59:57.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 00:59:57.649" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170809 00:59:57.649" status="PASS" starttime="20170809 00:59:57.649"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 00:59:57.650" status="PASS" starttime="20170809 00:59:57.650"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 00:59:57.661" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170809 00:59:57.664" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 00:59:57.664" level="INFO">${output} = </msg>
<status endtime="20170809 00:59:57.664" status="PASS" starttime="20170809 00:59:57.650"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170809 00:59:57.667" status="PASS" starttime="20170809 00:59:57.666"></status>
</kw>
<status endtime="20170809 00:59:57.667" status="PASS" starttime="20170809 00:59:57.512"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170809 00:59:57.668" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 00:59:57.670" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170809 00:59:57.670" status="PASS" starttime="20170809 00:59:57.669"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 00:59:57.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170809 00:59:57.672" status="PASS" starttime="20170809 00:59:57.671"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 00:59:57.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 00:59:57.677" status="PASS" starttime="20170809 00:59:57.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 00:59:57.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 00:59:57.678" status="PASS" starttime="20170809 00:59:57.677"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 00:59:57.678" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 00:59:57.678" status="PASS" starttime="20170809 00:59:57.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 00:59:57.679" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 00:59:57.679" status="PASS" starttime="20170809 00:59:57.678"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 00:59:58.194" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 00:59:58.194" status="PASS" starttime="20170809 00:59:57.680"></status>
</kw>
<msg timestamp="20170809 00:59:58.195" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 00:59:58.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:58.195" status="PASS" starttime="20170809 00:59:57.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 00:59:58.195" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:58.195" status="PASS" starttime="20170809 00:59:58.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 00:59:58.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:58.196" status="PASS" starttime="20170809 00:59:58.196"></status>
</kw>
<status endtime="20170809 00:59:58.196" status="PASS" starttime="20170809 00:59:57.675"></status>
</kw>
<status endtime="20170809 00:59:58.196" status="PASS" starttime="20170809 00:59:57.674"></status>
</kw>
<status endtime="20170809 00:59:58.196" status="PASS" starttime="20170809 00:59:57.673"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 00:59:58.197" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170809 00:59:58.197" status="PASS" starttime="20170809 00:59:58.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 00:59:58.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 00:59:58.198" status="PASS" starttime="20170809 00:59:58.197"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170809 00:59:58.198" status="PASS" starttime="20170809 00:59:58.198"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 00:59:58.200" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170809 00:59:58.200" status="PASS" starttime="20170809 00:59:58.199"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 00:59:58.201" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170809 00:59:58.202" status="PASS" starttime="20170809 00:59:58.201"></status>
</kw>
<status endtime="20170809 00:59:58.202" status="PASS" starttime="20170809 00:59:58.200"></status>
</kw>
<status endtime="20170809 00:59:58.202" status="PASS" starttime="20170809 00:59:58.198"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 00:59:58.891" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 00:59:58.891" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:58.891" status="PASS" starttime="20170809 00:59:58.202"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 00:59:58.892" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 00:59:58.893" status="PASS" starttime="20170809 00:59:58.892"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 00:59:58.893" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 00:59:58.894" status="PASS" starttime="20170809 00:59:58.893"></status>
</kw>
<status endtime="20170809 00:59:58.894" status="PASS" starttime="20170809 00:59:58.893"></status>
</kw>
<status endtime="20170809 00:59:58.894" status="PASS" starttime="20170809 00:59:58.891"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 00:59:58.894" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 00:59:58.894" status="PASS" starttime="20170809 00:59:58.894"></status>
</kw>
<msg timestamp="20170809 00:59:58.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:58.894" status="PASS" starttime="20170809 00:59:57.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 00:59:58.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:58.895" status="PASS" starttime="20170809 00:59:58.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 00:59:58.896" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 00:59:58.896" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 00:59:58.896" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status endtime="20170809 00:59:58.896" status="PASS" starttime="20170809 00:59:58.895"></status>
</kw>
<status endtime="20170809 00:59:58.896" status="PASS" starttime="20170809 00:59:57.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170809 00:59:58.897" status="PASS" starttime="20170809 00:59:58.896"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 00:59:58.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 00:59:58.902" status="PASS" starttime="20170809 00:59:58.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 00:59:58.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 00:59:58.902" status="PASS" starttime="20170809 00:59:58.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 00:59:58.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 00:59:58.903" status="PASS" starttime="20170809 00:59:58.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 00:59:58.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 00:59:58.904" status="PASS" starttime="20170809 00:59:58.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 00:59:59.470" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 00:59:59.470" status="PASS" starttime="20170809 00:59:58.905"></status>
</kw>
<msg timestamp="20170809 00:59:59.470" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 00:59:59.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 00:59:59.470" status="PASS" starttime="20170809 00:59:58.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 00:59:59.471" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:59.471" status="PASS" starttime="20170809 00:59:59.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 00:59:59.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 00:59:59.471" status="PASS" starttime="20170809 00:59:59.471"></status>
</kw>
<status endtime="20170809 00:59:59.472" status="PASS" starttime="20170809 00:59:58.900"></status>
</kw>
<status endtime="20170809 00:59:59.472" status="PASS" starttime="20170809 00:59:58.900"></status>
</kw>
<status endtime="20170809 00:59:59.472" status="PASS" starttime="20170809 00:59:58.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 00:59:59.472" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 00:59:59.472" status="PASS" starttime="20170809 00:59:59.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 00:59:59.474" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 00:59:59.474" status="PASS" starttime="20170809 00:59:59.474"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 00:59:59.475" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 00:59:59.475" status="PASS" starttime="20170809 00:59:59.475"></status>
</kw>
<status endtime="20170809 00:59:59.476" status="PASS" starttime="20170809 00:59:59.475"></status>
</kw>
<status endtime="20170809 00:59:59.476" status="PASS" starttime="20170809 00:59:59.473"></status>
</kw>
<status endtime="20170809 00:59:59.476" status="PASS" starttime="20170809 00:59:59.473"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:00.496" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:00.496" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:00.496" status="PASS" starttime="20170809 00:59:59.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:00.498" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:00.498" status="PASS" starttime="20170809 01:00:00.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:00.499" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:00.499" status="PASS" starttime="20170809 01:00:00.499"></status>
</kw>
<status endtime="20170809 01:00:00.499" status="PASS" starttime="20170809 01:00:00.498"></status>
</kw>
<status endtime="20170809 01:00:00.500" status="PASS" starttime="20170809 01:00:00.497"></status>
</kw>
<status endtime="20170809 01:00:00.500" status="PASS" starttime="20170809 01:00:00.497"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:00.500" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:00.500" status="PASS" starttime="20170809 01:00:00.500"></status>
</kw>
<msg timestamp="20170809 01:00:00.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:00.500" status="PASS" starttime="20170809 00:59:58.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:00.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:00.501" status="PASS" starttime="20170809 01:00:00.501"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:00.502" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:00.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:00.502" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:00.502" status="PASS" starttime="20170809 01:00:00.501"></status>
</kw>
<msg timestamp="20170809 01:00:00.502" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 01:00:00.502" status="PASS" starttime="20170809 00:59:58.898"></status>
</kw>
<msg timestamp="20170809 01:00:00.502" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 01:00:00.502" status="PASS" starttime="20170809 00:59:58.898"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:00:00.503" status="PASS" starttime="20170809 01:00:00.503"></status>
</kw>
<status endtime="20170809 01:00:00.503" status="PASS" starttime="20170809 00:59:58.898"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:00.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:00.507" status="PASS" starttime="20170809 01:00:00.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:00.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:00.508" status="PASS" starttime="20170809 01:00:00.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:00.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:00.509" status="PASS" starttime="20170809 01:00:00.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:00.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:00.510" status="PASS" starttime="20170809 01:00:00.509"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:01.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:01.311" status="PASS" starttime="20170809 01:00:00.512"></status>
</kw>
<msg timestamp="20170809 01:00:01.311" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:01.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:01.311" status="PASS" starttime="20170809 01:00:00.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:01.312" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:01.312" status="PASS" starttime="20170809 01:00:01.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:01.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:01.313" status="PASS" starttime="20170809 01:00:01.312"></status>
</kw>
<status endtime="20170809 01:00:01.313" status="PASS" starttime="20170809 01:00:00.506"></status>
</kw>
<status endtime="20170809 01:00:01.313" status="PASS" starttime="20170809 01:00:00.505"></status>
</kw>
<status endtime="20170809 01:00:01.313" status="PASS" starttime="20170809 01:00:00.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:01.315" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:00:01.315" status="PASS" starttime="20170809 01:00:01.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:01.318" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:01.318" status="PASS" starttime="20170809 01:00:01.317"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:01.319" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:01.320" status="PASS" starttime="20170809 01:00:01.319"></status>
</kw>
<status endtime="20170809 01:00:01.320" status="PASS" starttime="20170809 01:00:01.318"></status>
</kw>
<status endtime="20170809 01:00:01.320" status="PASS" starttime="20170809 01:00:01.316"></status>
</kw>
<status endtime="20170809 01:00:01.320" status="PASS" starttime="20170809 01:00:01.315"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:05.146" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:05.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:05.147" status="PASS" starttime="20170809 01:00:01.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:05.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:05.149" status="PASS" starttime="20170809 01:00:05.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:05.150" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:05.151" status="PASS" starttime="20170809 01:00:05.150"></status>
</kw>
<status endtime="20170809 01:00:05.151" status="PASS" starttime="20170809 01:00:05.149"></status>
</kw>
<status endtime="20170809 01:00:05.151" status="PASS" starttime="20170809 01:00:05.148"></status>
</kw>
<status endtime="20170809 01:00:05.151" status="PASS" starttime="20170809 01:00:05.147"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:05.151" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:05.151" status="PASS" starttime="20170809 01:00:05.151"></status>
</kw>
<msg timestamp="20170809 01:00:05.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:05.151" status="PASS" starttime="20170809 01:00:00.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:05.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:05.152" status="PASS" starttime="20170809 01:00:05.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:05.153" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:05.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:05.153" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:05.153" status="PASS" starttime="20170809 01:00:05.152"></status>
</kw>
<msg timestamp="20170809 01:00:05.153" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170809 01:00:05.153" status="PASS" starttime="20170809 01:00:00.504"></status>
</kw>
<msg timestamp="20170809 01:00:05.154" level="INFO">${host_state} = Off</msg>
<status endtime="20170809 01:00:05.154" status="PASS" starttime="20170809 01:00:00.503"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:00:05.154" status="PASS" starttime="20170809 01:00:05.154"></status>
</kw>
<status endtime="20170809 01:00:05.154" status="PASS" starttime="20170809 00:59:58.897"></status>
</kw>
<status endtime="20170809 01:00:05.154" status="PASS" starttime="20170809 00:59:58.897"></status>
</kw>
<status endtime="20170809 01:00:05.154" status="PASS" starttime="20170809 00:59:57.669"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 01:00:05.155" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170809 01:00:05.155" status="PASS" starttime="20170809 01:00:05.155"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:05.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170809 01:00:05.157" status="PASS" starttime="20170809 01:00:05.156"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:05.159" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:05.160" status="PASS" starttime="20170809 01:00:05.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:05.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:05.160" status="PASS" starttime="20170809 01:00:05.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:05.161" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:05.161" status="PASS" starttime="20170809 01:00:05.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:05.162" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:05.162" status="PASS" starttime="20170809 01:00:05.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:05.807" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:05.807" status="PASS" starttime="20170809 01:00:05.162"></status>
</kw>
<msg timestamp="20170809 01:00:05.807" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:05.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:05.807" status="PASS" starttime="20170809 01:00:05.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:05.808" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:05.808" status="PASS" starttime="20170809 01:00:05.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:05.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:05.808" status="PASS" starttime="20170809 01:00:05.808"></status>
</kw>
<status endtime="20170809 01:00:05.809" status="PASS" starttime="20170809 01:00:05.158"></status>
</kw>
<status endtime="20170809 01:00:05.809" status="PASS" starttime="20170809 01:00:05.158"></status>
</kw>
<status endtime="20170809 01:00:05.809" status="PASS" starttime="20170809 01:00:05.158"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:05.809" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170809 01:00:05.809" status="PASS" starttime="20170809 01:00:05.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:05.810" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:05.810" status="PASS" starttime="20170809 01:00:05.810"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170809 01:00:05.811" status="PASS" starttime="20170809 01:00:05.810"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:05.813" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170809 01:00:05.813" status="PASS" starttime="20170809 01:00:05.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:05.813" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170809 01:00:05.814" status="PASS" starttime="20170809 01:00:05.813"></status>
</kw>
<status endtime="20170809 01:00:05.814" status="PASS" starttime="20170809 01:00:05.813"></status>
</kw>
<status endtime="20170809 01:00:05.814" status="PASS" starttime="20170809 01:00:05.811"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:06.476" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 01:00:06.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:06.476" status="PASS" starttime="20170809 01:00:05.814"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:06.477" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:06.477" status="PASS" starttime="20170809 01:00:06.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:06.478" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:06.478" status="PASS" starttime="20170809 01:00:06.478"></status>
</kw>
<status endtime="20170809 01:00:06.478" status="PASS" starttime="20170809 01:00:06.477"></status>
</kw>
<status endtime="20170809 01:00:06.479" status="PASS" starttime="20170809 01:00:06.476"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:06.479" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:06.479" status="PASS" starttime="20170809 01:00:06.479"></status>
</kw>
<msg timestamp="20170809 01:00:06.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:06.479" status="PASS" starttime="20170809 01:00:05.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:06.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:06.480" status="PASS" starttime="20170809 01:00:06.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 01:00:06.481" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:06.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:06.481" level="INFO">${json} = {u'message': u'200 OK', u'data': None, u'status': u'ok'}</msg>
<status endtime="20170809 01:00:06.481" status="PASS" starttime="20170809 01:00:06.480"></status>
</kw>
<status endtime="20170809 01:00:06.481" status="PASS" starttime="20170809 01:00:05.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170809 01:00:06.482" status="PASS" starttime="20170809 01:00:06.481"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:06.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:06.487" status="PASS" starttime="20170809 01:00:06.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:06.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:06.488" status="PASS" starttime="20170809 01:00:06.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:06.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:06.489" status="PASS" starttime="20170809 01:00:06.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:06.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:06.489" status="PASS" starttime="20170809 01:00:06.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:08.405" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:08.405" status="PASS" starttime="20170809 01:00:06.490"></status>
</kw>
<msg timestamp="20170809 01:00:08.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:08.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:08.405" status="PASS" starttime="20170809 01:00:06.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:08.406" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:08.406" status="PASS" starttime="20170809 01:00:08.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:08.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:08.406" status="PASS" starttime="20170809 01:00:08.406"></status>
</kw>
<status endtime="20170809 01:00:08.407" status="PASS" starttime="20170809 01:00:06.486"></status>
</kw>
<status endtime="20170809 01:00:08.407" status="PASS" starttime="20170809 01:00:06.485"></status>
</kw>
<status endtime="20170809 01:00:08.407" status="PASS" starttime="20170809 01:00:06.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:08.407" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:00:08.407" status="PASS" starttime="20170809 01:00:08.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:08.410" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:08.410" status="PASS" starttime="20170809 01:00:08.409"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:08.410" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:08.411" status="PASS" starttime="20170809 01:00:08.410"></status>
</kw>
<status endtime="20170809 01:00:08.411" status="PASS" starttime="20170809 01:00:08.410"></status>
</kw>
<status endtime="20170809 01:00:08.411" status="PASS" starttime="20170809 01:00:08.408"></status>
</kw>
<status endtime="20170809 01:00:08.411" status="PASS" starttime="20170809 01:00:08.408"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:11.926" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:11.926" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:11.926" status="PASS" starttime="20170809 01:00:08.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:11.929" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:11.929" status="PASS" starttime="20170809 01:00:11.928"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:11.930" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:11.930" status="PASS" starttime="20170809 01:00:11.930"></status>
</kw>
<status endtime="20170809 01:00:11.930" status="PASS" starttime="20170809 01:00:11.929"></status>
</kw>
<status endtime="20170809 01:00:11.930" status="PASS" starttime="20170809 01:00:11.927"></status>
</kw>
<status endtime="20170809 01:00:11.930" status="PASS" starttime="20170809 01:00:11.927"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:11.931" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:11.931" status="PASS" starttime="20170809 01:00:11.931"></status>
</kw>
<msg timestamp="20170809 01:00:11.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:11.931" status="PASS" starttime="20170809 01:00:06.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:11.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:11.932" status="PASS" starttime="20170809 01:00:11.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:11.932" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:11.932" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:11.932" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:11.933" status="PASS" starttime="20170809 01:00:11.932"></status>
</kw>
<msg timestamp="20170809 01:00:11.933" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 01:00:11.933" status="PASS" starttime="20170809 01:00:06.484"></status>
</kw>
<msg timestamp="20170809 01:00:11.933" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 01:00:11.933" status="PASS" starttime="20170809 01:00:06.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 01:00:11.934" level="FAIL">On != Off</msg>
<status endtime="20170809 01:00:11.934" status="FAIL" starttime="20170809 01:00:11.934"></status>
</kw>
<status endtime="20170809 01:00:11.935" status="FAIL" starttime="20170809 01:00:06.483"></status>
</kw>
<status endtime="20170809 01:00:11.935" status="FAIL" starttime="20170809 01:00:06.482"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:21.940" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:21.941" status="PASS" starttime="20170809 01:00:21.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:21.942" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:21.942" status="PASS" starttime="20170809 01:00:21.941"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:21.943" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:21.943" status="PASS" starttime="20170809 01:00:21.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:21.944" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:21.944" status="PASS" starttime="20170809 01:00:21.943"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:22.396" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:22.396" status="PASS" starttime="20170809 01:00:21.945"></status>
</kw>
<msg timestamp="20170809 01:00:22.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:22.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:22.396" status="PASS" starttime="20170809 01:00:21.944"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:22.397" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:22.397" status="PASS" starttime="20170809 01:00:22.397"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:22.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:22.398" status="PASS" starttime="20170809 01:00:22.397"></status>
</kw>
<status endtime="20170809 01:00:22.398" status="PASS" starttime="20170809 01:00:21.940"></status>
</kw>
<status endtime="20170809 01:00:22.398" status="PASS" starttime="20170809 01:00:21.939"></status>
</kw>
<status endtime="20170809 01:00:22.398" status="PASS" starttime="20170809 01:00:21.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:22.399" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:00:22.399" status="PASS" starttime="20170809 01:00:22.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:22.401" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:22.401" status="PASS" starttime="20170809 01:00:22.400"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:22.402" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:22.402" status="PASS" starttime="20170809 01:00:22.402"></status>
</kw>
<status endtime="20170809 01:00:22.402" status="PASS" starttime="20170809 01:00:22.401"></status>
</kw>
<status endtime="20170809 01:00:22.402" status="PASS" starttime="20170809 01:00:22.399"></status>
</kw>
<status endtime="20170809 01:00:22.402" status="PASS" starttime="20170809 01:00:22.399"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:22.809" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:22.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:22.809" status="PASS" starttime="20170809 01:00:22.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:22.811" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:22.811" status="PASS" starttime="20170809 01:00:22.810"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:22.812" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:22.812" status="PASS" starttime="20170809 01:00:22.811"></status>
</kw>
<status endtime="20170809 01:00:22.812" status="PASS" starttime="20170809 01:00:22.811"></status>
</kw>
<status endtime="20170809 01:00:22.812" status="PASS" starttime="20170809 01:00:22.810"></status>
</kw>
<status endtime="20170809 01:00:22.812" status="PASS" starttime="20170809 01:00:22.809"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:22.812" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:22.813" status="PASS" starttime="20170809 01:00:22.812"></status>
</kw>
<msg timestamp="20170809 01:00:22.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:22.813" status="PASS" starttime="20170809 01:00:21.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:22.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:22.814" status="PASS" starttime="20170809 01:00:22.813"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:22.814" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:22.814" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:22.814" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:22.814" status="PASS" starttime="20170809 01:00:22.814"></status>
</kw>
<msg timestamp="20170809 01:00:22.814" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:00:22.815" status="PASS" starttime="20170809 01:00:21.937"></status>
</kw>
<msg timestamp="20170809 01:00:22.815" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:00:22.815" status="PASS" starttime="20170809 01:00:21.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:00:22.815" status="PASS" starttime="20170809 01:00:22.815"></status>
</kw>
<status endtime="20170809 01:00:22.815" status="PASS" starttime="20170809 01:00:21.936"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:22.819" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:22.819" status="PASS" starttime="20170809 01:00:22.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:22.820" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:22.820" status="PASS" starttime="20170809 01:00:22.820"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:22.821" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:22.821" status="PASS" starttime="20170809 01:00:22.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:22.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:22.821" status="PASS" starttime="20170809 01:00:22.821"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:23.189" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:23.190" status="PASS" starttime="20170809 01:00:22.822"></status>
</kw>
<msg timestamp="20170809 01:00:23.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:23.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:23.190" status="PASS" starttime="20170809 01:00:22.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:23.190" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:23.191" status="PASS" starttime="20170809 01:00:23.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:23.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:23.191" status="PASS" starttime="20170809 01:00:23.191"></status>
</kw>
<status endtime="20170809 01:00:23.191" status="PASS" starttime="20170809 01:00:22.818"></status>
</kw>
<status endtime="20170809 01:00:23.191" status="PASS" starttime="20170809 01:00:22.818"></status>
</kw>
<status endtime="20170809 01:00:23.192" status="PASS" starttime="20170809 01:00:22.817"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:23.192" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:00:23.192" status="PASS" starttime="20170809 01:00:23.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:23.194" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:23.194" status="PASS" starttime="20170809 01:00:23.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:23.195" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:23.195" status="PASS" starttime="20170809 01:00:23.195"></status>
</kw>
<status endtime="20170809 01:00:23.195" status="PASS" starttime="20170809 01:00:23.195"></status>
</kw>
<status endtime="20170809 01:00:23.196" status="PASS" starttime="20170809 01:00:23.193"></status>
</kw>
<status endtime="20170809 01:00:23.196" status="PASS" starttime="20170809 01:00:23.193"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:23.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:23.601" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:23.601" status="PASS" starttime="20170809 01:00:23.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:23.603" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:23.603" status="PASS" starttime="20170809 01:00:23.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:23.604" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:23.604" status="PASS" starttime="20170809 01:00:23.603"></status>
</kw>
<status endtime="20170809 01:00:23.604" status="PASS" starttime="20170809 01:00:23.603"></status>
</kw>
<status endtime="20170809 01:00:23.604" status="PASS" starttime="20170809 01:00:23.602"></status>
</kw>
<status endtime="20170809 01:00:23.604" status="PASS" starttime="20170809 01:00:23.601"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:23.604" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:23.605" status="PASS" starttime="20170809 01:00:23.604"></status>
</kw>
<msg timestamp="20170809 01:00:23.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:23.605" status="PASS" starttime="20170809 01:00:22.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:23.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:23.605" status="PASS" starttime="20170809 01:00:23.605"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:23.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:23.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:23.606" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:23.606" status="PASS" starttime="20170809 01:00:23.606"></status>
</kw>
<msg timestamp="20170809 01:00:23.606" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:00:23.606" status="PASS" starttime="20170809 01:00:22.816"></status>
</kw>
<msg timestamp="20170809 01:00:23.607" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:00:23.607" status="PASS" starttime="20170809 01:00:22.816"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:00:23.607" status="PASS" starttime="20170809 01:00:23.607"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:23.612" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:23.612" status="PASS" starttime="20170809 01:00:23.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:23.613" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:23.613" status="PASS" starttime="20170809 01:00:23.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:23.613" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:23.613" status="PASS" starttime="20170809 01:00:23.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:23.614" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:23.614" status="PASS" starttime="20170809 01:00:23.614"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:23.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:23.988" status="PASS" starttime="20170809 01:00:23.615"></status>
</kw>
<msg timestamp="20170809 01:00:23.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:23.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:23.989" status="PASS" starttime="20170809 01:00:23.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:23.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:23.989" status="PASS" starttime="20170809 01:00:23.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:23.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:23.990" status="PASS" starttime="20170809 01:00:23.990"></status>
</kw>
<status endtime="20170809 01:00:23.990" status="PASS" starttime="20170809 01:00:23.611"></status>
</kw>
<status endtime="20170809 01:00:23.990" status="PASS" starttime="20170809 01:00:23.610"></status>
</kw>
<status endtime="20170809 01:00:23.990" status="PASS" starttime="20170809 01:00:23.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:23.991" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:00:23.991" status="PASS" starttime="20170809 01:00:23.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:23.993" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:23.993" status="PASS" starttime="20170809 01:00:23.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:23.994" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:23.994" status="PASS" starttime="20170809 01:00:23.994"></status>
</kw>
<status endtime="20170809 01:00:23.994" status="PASS" starttime="20170809 01:00:23.993"></status>
</kw>
<status endtime="20170809 01:00:23.994" status="PASS" starttime="20170809 01:00:23.992"></status>
</kw>
<status endtime="20170809 01:00:23.994" status="PASS" starttime="20170809 01:00:23.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:24.256" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:00:24.257" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:24.257" status="PASS" starttime="20170809 01:00:23.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:24.259" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:24.259" status="PASS" starttime="20170809 01:00:24.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:24.262" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:24.262" status="PASS" starttime="20170809 01:00:24.260"></status>
</kw>
<status endtime="20170809 01:00:24.263" status="PASS" starttime="20170809 01:00:24.259"></status>
</kw>
<status endtime="20170809 01:00:24.263" status="PASS" starttime="20170809 01:00:24.257"></status>
</kw>
<status endtime="20170809 01:00:24.263" status="PASS" starttime="20170809 01:00:24.257"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:24.263" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:24.263" status="PASS" starttime="20170809 01:00:24.263"></status>
</kw>
<msg timestamp="20170809 01:00:24.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:24.264" status="PASS" starttime="20170809 01:00:23.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:24.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:24.264" status="PASS" starttime="20170809 01:00:24.264"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:24.265" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:24.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:24.265" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:24.265" status="PASS" starttime="20170809 01:00:24.264"></status>
</kw>
<msg timestamp="20170809 01:00:24.265" level="INFO">${state} = Off</msg>
<status endtime="20170809 01:00:24.265" status="PASS" starttime="20170809 01:00:23.608"></status>
</kw>
<msg timestamp="20170809 01:00:24.265" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 01:00:24.265" status="PASS" starttime="20170809 01:00:23.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:00:24.266" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 01:00:24.266" status="FAIL" starttime="20170809 01:00:24.266"></status>
</kw>
<status endtime="20170809 01:00:24.266" status="FAIL" starttime="20170809 01:00:23.607"></status>
</kw>
<status endtime="20170809 01:00:24.266" status="FAIL" starttime="20170809 01:00:21.935"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:34.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:34.272" status="PASS" starttime="20170809 01:00:34.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:34.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:34.273" status="PASS" starttime="20170809 01:00:34.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:34.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:34.274" status="PASS" starttime="20170809 01:00:34.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:34.275" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:34.275" status="PASS" starttime="20170809 01:00:34.274"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:34.831" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:34.831" status="PASS" starttime="20170809 01:00:34.276"></status>
</kw>
<msg timestamp="20170809 01:00:34.831" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:34.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:34.831" status="PASS" starttime="20170809 01:00:34.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:34.832" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:34.832" status="PASS" starttime="20170809 01:00:34.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:34.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:34.833" status="PASS" starttime="20170809 01:00:34.832"></status>
</kw>
<status endtime="20170809 01:00:34.833" status="PASS" starttime="20170809 01:00:34.271"></status>
</kw>
<status endtime="20170809 01:00:34.833" status="PASS" starttime="20170809 01:00:34.270"></status>
</kw>
<status endtime="20170809 01:00:34.833" status="PASS" starttime="20170809 01:00:34.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:34.834" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:00:34.834" status="PASS" starttime="20170809 01:00:34.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:34.836" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:34.836" status="PASS" starttime="20170809 01:00:34.835"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:34.837" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:34.837" status="PASS" starttime="20170809 01:00:34.836"></status>
</kw>
<status endtime="20170809 01:00:34.837" status="PASS" starttime="20170809 01:00:34.836"></status>
</kw>
<status endtime="20170809 01:00:34.837" status="PASS" starttime="20170809 01:00:34.834"></status>
</kw>
<status endtime="20170809 01:00:34.837" status="PASS" starttime="20170809 01:00:34.834"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:35.084" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:35.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:35.084" status="PASS" starttime="20170809 01:00:34.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:35.086" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:35.086" status="PASS" starttime="20170809 01:00:35.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:35.087" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:35.087" status="PASS" starttime="20170809 01:00:35.087"></status>
</kw>
<status endtime="20170809 01:00:35.087" status="PASS" starttime="20170809 01:00:35.086"></status>
</kw>
<status endtime="20170809 01:00:35.087" status="PASS" starttime="20170809 01:00:35.085"></status>
</kw>
<status endtime="20170809 01:00:35.087" status="PASS" starttime="20170809 01:00:35.085"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:35.088" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:35.088" status="PASS" starttime="20170809 01:00:35.088"></status>
</kw>
<msg timestamp="20170809 01:00:35.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:35.088" status="PASS" starttime="20170809 01:00:34.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:35.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:35.089" status="PASS" starttime="20170809 01:00:35.088"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:35.089" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:35.089" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:35.089" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:35.090" status="PASS" starttime="20170809 01:00:35.089"></status>
</kw>
<msg timestamp="20170809 01:00:35.090" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:00:35.090" status="PASS" starttime="20170809 01:00:34.268"></status>
</kw>
<msg timestamp="20170809 01:00:35.090" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:00:35.090" status="PASS" starttime="20170809 01:00:34.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:00:35.091" status="PASS" starttime="20170809 01:00:35.090"></status>
</kw>
<status endtime="20170809 01:00:35.091" status="PASS" starttime="20170809 01:00:34.268"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:35.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:35.095" status="PASS" starttime="20170809 01:00:35.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:35.096" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:35.096" status="PASS" starttime="20170809 01:00:35.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:35.096" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:35.096" status="PASS" starttime="20170809 01:00:35.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:35.097" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:35.097" status="PASS" starttime="20170809 01:00:35.097"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:35.587" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:35.587" status="PASS" starttime="20170809 01:00:35.098"></status>
</kw>
<msg timestamp="20170809 01:00:35.587" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:35.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:35.587" status="PASS" starttime="20170809 01:00:35.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:35.588" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:35.588" status="PASS" starttime="20170809 01:00:35.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:35.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:35.589" status="PASS" starttime="20170809 01:00:35.589"></status>
</kw>
<status endtime="20170809 01:00:35.589" status="PASS" starttime="20170809 01:00:35.093"></status>
</kw>
<status endtime="20170809 01:00:35.589" status="PASS" starttime="20170809 01:00:35.093"></status>
</kw>
<status endtime="20170809 01:00:35.589" status="PASS" starttime="20170809 01:00:35.093"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:35.590" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:00:35.590" status="PASS" starttime="20170809 01:00:35.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:35.592" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:35.592" status="PASS" starttime="20170809 01:00:35.591"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:35.593" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:35.593" status="PASS" starttime="20170809 01:00:35.593"></status>
</kw>
<status endtime="20170809 01:00:35.593" status="PASS" starttime="20170809 01:00:35.592"></status>
</kw>
<status endtime="20170809 01:00:35.593" status="PASS" starttime="20170809 01:00:35.591"></status>
</kw>
<status endtime="20170809 01:00:35.593" status="PASS" starttime="20170809 01:00:35.590"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:35.738" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:35.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:35.739" status="PASS" starttime="20170809 01:00:35.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:35.741" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:35.741" status="PASS" starttime="20170809 01:00:35.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:35.742" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:35.742" status="PASS" starttime="20170809 01:00:35.741"></status>
</kw>
<status endtime="20170809 01:00:35.742" status="PASS" starttime="20170809 01:00:35.741"></status>
</kw>
<status endtime="20170809 01:00:35.742" status="PASS" starttime="20170809 01:00:35.740"></status>
</kw>
<status endtime="20170809 01:00:35.742" status="PASS" starttime="20170809 01:00:35.739"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:35.742" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:35.742" status="PASS" starttime="20170809 01:00:35.742"></status>
</kw>
<msg timestamp="20170809 01:00:35.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:35.743" status="PASS" starttime="20170809 01:00:35.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:35.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:35.743" status="PASS" starttime="20170809 01:00:35.743"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:35.744" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:35.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:35.744" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:35.744" status="PASS" starttime="20170809 01:00:35.744"></status>
</kw>
<msg timestamp="20170809 01:00:35.744" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:00:35.744" status="PASS" starttime="20170809 01:00:35.091"></status>
</kw>
<msg timestamp="20170809 01:00:35.745" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:00:35.745" status="PASS" starttime="20170809 01:00:35.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:00:35.745" status="PASS" starttime="20170809 01:00:35.745"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:35.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:35.750" status="PASS" starttime="20170809 01:00:35.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:35.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:35.750" status="PASS" starttime="20170809 01:00:35.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:35.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:35.751" status="PASS" starttime="20170809 01:00:35.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:35.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:35.752" status="PASS" starttime="20170809 01:00:35.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:36.185" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:36.185" status="PASS" starttime="20170809 01:00:35.752"></status>
</kw>
<msg timestamp="20170809 01:00:36.186" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:36.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:36.186" status="PASS" starttime="20170809 01:00:35.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:36.186" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:36.186" status="PASS" starttime="20170809 01:00:36.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:36.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:36.187" status="PASS" starttime="20170809 01:00:36.187"></status>
</kw>
<status endtime="20170809 01:00:36.187" status="PASS" starttime="20170809 01:00:35.748"></status>
</kw>
<status endtime="20170809 01:00:36.187" status="PASS" starttime="20170809 01:00:35.748"></status>
</kw>
<status endtime="20170809 01:00:36.187" status="PASS" starttime="20170809 01:00:35.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:36.188" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:00:36.188" status="PASS" starttime="20170809 01:00:36.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:36.190" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:36.190" status="PASS" starttime="20170809 01:00:36.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:36.191" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:36.191" status="PASS" starttime="20170809 01:00:36.191"></status>
</kw>
<status endtime="20170809 01:00:36.191" status="PASS" starttime="20170809 01:00:36.190"></status>
</kw>
<status endtime="20170809 01:00:36.191" status="PASS" starttime="20170809 01:00:36.189"></status>
</kw>
<status endtime="20170809 01:00:36.191" status="PASS" starttime="20170809 01:00:36.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:36.380" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:00:36.380" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:36.380" status="PASS" starttime="20170809 01:00:36.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:36.382" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:36.382" status="PASS" starttime="20170809 01:00:36.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:36.383" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:36.383" status="PASS" starttime="20170809 01:00:36.383"></status>
</kw>
<status endtime="20170809 01:00:36.383" status="PASS" starttime="20170809 01:00:36.382"></status>
</kw>
<status endtime="20170809 01:00:36.383" status="PASS" starttime="20170809 01:00:36.381"></status>
</kw>
<status endtime="20170809 01:00:36.383" status="PASS" starttime="20170809 01:00:36.381"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:36.384" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:36.384" status="PASS" starttime="20170809 01:00:36.384"></status>
</kw>
<msg timestamp="20170809 01:00:36.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:36.385" status="PASS" starttime="20170809 01:00:35.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:36.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:36.385" status="PASS" starttime="20170809 01:00:36.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:36.386" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:36.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:36.386" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:36.387" status="PASS" starttime="20170809 01:00:36.386"></status>
</kw>
<msg timestamp="20170809 01:00:36.387" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:00:36.387" status="PASS" starttime="20170809 01:00:35.746"></status>
</kw>
<msg timestamp="20170809 01:00:36.387" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:00:36.387" status="PASS" starttime="20170809 01:00:35.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:00:36.388" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:00:36.388" status="FAIL" starttime="20170809 01:00:36.388"></status>
</kw>
<status endtime="20170809 01:00:36.388" status="FAIL" starttime="20170809 01:00:35.745"></status>
</kw>
<status endtime="20170809 01:00:36.388" status="FAIL" starttime="20170809 01:00:34.267"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:46.394" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:46.394" status="PASS" starttime="20170809 01:00:46.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:46.395" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:46.395" status="PASS" starttime="20170809 01:00:46.394"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:46.395" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:46.395" status="PASS" starttime="20170809 01:00:46.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:46.396" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:46.396" status="PASS" starttime="20170809 01:00:46.396"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:46.628" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:46.628" status="PASS" starttime="20170809 01:00:46.397"></status>
</kw>
<msg timestamp="20170809 01:00:46.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:46.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:46.628" status="PASS" starttime="20170809 01:00:46.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:46.629" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:46.629" status="PASS" starttime="20170809 01:00:46.628"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:46.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:46.630" status="PASS" starttime="20170809 01:00:46.629"></status>
</kw>
<status endtime="20170809 01:00:46.630" status="PASS" starttime="20170809 01:00:46.393"></status>
</kw>
<status endtime="20170809 01:00:46.630" status="PASS" starttime="20170809 01:00:46.392"></status>
</kw>
<status endtime="20170809 01:00:46.630" status="PASS" starttime="20170809 01:00:46.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:46.631" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:00:46.631" status="PASS" starttime="20170809 01:00:46.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:46.633" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:46.633" status="PASS" starttime="20170809 01:00:46.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:46.633" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:46.634" status="PASS" starttime="20170809 01:00:46.633"></status>
</kw>
<status endtime="20170809 01:00:46.634" status="PASS" starttime="20170809 01:00:46.633"></status>
</kw>
<status endtime="20170809 01:00:46.634" status="PASS" starttime="20170809 01:00:46.631"></status>
</kw>
<status endtime="20170809 01:00:46.634" status="PASS" starttime="20170809 01:00:46.631"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:46.698" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:46.698" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:46.698" status="PASS" starttime="20170809 01:00:46.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:46.700" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:46.700" status="PASS" starttime="20170809 01:00:46.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:46.701" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:46.701" status="PASS" starttime="20170809 01:00:46.701"></status>
</kw>
<status endtime="20170809 01:00:46.701" status="PASS" starttime="20170809 01:00:46.700"></status>
</kw>
<status endtime="20170809 01:00:46.701" status="PASS" starttime="20170809 01:00:46.699"></status>
</kw>
<status endtime="20170809 01:00:46.701" status="PASS" starttime="20170809 01:00:46.698"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:46.702" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:46.702" status="PASS" starttime="20170809 01:00:46.702"></status>
</kw>
<msg timestamp="20170809 01:00:46.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:46.702" status="PASS" starttime="20170809 01:00:46.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:46.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:46.703" status="PASS" starttime="20170809 01:00:46.702"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:46.703" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:46.703" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:46.703" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:46.703" status="PASS" starttime="20170809 01:00:46.703"></status>
</kw>
<msg timestamp="20170809 01:00:46.704" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:00:46.704" status="PASS" starttime="20170809 01:00:46.390"></status>
</kw>
<msg timestamp="20170809 01:00:46.705" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:00:46.705" status="PASS" starttime="20170809 01:00:46.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:00:46.705" status="PASS" starttime="20170809 01:00:46.705"></status>
</kw>
<status endtime="20170809 01:00:46.706" status="PASS" starttime="20170809 01:00:46.390"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:46.710" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:46.711" status="PASS" starttime="20170809 01:00:46.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:46.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:46.712" status="PASS" starttime="20170809 01:00:46.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:46.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:46.713" status="PASS" starttime="20170809 01:00:46.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:46.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:46.714" status="PASS" starttime="20170809 01:00:46.713"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:46.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:46.901" status="PASS" starttime="20170809 01:00:46.715"></status>
</kw>
<msg timestamp="20170809 01:00:46.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:46.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:46.901" status="PASS" starttime="20170809 01:00:46.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:46.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:46.902" status="PASS" starttime="20170809 01:00:46.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:46.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:46.902" status="PASS" starttime="20170809 01:00:46.902"></status>
</kw>
<status endtime="20170809 01:00:46.902" status="PASS" starttime="20170809 01:00:46.709"></status>
</kw>
<status endtime="20170809 01:00:46.902" status="PASS" starttime="20170809 01:00:46.708"></status>
</kw>
<status endtime="20170809 01:00:46.903" status="PASS" starttime="20170809 01:00:46.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:46.903" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:00:46.903" status="PASS" starttime="20170809 01:00:46.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:46.905" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:46.905" status="PASS" starttime="20170809 01:00:46.905"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:46.906" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:46.906" status="PASS" starttime="20170809 01:00:46.906"></status>
</kw>
<status endtime="20170809 01:00:46.906" status="PASS" starttime="20170809 01:00:46.905"></status>
</kw>
<status endtime="20170809 01:00:46.906" status="PASS" starttime="20170809 01:00:46.904"></status>
</kw>
<status endtime="20170809 01:00:46.907" status="PASS" starttime="20170809 01:00:46.903"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:47.010" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:47.010" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:47.010" status="PASS" starttime="20170809 01:00:46.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:47.012" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:47.012" status="PASS" starttime="20170809 01:00:47.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:47.013" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:47.013" status="PASS" starttime="20170809 01:00:47.013"></status>
</kw>
<status endtime="20170809 01:00:47.013" status="PASS" starttime="20170809 01:00:47.012"></status>
</kw>
<status endtime="20170809 01:00:47.013" status="PASS" starttime="20170809 01:00:47.011"></status>
</kw>
<status endtime="20170809 01:00:47.013" status="PASS" starttime="20170809 01:00:47.010"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:47.014" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:47.014" status="PASS" starttime="20170809 01:00:47.014"></status>
</kw>
<msg timestamp="20170809 01:00:47.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:47.014" status="PASS" starttime="20170809 01:00:46.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:47.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:47.015" status="PASS" starttime="20170809 01:00:47.014"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:47.016" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:47.016" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:47.016" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:47.016" status="PASS" starttime="20170809 01:00:47.015"></status>
</kw>
<msg timestamp="20170809 01:00:47.016" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:00:47.016" status="PASS" starttime="20170809 01:00:46.706"></status>
</kw>
<msg timestamp="20170809 01:00:47.016" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:00:47.016" status="PASS" starttime="20170809 01:00:46.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:00:47.017" status="PASS" starttime="20170809 01:00:47.017"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:47.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:47.021" status="PASS" starttime="20170809 01:00:47.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:47.022" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:47.022" status="PASS" starttime="20170809 01:00:47.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:47.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:47.023" status="PASS" starttime="20170809 01:00:47.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:47.023" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:47.023" status="PASS" starttime="20170809 01:00:47.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:47.286" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:47.286" status="PASS" starttime="20170809 01:00:47.024"></status>
</kw>
<msg timestamp="20170809 01:00:47.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:47.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:47.286" status="PASS" starttime="20170809 01:00:47.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:47.287" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:47.287" status="PASS" starttime="20170809 01:00:47.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:47.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:47.287" status="PASS" starttime="20170809 01:00:47.287"></status>
</kw>
<status endtime="20170809 01:00:47.287" status="PASS" starttime="20170809 01:00:47.020"></status>
</kw>
<status endtime="20170809 01:00:47.288" status="PASS" starttime="20170809 01:00:47.020"></status>
</kw>
<status endtime="20170809 01:00:47.288" status="PASS" starttime="20170809 01:00:47.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:47.288" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:00:47.288" status="PASS" starttime="20170809 01:00:47.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:47.291" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:47.291" status="PASS" starttime="20170809 01:00:47.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:47.292" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:47.292" status="PASS" starttime="20170809 01:00:47.291"></status>
</kw>
<status endtime="20170809 01:00:47.292" status="PASS" starttime="20170809 01:00:47.291"></status>
</kw>
<status endtime="20170809 01:00:47.292" status="PASS" starttime="20170809 01:00:47.289"></status>
</kw>
<status endtime="20170809 01:00:47.292" status="PASS" starttime="20170809 01:00:47.289"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:47.359" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:00:47.359" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:47.359" status="PASS" starttime="20170809 01:00:47.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:47.361" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:47.361" status="PASS" starttime="20170809 01:00:47.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:47.362" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:47.362" status="PASS" starttime="20170809 01:00:47.362"></status>
</kw>
<status endtime="20170809 01:00:47.362" status="PASS" starttime="20170809 01:00:47.361"></status>
</kw>
<status endtime="20170809 01:00:47.362" status="PASS" starttime="20170809 01:00:47.360"></status>
</kw>
<status endtime="20170809 01:00:47.362" status="PASS" starttime="20170809 01:00:47.360"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:47.363" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:47.363" status="PASS" starttime="20170809 01:00:47.362"></status>
</kw>
<msg timestamp="20170809 01:00:47.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:47.363" status="PASS" starttime="20170809 01:00:47.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:47.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:47.364" status="PASS" starttime="20170809 01:00:47.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:47.364" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:47.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:47.364" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:47.364" status="PASS" starttime="20170809 01:00:47.364"></status>
</kw>
<msg timestamp="20170809 01:00:47.365" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:00:47.365" status="PASS" starttime="20170809 01:00:47.018"></status>
</kw>
<msg timestamp="20170809 01:00:47.365" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:00:47.365" status="PASS" starttime="20170809 01:00:47.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:00:47.366" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:00:47.366" status="FAIL" starttime="20170809 01:00:47.365"></status>
</kw>
<status endtime="20170809 01:00:47.366" status="FAIL" starttime="20170809 01:00:47.017"></status>
</kw>
<status endtime="20170809 01:00:47.366" status="FAIL" starttime="20170809 01:00:46.389"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:57.371" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:57.372" status="PASS" starttime="20170809 01:00:57.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:57.372" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:57.372" status="PASS" starttime="20170809 01:00:57.372"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:57.373" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:57.373" status="PASS" starttime="20170809 01:00:57.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:57.374" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:57.374" status="PASS" starttime="20170809 01:00:57.373"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:57.551" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:57.552" status="PASS" starttime="20170809 01:00:57.374"></status>
</kw>
<msg timestamp="20170809 01:00:57.552" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:57.552" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:57.552" status="PASS" starttime="20170809 01:00:57.374"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:57.552" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:57.552" status="PASS" starttime="20170809 01:00:57.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:57.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:57.553" status="PASS" starttime="20170809 01:00:57.553"></status>
</kw>
<status endtime="20170809 01:00:57.553" status="PASS" starttime="20170809 01:00:57.370"></status>
</kw>
<status endtime="20170809 01:00:57.553" status="PASS" starttime="20170809 01:00:57.370"></status>
</kw>
<status endtime="20170809 01:00:57.554" status="PASS" starttime="20170809 01:00:57.369"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:57.554" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:00:57.554" status="PASS" starttime="20170809 01:00:57.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:57.556" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:57.556" status="PASS" starttime="20170809 01:00:57.555"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:57.557" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:57.557" status="PASS" starttime="20170809 01:00:57.557"></status>
</kw>
<status endtime="20170809 01:00:57.557" status="PASS" starttime="20170809 01:00:57.556"></status>
</kw>
<status endtime="20170809 01:00:57.557" status="PASS" starttime="20170809 01:00:57.555"></status>
</kw>
<status endtime="20170809 01:00:57.558" status="PASS" starttime="20170809 01:00:57.554"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:57.622" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:57.622" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:57.622" status="PASS" starttime="20170809 01:00:57.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:57.624" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:57.624" status="PASS" starttime="20170809 01:00:57.623"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:57.625" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:57.625" status="PASS" starttime="20170809 01:00:57.624"></status>
</kw>
<status endtime="20170809 01:00:57.625" status="PASS" starttime="20170809 01:00:57.624"></status>
</kw>
<status endtime="20170809 01:00:57.625" status="PASS" starttime="20170809 01:00:57.623"></status>
</kw>
<status endtime="20170809 01:00:57.625" status="PASS" starttime="20170809 01:00:57.622"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:57.625" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:57.625" status="PASS" starttime="20170809 01:00:57.625"></status>
</kw>
<msg timestamp="20170809 01:00:57.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:57.626" status="PASS" starttime="20170809 01:00:57.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:57.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:57.626" status="PASS" starttime="20170809 01:00:57.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:57.627" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:57.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:57.627" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:57.627" status="PASS" starttime="20170809 01:00:57.627"></status>
</kw>
<msg timestamp="20170809 01:00:57.627" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:00:57.627" status="PASS" starttime="20170809 01:00:57.368"></status>
</kw>
<msg timestamp="20170809 01:00:57.628" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:00:57.628" status="PASS" starttime="20170809 01:00:57.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:00:57.628" status="PASS" starttime="20170809 01:00:57.628"></status>
</kw>
<status endtime="20170809 01:00:57.629" status="PASS" starttime="20170809 01:00:57.367"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:57.634" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:57.634" status="PASS" starttime="20170809 01:00:57.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:57.635" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:57.635" status="PASS" starttime="20170809 01:00:57.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:57.636" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:57.636" status="PASS" starttime="20170809 01:00:57.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:57.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:57.637" status="PASS" starttime="20170809 01:00:57.637"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:57.851" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:57.851" status="PASS" starttime="20170809 01:00:57.638"></status>
</kw>
<msg timestamp="20170809 01:00:57.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:57.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:57.851" status="PASS" starttime="20170809 01:00:57.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:57.852" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:57.852" status="PASS" starttime="20170809 01:00:57.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:57.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:57.853" status="PASS" starttime="20170809 01:00:57.852"></status>
</kw>
<status endtime="20170809 01:00:57.853" status="PASS" starttime="20170809 01:00:57.632"></status>
</kw>
<status endtime="20170809 01:00:57.853" status="PASS" starttime="20170809 01:00:57.632"></status>
</kw>
<status endtime="20170809 01:00:57.853" status="PASS" starttime="20170809 01:00:57.631"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:57.854" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:00:57.854" status="PASS" starttime="20170809 01:00:57.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:57.856" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:57.856" status="PASS" starttime="20170809 01:00:57.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:57.857" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:00:57.857" status="PASS" starttime="20170809 01:00:57.857"></status>
</kw>
<status endtime="20170809 01:00:57.857" status="PASS" starttime="20170809 01:00:57.856"></status>
</kw>
<status endtime="20170809 01:00:57.857" status="PASS" starttime="20170809 01:00:57.855"></status>
</kw>
<status endtime="20170809 01:00:57.857" status="PASS" starttime="20170809 01:00:57.854"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:58.034" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:00:58.035" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:58.035" status="PASS" starttime="20170809 01:00:57.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:58.036" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:58.036" status="PASS" starttime="20170809 01:00:58.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:58.037" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:58.037" status="PASS" starttime="20170809 01:00:58.037"></status>
</kw>
<status endtime="20170809 01:00:58.038" status="PASS" starttime="20170809 01:00:58.037"></status>
</kw>
<status endtime="20170809 01:00:58.038" status="PASS" starttime="20170809 01:00:58.035"></status>
</kw>
<status endtime="20170809 01:00:58.038" status="PASS" starttime="20170809 01:00:58.035"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:58.038" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:58.038" status="PASS" starttime="20170809 01:00:58.038"></status>
</kw>
<msg timestamp="20170809 01:00:58.038" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:58.038" status="PASS" starttime="20170809 01:00:57.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:58.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:58.039" status="PASS" starttime="20170809 01:00:58.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:58.040" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:58.040" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:58.040" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:58.040" status="PASS" starttime="20170809 01:00:58.039"></status>
</kw>
<msg timestamp="20170809 01:00:58.041" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:00:58.041" status="PASS" starttime="20170809 01:00:57.629"></status>
</kw>
<msg timestamp="20170809 01:00:58.041" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:00:58.041" status="PASS" starttime="20170809 01:00:57.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:00:58.042" status="PASS" starttime="20170809 01:00:58.042"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:00:58.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:00:58.048" status="PASS" starttime="20170809 01:00:58.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:00:58.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:00:58.049" status="PASS" starttime="20170809 01:00:58.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:00:58.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:00:58.050" status="PASS" starttime="20170809 01:00:58.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:00:58.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:00:58.050" status="PASS" starttime="20170809 01:00:58.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:00:58.264" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:00:58.264" status="PASS" starttime="20170809 01:00:58.051"></status>
</kw>
<msg timestamp="20170809 01:00:58.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:00:58.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:58.264" status="PASS" starttime="20170809 01:00:58.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:00:58.265" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:58.265" status="PASS" starttime="20170809 01:00:58.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:58.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:58.265" status="PASS" starttime="20170809 01:00:58.265"></status>
</kw>
<status endtime="20170809 01:00:58.266" status="PASS" starttime="20170809 01:00:58.047"></status>
</kw>
<status endtime="20170809 01:00:58.266" status="PASS" starttime="20170809 01:00:58.046"></status>
</kw>
<status endtime="20170809 01:00:58.266" status="PASS" starttime="20170809 01:00:58.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:00:58.266" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:00:58.266" status="PASS" starttime="20170809 01:00:58.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:58.268" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:58.268" status="PASS" starttime="20170809 01:00:58.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:58.272" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:00:58.272" status="PASS" starttime="20170809 01:00:58.269"></status>
</kw>
<status endtime="20170809 01:00:58.272" status="PASS" starttime="20170809 01:00:58.269"></status>
</kw>
<status endtime="20170809 01:00:58.273" status="PASS" starttime="20170809 01:00:58.267"></status>
</kw>
<status endtime="20170809 01:00:58.273" status="PASS" starttime="20170809 01:00:58.267"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:00:58.358" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:00:58.358" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:58.358" status="PASS" starttime="20170809 01:00:58.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:00:58.360" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:58.360" status="PASS" starttime="20170809 01:00:58.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:00:58.361" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:00:58.361" status="PASS" starttime="20170809 01:00:58.361"></status>
</kw>
<status endtime="20170809 01:00:58.362" status="PASS" starttime="20170809 01:00:58.361"></status>
</kw>
<status endtime="20170809 01:00:58.362" status="PASS" starttime="20170809 01:00:58.359"></status>
</kw>
<status endtime="20170809 01:00:58.362" status="PASS" starttime="20170809 01:00:58.359"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:00:58.362" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:00:58.362" status="PASS" starttime="20170809 01:00:58.362"></status>
</kw>
<msg timestamp="20170809 01:00:58.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:00:58.362" status="PASS" starttime="20170809 01:00:58.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:00:58.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:00:58.363" status="PASS" starttime="20170809 01:00:58.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:00:58.364" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:00:58.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:00:58.364" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:00:58.364" status="PASS" starttime="20170809 01:00:58.363"></status>
</kw>
<msg timestamp="20170809 01:00:58.364" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:00:58.364" status="PASS" starttime="20170809 01:00:58.043"></status>
</kw>
<msg timestamp="20170809 01:00:58.364" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:00:58.364" status="PASS" starttime="20170809 01:00:58.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:00:58.365" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:00:58.365" status="FAIL" starttime="20170809 01:00:58.365"></status>
</kw>
<status endtime="20170809 01:00:58.365" status="FAIL" starttime="20170809 01:00:58.042"></status>
</kw>
<status endtime="20170809 01:00:58.365" status="FAIL" starttime="20170809 01:00:57.367"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:08.370" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:08.371" status="PASS" starttime="20170809 01:01:08.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:08.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:08.371" status="PASS" starttime="20170809 01:01:08.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:08.372" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:08.372" status="PASS" starttime="20170809 01:01:08.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:08.373" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:08.373" status="PASS" starttime="20170809 01:01:08.372"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:08.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:08.707" status="PASS" starttime="20170809 01:01:08.373"></status>
</kw>
<msg timestamp="20170809 01:01:08.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:08.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:08.707" status="PASS" starttime="20170809 01:01:08.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:08.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:08.708" status="PASS" starttime="20170809 01:01:08.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:08.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:08.708" status="PASS" starttime="20170809 01:01:08.708"></status>
</kw>
<status endtime="20170809 01:01:08.708" status="PASS" starttime="20170809 01:01:08.370"></status>
</kw>
<status endtime="20170809 01:01:08.709" status="PASS" starttime="20170809 01:01:08.369"></status>
</kw>
<status endtime="20170809 01:01:08.709" status="PASS" starttime="20170809 01:01:08.368"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:08.709" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:01:08.709" status="PASS" starttime="20170809 01:01:08.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:08.711" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:08.712" status="PASS" starttime="20170809 01:01:08.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:08.713" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:08.713" status="PASS" starttime="20170809 01:01:08.713"></status>
</kw>
<status endtime="20170809 01:01:08.714" status="PASS" starttime="20170809 01:01:08.712"></status>
</kw>
<status endtime="20170809 01:01:08.714" status="PASS" starttime="20170809 01:01:08.710"></status>
</kw>
<status endtime="20170809 01:01:08.714" status="PASS" starttime="20170809 01:01:08.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:08.780" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:08.780" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:08.780" status="PASS" starttime="20170809 01:01:08.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:08.782" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:08.782" status="PASS" starttime="20170809 01:01:08.782"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:08.783" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:08.783" status="PASS" starttime="20170809 01:01:08.783"></status>
</kw>
<status endtime="20170809 01:01:08.783" status="PASS" starttime="20170809 01:01:08.782"></status>
</kw>
<status endtime="20170809 01:01:08.784" status="PASS" starttime="20170809 01:01:08.781"></status>
</kw>
<status endtime="20170809 01:01:08.784" status="PASS" starttime="20170809 01:01:08.781"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:08.784" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:08.784" status="PASS" starttime="20170809 01:01:08.784"></status>
</kw>
<msg timestamp="20170809 01:01:08.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:08.784" status="PASS" starttime="20170809 01:01:08.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:08.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:08.785" status="PASS" starttime="20170809 01:01:08.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:08.786" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:08.786" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:08.786" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:08.786" status="PASS" starttime="20170809 01:01:08.785"></status>
</kw>
<msg timestamp="20170809 01:01:08.786" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:01:08.786" status="PASS" starttime="20170809 01:01:08.367"></status>
</kw>
<msg timestamp="20170809 01:01:08.786" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:01:08.786" status="PASS" starttime="20170809 01:01:08.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:01:08.787" status="PASS" starttime="20170809 01:01:08.787"></status>
</kw>
<status endtime="20170809 01:01:08.787" status="PASS" starttime="20170809 01:01:08.367"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:08.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:08.791" status="PASS" starttime="20170809 01:01:08.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:08.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:08.792" status="PASS" starttime="20170809 01:01:08.792"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:08.792" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:08.793" status="PASS" starttime="20170809 01:01:08.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:08.793" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:08.793" status="PASS" starttime="20170809 01:01:08.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:09.101" status="PASS" starttime="20170809 01:01:08.794"></status>
</kw>
<msg timestamp="20170809 01:01:09.101" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:09.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:09.101" status="PASS" starttime="20170809 01:01:08.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:09.102" status="PASS" starttime="20170809 01:01:09.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:09.103" status="PASS" starttime="20170809 01:01:09.102"></status>
</kw>
<status endtime="20170809 01:01:09.103" status="PASS" starttime="20170809 01:01:08.790"></status>
</kw>
<status endtime="20170809 01:01:09.103" status="PASS" starttime="20170809 01:01:08.790"></status>
</kw>
<status endtime="20170809 01:01:09.103" status="PASS" starttime="20170809 01:01:08.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:09.104" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:01:09.104" status="PASS" starttime="20170809 01:01:09.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:09.106" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:09.106" status="PASS" starttime="20170809 01:01:09.105"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:09.107" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:09.107" status="PASS" starttime="20170809 01:01:09.106"></status>
</kw>
<status endtime="20170809 01:01:09.107" status="PASS" starttime="20170809 01:01:09.106"></status>
</kw>
<status endtime="20170809 01:01:09.107" status="PASS" starttime="20170809 01:01:09.105"></status>
</kw>
<status endtime="20170809 01:01:09.107" status="PASS" starttime="20170809 01:01:09.104"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:09.197" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:09.197" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:09.197" status="PASS" starttime="20170809 01:01:09.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:09.200" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:09.200" status="PASS" starttime="20170809 01:01:09.199"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:09.201" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:09.201" status="PASS" starttime="20170809 01:01:09.200"></status>
</kw>
<status endtime="20170809 01:01:09.201" status="PASS" starttime="20170809 01:01:09.200"></status>
</kw>
<status endtime="20170809 01:01:09.201" status="PASS" starttime="20170809 01:01:09.199"></status>
</kw>
<status endtime="20170809 01:01:09.201" status="PASS" starttime="20170809 01:01:09.198"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:09.201" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:09.201" status="PASS" starttime="20170809 01:01:09.201"></status>
</kw>
<msg timestamp="20170809 01:01:09.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:09.202" status="PASS" starttime="20170809 01:01:08.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:09.202" status="PASS" starttime="20170809 01:01:09.202"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:09.203" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:09.203" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:09.203" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:09.203" status="PASS" starttime="20170809 01:01:09.203"></status>
</kw>
<msg timestamp="20170809 01:01:09.203" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:01:09.203" status="PASS" starttime="20170809 01:01:08.787"></status>
</kw>
<msg timestamp="20170809 01:01:09.204" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:01:09.204" status="PASS" starttime="20170809 01:01:08.787"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:01:09.204" status="PASS" starttime="20170809 01:01:09.204"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:09.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:09.208" status="PASS" starttime="20170809 01:01:09.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:09.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:09.209" status="PASS" starttime="20170809 01:01:09.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:09.209" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:09.209" status="PASS" starttime="20170809 01:01:09.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:09.210" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:09.210" status="PASS" starttime="20170809 01:01:09.210"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:09.433" status="PASS" starttime="20170809 01:01:09.211"></status>
</kw>
<msg timestamp="20170809 01:01:09.433" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:09.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:09.433" status="PASS" starttime="20170809 01:01:09.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.434" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:09.434" status="PASS" starttime="20170809 01:01:09.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:09.435" status="PASS" starttime="20170809 01:01:09.434"></status>
</kw>
<status endtime="20170809 01:01:09.435" status="PASS" starttime="20170809 01:01:09.207"></status>
</kw>
<status endtime="20170809 01:01:09.435" status="PASS" starttime="20170809 01:01:09.207"></status>
</kw>
<status endtime="20170809 01:01:09.435" status="PASS" starttime="20170809 01:01:09.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:09.436" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:01:09.436" status="PASS" starttime="20170809 01:01:09.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:09.438" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:09.438" status="PASS" starttime="20170809 01:01:09.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:09.439" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:09.439" status="PASS" starttime="20170809 01:01:09.439"></status>
</kw>
<status endtime="20170809 01:01:09.439" status="PASS" starttime="20170809 01:01:09.438"></status>
</kw>
<status endtime="20170809 01:01:09.439" status="PASS" starttime="20170809 01:01:09.437"></status>
</kw>
<status endtime="20170809 01:01:09.439" status="PASS" starttime="20170809 01:01:09.436"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:09.509" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:01:09.509" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:09.509" status="PASS" starttime="20170809 01:01:09.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:09.511" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:09.511" status="PASS" starttime="20170809 01:01:09.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:09.512" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:09.512" status="PASS" starttime="20170809 01:01:09.512"></status>
</kw>
<status endtime="20170809 01:01:09.512" status="PASS" starttime="20170809 01:01:09.511"></status>
</kw>
<status endtime="20170809 01:01:09.512" status="PASS" starttime="20170809 01:01:09.510"></status>
</kw>
<status endtime="20170809 01:01:09.513" status="PASS" starttime="20170809 01:01:09.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:09.513" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:09.513" status="PASS" starttime="20170809 01:01:09.513"></status>
</kw>
<msg timestamp="20170809 01:01:09.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:09.514" status="PASS" starttime="20170809 01:01:09.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:09.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:09.515" status="PASS" starttime="20170809 01:01:09.514"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:09.515" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:09.515" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:09.516" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:09.516" status="PASS" starttime="20170809 01:01:09.515"></status>
</kw>
<msg timestamp="20170809 01:01:09.516" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:09.516" status="PASS" starttime="20170809 01:01:09.205"></status>
</kw>
<msg timestamp="20170809 01:01:09.516" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:09.516" status="PASS" starttime="20170809 01:01:09.205"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:01:09.517" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:01:09.517" status="FAIL" starttime="20170809 01:01:09.517"></status>
</kw>
<status endtime="20170809 01:01:09.518" status="FAIL" starttime="20170809 01:01:09.204"></status>
</kw>
<status endtime="20170809 01:01:09.518" status="FAIL" starttime="20170809 01:01:08.366"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:19.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:19.524" status="PASS" starttime="20170809 01:01:19.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:19.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:19.524" status="PASS" starttime="20170809 01:01:19.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:19.525" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:19.525" status="PASS" starttime="20170809 01:01:19.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:19.526" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:19.526" status="PASS" starttime="20170809 01:01:19.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:19.742" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:19.743" status="PASS" starttime="20170809 01:01:19.527"></status>
</kw>
<msg timestamp="20170809 01:01:19.743" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:19.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:19.743" status="PASS" starttime="20170809 01:01:19.526"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:19.743" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:19.744" status="PASS" starttime="20170809 01:01:19.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:19.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:19.744" status="PASS" starttime="20170809 01:01:19.744"></status>
</kw>
<status endtime="20170809 01:01:19.744" status="PASS" starttime="20170809 01:01:19.522"></status>
</kw>
<status endtime="20170809 01:01:19.744" status="PASS" starttime="20170809 01:01:19.522"></status>
</kw>
<status endtime="20170809 01:01:19.745" status="PASS" starttime="20170809 01:01:19.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:19.745" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:01:19.745" status="PASS" starttime="20170809 01:01:19.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:19.747" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:19.747" status="PASS" starttime="20170809 01:01:19.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:19.748" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:19.748" status="PASS" starttime="20170809 01:01:19.748"></status>
</kw>
<status endtime="20170809 01:01:19.748" status="PASS" starttime="20170809 01:01:19.747"></status>
</kw>
<status endtime="20170809 01:01:19.749" status="PASS" starttime="20170809 01:01:19.746"></status>
</kw>
<status endtime="20170809 01:01:19.749" status="PASS" starttime="20170809 01:01:19.745"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:19.822" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:19.822" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:19.822" status="PASS" starttime="20170809 01:01:19.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:19.824" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:19.824" status="PASS" starttime="20170809 01:01:19.823"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:19.825" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:19.825" status="PASS" starttime="20170809 01:01:19.825"></status>
</kw>
<status endtime="20170809 01:01:19.825" status="PASS" starttime="20170809 01:01:19.824"></status>
</kw>
<status endtime="20170809 01:01:19.826" status="PASS" starttime="20170809 01:01:19.823"></status>
</kw>
<status endtime="20170809 01:01:19.826" status="PASS" starttime="20170809 01:01:19.823"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:19.826" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:19.826" status="PASS" starttime="20170809 01:01:19.826"></status>
</kw>
<msg timestamp="20170809 01:01:19.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:19.826" status="PASS" starttime="20170809 01:01:19.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:19.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:19.827" status="PASS" starttime="20170809 01:01:19.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:19.828" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:19.828" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:19.828" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:19.828" status="PASS" starttime="20170809 01:01:19.827"></status>
</kw>
<msg timestamp="20170809 01:01:19.829" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:01:19.829" status="PASS" starttime="20170809 01:01:19.520"></status>
</kw>
<msg timestamp="20170809 01:01:19.829" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:01:19.829" status="PASS" starttime="20170809 01:01:19.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:01:19.830" status="PASS" starttime="20170809 01:01:19.829"></status>
</kw>
<status endtime="20170809 01:01:19.830" status="PASS" starttime="20170809 01:01:19.519"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:19.835" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:19.836" status="PASS" starttime="20170809 01:01:19.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:19.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:19.837" status="PASS" starttime="20170809 01:01:19.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:19.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:19.838" status="PASS" starttime="20170809 01:01:19.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:19.839" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:19.839" status="PASS" starttime="20170809 01:01:19.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:20.093" status="PASS" starttime="20170809 01:01:19.840"></status>
</kw>
<msg timestamp="20170809 01:01:20.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:20.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:20.093" status="PASS" starttime="20170809 01:01:19.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:20.094" status="PASS" starttime="20170809 01:01:20.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:20.094" status="PASS" starttime="20170809 01:01:20.094"></status>
</kw>
<status endtime="20170809 01:01:20.095" status="PASS" starttime="20170809 01:01:19.834"></status>
</kw>
<status endtime="20170809 01:01:20.095" status="PASS" starttime="20170809 01:01:19.833"></status>
</kw>
<status endtime="20170809 01:01:20.095" status="PASS" starttime="20170809 01:01:19.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:20.095" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:01:20.095" status="PASS" starttime="20170809 01:01:20.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:20.098" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:20.098" status="PASS" starttime="20170809 01:01:20.097"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:20.099" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:20.099" status="PASS" starttime="20170809 01:01:20.099"></status>
</kw>
<status endtime="20170809 01:01:20.099" status="PASS" starttime="20170809 01:01:20.098"></status>
</kw>
<status endtime="20170809 01:01:20.099" status="PASS" starttime="20170809 01:01:20.096"></status>
</kw>
<status endtime="20170809 01:01:20.099" status="PASS" starttime="20170809 01:01:20.096"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:20.394" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:20.394" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:20.394" status="PASS" starttime="20170809 01:01:20.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:20.396" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:20.396" status="PASS" starttime="20170809 01:01:20.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:20.397" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:20.397" status="PASS" starttime="20170809 01:01:20.397"></status>
</kw>
<status endtime="20170809 01:01:20.397" status="PASS" starttime="20170809 01:01:20.396"></status>
</kw>
<status endtime="20170809 01:01:20.397" status="PASS" starttime="20170809 01:01:20.395"></status>
</kw>
<status endtime="20170809 01:01:20.398" status="PASS" starttime="20170809 01:01:20.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:20.398" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:20.398" status="PASS" starttime="20170809 01:01:20.398"></status>
</kw>
<msg timestamp="20170809 01:01:20.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:20.398" status="PASS" starttime="20170809 01:01:19.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:20.399" status="PASS" starttime="20170809 01:01:20.398"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:20.399" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:20.400" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:20.400" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:20.400" status="PASS" starttime="20170809 01:01:20.399"></status>
</kw>
<msg timestamp="20170809 01:01:20.400" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:01:20.400" status="PASS" starttime="20170809 01:01:19.831"></status>
</kw>
<msg timestamp="20170809 01:01:20.400" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:01:20.400" status="PASS" starttime="20170809 01:01:19.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:01:20.401" status="PASS" starttime="20170809 01:01:20.401"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:20.405" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:20.405" status="PASS" starttime="20170809 01:01:20.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:20.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:20.406" status="PASS" starttime="20170809 01:01:20.405"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:20.406" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:20.406" status="PASS" starttime="20170809 01:01:20.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:20.407" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:20.407" status="PASS" starttime="20170809 01:01:20.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.584" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:20.584" status="PASS" starttime="20170809 01:01:20.408"></status>
</kw>
<msg timestamp="20170809 01:01:20.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:20.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:20.585" status="PASS" starttime="20170809 01:01:20.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.585" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:20.585" status="PASS" starttime="20170809 01:01:20.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:20.586" status="PASS" starttime="20170809 01:01:20.586"></status>
</kw>
<status endtime="20170809 01:01:20.586" status="PASS" starttime="20170809 01:01:20.404"></status>
</kw>
<status endtime="20170809 01:01:20.586" status="PASS" starttime="20170809 01:01:20.403"></status>
</kw>
<status endtime="20170809 01:01:20.586" status="PASS" starttime="20170809 01:01:20.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:20.587" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:01:20.587" status="PASS" starttime="20170809 01:01:20.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:20.589" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:20.589" status="PASS" starttime="20170809 01:01:20.588"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:20.590" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:20.590" status="PASS" starttime="20170809 01:01:20.590"></status>
</kw>
<status endtime="20170809 01:01:20.590" status="PASS" starttime="20170809 01:01:20.589"></status>
</kw>
<status endtime="20170809 01:01:20.591" status="PASS" starttime="20170809 01:01:20.588"></status>
</kw>
<status endtime="20170809 01:01:20.591" status="PASS" starttime="20170809 01:01:20.587"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:20.666" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:01:20.666" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:20.666" status="PASS" starttime="20170809 01:01:20.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:20.668" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:20.668" status="PASS" starttime="20170809 01:01:20.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:20.669" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:20.669" status="PASS" starttime="20170809 01:01:20.669"></status>
</kw>
<status endtime="20170809 01:01:20.669" status="PASS" starttime="20170809 01:01:20.668"></status>
</kw>
<status endtime="20170809 01:01:20.669" status="PASS" starttime="20170809 01:01:20.667"></status>
</kw>
<status endtime="20170809 01:01:20.669" status="PASS" starttime="20170809 01:01:20.666"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:20.670" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:20.670" status="PASS" starttime="20170809 01:01:20.670"></status>
</kw>
<msg timestamp="20170809 01:01:20.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:20.670" status="PASS" starttime="20170809 01:01:20.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:20.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:20.671" status="PASS" starttime="20170809 01:01:20.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:20.671" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:20.671" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:20.671" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:20.671" status="PASS" starttime="20170809 01:01:20.671"></status>
</kw>
<msg timestamp="20170809 01:01:20.672" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:20.672" status="PASS" starttime="20170809 01:01:20.402"></status>
</kw>
<msg timestamp="20170809 01:01:20.672" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:20.672" status="PASS" starttime="20170809 01:01:20.401"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:01:20.673" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:01:20.673" status="FAIL" starttime="20170809 01:01:20.672"></status>
</kw>
<status endtime="20170809 01:01:20.673" status="FAIL" starttime="20170809 01:01:20.401"></status>
</kw>
<status endtime="20170809 01:01:20.673" status="FAIL" starttime="20170809 01:01:19.518"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:30.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:30.679" status="PASS" starttime="20170809 01:01:30.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:30.680" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:30.680" status="PASS" starttime="20170809 01:01:30.680"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:30.681" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:30.681" status="PASS" starttime="20170809 01:01:30.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:30.682" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:30.682" status="PASS" starttime="20170809 01:01:30.681"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:30.959" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:30.959" status="PASS" starttime="20170809 01:01:30.682"></status>
</kw>
<msg timestamp="20170809 01:01:30.959" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:30.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:30.959" status="PASS" starttime="20170809 01:01:30.682"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:30.960" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:30.960" status="PASS" starttime="20170809 01:01:30.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:30.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:30.961" status="PASS" starttime="20170809 01:01:30.960"></status>
</kw>
<status endtime="20170809 01:01:30.961" status="PASS" starttime="20170809 01:01:30.678"></status>
</kw>
<status endtime="20170809 01:01:30.961" status="PASS" starttime="20170809 01:01:30.678"></status>
</kw>
<status endtime="20170809 01:01:30.961" status="PASS" starttime="20170809 01:01:30.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:30.962" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:01:30.962" status="PASS" starttime="20170809 01:01:30.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:30.964" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:30.964" status="PASS" starttime="20170809 01:01:30.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:30.965" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:30.965" status="PASS" starttime="20170809 01:01:30.965"></status>
</kw>
<status endtime="20170809 01:01:30.965" status="PASS" starttime="20170809 01:01:30.964"></status>
</kw>
<status endtime="20170809 01:01:30.965" status="PASS" starttime="20170809 01:01:30.963"></status>
</kw>
<status endtime="20170809 01:01:30.965" status="PASS" starttime="20170809 01:01:30.962"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:31.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:31.050" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.050" status="PASS" starttime="20170809 01:01:30.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:31.051" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:31.052" status="PASS" starttime="20170809 01:01:31.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:31.052" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:31.053" status="PASS" starttime="20170809 01:01:31.052"></status>
</kw>
<status endtime="20170809 01:01:31.053" status="PASS" starttime="20170809 01:01:31.052"></status>
</kw>
<status endtime="20170809 01:01:31.053" status="PASS" starttime="20170809 01:01:31.051"></status>
</kw>
<status endtime="20170809 01:01:31.053" status="PASS" starttime="20170809 01:01:31.050"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:31.054" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:31.054" status="PASS" starttime="20170809 01:01:31.053"></status>
</kw>
<msg timestamp="20170809 01:01:31.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.054" status="PASS" starttime="20170809 01:01:30.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:31.055" status="PASS" starttime="20170809 01:01:31.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:31.055" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:31.055" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:31.056" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:31.056" status="PASS" starttime="20170809 01:01:31.055"></status>
</kw>
<msg timestamp="20170809 01:01:31.056" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:01:31.056" status="PASS" starttime="20170809 01:01:30.675"></status>
</kw>
<msg timestamp="20170809 01:01:31.056" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:01:31.056" status="PASS" starttime="20170809 01:01:30.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:01:31.057" status="PASS" starttime="20170809 01:01:31.056"></status>
</kw>
<status endtime="20170809 01:01:31.057" status="PASS" starttime="20170809 01:01:30.674"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:31.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:31.061" status="PASS" starttime="20170809 01:01:31.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:31.061" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:31.061" status="PASS" starttime="20170809 01:01:31.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:31.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:31.062" status="PASS" starttime="20170809 01:01:31.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:31.063" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:31.063" status="PASS" starttime="20170809 01:01:31.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.260" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:31.260" status="PASS" starttime="20170809 01:01:31.063"></status>
</kw>
<msg timestamp="20170809 01:01:31.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:31.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.260" status="PASS" starttime="20170809 01:01:31.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.261" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:31.261" status="PASS" starttime="20170809 01:01:31.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:31.262" status="PASS" starttime="20170809 01:01:31.261"></status>
</kw>
<status endtime="20170809 01:01:31.262" status="PASS" starttime="20170809 01:01:31.060"></status>
</kw>
<status endtime="20170809 01:01:31.262" status="PASS" starttime="20170809 01:01:31.059"></status>
</kw>
<status endtime="20170809 01:01:31.262" status="PASS" starttime="20170809 01:01:31.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:31.262" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:01:31.262" status="PASS" starttime="20170809 01:01:31.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:31.265" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:31.265" status="PASS" starttime="20170809 01:01:31.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:31.266" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:31.266" status="PASS" starttime="20170809 01:01:31.265"></status>
</kw>
<status endtime="20170809 01:01:31.266" status="PASS" starttime="20170809 01:01:31.265"></status>
</kw>
<status endtime="20170809 01:01:31.266" status="PASS" starttime="20170809 01:01:31.263"></status>
</kw>
<status endtime="20170809 01:01:31.266" status="PASS" starttime="20170809 01:01:31.263"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:31.354" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:31.354" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.354" status="PASS" starttime="20170809 01:01:31.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:31.356" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:31.356" status="PASS" starttime="20170809 01:01:31.356"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:31.357" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:31.357" status="PASS" starttime="20170809 01:01:31.357"></status>
</kw>
<status endtime="20170809 01:01:31.357" status="PASS" starttime="20170809 01:01:31.356"></status>
</kw>
<status endtime="20170809 01:01:31.357" status="PASS" starttime="20170809 01:01:31.355"></status>
</kw>
<status endtime="20170809 01:01:31.357" status="PASS" starttime="20170809 01:01:31.355"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:31.358" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:31.358" status="PASS" starttime="20170809 01:01:31.358"></status>
</kw>
<msg timestamp="20170809 01:01:31.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.358" status="PASS" starttime="20170809 01:01:31.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:31.359" status="PASS" starttime="20170809 01:01:31.358"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:31.359" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:31.359" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:31.359" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:31.359" status="PASS" starttime="20170809 01:01:31.359"></status>
</kw>
<msg timestamp="20170809 01:01:31.360" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:01:31.360" status="PASS" starttime="20170809 01:01:31.057"></status>
</kw>
<msg timestamp="20170809 01:01:31.360" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:01:31.360" status="PASS" starttime="20170809 01:01:31.057"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:01:31.361" status="PASS" starttime="20170809 01:01:31.360"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:31.365" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:31.366" status="PASS" starttime="20170809 01:01:31.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:31.366" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:31.366" status="PASS" starttime="20170809 01:01:31.366"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:31.367" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:31.367" status="PASS" starttime="20170809 01:01:31.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:31.367" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:31.367" status="PASS" starttime="20170809 01:01:31.367"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.548" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:31.548" status="PASS" starttime="20170809 01:01:31.368"></status>
</kw>
<msg timestamp="20170809 01:01:31.548" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:31.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.548" status="PASS" starttime="20170809 01:01:31.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:31.549" status="PASS" starttime="20170809 01:01:31.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:31.549" status="PASS" starttime="20170809 01:01:31.549"></status>
</kw>
<status endtime="20170809 01:01:31.549" status="PASS" starttime="20170809 01:01:31.364"></status>
</kw>
<status endtime="20170809 01:01:31.549" status="PASS" starttime="20170809 01:01:31.363"></status>
</kw>
<status endtime="20170809 01:01:31.550" status="PASS" starttime="20170809 01:01:31.363"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:31.550" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:01:31.550" status="PASS" starttime="20170809 01:01:31.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:31.552" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:31.552" status="PASS" starttime="20170809 01:01:31.552"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:31.553" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:31.553" status="PASS" starttime="20170809 01:01:31.553"></status>
</kw>
<status endtime="20170809 01:01:31.553" status="PASS" starttime="20170809 01:01:31.552"></status>
</kw>
<status endtime="20170809 01:01:31.553" status="PASS" starttime="20170809 01:01:31.551"></status>
</kw>
<status endtime="20170809 01:01:31.554" status="PASS" starttime="20170809 01:01:31.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:31.619" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:01:31.619" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.619" status="PASS" starttime="20170809 01:01:31.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:31.621" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:31.621" status="PASS" starttime="20170809 01:01:31.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:31.625" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:31.625" status="PASS" starttime="20170809 01:01:31.624"></status>
</kw>
<status endtime="20170809 01:01:31.625" status="PASS" starttime="20170809 01:01:31.621"></status>
</kw>
<status endtime="20170809 01:01:31.625" status="PASS" starttime="20170809 01:01:31.620"></status>
</kw>
<status endtime="20170809 01:01:31.625" status="PASS" starttime="20170809 01:01:31.620"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:31.625" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:31.626" status="PASS" starttime="20170809 01:01:31.625"></status>
</kw>
<msg timestamp="20170809 01:01:31.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:31.626" status="PASS" starttime="20170809 01:01:31.362"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:31.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:31.626" status="PASS" starttime="20170809 01:01:31.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:31.627" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:31.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:31.627" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:31.627" status="PASS" starttime="20170809 01:01:31.627"></status>
</kw>
<msg timestamp="20170809 01:01:31.627" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:31.627" status="PASS" starttime="20170809 01:01:31.361"></status>
</kw>
<msg timestamp="20170809 01:01:31.628" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:31.628" status="PASS" starttime="20170809 01:01:31.361"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:01:31.628" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:01:31.628" status="FAIL" starttime="20170809 01:01:31.628"></status>
</kw>
<status endtime="20170809 01:01:31.629" status="FAIL" starttime="20170809 01:01:31.361"></status>
</kw>
<status endtime="20170809 01:01:31.629" status="FAIL" starttime="20170809 01:01:30.674"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:41.634" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:41.634" status="PASS" starttime="20170809 01:01:41.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:41.635" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:41.635" status="PASS" starttime="20170809 01:01:41.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:41.635" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:41.636" status="PASS" starttime="20170809 01:01:41.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:41.636" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:41.636" status="PASS" starttime="20170809 01:01:41.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:41.853" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:41.853" status="PASS" starttime="20170809 01:01:41.637"></status>
</kw>
<msg timestamp="20170809 01:01:41.853" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:41.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:41.853" status="PASS" starttime="20170809 01:01:41.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:41.854" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:41.854" status="PASS" starttime="20170809 01:01:41.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:41.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:41.855" status="PASS" starttime="20170809 01:01:41.854"></status>
</kw>
<status endtime="20170809 01:01:41.855" status="PASS" starttime="20170809 01:01:41.633"></status>
</kw>
<status endtime="20170809 01:01:41.855" status="PASS" starttime="20170809 01:01:41.633"></status>
</kw>
<status endtime="20170809 01:01:41.855" status="PASS" starttime="20170809 01:01:41.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:41.855" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:01:41.856" status="PASS" starttime="20170809 01:01:41.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:41.858" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:41.858" status="PASS" starttime="20170809 01:01:41.857"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:41.859" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:41.859" status="PASS" starttime="20170809 01:01:41.859"></status>
</kw>
<status endtime="20170809 01:01:41.860" status="PASS" starttime="20170809 01:01:41.858"></status>
</kw>
<status endtime="20170809 01:01:41.860" status="PASS" starttime="20170809 01:01:41.856"></status>
</kw>
<status endtime="20170809 01:01:41.860" status="PASS" starttime="20170809 01:01:41.856"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:41.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:41.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:41.967" status="PASS" starttime="20170809 01:01:41.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:41.969" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:41.969" status="PASS" starttime="20170809 01:01:41.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:41.970" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:41.970" status="PASS" starttime="20170809 01:01:41.970"></status>
</kw>
<status endtime="20170809 01:01:41.970" status="PASS" starttime="20170809 01:01:41.969"></status>
</kw>
<status endtime="20170809 01:01:41.971" status="PASS" starttime="20170809 01:01:41.968"></status>
</kw>
<status endtime="20170809 01:01:41.971" status="PASS" starttime="20170809 01:01:41.967"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:41.971" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:41.971" status="PASS" starttime="20170809 01:01:41.971"></status>
</kw>
<msg timestamp="20170809 01:01:41.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:41.971" status="PASS" starttime="20170809 01:01:41.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:41.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:41.972" status="PASS" starttime="20170809 01:01:41.972"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:41.973" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:41.973" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:41.973" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:41.973" status="PASS" starttime="20170809 01:01:41.972"></status>
</kw>
<msg timestamp="20170809 01:01:41.973" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:01:41.973" status="PASS" starttime="20170809 01:01:41.631"></status>
</kw>
<msg timestamp="20170809 01:01:41.973" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:01:41.973" status="PASS" starttime="20170809 01:01:41.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:01:41.974" status="PASS" starttime="20170809 01:01:41.974"></status>
</kw>
<status endtime="20170809 01:01:41.974" status="PASS" starttime="20170809 01:01:41.630"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:41.978" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:41.978" status="PASS" starttime="20170809 01:01:41.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:41.979" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:41.979" status="PASS" starttime="20170809 01:01:41.979"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:41.980" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:41.980" status="PASS" starttime="20170809 01:01:41.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:41.980" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:41.980" status="PASS" starttime="20170809 01:01:41.980"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.176" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:42.177" status="PASS" starttime="20170809 01:01:41.981"></status>
</kw>
<msg timestamp="20170809 01:01:42.177" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:42.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:42.177" status="PASS" starttime="20170809 01:01:41.981"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.177" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:42.178" status="PASS" starttime="20170809 01:01:42.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:42.178" status="PASS" starttime="20170809 01:01:42.178"></status>
</kw>
<status endtime="20170809 01:01:42.178" status="PASS" starttime="20170809 01:01:41.977"></status>
</kw>
<status endtime="20170809 01:01:42.178" status="PASS" starttime="20170809 01:01:41.976"></status>
</kw>
<status endtime="20170809 01:01:42.179" status="PASS" starttime="20170809 01:01:41.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:42.179" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:01:42.179" status="PASS" starttime="20170809 01:01:42.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:42.182" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:42.182" status="PASS" starttime="20170809 01:01:42.181"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:42.183" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:42.183" status="PASS" starttime="20170809 01:01:42.182"></status>
</kw>
<status endtime="20170809 01:01:42.183" status="PASS" starttime="20170809 01:01:42.182"></status>
</kw>
<status endtime="20170809 01:01:42.183" status="PASS" starttime="20170809 01:01:42.180"></status>
</kw>
<status endtime="20170809 01:01:42.183" status="PASS" starttime="20170809 01:01:42.179"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:42.305" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:42.305" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:42.305" status="PASS" starttime="20170809 01:01:42.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:42.307" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:42.307" status="PASS" starttime="20170809 01:01:42.306"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:42.308" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:42.308" status="PASS" starttime="20170809 01:01:42.308"></status>
</kw>
<status endtime="20170809 01:01:42.308" status="PASS" starttime="20170809 01:01:42.307"></status>
</kw>
<status endtime="20170809 01:01:42.308" status="PASS" starttime="20170809 01:01:42.306"></status>
</kw>
<status endtime="20170809 01:01:42.308" status="PASS" starttime="20170809 01:01:42.306"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:42.309" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:42.309" status="PASS" starttime="20170809 01:01:42.309"></status>
</kw>
<msg timestamp="20170809 01:01:42.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:42.309" status="PASS" starttime="20170809 01:01:41.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:42.310" status="PASS" starttime="20170809 01:01:42.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:42.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:42.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:42.311" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:42.311" status="PASS" starttime="20170809 01:01:42.310"></status>
</kw>
<msg timestamp="20170809 01:01:42.311" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:01:42.311" status="PASS" starttime="20170809 01:01:41.975"></status>
</kw>
<msg timestamp="20170809 01:01:42.312" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:01:42.312" status="PASS" starttime="20170809 01:01:41.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:01:42.313" status="PASS" starttime="20170809 01:01:42.312"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:42.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:42.319" status="PASS" starttime="20170809 01:01:42.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:42.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:42.320" status="PASS" starttime="20170809 01:01:42.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:42.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:42.321" status="PASS" starttime="20170809 01:01:42.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:42.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:42.322" status="PASS" starttime="20170809 01:01:42.322"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:42.543" status="PASS" starttime="20170809 01:01:42.323"></status>
</kw>
<msg timestamp="20170809 01:01:42.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:42.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:42.543" status="PASS" starttime="20170809 01:01:42.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:42.544" status="PASS" starttime="20170809 01:01:42.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:42.545" status="PASS" starttime="20170809 01:01:42.544"></status>
</kw>
<status endtime="20170809 01:01:42.545" status="PASS" starttime="20170809 01:01:42.317"></status>
</kw>
<status endtime="20170809 01:01:42.545" status="PASS" starttime="20170809 01:01:42.317"></status>
</kw>
<status endtime="20170809 01:01:42.545" status="PASS" starttime="20170809 01:01:42.316"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:42.546" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:01:42.546" status="PASS" starttime="20170809 01:01:42.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:42.548" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:42.548" status="PASS" starttime="20170809 01:01:42.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:42.549" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:42.549" status="PASS" starttime="20170809 01:01:42.548"></status>
</kw>
<status endtime="20170809 01:01:42.549" status="PASS" starttime="20170809 01:01:42.548"></status>
</kw>
<status endtime="20170809 01:01:42.549" status="PASS" starttime="20170809 01:01:42.546"></status>
</kw>
<status endtime="20170809 01:01:42.549" status="PASS" starttime="20170809 01:01:42.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:42.616" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:01:42.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:42.616" status="PASS" starttime="20170809 01:01:42.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:42.618" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:42.618" status="PASS" starttime="20170809 01:01:42.618"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:42.619" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:42.619" status="PASS" starttime="20170809 01:01:42.619"></status>
</kw>
<status endtime="20170809 01:01:42.619" status="PASS" starttime="20170809 01:01:42.618"></status>
</kw>
<status endtime="20170809 01:01:42.619" status="PASS" starttime="20170809 01:01:42.617"></status>
</kw>
<status endtime="20170809 01:01:42.619" status="PASS" starttime="20170809 01:01:42.617"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:42.620" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:42.620" status="PASS" starttime="20170809 01:01:42.620"></status>
</kw>
<msg timestamp="20170809 01:01:42.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:42.620" status="PASS" starttime="20170809 01:01:42.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:42.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:42.621" status="PASS" starttime="20170809 01:01:42.620"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:42.621" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:42.621" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:42.622" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:42.622" status="PASS" starttime="20170809 01:01:42.621"></status>
</kw>
<msg timestamp="20170809 01:01:42.622" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:42.622" status="PASS" starttime="20170809 01:01:42.314"></status>
</kw>
<msg timestamp="20170809 01:01:42.622" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:42.622" status="PASS" starttime="20170809 01:01:42.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:01:42.623" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:01:42.623" status="FAIL" starttime="20170809 01:01:42.622"></status>
</kw>
<status endtime="20170809 01:01:42.623" status="FAIL" starttime="20170809 01:01:42.313"></status>
</kw>
<status endtime="20170809 01:01:42.623" status="FAIL" starttime="20170809 01:01:41.629"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:52.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:52.629" status="PASS" starttime="20170809 01:01:52.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:52.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:52.629" status="PASS" starttime="20170809 01:01:52.629"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:52.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:52.630" status="PASS" starttime="20170809 01:01:52.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:52.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:52.631" status="PASS" starttime="20170809 01:01:52.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:52.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:52.941" status="PASS" starttime="20170809 01:01:52.631"></status>
</kw>
<msg timestamp="20170809 01:01:52.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:52.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:52.941" status="PASS" starttime="20170809 01:01:52.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:52.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:52.942" status="PASS" starttime="20170809 01:01:52.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:52.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:52.943" status="PASS" starttime="20170809 01:01:52.943"></status>
</kw>
<status endtime="20170809 01:01:52.943" status="PASS" starttime="20170809 01:01:52.627"></status>
</kw>
<status endtime="20170809 01:01:52.943" status="PASS" starttime="20170809 01:01:52.627"></status>
</kw>
<status endtime="20170809 01:01:52.943" status="PASS" starttime="20170809 01:01:52.626"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:52.944" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:01:52.944" status="PASS" starttime="20170809 01:01:52.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:52.946" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:52.946" status="PASS" starttime="20170809 01:01:52.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:52.947" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:52.947" status="PASS" starttime="20170809 01:01:52.947"></status>
</kw>
<status endtime="20170809 01:01:52.947" status="PASS" starttime="20170809 01:01:52.946"></status>
</kw>
<status endtime="20170809 01:01:52.947" status="PASS" starttime="20170809 01:01:52.945"></status>
</kw>
<status endtime="20170809 01:01:52.947" status="PASS" starttime="20170809 01:01:52.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:53.011" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:53.011" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.011" status="PASS" starttime="20170809 01:01:52.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:53.013" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:53.013" status="PASS" starttime="20170809 01:01:53.012"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:53.014" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:53.014" status="PASS" starttime="20170809 01:01:53.014"></status>
</kw>
<status endtime="20170809 01:01:53.014" status="PASS" starttime="20170809 01:01:53.013"></status>
</kw>
<status endtime="20170809 01:01:53.014" status="PASS" starttime="20170809 01:01:53.012"></status>
</kw>
<status endtime="20170809 01:01:53.014" status="PASS" starttime="20170809 01:01:53.011"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:53.015" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:53.015" status="PASS" starttime="20170809 01:01:53.014"></status>
</kw>
<msg timestamp="20170809 01:01:53.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.015" status="PASS" starttime="20170809 01:01:52.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:53.016" status="PASS" starttime="20170809 01:01:53.015"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:53.016" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:53.016" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:53.016" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:53.016" status="PASS" starttime="20170809 01:01:53.016"></status>
</kw>
<msg timestamp="20170809 01:01:53.017" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:01:53.017" status="PASS" starttime="20170809 01:01:52.625"></status>
</kw>
<msg timestamp="20170809 01:01:53.017" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:01:53.017" status="PASS" starttime="20170809 01:01:52.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:01:53.017" status="PASS" starttime="20170809 01:01:53.017"></status>
</kw>
<status endtime="20170809 01:01:53.018" status="PASS" starttime="20170809 01:01:52.624"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:53.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:53.022" status="PASS" starttime="20170809 01:01:53.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:53.023" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:53.023" status="PASS" starttime="20170809 01:01:53.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:53.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:53.023" status="PASS" starttime="20170809 01:01:53.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:53.024" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:53.024" status="PASS" starttime="20170809 01:01:53.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:53.203" status="PASS" starttime="20170809 01:01:53.025"></status>
</kw>
<msg timestamp="20170809 01:01:53.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:53.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.203" status="PASS" starttime="20170809 01:01:53.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:53.204" status="PASS" starttime="20170809 01:01:53.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:53.205" status="PASS" starttime="20170809 01:01:53.204"></status>
</kw>
<status endtime="20170809 01:01:53.205" status="PASS" starttime="20170809 01:01:53.020"></status>
</kw>
<status endtime="20170809 01:01:53.205" status="PASS" starttime="20170809 01:01:53.020"></status>
</kw>
<status endtime="20170809 01:01:53.205" status="PASS" starttime="20170809 01:01:53.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:53.206" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:01:53.206" status="PASS" starttime="20170809 01:01:53.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:53.208" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:53.208" status="PASS" starttime="20170809 01:01:53.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:53.209" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:01:53.209" status="PASS" starttime="20170809 01:01:53.208"></status>
</kw>
<status endtime="20170809 01:01:53.209" status="PASS" starttime="20170809 01:01:53.208"></status>
</kw>
<status endtime="20170809 01:01:53.209" status="PASS" starttime="20170809 01:01:53.206"></status>
</kw>
<status endtime="20170809 01:01:53.209" status="PASS" starttime="20170809 01:01:53.206"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:53.298" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:01:53.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.298" status="PASS" starttime="20170809 01:01:53.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:53.300" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:53.300" status="PASS" starttime="20170809 01:01:53.300"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:53.301" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:53.301" status="PASS" starttime="20170809 01:01:53.301"></status>
</kw>
<status endtime="20170809 01:01:53.301" status="PASS" starttime="20170809 01:01:53.300"></status>
</kw>
<status endtime="20170809 01:01:53.302" status="PASS" starttime="20170809 01:01:53.299"></status>
</kw>
<status endtime="20170809 01:01:53.302" status="PASS" starttime="20170809 01:01:53.299"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:53.302" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:53.302" status="PASS" starttime="20170809 01:01:53.302"></status>
</kw>
<msg timestamp="20170809 01:01:53.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.302" status="PASS" starttime="20170809 01:01:53.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:53.303" status="PASS" starttime="20170809 01:01:53.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:53.303" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:53.304" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:53.304" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:53.304" status="PASS" starttime="20170809 01:01:53.303"></status>
</kw>
<msg timestamp="20170809 01:01:53.304" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:01:53.304" status="PASS" starttime="20170809 01:01:53.018"></status>
</kw>
<msg timestamp="20170809 01:01:53.304" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:01:53.304" status="PASS" starttime="20170809 01:01:53.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:01:53.305" status="PASS" starttime="20170809 01:01:53.305"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:01:53.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:01:53.309" status="PASS" starttime="20170809 01:01:53.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:01:53.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:01:53.310" status="PASS" starttime="20170809 01:01:53.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:01:53.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:01:53.311" status="PASS" starttime="20170809 01:01:53.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:01:53.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:01:53.311" status="PASS" starttime="20170809 01:01:53.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.499" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:01:53.499" status="PASS" starttime="20170809 01:01:53.312"></status>
</kw>
<msg timestamp="20170809 01:01:53.499" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:01:53.499" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.500" status="PASS" starttime="20170809 01:01:53.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.500" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:53.500" status="PASS" starttime="20170809 01:01:53.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:53.501" status="PASS" starttime="20170809 01:01:53.501"></status>
</kw>
<status endtime="20170809 01:01:53.501" status="PASS" starttime="20170809 01:01:53.308"></status>
</kw>
<status endtime="20170809 01:01:53.501" status="PASS" starttime="20170809 01:01:53.308"></status>
</kw>
<status endtime="20170809 01:01:53.501" status="PASS" starttime="20170809 01:01:53.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:01:53.502" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:01:53.502" status="PASS" starttime="20170809 01:01:53.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:53.504" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:53.504" status="PASS" starttime="20170809 01:01:53.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:53.505" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:01:53.505" status="PASS" starttime="20170809 01:01:53.505"></status>
</kw>
<status endtime="20170809 01:01:53.505" status="PASS" starttime="20170809 01:01:53.504"></status>
</kw>
<status endtime="20170809 01:01:53.505" status="PASS" starttime="20170809 01:01:53.503"></status>
</kw>
<status endtime="20170809 01:01:53.505" status="PASS" starttime="20170809 01:01:53.502"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:01:53.572" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:01:53.572" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.572" status="PASS" starttime="20170809 01:01:53.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:01:53.574" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:53.574" status="PASS" starttime="20170809 01:01:53.573"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:01:53.575" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:01:53.576" status="PASS" starttime="20170809 01:01:53.575"></status>
</kw>
<status endtime="20170809 01:01:53.576" status="PASS" starttime="20170809 01:01:53.574"></status>
</kw>
<status endtime="20170809 01:01:53.576" status="PASS" starttime="20170809 01:01:53.573"></status>
</kw>
<status endtime="20170809 01:01:53.576" status="PASS" starttime="20170809 01:01:53.573"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:01:53.576" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:01:53.576" status="PASS" starttime="20170809 01:01:53.576"></status>
</kw>
<msg timestamp="20170809 01:01:53.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:01:53.577" status="PASS" starttime="20170809 01:01:53.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:01:53.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:01:53.577" status="PASS" starttime="20170809 01:01:53.577"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:01:53.578" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:01:53.578" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:01:53.578" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:01:53.578" status="PASS" starttime="20170809 01:01:53.578"></status>
</kw>
<msg timestamp="20170809 01:01:53.578" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:53.578" status="PASS" starttime="20170809 01:01:53.306"></status>
</kw>
<msg timestamp="20170809 01:01:53.579" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:01:53.579" status="PASS" starttime="20170809 01:01:53.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:01:53.579" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:01:53.579" status="FAIL" starttime="20170809 01:01:53.579"></status>
</kw>
<status endtime="20170809 01:01:53.580" status="FAIL" starttime="20170809 01:01:53.305"></status>
</kw>
<status endtime="20170809 01:01:53.580" status="FAIL" starttime="20170809 01:01:52.624"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:03.585" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:03.585" status="PASS" starttime="20170809 01:02:03.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:03.586" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:03.586" status="PASS" starttime="20170809 01:02:03.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:03.586" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:03.586" status="PASS" starttime="20170809 01:02:03.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:03.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:03.587" status="PASS" starttime="20170809 01:02:03.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:03.773" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:03.773" status="PASS" starttime="20170809 01:02:03.588"></status>
</kw>
<msg timestamp="20170809 01:02:03.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:03.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:03.774" status="PASS" starttime="20170809 01:02:03.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:03.774" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:03.774" status="PASS" starttime="20170809 01:02:03.774"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:03.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:03.775" status="PASS" starttime="20170809 01:02:03.775"></status>
</kw>
<status endtime="20170809 01:02:03.775" status="PASS" starttime="20170809 01:02:03.584"></status>
</kw>
<status endtime="20170809 01:02:03.775" status="PASS" starttime="20170809 01:02:03.583"></status>
</kw>
<status endtime="20170809 01:02:03.775" status="PASS" starttime="20170809 01:02:03.583"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:03.776" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:02:03.776" status="PASS" starttime="20170809 01:02:03.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:03.778" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:03.778" status="PASS" starttime="20170809 01:02:03.778"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:03.779" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:03.779" status="PASS" starttime="20170809 01:02:03.779"></status>
</kw>
<status endtime="20170809 01:02:03.779" status="PASS" starttime="20170809 01:02:03.779"></status>
</kw>
<status endtime="20170809 01:02:03.780" status="PASS" starttime="20170809 01:02:03.777"></status>
</kw>
<status endtime="20170809 01:02:03.780" status="PASS" starttime="20170809 01:02:03.777"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:03.844" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:03.844" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:03.844" status="PASS" starttime="20170809 01:02:03.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:03.846" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:03.846" status="PASS" starttime="20170809 01:02:03.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:03.847" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:03.847" status="PASS" starttime="20170809 01:02:03.846"></status>
</kw>
<status endtime="20170809 01:02:03.847" status="PASS" starttime="20170809 01:02:03.846"></status>
</kw>
<status endtime="20170809 01:02:03.847" status="PASS" starttime="20170809 01:02:03.845"></status>
</kw>
<status endtime="20170809 01:02:03.847" status="PASS" starttime="20170809 01:02:03.844"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:03.847" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:03.848" status="PASS" starttime="20170809 01:02:03.847"></status>
</kw>
<msg timestamp="20170809 01:02:03.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:03.848" status="PASS" starttime="20170809 01:02:03.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:03.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:03.849" status="PASS" starttime="20170809 01:02:03.848"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:03.849" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:03.849" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:03.849" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:03.849" status="PASS" starttime="20170809 01:02:03.849"></status>
</kw>
<msg timestamp="20170809 01:02:03.850" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:02:03.850" status="PASS" starttime="20170809 01:02:03.582"></status>
</kw>
<msg timestamp="20170809 01:02:03.850" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:02:03.850" status="PASS" starttime="20170809 01:02:03.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:02:03.850" status="PASS" starttime="20170809 01:02:03.850"></status>
</kw>
<status endtime="20170809 01:02:03.851" status="PASS" starttime="20170809 01:02:03.581"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:03.854" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:03.855" status="PASS" starttime="20170809 01:02:03.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:03.855" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:03.855" status="PASS" starttime="20170809 01:02:03.855"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:03.856" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:03.856" status="PASS" starttime="20170809 01:02:03.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:03.857" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:03.857" status="PASS" starttime="20170809 01:02:03.856"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.033" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:04.033" status="PASS" starttime="20170809 01:02:03.857"></status>
</kw>
<msg timestamp="20170809 01:02:04.033" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:04.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:04.034" status="PASS" starttime="20170809 01:02:03.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:04.034" status="PASS" starttime="20170809 01:02:04.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:04.035" status="PASS" starttime="20170809 01:02:04.035"></status>
</kw>
<status endtime="20170809 01:02:04.035" status="PASS" starttime="20170809 01:02:03.853"></status>
</kw>
<status endtime="20170809 01:02:04.035" status="PASS" starttime="20170809 01:02:03.853"></status>
</kw>
<status endtime="20170809 01:02:04.035" status="PASS" starttime="20170809 01:02:03.852"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:04.036" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:02:04.036" status="PASS" starttime="20170809 01:02:04.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:04.038" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:04.038" status="PASS" starttime="20170809 01:02:04.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:04.039" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:04.039" status="PASS" starttime="20170809 01:02:04.039"></status>
</kw>
<status endtime="20170809 01:02:04.039" status="PASS" starttime="20170809 01:02:04.038"></status>
</kw>
<status endtime="20170809 01:02:04.039" status="PASS" starttime="20170809 01:02:04.037"></status>
</kw>
<status endtime="20170809 01:02:04.039" status="PASS" starttime="20170809 01:02:04.036"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:04.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:04.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:04.138" status="PASS" starttime="20170809 01:02:04.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:04.140" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:04.140" status="PASS" starttime="20170809 01:02:04.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:04.141" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:04.141" status="PASS" starttime="20170809 01:02:04.141"></status>
</kw>
<status endtime="20170809 01:02:04.141" status="PASS" starttime="20170809 01:02:04.140"></status>
</kw>
<status endtime="20170809 01:02:04.141" status="PASS" starttime="20170809 01:02:04.139"></status>
</kw>
<status endtime="20170809 01:02:04.141" status="PASS" starttime="20170809 01:02:04.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:04.142" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:04.142" status="PASS" starttime="20170809 01:02:04.142"></status>
</kw>
<msg timestamp="20170809 01:02:04.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:04.142" status="PASS" starttime="20170809 01:02:03.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:04.143" status="PASS" starttime="20170809 01:02:04.142"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:04.143" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:04.143" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:04.144" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:04.144" status="PASS" starttime="20170809 01:02:04.143"></status>
</kw>
<msg timestamp="20170809 01:02:04.144" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:02:04.144" status="PASS" starttime="20170809 01:02:03.851"></status>
</kw>
<msg timestamp="20170809 01:02:04.144" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:02:04.144" status="PASS" starttime="20170809 01:02:03.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:02:04.145" status="PASS" starttime="20170809 01:02:04.144"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:04.149" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:04.149" status="PASS" starttime="20170809 01:02:04.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:04.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:04.150" status="PASS" starttime="20170809 01:02:04.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:04.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:04.150" status="PASS" starttime="20170809 01:02:04.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:04.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:04.151" status="PASS" starttime="20170809 01:02:04.151"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:04.338" status="PASS" starttime="20170809 01:02:04.152"></status>
</kw>
<msg timestamp="20170809 01:02:04.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:04.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:04.338" status="PASS" starttime="20170809 01:02:04.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:04.339" status="PASS" starttime="20170809 01:02:04.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:04.340" status="PASS" starttime="20170809 01:02:04.339"></status>
</kw>
<status endtime="20170809 01:02:04.340" status="PASS" starttime="20170809 01:02:04.148"></status>
</kw>
<status endtime="20170809 01:02:04.340" status="PASS" starttime="20170809 01:02:04.148"></status>
</kw>
<status endtime="20170809 01:02:04.340" status="PASS" starttime="20170809 01:02:04.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:04.341" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:02:04.341" status="PASS" starttime="20170809 01:02:04.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:04.346" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:04.346" status="PASS" starttime="20170809 01:02:04.342"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:04.347" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:04.347" status="PASS" starttime="20170809 01:02:04.346"></status>
</kw>
<status endtime="20170809 01:02:04.347" status="PASS" starttime="20170809 01:02:04.346"></status>
</kw>
<status endtime="20170809 01:02:04.347" status="PASS" starttime="20170809 01:02:04.342"></status>
</kw>
<status endtime="20170809 01:02:04.347" status="PASS" starttime="20170809 01:02:04.341"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:04.462" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:02:04.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:04.463" status="PASS" starttime="20170809 01:02:04.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:04.464" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:04.464" status="PASS" starttime="20170809 01:02:04.464"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:04.465" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:04.465" status="PASS" starttime="20170809 01:02:04.465"></status>
</kw>
<status endtime="20170809 01:02:04.466" status="PASS" starttime="20170809 01:02:04.465"></status>
</kw>
<status endtime="20170809 01:02:04.466" status="PASS" starttime="20170809 01:02:04.463"></status>
</kw>
<status endtime="20170809 01:02:04.466" status="PASS" starttime="20170809 01:02:04.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:04.466" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:04.466" status="PASS" starttime="20170809 01:02:04.466"></status>
</kw>
<msg timestamp="20170809 01:02:04.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:04.467" status="PASS" starttime="20170809 01:02:04.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:04.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:04.467" status="PASS" starttime="20170809 01:02:04.467"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:04.468" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:04.468" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:04.468" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:04.468" status="PASS" starttime="20170809 01:02:04.467"></status>
</kw>
<msg timestamp="20170809 01:02:04.468" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:04.468" status="PASS" starttime="20170809 01:02:04.146"></status>
</kw>
<msg timestamp="20170809 01:02:04.468" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:04.468" status="PASS" starttime="20170809 01:02:04.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:02:04.469" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:02:04.469" status="FAIL" starttime="20170809 01:02:04.469"></status>
</kw>
<status endtime="20170809 01:02:04.469" status="FAIL" starttime="20170809 01:02:04.145"></status>
</kw>
<status endtime="20170809 01:02:04.469" status="FAIL" starttime="20170809 01:02:03.580"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:14.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:14.475" status="PASS" starttime="20170809 01:02:14.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:14.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:14.476" status="PASS" starttime="20170809 01:02:14.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:14.477" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:14.477" status="PASS" starttime="20170809 01:02:14.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:14.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:14.478" status="PASS" starttime="20170809 01:02:14.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:14.711" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:14.711" status="PASS" starttime="20170809 01:02:14.479"></status>
</kw>
<msg timestamp="20170809 01:02:14.711" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:14.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:14.711" status="PASS" starttime="20170809 01:02:14.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:14.712" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:14.712" status="PASS" starttime="20170809 01:02:14.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:14.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:14.713" status="PASS" starttime="20170809 01:02:14.712"></status>
</kw>
<status endtime="20170809 01:02:14.713" status="PASS" starttime="20170809 01:02:14.474"></status>
</kw>
<status endtime="20170809 01:02:14.713" status="PASS" starttime="20170809 01:02:14.473"></status>
</kw>
<status endtime="20170809 01:02:14.713" status="PASS" starttime="20170809 01:02:14.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:14.714" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:02:14.714" status="PASS" starttime="20170809 01:02:14.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:14.716" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:14.716" status="PASS" starttime="20170809 01:02:14.715"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:14.717" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:14.717" status="PASS" starttime="20170809 01:02:14.717"></status>
</kw>
<status endtime="20170809 01:02:14.717" status="PASS" starttime="20170809 01:02:14.716"></status>
</kw>
<status endtime="20170809 01:02:14.717" status="PASS" starttime="20170809 01:02:14.715"></status>
</kw>
<status endtime="20170809 01:02:14.717" status="PASS" starttime="20170809 01:02:14.714"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:14.781" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:14.781" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:14.781" status="PASS" starttime="20170809 01:02:14.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:14.783" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:14.783" status="PASS" starttime="20170809 01:02:14.783"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:14.784" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:14.784" status="PASS" starttime="20170809 01:02:14.784"></status>
</kw>
<status endtime="20170809 01:02:14.784" status="PASS" starttime="20170809 01:02:14.783"></status>
</kw>
<status endtime="20170809 01:02:14.784" status="PASS" starttime="20170809 01:02:14.782"></status>
</kw>
<status endtime="20170809 01:02:14.785" status="PASS" starttime="20170809 01:02:14.782"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:14.785" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:14.785" status="PASS" starttime="20170809 01:02:14.785"></status>
</kw>
<msg timestamp="20170809 01:02:14.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:14.785" status="PASS" starttime="20170809 01:02:14.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:14.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:14.786" status="PASS" starttime="20170809 01:02:14.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:14.786" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:14.786" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:14.787" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:14.787" status="PASS" starttime="20170809 01:02:14.786"></status>
</kw>
<msg timestamp="20170809 01:02:14.787" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:02:14.787" status="PASS" starttime="20170809 01:02:14.471"></status>
</kw>
<msg timestamp="20170809 01:02:14.787" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:02:14.787" status="PASS" starttime="20170809 01:02:14.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:02:14.788" status="PASS" starttime="20170809 01:02:14.788"></status>
</kw>
<status endtime="20170809 01:02:14.788" status="PASS" starttime="20170809 01:02:14.471"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:14.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:14.792" status="PASS" starttime="20170809 01:02:14.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:14.793" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:14.793" status="PASS" starttime="20170809 01:02:14.793"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:14.794" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:14.794" status="PASS" starttime="20170809 01:02:14.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:14.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:14.794" status="PASS" starttime="20170809 01:02:14.794"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:14.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:14.970" status="PASS" starttime="20170809 01:02:14.795"></status>
</kw>
<msg timestamp="20170809 01:02:14.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:14.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:14.971" status="PASS" starttime="20170809 01:02:14.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:14.971" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:14.971" status="PASS" starttime="20170809 01:02:14.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:14.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:14.972" status="PASS" starttime="20170809 01:02:14.972"></status>
</kw>
<status endtime="20170809 01:02:14.972" status="PASS" starttime="20170809 01:02:14.791"></status>
</kw>
<status endtime="20170809 01:02:14.972" status="PASS" starttime="20170809 01:02:14.790"></status>
</kw>
<status endtime="20170809 01:02:14.972" status="PASS" starttime="20170809 01:02:14.790"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:14.973" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:02:14.973" status="PASS" starttime="20170809 01:02:14.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:14.975" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:14.975" status="PASS" starttime="20170809 01:02:14.975"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:14.976" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:14.976" status="PASS" starttime="20170809 01:02:14.976"></status>
</kw>
<status endtime="20170809 01:02:14.976" status="PASS" starttime="20170809 01:02:14.975"></status>
</kw>
<status endtime="20170809 01:02:14.977" status="PASS" starttime="20170809 01:02:14.974"></status>
</kw>
<status endtime="20170809 01:02:14.977" status="PASS" starttime="20170809 01:02:14.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:15.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:15.065" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:15.065" status="PASS" starttime="20170809 01:02:14.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:15.067" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:15.067" status="PASS" starttime="20170809 01:02:15.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:15.068" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:15.068" status="PASS" starttime="20170809 01:02:15.068"></status>
</kw>
<status endtime="20170809 01:02:15.068" status="PASS" starttime="20170809 01:02:15.067"></status>
</kw>
<status endtime="20170809 01:02:15.068" status="PASS" starttime="20170809 01:02:15.066"></status>
</kw>
<status endtime="20170809 01:02:15.069" status="PASS" starttime="20170809 01:02:15.066"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:15.069" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:15.069" status="PASS" starttime="20170809 01:02:15.069"></status>
</kw>
<msg timestamp="20170809 01:02:15.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:15.069" status="PASS" starttime="20170809 01:02:14.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:15.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:15.070" status="PASS" starttime="20170809 01:02:15.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:15.070" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:15.070" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:15.071" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:15.071" status="PASS" starttime="20170809 01:02:15.070"></status>
</kw>
<msg timestamp="20170809 01:02:15.071" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:02:15.071" status="PASS" starttime="20170809 01:02:14.789"></status>
</kw>
<msg timestamp="20170809 01:02:15.071" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:02:15.071" status="PASS" starttime="20170809 01:02:14.788"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:02:15.072" status="PASS" starttime="20170809 01:02:15.072"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:15.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:15.076" status="PASS" starttime="20170809 01:02:15.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:15.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:15.077" status="PASS" starttime="20170809 01:02:15.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:15.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:15.078" status="PASS" starttime="20170809 01:02:15.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:15.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:15.078" status="PASS" starttime="20170809 01:02:15.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:15.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:15.254" status="PASS" starttime="20170809 01:02:15.079"></status>
</kw>
<msg timestamp="20170809 01:02:15.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:15.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:15.254" status="PASS" starttime="20170809 01:02:15.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:15.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:15.255" status="PASS" starttime="20170809 01:02:15.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:15.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:15.255" status="PASS" starttime="20170809 01:02:15.255"></status>
</kw>
<status endtime="20170809 01:02:15.256" status="PASS" starttime="20170809 01:02:15.075"></status>
</kw>
<status endtime="20170809 01:02:15.256" status="PASS" starttime="20170809 01:02:15.075"></status>
</kw>
<status endtime="20170809 01:02:15.256" status="PASS" starttime="20170809 01:02:15.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:15.256" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:02:15.256" status="PASS" starttime="20170809 01:02:15.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:15.259" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:15.259" status="PASS" starttime="20170809 01:02:15.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:15.260" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:15.260" status="PASS" starttime="20170809 01:02:15.259"></status>
</kw>
<status endtime="20170809 01:02:15.260" status="PASS" starttime="20170809 01:02:15.259"></status>
</kw>
<status endtime="20170809 01:02:15.260" status="PASS" starttime="20170809 01:02:15.257"></status>
</kw>
<status endtime="20170809 01:02:15.260" status="PASS" starttime="20170809 01:02:15.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:15.326" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:02:15.326" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:15.326" status="PASS" starttime="20170809 01:02:15.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:15.328" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:15.328" status="PASS" starttime="20170809 01:02:15.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:15.329" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:15.329" status="PASS" starttime="20170809 01:02:15.329"></status>
</kw>
<status endtime="20170809 01:02:15.329" status="PASS" starttime="20170809 01:02:15.328"></status>
</kw>
<status endtime="20170809 01:02:15.329" status="PASS" starttime="20170809 01:02:15.327"></status>
</kw>
<status endtime="20170809 01:02:15.329" status="PASS" starttime="20170809 01:02:15.327"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:15.330" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:15.330" status="PASS" starttime="20170809 01:02:15.329"></status>
</kw>
<msg timestamp="20170809 01:02:15.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:15.330" status="PASS" starttime="20170809 01:02:15.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:15.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:15.331" status="PASS" starttime="20170809 01:02:15.330"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:15.331" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:15.331" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:15.331" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:15.331" status="PASS" starttime="20170809 01:02:15.331"></status>
</kw>
<msg timestamp="20170809 01:02:15.332" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:15.332" status="PASS" starttime="20170809 01:02:15.073"></status>
</kw>
<msg timestamp="20170809 01:02:15.332" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:15.332" status="PASS" starttime="20170809 01:02:15.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:02:15.333" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:02:15.333" status="FAIL" starttime="20170809 01:02:15.332"></status>
</kw>
<status endtime="20170809 01:02:15.333" status="FAIL" starttime="20170809 01:02:15.072"></status>
</kw>
<status endtime="20170809 01:02:15.333" status="FAIL" starttime="20170809 01:02:14.470"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:25.338" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:25.338" status="PASS" starttime="20170809 01:02:25.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:25.339" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:25.339" status="PASS" starttime="20170809 01:02:25.339"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:25.340" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:25.340" status="PASS" starttime="20170809 01:02:25.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:25.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:25.340" status="PASS" starttime="20170809 01:02:25.340"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:25.516" status="PASS" starttime="20170809 01:02:25.341"></status>
</kw>
<msg timestamp="20170809 01:02:25.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:25.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:25.516" status="PASS" starttime="20170809 01:02:25.341"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:25.517" status="PASS" starttime="20170809 01:02:25.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:25.518" status="PASS" starttime="20170809 01:02:25.517"></status>
</kw>
<status endtime="20170809 01:02:25.518" status="PASS" starttime="20170809 01:02:25.337"></status>
</kw>
<status endtime="20170809 01:02:25.518" status="PASS" starttime="20170809 01:02:25.337"></status>
</kw>
<status endtime="20170809 01:02:25.518" status="PASS" starttime="20170809 01:02:25.336"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:25.519" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:02:25.519" status="PASS" starttime="20170809 01:02:25.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:25.521" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:25.522" status="PASS" starttime="20170809 01:02:25.521"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:25.523" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:25.523" status="PASS" starttime="20170809 01:02:25.523"></status>
</kw>
<status endtime="20170809 01:02:25.523" status="PASS" starttime="20170809 01:02:25.522"></status>
</kw>
<status endtime="20170809 01:02:25.523" status="PASS" starttime="20170809 01:02:25.520"></status>
</kw>
<status endtime="20170809 01:02:25.523" status="PASS" starttime="20170809 01:02:25.519"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:25.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:25.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:25.601" status="PASS" starttime="20170809 01:02:25.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:25.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:25.602" status="PASS" starttime="20170809 01:02:25.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:25.603" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:25.603" status="PASS" starttime="20170809 01:02:25.603"></status>
</kw>
<status endtime="20170809 01:02:25.604" status="PASS" starttime="20170809 01:02:25.603"></status>
</kw>
<status endtime="20170809 01:02:25.604" status="PASS" starttime="20170809 01:02:25.601"></status>
</kw>
<status endtime="20170809 01:02:25.604" status="PASS" starttime="20170809 01:02:25.601"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:25.604" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:25.604" status="PASS" starttime="20170809 01:02:25.604"></status>
</kw>
<msg timestamp="20170809 01:02:25.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:25.604" status="PASS" starttime="20170809 01:02:25.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:25.605" status="PASS" starttime="20170809 01:02:25.605"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:25.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:25.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:25.606" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:25.606" status="PASS" starttime="20170809 01:02:25.605"></status>
</kw>
<msg timestamp="20170809 01:02:25.606" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:02:25.606" status="PASS" starttime="20170809 01:02:25.335"></status>
</kw>
<msg timestamp="20170809 01:02:25.606" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:02:25.606" status="PASS" starttime="20170809 01:02:25.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:02:25.607" status="PASS" starttime="20170809 01:02:25.607"></status>
</kw>
<status endtime="20170809 01:02:25.607" status="PASS" starttime="20170809 01:02:25.334"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:25.611" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:25.611" status="PASS" starttime="20170809 01:02:25.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:25.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:25.612" status="PASS" starttime="20170809 01:02:25.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:25.613" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:25.613" status="PASS" starttime="20170809 01:02:25.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:25.613" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:25.613" status="PASS" starttime="20170809 01:02:25.613"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.814" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:25.814" status="PASS" starttime="20170809 01:02:25.614"></status>
</kw>
<msg timestamp="20170809 01:02:25.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:25.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:25.814" status="PASS" starttime="20170809 01:02:25.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.815" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:25.815" status="PASS" starttime="20170809 01:02:25.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:25.815" status="PASS" starttime="20170809 01:02:25.815"></status>
</kw>
<status endtime="20170809 01:02:25.816" status="PASS" starttime="20170809 01:02:25.610"></status>
</kw>
<status endtime="20170809 01:02:25.816" status="PASS" starttime="20170809 01:02:25.609"></status>
</kw>
<status endtime="20170809 01:02:25.816" status="PASS" starttime="20170809 01:02:25.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:25.816" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:02:25.816" status="PASS" starttime="20170809 01:02:25.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:25.818" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:25.818" status="PASS" starttime="20170809 01:02:25.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:25.819" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:25.819" status="PASS" starttime="20170809 01:02:25.819"></status>
</kw>
<status endtime="20170809 01:02:25.820" status="PASS" starttime="20170809 01:02:25.819"></status>
</kw>
<status endtime="20170809 01:02:25.820" status="PASS" starttime="20170809 01:02:25.817"></status>
</kw>
<status endtime="20170809 01:02:25.820" status="PASS" starttime="20170809 01:02:25.817"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:25.924" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:25.924" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:25.924" status="PASS" starttime="20170809 01:02:25.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:25.926" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:25.926" status="PASS" starttime="20170809 01:02:25.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:25.927" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:25.927" status="PASS" starttime="20170809 01:02:25.927"></status>
</kw>
<status endtime="20170809 01:02:25.927" status="PASS" starttime="20170809 01:02:25.926"></status>
</kw>
<status endtime="20170809 01:02:25.927" status="PASS" starttime="20170809 01:02:25.925"></status>
</kw>
<status endtime="20170809 01:02:25.927" status="PASS" starttime="20170809 01:02:25.924"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:25.928" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:25.928" status="PASS" starttime="20170809 01:02:25.927"></status>
</kw>
<msg timestamp="20170809 01:02:25.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:25.928" status="PASS" starttime="20170809 01:02:25.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:25.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:25.929" status="PASS" starttime="20170809 01:02:25.928"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:25.929" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:25.929" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:25.929" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:25.929" status="PASS" starttime="20170809 01:02:25.929"></status>
</kw>
<msg timestamp="20170809 01:02:25.930" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:02:25.930" status="PASS" starttime="20170809 01:02:25.608"></status>
</kw>
<msg timestamp="20170809 01:02:25.930" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:02:25.930" status="PASS" starttime="20170809 01:02:25.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:02:25.931" status="PASS" starttime="20170809 01:02:25.930"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:25.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:25.935" status="PASS" starttime="20170809 01:02:25.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:25.936" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:25.936" status="PASS" starttime="20170809 01:02:25.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:25.936" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:25.936" status="PASS" starttime="20170809 01:02:25.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:25.937" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:25.937" status="PASS" starttime="20170809 01:02:25.937"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:26.176" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:26.176" status="PASS" starttime="20170809 01:02:25.938"></status>
</kw>
<msg timestamp="20170809 01:02:26.176" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:26.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:26.176" status="PASS" starttime="20170809 01:02:25.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:26.177" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:26.177" status="PASS" starttime="20170809 01:02:26.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:26.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:26.178" status="PASS" starttime="20170809 01:02:26.177"></status>
</kw>
<status endtime="20170809 01:02:26.178" status="PASS" starttime="20170809 01:02:25.934"></status>
</kw>
<status endtime="20170809 01:02:26.178" status="PASS" starttime="20170809 01:02:25.934"></status>
</kw>
<status endtime="20170809 01:02:26.178" status="PASS" starttime="20170809 01:02:25.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:26.178" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:02:26.178" status="PASS" starttime="20170809 01:02:26.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:26.181" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:26.181" status="PASS" starttime="20170809 01:02:26.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:26.182" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:26.182" status="PASS" starttime="20170809 01:02:26.182"></status>
</kw>
<status endtime="20170809 01:02:26.182" status="PASS" starttime="20170809 01:02:26.181"></status>
</kw>
<status endtime="20170809 01:02:26.182" status="PASS" starttime="20170809 01:02:26.179"></status>
</kw>
<status endtime="20170809 01:02:26.182" status="PASS" starttime="20170809 01:02:26.179"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:26.265" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:02:26.265" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:26.265" status="PASS" starttime="20170809 01:02:26.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:26.267" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:26.267" status="PASS" starttime="20170809 01:02:26.267"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:26.268" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:26.268" status="PASS" starttime="20170809 01:02:26.268"></status>
</kw>
<status endtime="20170809 01:02:26.268" status="PASS" starttime="20170809 01:02:26.267"></status>
</kw>
<status endtime="20170809 01:02:26.268" status="PASS" starttime="20170809 01:02:26.266"></status>
</kw>
<status endtime="20170809 01:02:26.268" status="PASS" starttime="20170809 01:02:26.266"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:26.269" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:26.269" status="PASS" starttime="20170809 01:02:26.269"></status>
</kw>
<msg timestamp="20170809 01:02:26.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:26.269" status="PASS" starttime="20170809 01:02:25.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:26.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:26.270" status="PASS" starttime="20170809 01:02:26.269"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:26.270" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:26.270" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:26.271" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:26.271" status="PASS" starttime="20170809 01:02:26.270"></status>
</kw>
<msg timestamp="20170809 01:02:26.271" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:26.271" status="PASS" starttime="20170809 01:02:25.932"></status>
</kw>
<msg timestamp="20170809 01:02:26.271" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:26.271" status="PASS" starttime="20170809 01:02:25.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:02:26.272" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:02:26.272" status="FAIL" starttime="20170809 01:02:26.271"></status>
</kw>
<status endtime="20170809 01:02:26.272" status="FAIL" starttime="20170809 01:02:25.931"></status>
</kw>
<status endtime="20170809 01:02:26.272" status="FAIL" starttime="20170809 01:02:25.333"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:36.277" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:36.278" status="PASS" starttime="20170809 01:02:36.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:36.278" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:36.278" status="PASS" starttime="20170809 01:02:36.278"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:36.279" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:36.279" status="PASS" starttime="20170809 01:02:36.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:36.280" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:36.280" status="PASS" starttime="20170809 01:02:36.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:37.609" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:37.609" status="PASS" starttime="20170809 01:02:36.280"></status>
</kw>
<msg timestamp="20170809 01:02:37.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:37.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:37.609" status="PASS" starttime="20170809 01:02:36.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:37.610" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:37.610" status="PASS" starttime="20170809 01:02:37.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:37.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:37.611" status="PASS" starttime="20170809 01:02:37.610"></status>
</kw>
<status endtime="20170809 01:02:37.611" status="PASS" starttime="20170809 01:02:36.276"></status>
</kw>
<status endtime="20170809 01:02:37.611" status="PASS" starttime="20170809 01:02:36.276"></status>
</kw>
<status endtime="20170809 01:02:37.611" status="PASS" starttime="20170809 01:02:36.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:37.612" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:02:37.612" status="PASS" starttime="20170809 01:02:37.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:37.615" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:37.615" status="PASS" starttime="20170809 01:02:37.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:37.617" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:37.617" status="PASS" starttime="20170809 01:02:37.616"></status>
</kw>
<status endtime="20170809 01:02:37.617" status="PASS" starttime="20170809 01:02:37.615"></status>
</kw>
<status endtime="20170809 01:02:37.617" status="PASS" starttime="20170809 01:02:37.613"></status>
</kw>
<status endtime="20170809 01:02:37.617" status="PASS" starttime="20170809 01:02:37.613"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:42.068" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:42.068" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:42.068" status="PASS" starttime="20170809 01:02:37.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:42.070" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:42.070" status="PASS" starttime="20170809 01:02:42.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:42.071" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:42.071" status="PASS" starttime="20170809 01:02:42.071"></status>
</kw>
<status endtime="20170809 01:02:42.072" status="PASS" starttime="20170809 01:02:42.071"></status>
</kw>
<status endtime="20170809 01:02:42.072" status="PASS" starttime="20170809 01:02:42.069"></status>
</kw>
<status endtime="20170809 01:02:42.072" status="PASS" starttime="20170809 01:02:42.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:42.072" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:42.072" status="PASS" starttime="20170809 01:02:42.072"></status>
</kw>
<msg timestamp="20170809 01:02:42.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:42.073" status="PASS" starttime="20170809 01:02:36.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:42.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:42.073" status="PASS" starttime="20170809 01:02:42.073"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:42.074" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:42.074" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:42.074" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:42.074" status="PASS" starttime="20170809 01:02:42.073"></status>
</kw>
<msg timestamp="20170809 01:02:42.074" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:02:42.074" status="PASS" starttime="20170809 01:02:36.274"></status>
</kw>
<msg timestamp="20170809 01:02:42.075" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:02:42.075" status="PASS" starttime="20170809 01:02:36.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:02:42.075" status="PASS" starttime="20170809 01:02:42.075"></status>
</kw>
<status endtime="20170809 01:02:42.075" status="PASS" starttime="20170809 01:02:36.273"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:42.079" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:42.080" status="PASS" starttime="20170809 01:02:42.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:42.080" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:42.080" status="PASS" starttime="20170809 01:02:42.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:42.081" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:42.081" status="PASS" starttime="20170809 01:02:42.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:42.082" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:42.082" status="PASS" starttime="20170809 01:02:42.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:42.522" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:42.522" status="PASS" starttime="20170809 01:02:42.082"></status>
</kw>
<msg timestamp="20170809 01:02:42.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:42.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:42.522" status="PASS" starttime="20170809 01:02:42.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:42.523" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:42.523" status="PASS" starttime="20170809 01:02:42.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:42.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:42.524" status="PASS" starttime="20170809 01:02:42.523"></status>
</kw>
<status endtime="20170809 01:02:42.524" status="PASS" starttime="20170809 01:02:42.078"></status>
</kw>
<status endtime="20170809 01:02:42.524" status="PASS" starttime="20170809 01:02:42.078"></status>
</kw>
<status endtime="20170809 01:02:42.524" status="PASS" starttime="20170809 01:02:42.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:42.525" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:02:42.525" status="PASS" starttime="20170809 01:02:42.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:42.528" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:42.528" status="PASS" starttime="20170809 01:02:42.527"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:42.529" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:42.529" status="PASS" starttime="20170809 01:02:42.529"></status>
</kw>
<status endtime="20170809 01:02:42.529" status="PASS" starttime="20170809 01:02:42.528"></status>
</kw>
<status endtime="20170809 01:02:42.529" status="PASS" starttime="20170809 01:02:42.526"></status>
</kw>
<status endtime="20170809 01:02:42.529" status="PASS" starttime="20170809 01:02:42.525"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:43.857" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:43.857" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:43.857" status="PASS" starttime="20170809 01:02:42.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:43.859" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:43.859" status="PASS" starttime="20170809 01:02:43.858"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:43.860" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:43.860" status="PASS" starttime="20170809 01:02:43.860"></status>
</kw>
<status endtime="20170809 01:02:43.861" status="PASS" starttime="20170809 01:02:43.859"></status>
</kw>
<status endtime="20170809 01:02:43.861" status="PASS" starttime="20170809 01:02:43.858"></status>
</kw>
<status endtime="20170809 01:02:43.861" status="PASS" starttime="20170809 01:02:43.857"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:43.861" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:43.861" status="PASS" starttime="20170809 01:02:43.861"></status>
</kw>
<msg timestamp="20170809 01:02:43.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:43.861" status="PASS" starttime="20170809 01:02:42.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:43.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:43.862" status="PASS" starttime="20170809 01:02:43.862"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:43.863" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:43.863" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:43.863" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:43.863" status="PASS" starttime="20170809 01:02:43.862"></status>
</kw>
<msg timestamp="20170809 01:02:43.863" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:02:43.863" status="PASS" starttime="20170809 01:02:42.076"></status>
</kw>
<msg timestamp="20170809 01:02:43.863" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:02:43.863" status="PASS" starttime="20170809 01:02:42.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:02:43.864" status="PASS" starttime="20170809 01:02:43.864"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:43.868" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:43.868" status="PASS" starttime="20170809 01:02:43.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:43.869" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:43.869" status="PASS" starttime="20170809 01:02:43.869"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:43.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:43.870" status="PASS" starttime="20170809 01:02:43.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:43.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:43.870" status="PASS" starttime="20170809 01:02:43.870"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:44.160" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:44.160" status="PASS" starttime="20170809 01:02:43.871"></status>
</kw>
<msg timestamp="20170809 01:02:44.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:44.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:44.160" status="PASS" starttime="20170809 01:02:43.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:44.161" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:44.161" status="PASS" starttime="20170809 01:02:44.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:44.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:44.162" status="PASS" starttime="20170809 01:02:44.161"></status>
</kw>
<status endtime="20170809 01:02:44.162" status="PASS" starttime="20170809 01:02:43.867"></status>
</kw>
<status endtime="20170809 01:02:44.162" status="PASS" starttime="20170809 01:02:43.867"></status>
</kw>
<status endtime="20170809 01:02:44.162" status="PASS" starttime="20170809 01:02:43.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:44.163" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:02:44.163" status="PASS" starttime="20170809 01:02:44.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:44.165" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:44.165" status="PASS" starttime="20170809 01:02:44.164"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:44.166" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:02:44.166" status="PASS" starttime="20170809 01:02:44.165"></status>
</kw>
<status endtime="20170809 01:02:44.166" status="PASS" starttime="20170809 01:02:44.165"></status>
</kw>
<status endtime="20170809 01:02:44.166" status="PASS" starttime="20170809 01:02:44.164"></status>
</kw>
<status endtime="20170809 01:02:44.166" status="PASS" starttime="20170809 01:02:44.163"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:44.250" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:02:44.250" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:44.251" status="PASS" starttime="20170809 01:02:44.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:44.252" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:44.252" status="PASS" starttime="20170809 01:02:44.252"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:44.253" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:44.253" status="PASS" starttime="20170809 01:02:44.253"></status>
</kw>
<status endtime="20170809 01:02:44.254" status="PASS" starttime="20170809 01:02:44.253"></status>
</kw>
<status endtime="20170809 01:02:44.254" status="PASS" starttime="20170809 01:02:44.251"></status>
</kw>
<status endtime="20170809 01:02:44.254" status="PASS" starttime="20170809 01:02:44.251"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:44.254" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:44.254" status="PASS" starttime="20170809 01:02:44.254"></status>
</kw>
<msg timestamp="20170809 01:02:44.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:44.254" status="PASS" starttime="20170809 01:02:43.865"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:44.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:44.255" status="PASS" starttime="20170809 01:02:44.255"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:44.256" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:44.256" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:44.256" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:44.256" status="PASS" starttime="20170809 01:02:44.255"></status>
</kw>
<msg timestamp="20170809 01:02:44.256" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:44.256" status="PASS" starttime="20170809 01:02:43.865"></status>
</kw>
<msg timestamp="20170809 01:02:44.256" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:02:44.256" status="PASS" starttime="20170809 01:02:43.864"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:02:44.257" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:02:44.257" status="FAIL" starttime="20170809 01:02:44.257"></status>
</kw>
<status endtime="20170809 01:02:44.257" status="FAIL" starttime="20170809 01:02:43.864"></status>
</kw>
<status endtime="20170809 01:02:44.257" status="FAIL" starttime="20170809 01:02:36.273"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:02:54.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:02:54.265" status="PASS" starttime="20170809 01:02:54.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:02:54.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:02:54.266" status="PASS" starttime="20170809 01:02:54.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:02:54.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:02:54.267" status="PASS" starttime="20170809 01:02:54.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:02:54.268" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:02:54.268" status="PASS" starttime="20170809 01:02:54.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:02:54.897" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:02:54.897" status="PASS" starttime="20170809 01:02:54.269"></status>
</kw>
<msg timestamp="20170809 01:02:54.897" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:02:54.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:54.897" status="PASS" starttime="20170809 01:02:54.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:02:54.898" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:54.898" status="PASS" starttime="20170809 01:02:54.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:54.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:54.899" status="PASS" starttime="20170809 01:02:54.898"></status>
</kw>
<status endtime="20170809 01:02:54.899" status="PASS" starttime="20170809 01:02:54.263"></status>
</kw>
<status endtime="20170809 01:02:54.899" status="PASS" starttime="20170809 01:02:54.262"></status>
</kw>
<status endtime="20170809 01:02:54.899" status="PASS" starttime="20170809 01:02:54.261"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:02:54.900" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:02:54.900" status="PASS" starttime="20170809 01:02:54.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:54.902" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:54.902" status="PASS" starttime="20170809 01:02:54.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:54.903" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:02:54.903" status="PASS" starttime="20170809 01:02:54.903"></status>
</kw>
<status endtime="20170809 01:02:54.903" status="PASS" starttime="20170809 01:02:54.902"></status>
</kw>
<status endtime="20170809 01:02:54.903" status="PASS" starttime="20170809 01:02:54.900"></status>
</kw>
<status endtime="20170809 01:02:54.903" status="PASS" starttime="20170809 01:02:54.900"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:02:58.149" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:02:58.149" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:58.150" status="PASS" starttime="20170809 01:02:54.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:02:58.152" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:58.152" status="PASS" starttime="20170809 01:02:58.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:02:58.154" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:02:58.154" status="PASS" starttime="20170809 01:02:58.153"></status>
</kw>
<status endtime="20170809 01:02:58.154" status="PASS" starttime="20170809 01:02:58.153"></status>
</kw>
<status endtime="20170809 01:02:58.154" status="PASS" starttime="20170809 01:02:58.151"></status>
</kw>
<status endtime="20170809 01:02:58.154" status="PASS" starttime="20170809 01:02:58.150"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:02:58.155" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:02:58.155" status="PASS" starttime="20170809 01:02:58.155"></status>
</kw>
<msg timestamp="20170809 01:02:58.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:02:58.155" status="PASS" starttime="20170809 01:02:54.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:02:58.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:02:58.156" status="PASS" starttime="20170809 01:02:58.155"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:02:58.156" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:02:58.156" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:02:58.157" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:02:58.157" status="PASS" starttime="20170809 01:02:58.156"></status>
</kw>
<msg timestamp="20170809 01:02:58.157" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 01:02:58.157" status="PASS" starttime="20170809 01:02:54.259"></status>
</kw>
<msg timestamp="20170809 01:02:58.157" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 01:02:58.157" status="PASS" starttime="20170809 01:02:54.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 01:02:58.158" level="FAIL">On != Off</msg>
<status endtime="20170809 01:02:58.158" status="FAIL" starttime="20170809 01:02:58.157"></status>
</kw>
<status endtime="20170809 01:02:58.158" status="FAIL" starttime="20170809 01:02:54.259"></status>
</kw>
<status endtime="20170809 01:02:58.158" status="FAIL" starttime="20170809 01:02:54.258"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:08.163" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:08.164" status="PASS" starttime="20170809 01:03:08.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:08.164" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:08.164" status="PASS" starttime="20170809 01:03:08.164"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:08.165" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:08.165" status="PASS" starttime="20170809 01:03:08.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:08.166" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:08.166" status="PASS" starttime="20170809 01:03:08.165"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:08.542" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:08.542" status="PASS" starttime="20170809 01:03:08.166"></status>
</kw>
<msg timestamp="20170809 01:03:08.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:08.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:08.542" status="PASS" starttime="20170809 01:03:08.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:08.543" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:08.543" status="PASS" starttime="20170809 01:03:08.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:08.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:08.544" status="PASS" starttime="20170809 01:03:08.543"></status>
</kw>
<status endtime="20170809 01:03:08.544" status="PASS" starttime="20170809 01:03:08.162"></status>
</kw>
<status endtime="20170809 01:03:08.544" status="PASS" starttime="20170809 01:03:08.162"></status>
</kw>
<status endtime="20170809 01:03:08.544" status="PASS" starttime="20170809 01:03:08.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:08.545" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:03:08.545" status="PASS" starttime="20170809 01:03:08.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:08.547" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:08.547" status="PASS" starttime="20170809 01:03:08.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:08.548" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:08.548" status="PASS" starttime="20170809 01:03:08.547"></status>
</kw>
<status endtime="20170809 01:03:08.548" status="PASS" starttime="20170809 01:03:08.547"></status>
</kw>
<status endtime="20170809 01:03:08.548" status="PASS" starttime="20170809 01:03:08.545"></status>
</kw>
<status endtime="20170809 01:03:08.548" status="PASS" starttime="20170809 01:03:08.545"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:09.561" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:09.562" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:09.562" status="PASS" starttime="20170809 01:03:08.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:09.564" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:09.564" status="PASS" starttime="20170809 01:03:09.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:09.565" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:09.565" status="PASS" starttime="20170809 01:03:09.564"></status>
</kw>
<status endtime="20170809 01:03:09.565" status="PASS" starttime="20170809 01:03:09.564"></status>
</kw>
<status endtime="20170809 01:03:09.565" status="PASS" starttime="20170809 01:03:09.563"></status>
</kw>
<status endtime="20170809 01:03:09.565" status="PASS" starttime="20170809 01:03:09.562"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:09.565" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:09.566" status="PASS" starttime="20170809 01:03:09.565"></status>
</kw>
<msg timestamp="20170809 01:03:09.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:09.566" status="PASS" starttime="20170809 01:03:08.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:09.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:09.566" status="PASS" starttime="20170809 01:03:09.566"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:09.567" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:09.567" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:09.567" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:09.567" status="PASS" starttime="20170809 01:03:09.567"></status>
</kw>
<msg timestamp="20170809 01:03:09.567" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:03:09.568" status="PASS" starttime="20170809 01:03:08.160"></status>
</kw>
<msg timestamp="20170809 01:03:09.568" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:03:09.568" status="PASS" starttime="20170809 01:03:08.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:03:09.568" status="PASS" starttime="20170809 01:03:09.568"></status>
</kw>
<status endtime="20170809 01:03:09.568" status="PASS" starttime="20170809 01:03:08.159"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:09.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:09.574" status="PASS" starttime="20170809 01:03:09.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:09.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:09.575" status="PASS" starttime="20170809 01:03:09.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:09.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:09.576" status="PASS" starttime="20170809 01:03:09.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:09.577" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:09.577" status="PASS" starttime="20170809 01:03:09.577"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:09.766" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:09.766" status="PASS" starttime="20170809 01:03:09.578"></status>
</kw>
<msg timestamp="20170809 01:03:09.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:09.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:09.766" status="PASS" starttime="20170809 01:03:09.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:09.767" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:09.767" status="PASS" starttime="20170809 01:03:09.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:09.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:09.768" status="PASS" starttime="20170809 01:03:09.767"></status>
</kw>
<status endtime="20170809 01:03:09.768" status="PASS" starttime="20170809 01:03:09.572"></status>
</kw>
<status endtime="20170809 01:03:09.768" status="PASS" starttime="20170809 01:03:09.572"></status>
</kw>
<status endtime="20170809 01:03:09.768" status="PASS" starttime="20170809 01:03:09.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:09.769" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:03:09.769" status="PASS" starttime="20170809 01:03:09.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:09.771" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:09.771" status="PASS" starttime="20170809 01:03:09.770"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:09.772" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:09.772" status="PASS" starttime="20170809 01:03:09.771"></status>
</kw>
<status endtime="20170809 01:03:09.772" status="PASS" starttime="20170809 01:03:09.771"></status>
</kw>
<status endtime="20170809 01:03:09.772" status="PASS" starttime="20170809 01:03:09.769"></status>
</kw>
<status endtime="20170809 01:03:09.772" status="PASS" starttime="20170809 01:03:09.769"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:10.742" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:10.742" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:10.743" status="PASS" starttime="20170809 01:03:09.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:10.744" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:10.744" status="PASS" starttime="20170809 01:03:10.744"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:10.745" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:10.745" status="PASS" starttime="20170809 01:03:10.745"></status>
</kw>
<status endtime="20170809 01:03:10.746" status="PASS" starttime="20170809 01:03:10.745"></status>
</kw>
<status endtime="20170809 01:03:10.746" status="PASS" starttime="20170809 01:03:10.743"></status>
</kw>
<status endtime="20170809 01:03:10.746" status="PASS" starttime="20170809 01:03:10.743"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:10.746" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:10.746" status="PASS" starttime="20170809 01:03:10.746"></status>
</kw>
<msg timestamp="20170809 01:03:10.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:10.746" status="PASS" starttime="20170809 01:03:09.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:10.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:10.747" status="PASS" starttime="20170809 01:03:10.747"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:10.748" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:10.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:10.748" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:10.748" status="PASS" starttime="20170809 01:03:10.747"></status>
</kw>
<msg timestamp="20170809 01:03:10.748" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:03:10.748" status="PASS" starttime="20170809 01:03:09.569"></status>
</kw>
<msg timestamp="20170809 01:03:10.748" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:03:10.748" status="PASS" starttime="20170809 01:03:09.569"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:03:10.749" status="PASS" starttime="20170809 01:03:10.749"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:10.753" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:10.754" status="PASS" starttime="20170809 01:03:10.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:10.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:10.754" status="PASS" starttime="20170809 01:03:10.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:10.755" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:10.755" status="PASS" starttime="20170809 01:03:10.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:10.756" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:10.756" status="PASS" starttime="20170809 01:03:10.755"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:10.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:10.940" status="PASS" starttime="20170809 01:03:10.756"></status>
</kw>
<msg timestamp="20170809 01:03:10.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:10.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:10.940" status="PASS" starttime="20170809 01:03:10.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:10.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:10.941" status="PASS" starttime="20170809 01:03:10.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:10.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:10.942" status="PASS" starttime="20170809 01:03:10.941"></status>
</kw>
<status endtime="20170809 01:03:10.942" status="PASS" starttime="20170809 01:03:10.752"></status>
</kw>
<status endtime="20170809 01:03:10.942" status="PASS" starttime="20170809 01:03:10.752"></status>
</kw>
<status endtime="20170809 01:03:10.942" status="PASS" starttime="20170809 01:03:10.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:10.943" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:03:10.943" status="PASS" starttime="20170809 01:03:10.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:10.945" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:10.945" status="PASS" starttime="20170809 01:03:10.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:10.946" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:10.946" status="PASS" starttime="20170809 01:03:10.945"></status>
</kw>
<status endtime="20170809 01:03:10.946" status="PASS" starttime="20170809 01:03:10.945"></status>
</kw>
<status endtime="20170809 01:03:10.946" status="PASS" starttime="20170809 01:03:10.943"></status>
</kw>
<status endtime="20170809 01:03:10.946" status="PASS" starttime="20170809 01:03:10.943"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:11.371" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:03:11.372" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:11.372" status="PASS" starttime="20170809 01:03:10.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:11.374" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:11.374" status="PASS" starttime="20170809 01:03:11.373"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:11.375" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:11.375" status="PASS" starttime="20170809 01:03:11.374"></status>
</kw>
<status endtime="20170809 01:03:11.375" status="PASS" starttime="20170809 01:03:11.374"></status>
</kw>
<status endtime="20170809 01:03:11.375" status="PASS" starttime="20170809 01:03:11.373"></status>
</kw>
<status endtime="20170809 01:03:11.375" status="PASS" starttime="20170809 01:03:11.372"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:11.375" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:11.375" status="PASS" starttime="20170809 01:03:11.375"></status>
</kw>
<msg timestamp="20170809 01:03:11.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:11.376" status="PASS" starttime="20170809 01:03:10.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:11.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:11.376" status="PASS" starttime="20170809 01:03:11.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:11.377" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:11.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:11.377" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:11.377" status="PASS" starttime="20170809 01:03:11.377"></status>
</kw>
<msg timestamp="20170809 01:03:11.377" level="INFO">${state} = Off</msg>
<status endtime="20170809 01:03:11.377" status="PASS" starttime="20170809 01:03:10.750"></status>
</kw>
<msg timestamp="20170809 01:03:11.378" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 01:03:11.378" status="PASS" starttime="20170809 01:03:10.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:03:11.378" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 01:03:11.378" status="FAIL" starttime="20170809 01:03:11.378"></status>
</kw>
<status endtime="20170809 01:03:11.378" status="FAIL" starttime="20170809 01:03:10.749"></status>
</kw>
<status endtime="20170809 01:03:11.379" status="FAIL" starttime="20170809 01:03:08.159"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:21.384" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:21.384" status="PASS" starttime="20170809 01:03:21.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:21.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:21.385" status="PASS" starttime="20170809 01:03:21.384"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:21.385" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:21.385" status="PASS" starttime="20170809 01:03:21.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:21.386" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:21.386" status="PASS" starttime="20170809 01:03:21.386"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:21.609" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:21.609" status="PASS" starttime="20170809 01:03:21.387"></status>
</kw>
<msg timestamp="20170809 01:03:21.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:21.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:21.609" status="PASS" starttime="20170809 01:03:21.386"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:21.610" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:21.610" status="PASS" starttime="20170809 01:03:21.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:21.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:21.611" status="PASS" starttime="20170809 01:03:21.610"></status>
</kw>
<status endtime="20170809 01:03:21.611" status="PASS" starttime="20170809 01:03:21.383"></status>
</kw>
<status endtime="20170809 01:03:21.611" status="PASS" starttime="20170809 01:03:21.382"></status>
</kw>
<status endtime="20170809 01:03:21.611" status="PASS" starttime="20170809 01:03:21.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:21.612" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:03:21.612" status="PASS" starttime="20170809 01:03:21.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:21.614" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:21.614" status="PASS" starttime="20170809 01:03:21.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:21.615" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:21.615" status="PASS" starttime="20170809 01:03:21.615"></status>
</kw>
<status endtime="20170809 01:03:21.615" status="PASS" starttime="20170809 01:03:21.614"></status>
</kw>
<status endtime="20170809 01:03:21.615" status="PASS" starttime="20170809 01:03:21.613"></status>
</kw>
<status endtime="20170809 01:03:21.615" status="PASS" starttime="20170809 01:03:21.612"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:21.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:21.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:21.685" status="PASS" starttime="20170809 01:03:21.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:21.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:21.687" status="PASS" starttime="20170809 01:03:21.686"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:21.688" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:21.688" status="PASS" starttime="20170809 01:03:21.688"></status>
</kw>
<status endtime="20170809 01:03:21.688" status="PASS" starttime="20170809 01:03:21.687"></status>
</kw>
<status endtime="20170809 01:03:21.688" status="PASS" starttime="20170809 01:03:21.686"></status>
</kw>
<status endtime="20170809 01:03:21.688" status="PASS" starttime="20170809 01:03:21.686"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:21.689" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:21.689" status="PASS" starttime="20170809 01:03:21.689"></status>
</kw>
<msg timestamp="20170809 01:03:21.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:21.689" status="PASS" starttime="20170809 01:03:21.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:21.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:21.690" status="PASS" starttime="20170809 01:03:21.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:21.690" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:21.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:21.690" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:21.690" status="PASS" starttime="20170809 01:03:21.690"></status>
</kw>
<msg timestamp="20170809 01:03:21.691" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:03:21.691" status="PASS" starttime="20170809 01:03:21.380"></status>
</kw>
<msg timestamp="20170809 01:03:21.691" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:03:21.691" status="PASS" starttime="20170809 01:03:21.380"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:03:21.692" status="PASS" starttime="20170809 01:03:21.691"></status>
</kw>
<status endtime="20170809 01:03:21.692" status="PASS" starttime="20170809 01:03:21.380"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:21.697" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:21.698" status="PASS" starttime="20170809 01:03:21.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:21.698" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:21.698" status="PASS" starttime="20170809 01:03:21.698"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:21.699" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:21.699" status="PASS" starttime="20170809 01:03:21.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:21.700" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:21.700" status="PASS" starttime="20170809 01:03:21.700"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:22.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:22.263" status="PASS" starttime="20170809 01:03:21.701"></status>
</kw>
<msg timestamp="20170809 01:03:22.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:22.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:22.263" status="PASS" starttime="20170809 01:03:21.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:22.264" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:22.264" status="PASS" starttime="20170809 01:03:22.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:22.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:22.264" status="PASS" starttime="20170809 01:03:22.264"></status>
</kw>
<status endtime="20170809 01:03:22.264" status="PASS" starttime="20170809 01:03:21.695"></status>
</kw>
<status endtime="20170809 01:03:22.265" status="PASS" starttime="20170809 01:03:21.695"></status>
</kw>
<status endtime="20170809 01:03:22.265" status="PASS" starttime="20170809 01:03:21.694"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:22.265" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:03:22.265" status="PASS" starttime="20170809 01:03:22.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:22.268" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:22.268" status="PASS" starttime="20170809 01:03:22.267"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:22.269" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:22.269" status="PASS" starttime="20170809 01:03:22.268"></status>
</kw>
<status endtime="20170809 01:03:22.269" status="PASS" starttime="20170809 01:03:22.268"></status>
</kw>
<status endtime="20170809 01:03:22.269" status="PASS" starttime="20170809 01:03:22.266"></status>
</kw>
<status endtime="20170809 01:03:22.269" status="PASS" starttime="20170809 01:03:22.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:22.671" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:22.672" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:22.672" status="PASS" starttime="20170809 01:03:22.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:22.674" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:22.674" status="PASS" starttime="20170809 01:03:22.673"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:22.674" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:22.675" status="PASS" starttime="20170809 01:03:22.674"></status>
</kw>
<status endtime="20170809 01:03:22.675" status="PASS" starttime="20170809 01:03:22.674"></status>
</kw>
<status endtime="20170809 01:03:22.675" status="PASS" starttime="20170809 01:03:22.673"></status>
</kw>
<status endtime="20170809 01:03:22.675" status="PASS" starttime="20170809 01:03:22.672"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:22.675" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:22.675" status="PASS" starttime="20170809 01:03:22.675"></status>
</kw>
<msg timestamp="20170809 01:03:22.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:22.676" status="PASS" starttime="20170809 01:03:21.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:22.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:22.676" status="PASS" starttime="20170809 01:03:22.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:22.677" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:22.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:22.677" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:22.677" status="PASS" starttime="20170809 01:03:22.676"></status>
</kw>
<msg timestamp="20170809 01:03:22.677" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:03:22.677" status="PASS" starttime="20170809 01:03:21.692"></status>
</kw>
<msg timestamp="20170809 01:03:22.678" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:03:22.678" status="PASS" starttime="20170809 01:03:21.692"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:03:22.678" status="PASS" starttime="20170809 01:03:22.678"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:22.682" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:22.683" status="PASS" starttime="20170809 01:03:22.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:22.683" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:22.683" status="PASS" starttime="20170809 01:03:22.683"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:22.684" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:22.684" status="PASS" starttime="20170809 01:03:22.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:22.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:22.685" status="PASS" starttime="20170809 01:03:22.684"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:23.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:23.072" status="PASS" starttime="20170809 01:03:22.685"></status>
</kw>
<msg timestamp="20170809 01:03:23.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:23.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:23.073" status="PASS" starttime="20170809 01:03:22.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:23.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:23.073" status="PASS" starttime="20170809 01:03:23.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:23.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:23.074" status="PASS" starttime="20170809 01:03:23.074"></status>
</kw>
<status endtime="20170809 01:03:23.074" status="PASS" starttime="20170809 01:03:22.681"></status>
</kw>
<status endtime="20170809 01:03:23.074" status="PASS" starttime="20170809 01:03:22.681"></status>
</kw>
<status endtime="20170809 01:03:23.074" status="PASS" starttime="20170809 01:03:22.680"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:23.075" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:03:23.075" status="PASS" starttime="20170809 01:03:23.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:23.077" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:23.077" status="PASS" starttime="20170809 01:03:23.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:23.078" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:23.078" status="PASS" starttime="20170809 01:03:23.078"></status>
</kw>
<status endtime="20170809 01:03:23.078" status="PASS" starttime="20170809 01:03:23.077"></status>
</kw>
<status endtime="20170809 01:03:23.078" status="PASS" starttime="20170809 01:03:23.076"></status>
</kw>
<status endtime="20170809 01:03:23.078" status="PASS" starttime="20170809 01:03:23.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:23.145" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:03:23.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:23.145" status="PASS" starttime="20170809 01:03:23.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:23.147" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:23.147" status="PASS" starttime="20170809 01:03:23.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:23.148" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:23.148" status="PASS" starttime="20170809 01:03:23.147"></status>
</kw>
<status endtime="20170809 01:03:23.148" status="PASS" starttime="20170809 01:03:23.147"></status>
</kw>
<status endtime="20170809 01:03:23.148" status="PASS" starttime="20170809 01:03:23.146"></status>
</kw>
<status endtime="20170809 01:03:23.148" status="PASS" starttime="20170809 01:03:23.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:23.148" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:23.149" status="PASS" starttime="20170809 01:03:23.148"></status>
</kw>
<msg timestamp="20170809 01:03:23.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:23.149" status="PASS" starttime="20170809 01:03:22.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:23.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:23.149" status="PASS" starttime="20170809 01:03:23.149"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:23.150" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:23.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:23.150" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:23.150" status="PASS" starttime="20170809 01:03:23.150"></status>
</kw>
<msg timestamp="20170809 01:03:23.151" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:23.151" status="PASS" starttime="20170809 01:03:22.679"></status>
</kw>
<msg timestamp="20170809 01:03:23.151" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:23.151" status="PASS" starttime="20170809 01:03:22.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:03:23.151" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:03:23.152" status="FAIL" starttime="20170809 01:03:23.151"></status>
</kw>
<status endtime="20170809 01:03:23.152" status="FAIL" starttime="20170809 01:03:22.678"></status>
</kw>
<status endtime="20170809 01:03:23.152" status="FAIL" starttime="20170809 01:03:21.379"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:33.157" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:33.158" status="PASS" starttime="20170809 01:03:33.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:33.158" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:33.158" status="PASS" starttime="20170809 01:03:33.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:33.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:33.159" status="PASS" starttime="20170809 01:03:33.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:33.159" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:33.159" status="PASS" starttime="20170809 01:03:33.159"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.335" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:33.335" status="PASS" starttime="20170809 01:03:33.160"></status>
</kw>
<msg timestamp="20170809 01:03:33.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:33.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:33.335" status="PASS" starttime="20170809 01:03:33.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.336" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:33.336" status="PASS" starttime="20170809 01:03:33.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:33.337" status="PASS" starttime="20170809 01:03:33.336"></status>
</kw>
<status endtime="20170809 01:03:33.337" status="PASS" starttime="20170809 01:03:33.156"></status>
</kw>
<status endtime="20170809 01:03:33.337" status="PASS" starttime="20170809 01:03:33.156"></status>
</kw>
<status endtime="20170809 01:03:33.337" status="PASS" starttime="20170809 01:03:33.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:33.338" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:03:33.338" status="PASS" starttime="20170809 01:03:33.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:33.340" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:33.340" status="PASS" starttime="20170809 01:03:33.339"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:33.341" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:33.341" status="PASS" starttime="20170809 01:03:33.341"></status>
</kw>
<status endtime="20170809 01:03:33.341" status="PASS" starttime="20170809 01:03:33.340"></status>
</kw>
<status endtime="20170809 01:03:33.341" status="PASS" starttime="20170809 01:03:33.339"></status>
</kw>
<status endtime="20170809 01:03:33.341" status="PASS" starttime="20170809 01:03:33.338"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:33.408" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:33.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:33.408" status="PASS" starttime="20170809 01:03:33.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:33.410" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:33.410" status="PASS" starttime="20170809 01:03:33.409"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:33.410" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:33.411" status="PASS" starttime="20170809 01:03:33.410"></status>
</kw>
<status endtime="20170809 01:03:33.411" status="PASS" starttime="20170809 01:03:33.410"></status>
</kw>
<status endtime="20170809 01:03:33.411" status="PASS" starttime="20170809 01:03:33.409"></status>
</kw>
<status endtime="20170809 01:03:33.411" status="PASS" starttime="20170809 01:03:33.408"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:33.411" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:33.411" status="PASS" starttime="20170809 01:03:33.411"></status>
</kw>
<msg timestamp="20170809 01:03:33.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:33.412" status="PASS" starttime="20170809 01:03:33.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:33.412" status="PASS" starttime="20170809 01:03:33.412"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:33.413" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:33.413" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:33.413" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:33.413" status="PASS" starttime="20170809 01:03:33.413"></status>
</kw>
<msg timestamp="20170809 01:03:33.413" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:03:33.413" status="PASS" starttime="20170809 01:03:33.154"></status>
</kw>
<msg timestamp="20170809 01:03:33.414" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:03:33.414" status="PASS" starttime="20170809 01:03:33.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:03:33.414" status="PASS" starttime="20170809 01:03:33.414"></status>
</kw>
<status endtime="20170809 01:03:33.414" status="PASS" starttime="20170809 01:03:33.153"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:33.418" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:33.421" status="PASS" starttime="20170809 01:03:33.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:33.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:33.422" status="PASS" starttime="20170809 01:03:33.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:33.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:33.423" status="PASS" starttime="20170809 01:03:33.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:33.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:33.424" status="PASS" starttime="20170809 01:03:33.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.632" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:33.632" status="PASS" starttime="20170809 01:03:33.425"></status>
</kw>
<msg timestamp="20170809 01:03:33.632" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:33.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:33.632" status="PASS" starttime="20170809 01:03:33.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.633" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:33.633" status="PASS" starttime="20170809 01:03:33.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:33.634" status="PASS" starttime="20170809 01:03:33.633"></status>
</kw>
<status endtime="20170809 01:03:33.634" status="PASS" starttime="20170809 01:03:33.417"></status>
</kw>
<status endtime="20170809 01:03:33.634" status="PASS" starttime="20170809 01:03:33.417"></status>
</kw>
<status endtime="20170809 01:03:33.634" status="PASS" starttime="20170809 01:03:33.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:33.634" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:03:33.634" status="PASS" starttime="20170809 01:03:33.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:33.637" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:33.637" status="PASS" starttime="20170809 01:03:33.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:33.637" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:33.638" status="PASS" starttime="20170809 01:03:33.637"></status>
</kw>
<status endtime="20170809 01:03:33.638" status="PASS" starttime="20170809 01:03:33.637"></status>
</kw>
<status endtime="20170809 01:03:33.638" status="PASS" starttime="20170809 01:03:33.635"></status>
</kw>
<status endtime="20170809 01:03:33.638" status="PASS" starttime="20170809 01:03:33.635"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:33.730" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:33.730" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:33.730" status="PASS" starttime="20170809 01:03:33.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:33.732" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:33.732" status="PASS" starttime="20170809 01:03:33.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:33.733" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:33.733" status="PASS" starttime="20170809 01:03:33.733"></status>
</kw>
<status endtime="20170809 01:03:33.733" status="PASS" starttime="20170809 01:03:33.732"></status>
</kw>
<status endtime="20170809 01:03:33.733" status="PASS" starttime="20170809 01:03:33.731"></status>
</kw>
<status endtime="20170809 01:03:33.733" status="PASS" starttime="20170809 01:03:33.731"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:33.734" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:33.734" status="PASS" starttime="20170809 01:03:33.734"></status>
</kw>
<msg timestamp="20170809 01:03:33.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:33.734" status="PASS" starttime="20170809 01:03:33.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:33.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:33.735" status="PASS" starttime="20170809 01:03:33.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:33.735" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:33.735" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:33.736" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:33.736" status="PASS" starttime="20170809 01:03:33.735"></status>
</kw>
<msg timestamp="20170809 01:03:33.736" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:03:33.736" status="PASS" starttime="20170809 01:03:33.415"></status>
</kw>
<msg timestamp="20170809 01:03:33.736" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:03:33.736" status="PASS" starttime="20170809 01:03:33.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:03:33.737" status="PASS" starttime="20170809 01:03:33.736"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:33.741" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:33.741" status="PASS" starttime="20170809 01:03:33.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:33.742" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:33.742" status="PASS" starttime="20170809 01:03:33.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:33.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:33.743" status="PASS" starttime="20170809 01:03:33.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:33.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:33.743" status="PASS" starttime="20170809 01:03:33.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:34.046" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:34.046" status="PASS" starttime="20170809 01:03:33.744"></status>
</kw>
<msg timestamp="20170809 01:03:34.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:34.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:34.047" status="PASS" starttime="20170809 01:03:33.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:34.047" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:34.047" status="PASS" starttime="20170809 01:03:34.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:34.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:34.048" status="PASS" starttime="20170809 01:03:34.048"></status>
</kw>
<status endtime="20170809 01:03:34.048" status="PASS" starttime="20170809 01:03:33.740"></status>
</kw>
<status endtime="20170809 01:03:34.048" status="PASS" starttime="20170809 01:03:33.740"></status>
</kw>
<status endtime="20170809 01:03:34.048" status="PASS" starttime="20170809 01:03:33.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:34.049" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:03:34.049" status="PASS" starttime="20170809 01:03:34.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:34.051" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:34.051" status="PASS" starttime="20170809 01:03:34.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:34.053" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:34.053" status="PASS" starttime="20170809 01:03:34.052"></status>
</kw>
<status endtime="20170809 01:03:34.053" status="PASS" starttime="20170809 01:03:34.051"></status>
</kw>
<status endtime="20170809 01:03:34.053" status="PASS" starttime="20170809 01:03:34.050"></status>
</kw>
<status endtime="20170809 01:03:34.053" status="PASS" starttime="20170809 01:03:34.049"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:34.136" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:03:34.136" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:34.136" status="PASS" starttime="20170809 01:03:34.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:34.138" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:34.138" status="PASS" starttime="20170809 01:03:34.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:34.138" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:34.139" status="PASS" starttime="20170809 01:03:34.138"></status>
</kw>
<status endtime="20170809 01:03:34.139" status="PASS" starttime="20170809 01:03:34.138"></status>
</kw>
<status endtime="20170809 01:03:34.139" status="PASS" starttime="20170809 01:03:34.137"></status>
</kw>
<status endtime="20170809 01:03:34.139" status="PASS" starttime="20170809 01:03:34.136"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:34.139" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:34.139" status="PASS" starttime="20170809 01:03:34.139"></status>
</kw>
<msg timestamp="20170809 01:03:34.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:34.140" status="PASS" starttime="20170809 01:03:33.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:34.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:34.140" status="PASS" starttime="20170809 01:03:34.140"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:34.141" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:34.141" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:34.141" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:34.141" status="PASS" starttime="20170809 01:03:34.140"></status>
</kw>
<msg timestamp="20170809 01:03:34.141" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:34.141" status="PASS" starttime="20170809 01:03:33.738"></status>
</kw>
<msg timestamp="20170809 01:03:34.141" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:34.141" status="PASS" starttime="20170809 01:03:33.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:03:34.142" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:03:34.142" status="FAIL" starttime="20170809 01:03:34.142"></status>
</kw>
<status endtime="20170809 01:03:34.142" status="FAIL" starttime="20170809 01:03:33.737"></status>
</kw>
<status endtime="20170809 01:03:34.143" status="FAIL" starttime="20170809 01:03:33.152"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:44.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:44.148" status="PASS" starttime="20170809 01:03:44.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:44.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:44.149" status="PASS" starttime="20170809 01:03:44.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:44.149" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:44.149" status="PASS" starttime="20170809 01:03:44.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:44.150" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:44.150" status="PASS" starttime="20170809 01:03:44.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:44.356" status="PASS" starttime="20170809 01:03:44.151"></status>
</kw>
<msg timestamp="20170809 01:03:44.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:44.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:44.356" status="PASS" starttime="20170809 01:03:44.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:44.357" status="PASS" starttime="20170809 01:03:44.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:44.358" status="PASS" starttime="20170809 01:03:44.357"></status>
</kw>
<status endtime="20170809 01:03:44.358" status="PASS" starttime="20170809 01:03:44.147"></status>
</kw>
<status endtime="20170809 01:03:44.358" status="PASS" starttime="20170809 01:03:44.146"></status>
</kw>
<status endtime="20170809 01:03:44.358" status="PASS" starttime="20170809 01:03:44.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:44.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:03:44.359" status="PASS" starttime="20170809 01:03:44.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:44.361" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:44.361" status="PASS" starttime="20170809 01:03:44.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:44.362" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:44.362" status="PASS" starttime="20170809 01:03:44.361"></status>
</kw>
<status endtime="20170809 01:03:44.362" status="PASS" starttime="20170809 01:03:44.361"></status>
</kw>
<status endtime="20170809 01:03:44.362" status="PASS" starttime="20170809 01:03:44.359"></status>
</kw>
<status endtime="20170809 01:03:44.362" status="PASS" starttime="20170809 01:03:44.359"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:44.425" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:44.426" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:44.426" status="PASS" starttime="20170809 01:03:44.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:44.427" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:44.427" status="PASS" starttime="20170809 01:03:44.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:44.428" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:44.428" status="PASS" starttime="20170809 01:03:44.428"></status>
</kw>
<status endtime="20170809 01:03:44.429" status="PASS" starttime="20170809 01:03:44.427"></status>
</kw>
<status endtime="20170809 01:03:44.429" status="PASS" starttime="20170809 01:03:44.426"></status>
</kw>
<status endtime="20170809 01:03:44.429" status="PASS" starttime="20170809 01:03:44.426"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:44.429" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:44.429" status="PASS" starttime="20170809 01:03:44.429"></status>
</kw>
<msg timestamp="20170809 01:03:44.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:44.429" status="PASS" starttime="20170809 01:03:44.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:44.430" status="PASS" starttime="20170809 01:03:44.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:44.431" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:44.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:44.431" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:44.431" status="PASS" starttime="20170809 01:03:44.430"></status>
</kw>
<msg timestamp="20170809 01:03:44.431" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:03:44.431" status="PASS" starttime="20170809 01:03:44.144"></status>
</kw>
<msg timestamp="20170809 01:03:44.431" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:03:44.431" status="PASS" starttime="20170809 01:03:44.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:03:44.432" status="PASS" starttime="20170809 01:03:44.432"></status>
</kw>
<status endtime="20170809 01:03:44.432" status="PASS" starttime="20170809 01:03:44.144"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:44.436" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:44.436" status="PASS" starttime="20170809 01:03:44.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:44.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:44.437" status="PASS" starttime="20170809 01:03:44.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:44.438" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:44.438" status="PASS" starttime="20170809 01:03:44.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:44.438" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:44.438" status="PASS" starttime="20170809 01:03:44.438"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.752" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:44.752" status="PASS" starttime="20170809 01:03:44.439"></status>
</kw>
<msg timestamp="20170809 01:03:44.752" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:44.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:44.752" status="PASS" starttime="20170809 01:03:44.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.753" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:44.753" status="PASS" starttime="20170809 01:03:44.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:44.754" status="PASS" starttime="20170809 01:03:44.753"></status>
</kw>
<status endtime="20170809 01:03:44.754" status="PASS" starttime="20170809 01:03:44.435"></status>
</kw>
<status endtime="20170809 01:03:44.754" status="PASS" starttime="20170809 01:03:44.434"></status>
</kw>
<status endtime="20170809 01:03:44.754" status="PASS" starttime="20170809 01:03:44.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:44.754" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:03:44.755" status="PASS" starttime="20170809 01:03:44.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:44.757" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:44.757" status="PASS" starttime="20170809 01:03:44.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:44.757" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:44.758" status="PASS" starttime="20170809 01:03:44.757"></status>
</kw>
<status endtime="20170809 01:03:44.758" status="PASS" starttime="20170809 01:03:44.757"></status>
</kw>
<status endtime="20170809 01:03:44.758" status="PASS" starttime="20170809 01:03:44.755"></status>
</kw>
<status endtime="20170809 01:03:44.758" status="PASS" starttime="20170809 01:03:44.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:44.863" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:44.863" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:44.864" status="PASS" starttime="20170809 01:03:44.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:44.865" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:44.865" status="PASS" starttime="20170809 01:03:44.865"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:44.866" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:44.866" status="PASS" starttime="20170809 01:03:44.866"></status>
</kw>
<status endtime="20170809 01:03:44.867" status="PASS" starttime="20170809 01:03:44.866"></status>
</kw>
<status endtime="20170809 01:03:44.867" status="PASS" starttime="20170809 01:03:44.864"></status>
</kw>
<status endtime="20170809 01:03:44.867" status="PASS" starttime="20170809 01:03:44.864"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:44.867" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:44.867" status="PASS" starttime="20170809 01:03:44.867"></status>
</kw>
<msg timestamp="20170809 01:03:44.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:44.867" status="PASS" starttime="20170809 01:03:44.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:44.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:44.868" status="PASS" starttime="20170809 01:03:44.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:44.869" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:44.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:44.869" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:44.869" status="PASS" starttime="20170809 01:03:44.868"></status>
</kw>
<msg timestamp="20170809 01:03:44.869" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:03:44.869" status="PASS" starttime="20170809 01:03:44.433"></status>
</kw>
<msg timestamp="20170809 01:03:44.869" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:03:44.869" status="PASS" starttime="20170809 01:03:44.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:03:44.870" status="PASS" starttime="20170809 01:03:44.870"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:44.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:44.875" status="PASS" starttime="20170809 01:03:44.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:44.875" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:44.875" status="PASS" starttime="20170809 01:03:44.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:44.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:44.876" status="PASS" starttime="20170809 01:03:44.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:44.876" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:44.876" status="PASS" starttime="20170809 01:03:44.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:45.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:45.059" status="PASS" starttime="20170809 01:03:44.877"></status>
</kw>
<msg timestamp="20170809 01:03:45.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:45.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:45.059" status="PASS" starttime="20170809 01:03:44.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:45.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:45.060" status="PASS" starttime="20170809 01:03:45.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:45.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:45.061" status="PASS" starttime="20170809 01:03:45.060"></status>
</kw>
<status endtime="20170809 01:03:45.061" status="PASS" starttime="20170809 01:03:44.873"></status>
</kw>
<status endtime="20170809 01:03:45.061" status="PASS" starttime="20170809 01:03:44.873"></status>
</kw>
<status endtime="20170809 01:03:45.061" status="PASS" starttime="20170809 01:03:44.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:45.062" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:03:45.062" status="PASS" starttime="20170809 01:03:45.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:45.064" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:45.064" status="PASS" starttime="20170809 01:03:45.063"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:45.065" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:45.065" status="PASS" starttime="20170809 01:03:45.065"></status>
</kw>
<status endtime="20170809 01:03:45.065" status="PASS" starttime="20170809 01:03:45.064"></status>
</kw>
<status endtime="20170809 01:03:45.066" status="PASS" starttime="20170809 01:03:45.063"></status>
</kw>
<status endtime="20170809 01:03:45.066" status="PASS" starttime="20170809 01:03:45.062"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:45.132" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:03:45.132" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:45.132" status="PASS" starttime="20170809 01:03:45.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:45.134" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:45.134" status="PASS" starttime="20170809 01:03:45.133"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:45.135" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:45.135" status="PASS" starttime="20170809 01:03:45.135"></status>
</kw>
<status endtime="20170809 01:03:45.135" status="PASS" starttime="20170809 01:03:45.134"></status>
</kw>
<status endtime="20170809 01:03:45.135" status="PASS" starttime="20170809 01:03:45.133"></status>
</kw>
<status endtime="20170809 01:03:45.135" status="PASS" starttime="20170809 01:03:45.132"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:45.136" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:45.136" status="PASS" starttime="20170809 01:03:45.136"></status>
</kw>
<msg timestamp="20170809 01:03:45.136" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:45.136" status="PASS" starttime="20170809 01:03:44.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:45.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:45.137" status="PASS" starttime="20170809 01:03:45.136"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:45.137" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:45.137" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:45.137" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:45.137" status="PASS" starttime="20170809 01:03:45.137"></status>
</kw>
<msg timestamp="20170809 01:03:45.138" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:45.138" status="PASS" starttime="20170809 01:03:44.871"></status>
</kw>
<msg timestamp="20170809 01:03:45.138" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:45.138" status="PASS" starttime="20170809 01:03:44.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:03:45.139" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:03:45.139" status="FAIL" starttime="20170809 01:03:45.138"></status>
</kw>
<status endtime="20170809 01:03:45.139" status="FAIL" starttime="20170809 01:03:44.870"></status>
</kw>
<status endtime="20170809 01:03:45.139" status="FAIL" starttime="20170809 01:03:44.143"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:55.144" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:55.145" status="PASS" starttime="20170809 01:03:55.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:55.145" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:55.145" status="PASS" starttime="20170809 01:03:55.145"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:55.146" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:55.146" status="PASS" starttime="20170809 01:03:55.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:55.146" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:55.146" status="PASS" starttime="20170809 01:03:55.146"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:55.336" status="PASS" starttime="20170809 01:03:55.147"></status>
</kw>
<msg timestamp="20170809 01:03:55.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:55.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.337" status="PASS" starttime="20170809 01:03:55.147"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.337" status="PASS" starttime="20170809 01:03:55.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.338" status="PASS" starttime="20170809 01:03:55.338"></status>
</kw>
<status endtime="20170809 01:03:55.338" status="PASS" starttime="20170809 01:03:55.143"></status>
</kw>
<status endtime="20170809 01:03:55.338" status="PASS" starttime="20170809 01:03:55.143"></status>
</kw>
<status endtime="20170809 01:03:55.338" status="PASS" starttime="20170809 01:03:55.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:55.339" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:03:55.339" status="PASS" starttime="20170809 01:03:55.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:55.341" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:55.341" status="PASS" starttime="20170809 01:03:55.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:55.342" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:55.342" status="PASS" starttime="20170809 01:03:55.342"></status>
</kw>
<status endtime="20170809 01:03:55.342" status="PASS" starttime="20170809 01:03:55.341"></status>
</kw>
<status endtime="20170809 01:03:55.342" status="PASS" starttime="20170809 01:03:55.340"></status>
</kw>
<status endtime="20170809 01:03:55.342" status="PASS" starttime="20170809 01:03:55.339"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:55.406" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:55.406" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.406" status="PASS" starttime="20170809 01:03:55.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:55.408" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:55.408" status="PASS" starttime="20170809 01:03:55.407"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:55.409" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:55.409" status="PASS" starttime="20170809 01:03:55.408"></status>
</kw>
<status endtime="20170809 01:03:55.409" status="PASS" starttime="20170809 01:03:55.408"></status>
</kw>
<status endtime="20170809 01:03:55.409" status="PASS" starttime="20170809 01:03:55.407"></status>
</kw>
<status endtime="20170809 01:03:55.409" status="PASS" starttime="20170809 01:03:55.406"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:55.409" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:55.409" status="PASS" starttime="20170809 01:03:55.409"></status>
</kw>
<msg timestamp="20170809 01:03:55.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.410" status="PASS" starttime="20170809 01:03:55.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.410" status="PASS" starttime="20170809 01:03:55.410"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:55.411" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:55.411" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:55.411" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:55.411" status="PASS" starttime="20170809 01:03:55.411"></status>
</kw>
<msg timestamp="20170809 01:03:55.411" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:03:55.411" status="PASS" starttime="20170809 01:03:55.141"></status>
</kw>
<msg timestamp="20170809 01:03:55.412" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:03:55.412" status="PASS" starttime="20170809 01:03:55.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:03:55.412" status="PASS" starttime="20170809 01:03:55.412"></status>
</kw>
<status endtime="20170809 01:03:55.412" status="PASS" starttime="20170809 01:03:55.140"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:55.416" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:55.417" status="PASS" starttime="20170809 01:03:55.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:55.417" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:55.417" status="PASS" starttime="20170809 01:03:55.417"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:55.418" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:55.418" status="PASS" starttime="20170809 01:03:55.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:55.419" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:55.419" status="PASS" starttime="20170809 01:03:55.418"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:55.614" status="PASS" starttime="20170809 01:03:55.419"></status>
</kw>
<msg timestamp="20170809 01:03:55.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:55.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.614" status="PASS" starttime="20170809 01:03:55.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.615" status="PASS" starttime="20170809 01:03:55.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.616" status="PASS" starttime="20170809 01:03:55.615"></status>
</kw>
<status endtime="20170809 01:03:55.616" status="PASS" starttime="20170809 01:03:55.415"></status>
</kw>
<status endtime="20170809 01:03:55.616" status="PASS" starttime="20170809 01:03:55.415"></status>
</kw>
<status endtime="20170809 01:03:55.616" status="PASS" starttime="20170809 01:03:55.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:55.616" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:03:55.616" status="PASS" starttime="20170809 01:03:55.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:55.618" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:55.619" status="PASS" starttime="20170809 01:03:55.618"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:55.619" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:03:55.620" status="PASS" starttime="20170809 01:03:55.619"></status>
</kw>
<status endtime="20170809 01:03:55.620" status="PASS" starttime="20170809 01:03:55.619"></status>
</kw>
<status endtime="20170809 01:03:55.620" status="PASS" starttime="20170809 01:03:55.617"></status>
</kw>
<status endtime="20170809 01:03:55.620" status="PASS" starttime="20170809 01:03:55.617"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:55.719" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:03:55.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.720" status="PASS" starttime="20170809 01:03:55.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:55.721" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:55.721" status="PASS" starttime="20170809 01:03:55.721"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:55.722" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:55.722" status="PASS" starttime="20170809 01:03:55.722"></status>
</kw>
<status endtime="20170809 01:03:55.723" status="PASS" starttime="20170809 01:03:55.722"></status>
</kw>
<status endtime="20170809 01:03:55.723" status="PASS" starttime="20170809 01:03:55.720"></status>
</kw>
<status endtime="20170809 01:03:55.723" status="PASS" starttime="20170809 01:03:55.720"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:55.723" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:55.723" status="PASS" starttime="20170809 01:03:55.723"></status>
</kw>
<msg timestamp="20170809 01:03:55.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.723" status="PASS" starttime="20170809 01:03:55.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.724" status="PASS" starttime="20170809 01:03:55.724"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:55.725" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:55.725" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:55.725" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:55.725" status="PASS" starttime="20170809 01:03:55.724"></status>
</kw>
<msg timestamp="20170809 01:03:55.725" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:03:55.725" status="PASS" starttime="20170809 01:03:55.413"></status>
</kw>
<msg timestamp="20170809 01:03:55.725" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:03:55.725" status="PASS" starttime="20170809 01:03:55.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:03:55.726" status="PASS" starttime="20170809 01:03:55.726"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:03:55.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:03:55.730" status="PASS" starttime="20170809 01:03:55.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:03:55.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:03:55.731" status="PASS" starttime="20170809 01:03:55.731"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:03:55.732" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:03:55.732" status="PASS" starttime="20170809 01:03:55.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:03:55.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:03:55.732" status="PASS" starttime="20170809 01:03:55.732"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:03:55.909" status="PASS" starttime="20170809 01:03:55.733"></status>
</kw>
<msg timestamp="20170809 01:03:55.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:03:55.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.910" status="PASS" starttime="20170809 01:03:55.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.910" status="PASS" starttime="20170809 01:03:55.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:55.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:55.911" status="PASS" starttime="20170809 01:03:55.911"></status>
</kw>
<status endtime="20170809 01:03:55.911" status="PASS" starttime="20170809 01:03:55.729"></status>
</kw>
<status endtime="20170809 01:03:55.911" status="PASS" starttime="20170809 01:03:55.729"></status>
</kw>
<status endtime="20170809 01:03:55.911" status="PASS" starttime="20170809 01:03:55.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:03:55.912" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:03:55.912" status="PASS" starttime="20170809 01:03:55.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:55.914" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:55.914" status="PASS" starttime="20170809 01:03:55.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:55.915" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:03:55.915" status="PASS" starttime="20170809 01:03:55.915"></status>
</kw>
<status endtime="20170809 01:03:55.915" status="PASS" starttime="20170809 01:03:55.914"></status>
</kw>
<status endtime="20170809 01:03:55.916" status="PASS" starttime="20170809 01:03:55.913"></status>
</kw>
<status endtime="20170809 01:03:55.916" status="PASS" starttime="20170809 01:03:55.912"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:03:55.996" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:03:55.996" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:55.996" status="PASS" starttime="20170809 01:03:55.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:03:55.998" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:55.998" status="PASS" starttime="20170809 01:03:55.997"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:03:55.999" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:03:55.999" status="PASS" starttime="20170809 01:03:55.998"></status>
</kw>
<status endtime="20170809 01:03:55.999" status="PASS" starttime="20170809 01:03:55.998"></status>
</kw>
<status endtime="20170809 01:03:55.999" status="PASS" starttime="20170809 01:03:55.997"></status>
</kw>
<status endtime="20170809 01:03:55.999" status="PASS" starttime="20170809 01:03:55.996"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:03:55.999" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:03:55.999" status="PASS" starttime="20170809 01:03:55.999"></status>
</kw>
<msg timestamp="20170809 01:03:56.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:03:56.000" status="PASS" starttime="20170809 01:03:55.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:03:56.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:03:56.000" status="PASS" starttime="20170809 01:03:56.000"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:03:56.001" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:03:56.001" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:03:56.001" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:03:56.001" status="PASS" starttime="20170809 01:03:56.001"></status>
</kw>
<msg timestamp="20170809 01:03:56.002" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:56.002" status="PASS" starttime="20170809 01:03:55.727"></status>
</kw>
<msg timestamp="20170809 01:03:56.002" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:03:56.002" status="PASS" starttime="20170809 01:03:55.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:03:56.003" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:03:56.003" status="FAIL" starttime="20170809 01:03:56.002"></status>
</kw>
<status endtime="20170809 01:03:56.003" status="FAIL" starttime="20170809 01:03:55.726"></status>
</kw>
<status endtime="20170809 01:03:56.003" status="FAIL" starttime="20170809 01:03:55.139"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:06.008" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:06.008" status="PASS" starttime="20170809 01:04:06.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:06.009" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:06.009" status="PASS" starttime="20170809 01:04:06.008"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:06.009" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:06.009" status="PASS" starttime="20170809 01:04:06.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:06.010" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:06.010" status="PASS" starttime="20170809 01:04:06.010"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.190" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:06.190" status="PASS" starttime="20170809 01:04:06.011"></status>
</kw>
<msg timestamp="20170809 01:04:06.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:06.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.190" status="PASS" starttime="20170809 01:04:06.010"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.191" status="PASS" starttime="20170809 01:04:06.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.192" status="PASS" starttime="20170809 01:04:06.191"></status>
</kw>
<status endtime="20170809 01:04:06.192" status="PASS" starttime="20170809 01:04:06.007"></status>
</kw>
<status endtime="20170809 01:04:06.192" status="PASS" starttime="20170809 01:04:06.006"></status>
</kw>
<status endtime="20170809 01:04:06.192" status="PASS" starttime="20170809 01:04:06.006"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:06.193" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:04:06.193" status="PASS" starttime="20170809 01:04:06.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:06.195" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:06.195" status="PASS" starttime="20170809 01:04:06.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:06.196" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:06.196" status="PASS" starttime="20170809 01:04:06.196"></status>
</kw>
<status endtime="20170809 01:04:06.196" status="PASS" starttime="20170809 01:04:06.195"></status>
</kw>
<status endtime="20170809 01:04:06.196" status="PASS" starttime="20170809 01:04:06.193"></status>
</kw>
<status endtime="20170809 01:04:06.196" status="PASS" starttime="20170809 01:04:06.193"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:06.258" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:06.259" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.259" status="PASS" starttime="20170809 01:04:06.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:06.260" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:06.261" status="PASS" starttime="20170809 01:04:06.260"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:06.261" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:06.262" status="PASS" starttime="20170809 01:04:06.261"></status>
</kw>
<status endtime="20170809 01:04:06.262" status="PASS" starttime="20170809 01:04:06.261"></status>
</kw>
<status endtime="20170809 01:04:06.262" status="PASS" starttime="20170809 01:04:06.259"></status>
</kw>
<status endtime="20170809 01:04:06.262" status="PASS" starttime="20170809 01:04:06.259"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:06.262" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:06.262" status="PASS" starttime="20170809 01:04:06.262"></status>
</kw>
<msg timestamp="20170809 01:04:06.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.263" status="PASS" starttime="20170809 01:04:06.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.263" status="PASS" starttime="20170809 01:04:06.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:06.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:06.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:06.264" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:06.264" status="PASS" starttime="20170809 01:04:06.263"></status>
</kw>
<msg timestamp="20170809 01:04:06.264" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:04:06.264" status="PASS" starttime="20170809 01:04:06.005"></status>
</kw>
<msg timestamp="20170809 01:04:06.265" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:04:06.265" status="PASS" starttime="20170809 01:04:06.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:04:06.265" status="PASS" starttime="20170809 01:04:06.265"></status>
</kw>
<status endtime="20170809 01:04:06.265" status="PASS" starttime="20170809 01:04:06.004"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:06.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:06.273" status="PASS" starttime="20170809 01:04:06.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:06.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:06.274" status="PASS" starttime="20170809 01:04:06.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:06.275" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:06.275" status="PASS" starttime="20170809 01:04:06.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:06.275" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:06.276" status="PASS" starttime="20170809 01:04:06.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.503" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:06.503" status="PASS" starttime="20170809 01:04:06.277"></status>
</kw>
<msg timestamp="20170809 01:04:06.503" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:06.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.503" status="PASS" starttime="20170809 01:04:06.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.504" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.504" status="PASS" starttime="20170809 01:04:06.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.505" status="PASS" starttime="20170809 01:04:06.504"></status>
</kw>
<status endtime="20170809 01:04:06.505" status="PASS" starttime="20170809 01:04:06.268"></status>
</kw>
<status endtime="20170809 01:04:06.505" status="PASS" starttime="20170809 01:04:06.268"></status>
</kw>
<status endtime="20170809 01:04:06.505" status="PASS" starttime="20170809 01:04:06.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:06.505" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:04:06.505" status="PASS" starttime="20170809 01:04:06.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:06.507" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:06.508" status="PASS" starttime="20170809 01:04:06.507"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:06.508" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:06.509" status="PASS" starttime="20170809 01:04:06.508"></status>
</kw>
<status endtime="20170809 01:04:06.509" status="PASS" starttime="20170809 01:04:06.508"></status>
</kw>
<status endtime="20170809 01:04:06.509" status="PASS" starttime="20170809 01:04:06.506"></status>
</kw>
<status endtime="20170809 01:04:06.509" status="PASS" starttime="20170809 01:04:06.506"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:06.603" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:06.604" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.604" status="PASS" starttime="20170809 01:04:06.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:06.605" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:06.605" status="PASS" starttime="20170809 01:04:06.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:06.606" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:06.607" status="PASS" starttime="20170809 01:04:06.606"></status>
</kw>
<status endtime="20170809 01:04:06.607" status="PASS" starttime="20170809 01:04:06.606"></status>
</kw>
<status endtime="20170809 01:04:06.607" status="PASS" starttime="20170809 01:04:06.604"></status>
</kw>
<status endtime="20170809 01:04:06.607" status="PASS" starttime="20170809 01:04:06.604"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:06.607" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:06.608" status="PASS" starttime="20170809 01:04:06.607"></status>
</kw>
<msg timestamp="20170809 01:04:06.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.608" status="PASS" starttime="20170809 01:04:06.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.608" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.609" status="PASS" starttime="20170809 01:04:06.608"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:06.609" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:06.609" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:06.609" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:06.609" status="PASS" starttime="20170809 01:04:06.609"></status>
</kw>
<msg timestamp="20170809 01:04:06.610" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:04:06.610" status="PASS" starttime="20170809 01:04:06.266"></status>
</kw>
<msg timestamp="20170809 01:04:06.610" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:04:06.610" status="PASS" starttime="20170809 01:04:06.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:04:06.610" status="PASS" starttime="20170809 01:04:06.610"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:06.614" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:06.615" status="PASS" starttime="20170809 01:04:06.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:06.615" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:06.615" status="PASS" starttime="20170809 01:04:06.615"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:06.616" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:06.616" status="PASS" starttime="20170809 01:04:06.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:06.616" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:06.616" status="PASS" starttime="20170809 01:04:06.616"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.793" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:06.793" status="PASS" starttime="20170809 01:04:06.617"></status>
</kw>
<msg timestamp="20170809 01:04:06.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:06.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.793" status="PASS" starttime="20170809 01:04:06.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.794" status="PASS" starttime="20170809 01:04:06.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.795" status="PASS" starttime="20170809 01:04:06.794"></status>
</kw>
<status endtime="20170809 01:04:06.795" status="PASS" starttime="20170809 01:04:06.613"></status>
</kw>
<status endtime="20170809 01:04:06.795" status="PASS" starttime="20170809 01:04:06.613"></status>
</kw>
<status endtime="20170809 01:04:06.795" status="PASS" starttime="20170809 01:04:06.612"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:06.796" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:04:06.796" status="PASS" starttime="20170809 01:04:06.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:06.798" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:06.798" status="PASS" starttime="20170809 01:04:06.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:06.799" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:06.799" status="PASS" starttime="20170809 01:04:06.799"></status>
</kw>
<status endtime="20170809 01:04:06.799" status="PASS" starttime="20170809 01:04:06.798"></status>
</kw>
<status endtime="20170809 01:04:06.799" status="PASS" starttime="20170809 01:04:06.797"></status>
</kw>
<status endtime="20170809 01:04:06.799" status="PASS" starttime="20170809 01:04:06.796"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:06.875" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:04:06.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.875" status="PASS" starttime="20170809 01:04:06.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:06.878" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:06.878" status="PASS" starttime="20170809 01:04:06.877"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:06.879" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:06.879" status="PASS" starttime="20170809 01:04:06.879"></status>
</kw>
<status endtime="20170809 01:04:06.879" status="PASS" starttime="20170809 01:04:06.878"></status>
</kw>
<status endtime="20170809 01:04:06.879" status="PASS" starttime="20170809 01:04:06.876"></status>
</kw>
<status endtime="20170809 01:04:06.879" status="PASS" starttime="20170809 01:04:06.876"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:06.880" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:06.880" status="PASS" starttime="20170809 01:04:06.880"></status>
</kw>
<msg timestamp="20170809 01:04:06.880" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:06.880" status="PASS" starttime="20170809 01:04:06.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:06.881" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:06.881" status="PASS" starttime="20170809 01:04:06.880"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:06.881" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:06.881" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:06.882" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:06.882" status="PASS" starttime="20170809 01:04:06.881"></status>
</kw>
<msg timestamp="20170809 01:04:06.882" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:06.882" status="PASS" starttime="20170809 01:04:06.611"></status>
</kw>
<msg timestamp="20170809 01:04:06.882" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:06.882" status="PASS" starttime="20170809 01:04:06.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:04:06.883" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:04:06.883" status="FAIL" starttime="20170809 01:04:06.882"></status>
</kw>
<status endtime="20170809 01:04:06.883" status="FAIL" starttime="20170809 01:04:06.611"></status>
</kw>
<status endtime="20170809 01:04:06.883" status="FAIL" starttime="20170809 01:04:06.003"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:16.889" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:16.889" status="PASS" starttime="20170809 01:04:16.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:16.890" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:16.890" status="PASS" starttime="20170809 01:04:16.889"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:16.890" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:16.890" status="PASS" starttime="20170809 01:04:16.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:16.891" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:16.891" status="PASS" starttime="20170809 01:04:16.891"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.068" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:17.068" status="PASS" starttime="20170809 01:04:16.892"></status>
</kw>
<msg timestamp="20170809 01:04:17.068" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:17.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.068" status="PASS" starttime="20170809 01:04:16.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.069" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.069" status="PASS" starttime="20170809 01:04:17.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.070" status="PASS" starttime="20170809 01:04:17.069"></status>
</kw>
<status endtime="20170809 01:04:17.070" status="PASS" starttime="20170809 01:04:16.887"></status>
</kw>
<status endtime="20170809 01:04:17.070" status="PASS" starttime="20170809 01:04:16.887"></status>
</kw>
<status endtime="20170809 01:04:17.070" status="PASS" starttime="20170809 01:04:16.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:17.071" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:04:17.071" status="PASS" starttime="20170809 01:04:17.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:17.073" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:17.073" status="PASS" starttime="20170809 01:04:17.072"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:17.074" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:17.074" status="PASS" starttime="20170809 01:04:17.074"></status>
</kw>
<status endtime="20170809 01:04:17.074" status="PASS" starttime="20170809 01:04:17.073"></status>
</kw>
<status endtime="20170809 01:04:17.074" status="PASS" starttime="20170809 01:04:17.072"></status>
</kw>
<status endtime="20170809 01:04:17.074" status="PASS" starttime="20170809 01:04:17.071"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:17.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:17.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.138" status="PASS" starttime="20170809 01:04:17.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:17.140" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:17.140" status="PASS" starttime="20170809 01:04:17.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:17.141" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:17.141" status="PASS" starttime="20170809 01:04:17.141"></status>
</kw>
<status endtime="20170809 01:04:17.141" status="PASS" starttime="20170809 01:04:17.140"></status>
</kw>
<status endtime="20170809 01:04:17.142" status="PASS" starttime="20170809 01:04:17.139"></status>
</kw>
<status endtime="20170809 01:04:17.142" status="PASS" starttime="20170809 01:04:17.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:17.142" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:17.142" status="PASS" starttime="20170809 01:04:17.142"></status>
</kw>
<msg timestamp="20170809 01:04:17.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.142" status="PASS" starttime="20170809 01:04:16.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.143" status="PASS" starttime="20170809 01:04:17.143"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:17.144" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:17.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:17.144" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:17.144" status="PASS" starttime="20170809 01:04:17.143"></status>
</kw>
<msg timestamp="20170809 01:04:17.144" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:04:17.144" status="PASS" starttime="20170809 01:04:16.885"></status>
</kw>
<msg timestamp="20170809 01:04:17.144" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:04:17.144" status="PASS" starttime="20170809 01:04:16.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:04:17.145" status="PASS" starttime="20170809 01:04:17.145"></status>
</kw>
<status endtime="20170809 01:04:17.145" status="PASS" starttime="20170809 01:04:16.884"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:17.149" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:17.149" status="PASS" starttime="20170809 01:04:17.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:17.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:17.150" status="PASS" starttime="20170809 01:04:17.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:17.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:17.150" status="PASS" starttime="20170809 01:04:17.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:17.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:17.151" status="PASS" starttime="20170809 01:04:17.150"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:17.356" status="PASS" starttime="20170809 01:04:17.151"></status>
</kw>
<msg timestamp="20170809 01:04:17.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:17.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.356" status="PASS" starttime="20170809 01:04:17.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.357" status="PASS" starttime="20170809 01:04:17.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.358" status="PASS" starttime="20170809 01:04:17.357"></status>
</kw>
<status endtime="20170809 01:04:17.358" status="PASS" starttime="20170809 01:04:17.148"></status>
</kw>
<status endtime="20170809 01:04:17.358" status="PASS" starttime="20170809 01:04:17.147"></status>
</kw>
<status endtime="20170809 01:04:17.358" status="PASS" starttime="20170809 01:04:17.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:17.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:04:17.359" status="PASS" starttime="20170809 01:04:17.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:17.361" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:17.361" status="PASS" starttime="20170809 01:04:17.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:17.362" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:17.362" status="PASS" starttime="20170809 01:04:17.362"></status>
</kw>
<status endtime="20170809 01:04:17.362" status="PASS" starttime="20170809 01:04:17.361"></status>
</kw>
<status endtime="20170809 01:04:17.362" status="PASS" starttime="20170809 01:04:17.359"></status>
</kw>
<status endtime="20170809 01:04:17.362" status="PASS" starttime="20170809 01:04:17.359"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:17.452" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:17.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.452" status="PASS" starttime="20170809 01:04:17.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:17.454" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:17.454" status="PASS" starttime="20170809 01:04:17.453"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:17.455" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:17.455" status="PASS" starttime="20170809 01:04:17.454"></status>
</kw>
<status endtime="20170809 01:04:17.455" status="PASS" starttime="20170809 01:04:17.454"></status>
</kw>
<status endtime="20170809 01:04:17.455" status="PASS" starttime="20170809 01:04:17.453"></status>
</kw>
<status endtime="20170809 01:04:17.455" status="PASS" starttime="20170809 01:04:17.452"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:17.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:17.456" status="PASS" starttime="20170809 01:04:17.455"></status>
</kw>
<msg timestamp="20170809 01:04:17.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.456" status="PASS" starttime="20170809 01:04:17.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.456" status="PASS" starttime="20170809 01:04:17.456"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:17.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:17.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:17.457" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:17.457" status="PASS" starttime="20170809 01:04:17.457"></status>
</kw>
<msg timestamp="20170809 01:04:17.457" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:04:17.458" status="PASS" starttime="20170809 01:04:17.146"></status>
</kw>
<msg timestamp="20170809 01:04:17.458" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:04:17.458" status="PASS" starttime="20170809 01:04:17.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:04:17.458" status="PASS" starttime="20170809 01:04:17.458"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:17.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:17.463" status="PASS" starttime="20170809 01:04:17.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:17.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:17.463" status="PASS" starttime="20170809 01:04:17.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:17.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:17.464" status="PASS" starttime="20170809 01:04:17.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:17.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:17.464" status="PASS" starttime="20170809 01:04:17.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:17.655" status="PASS" starttime="20170809 01:04:17.465"></status>
</kw>
<msg timestamp="20170809 01:04:17.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:17.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.655" status="PASS" starttime="20170809 01:04:17.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.656" status="PASS" starttime="20170809 01:04:17.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.656" status="PASS" starttime="20170809 01:04:17.656"></status>
</kw>
<status endtime="20170809 01:04:17.656" status="PASS" starttime="20170809 01:04:17.461"></status>
</kw>
<status endtime="20170809 01:04:17.657" status="PASS" starttime="20170809 01:04:17.461"></status>
</kw>
<status endtime="20170809 01:04:17.657" status="PASS" starttime="20170809 01:04:17.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:17.657" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:04:17.657" status="PASS" starttime="20170809 01:04:17.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:17.659" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:17.659" status="PASS" starttime="20170809 01:04:17.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:17.660" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:17.660" status="PASS" starttime="20170809 01:04:17.660"></status>
</kw>
<status endtime="20170809 01:04:17.660" status="PASS" starttime="20170809 01:04:17.659"></status>
</kw>
<status endtime="20170809 01:04:17.661" status="PASS" starttime="20170809 01:04:17.658"></status>
</kw>
<status endtime="20170809 01:04:17.661" status="PASS" starttime="20170809 01:04:17.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:17.769" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:04:17.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.769" status="PASS" starttime="20170809 01:04:17.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:17.770" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:17.771" status="PASS" starttime="20170809 01:04:17.770"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:17.771" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:17.772" status="PASS" starttime="20170809 01:04:17.771"></status>
</kw>
<status endtime="20170809 01:04:17.772" status="PASS" starttime="20170809 01:04:17.771"></status>
</kw>
<status endtime="20170809 01:04:17.772" status="PASS" starttime="20170809 01:04:17.769"></status>
</kw>
<status endtime="20170809 01:04:17.772" status="PASS" starttime="20170809 01:04:17.769"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:17.772" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:17.772" status="PASS" starttime="20170809 01:04:17.772"></status>
</kw>
<msg timestamp="20170809 01:04:17.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:17.773" status="PASS" starttime="20170809 01:04:17.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:17.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:17.773" status="PASS" starttime="20170809 01:04:17.773"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:17.774" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:17.774" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:17.774" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:17.774" status="PASS" starttime="20170809 01:04:17.774"></status>
</kw>
<msg timestamp="20170809 01:04:17.774" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:17.774" status="PASS" starttime="20170809 01:04:17.459"></status>
</kw>
<msg timestamp="20170809 01:04:17.774" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:17.775" status="PASS" starttime="20170809 01:04:17.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:04:17.775" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:04:17.775" status="FAIL" starttime="20170809 01:04:17.775"></status>
</kw>
<status endtime="20170809 01:04:17.775" status="FAIL" starttime="20170809 01:04:17.458"></status>
</kw>
<status endtime="20170809 01:04:17.776" status="FAIL" starttime="20170809 01:04:16.884"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:27.781" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:27.781" status="PASS" starttime="20170809 01:04:27.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:27.782" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:27.782" status="PASS" starttime="20170809 01:04:27.782"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:27.783" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:27.783" status="PASS" starttime="20170809 01:04:27.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:27.783" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:27.783" status="PASS" starttime="20170809 01:04:27.783"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:27.985" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:27.986" status="PASS" starttime="20170809 01:04:27.784"></status>
</kw>
<msg timestamp="20170809 01:04:27.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:27.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:27.986" status="PASS" starttime="20170809 01:04:27.784"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:27.986" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:27.987" status="PASS" starttime="20170809 01:04:27.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:27.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:27.987" status="PASS" starttime="20170809 01:04:27.987"></status>
</kw>
<status endtime="20170809 01:04:27.987" status="PASS" starttime="20170809 01:04:27.780"></status>
</kw>
<status endtime="20170809 01:04:27.988" status="PASS" starttime="20170809 01:04:27.779"></status>
</kw>
<status endtime="20170809 01:04:27.988" status="PASS" starttime="20170809 01:04:27.779"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:27.988" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:04:27.988" status="PASS" starttime="20170809 01:04:27.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:27.990" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:27.990" status="PASS" starttime="20170809 01:04:27.990"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:27.991" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:27.991" status="PASS" starttime="20170809 01:04:27.991"></status>
</kw>
<status endtime="20170809 01:04:27.991" status="PASS" starttime="20170809 01:04:27.990"></status>
</kw>
<status endtime="20170809 01:04:27.992" status="PASS" starttime="20170809 01:04:27.989"></status>
</kw>
<status endtime="20170809 01:04:27.992" status="PASS" starttime="20170809 01:04:27.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:28.159" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:28.159" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.159" status="PASS" starttime="20170809 01:04:27.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:28.161" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:28.161" status="PASS" starttime="20170809 01:04:28.160"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:28.162" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:28.162" status="PASS" starttime="20170809 01:04:28.162"></status>
</kw>
<status endtime="20170809 01:04:28.162" status="PASS" starttime="20170809 01:04:28.161"></status>
</kw>
<status endtime="20170809 01:04:28.162" status="PASS" starttime="20170809 01:04:28.160"></status>
</kw>
<status endtime="20170809 01:04:28.163" status="PASS" starttime="20170809 01:04:28.159"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:28.163" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:28.163" status="PASS" starttime="20170809 01:04:28.163"></status>
</kw>
<msg timestamp="20170809 01:04:28.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.163" status="PASS" starttime="20170809 01:04:27.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:28.164" status="PASS" starttime="20170809 01:04:28.164"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:28.164" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:28.165" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:28.165" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:28.165" status="PASS" starttime="20170809 01:04:28.164"></status>
</kw>
<msg timestamp="20170809 01:04:28.165" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:04:28.165" status="PASS" starttime="20170809 01:04:27.777"></status>
</kw>
<msg timestamp="20170809 01:04:28.165" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:04:28.165" status="PASS" starttime="20170809 01:04:27.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:04:28.166" status="PASS" starttime="20170809 01:04:28.166"></status>
</kw>
<status endtime="20170809 01:04:28.166" status="PASS" starttime="20170809 01:04:27.777"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:28.170" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:28.170" status="PASS" starttime="20170809 01:04:28.169"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:28.171" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:28.171" status="PASS" starttime="20170809 01:04:28.170"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:28.171" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:28.171" status="PASS" starttime="20170809 01:04:28.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:28.172" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:28.172" status="PASS" starttime="20170809 01:04:28.172"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:28.372" status="PASS" starttime="20170809 01:04:28.173"></status>
</kw>
<msg timestamp="20170809 01:04:28.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:28.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.373" status="PASS" starttime="20170809 01:04:28.172"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:28.373" status="PASS" starttime="20170809 01:04:28.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:28.374" status="PASS" starttime="20170809 01:04:28.374"></status>
</kw>
<status endtime="20170809 01:04:28.374" status="PASS" starttime="20170809 01:04:28.169"></status>
</kw>
<status endtime="20170809 01:04:28.374" status="PASS" starttime="20170809 01:04:28.168"></status>
</kw>
<status endtime="20170809 01:04:28.374" status="PASS" starttime="20170809 01:04:28.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:28.375" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:04:28.375" status="PASS" starttime="20170809 01:04:28.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:28.377" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:28.377" status="PASS" starttime="20170809 01:04:28.376"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:28.378" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:28.378" status="PASS" starttime="20170809 01:04:28.378"></status>
</kw>
<status endtime="20170809 01:04:28.379" status="PASS" starttime="20170809 01:04:28.378"></status>
</kw>
<status endtime="20170809 01:04:28.379" status="PASS" starttime="20170809 01:04:28.376"></status>
</kw>
<status endtime="20170809 01:04:28.379" status="PASS" starttime="20170809 01:04:28.375"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:28.469" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:28.469" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.469" status="PASS" starttime="20170809 01:04:28.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:28.471" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:28.471" status="PASS" starttime="20170809 01:04:28.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:28.472" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:28.472" status="PASS" starttime="20170809 01:04:28.472"></status>
</kw>
<status endtime="20170809 01:04:28.472" status="PASS" starttime="20170809 01:04:28.471"></status>
</kw>
<status endtime="20170809 01:04:28.472" status="PASS" starttime="20170809 01:04:28.470"></status>
</kw>
<status endtime="20170809 01:04:28.472" status="PASS" starttime="20170809 01:04:28.470"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:28.473" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:28.473" status="PASS" starttime="20170809 01:04:28.473"></status>
</kw>
<msg timestamp="20170809 01:04:28.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.473" status="PASS" starttime="20170809 01:04:28.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:28.474" status="PASS" starttime="20170809 01:04:28.473"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:28.474" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:28.474" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:28.474" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:28.474" status="PASS" starttime="20170809 01:04:28.474"></status>
</kw>
<msg timestamp="20170809 01:04:28.475" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:04:28.475" status="PASS" starttime="20170809 01:04:28.167"></status>
</kw>
<msg timestamp="20170809 01:04:28.475" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:04:28.475" status="PASS" starttime="20170809 01:04:28.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:04:28.476" status="PASS" starttime="20170809 01:04:28.475"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:28.479" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:28.480" status="PASS" starttime="20170809 01:04:28.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:28.480" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:28.480" status="PASS" starttime="20170809 01:04:28.480"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:28.481" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:28.481" status="PASS" starttime="20170809 01:04:28.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:28.482" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:28.482" status="PASS" starttime="20170809 01:04:28.481"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.699" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:28.699" status="PASS" starttime="20170809 01:04:28.483"></status>
</kw>
<msg timestamp="20170809 01:04:28.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:28.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.700" status="PASS" starttime="20170809 01:04:28.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.700" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:28.700" status="PASS" starttime="20170809 01:04:28.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:28.701" status="PASS" starttime="20170809 01:04:28.701"></status>
</kw>
<status endtime="20170809 01:04:28.701" status="PASS" starttime="20170809 01:04:28.478"></status>
</kw>
<status endtime="20170809 01:04:28.701" status="PASS" starttime="20170809 01:04:28.478"></status>
</kw>
<status endtime="20170809 01:04:28.701" status="PASS" starttime="20170809 01:04:28.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:28.702" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:04:28.702" status="PASS" starttime="20170809 01:04:28.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:28.704" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:28.704" status="PASS" starttime="20170809 01:04:28.703"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:28.705" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:28.705" status="PASS" starttime="20170809 01:04:28.705"></status>
</kw>
<status endtime="20170809 01:04:28.705" status="PASS" starttime="20170809 01:04:28.704"></status>
</kw>
<status endtime="20170809 01:04:28.705" status="PASS" starttime="20170809 01:04:28.703"></status>
</kw>
<status endtime="20170809 01:04:28.705" status="PASS" starttime="20170809 01:04:28.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:28.771" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:04:28.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.771" status="PASS" starttime="20170809 01:04:28.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:28.773" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:28.773" status="PASS" starttime="20170809 01:04:28.773"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:28.774" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:28.774" status="PASS" starttime="20170809 01:04:28.774"></status>
</kw>
<status endtime="20170809 01:04:28.774" status="PASS" starttime="20170809 01:04:28.773"></status>
</kw>
<status endtime="20170809 01:04:28.774" status="PASS" starttime="20170809 01:04:28.772"></status>
</kw>
<status endtime="20170809 01:04:28.774" status="PASS" starttime="20170809 01:04:28.772"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:28.775" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:28.775" status="PASS" starttime="20170809 01:04:28.775"></status>
</kw>
<msg timestamp="20170809 01:04:28.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:28.775" status="PASS" starttime="20170809 01:04:28.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:28.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:28.776" status="PASS" starttime="20170809 01:04:28.775"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:28.776" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:28.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:28.776" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:28.776" status="PASS" starttime="20170809 01:04:28.776"></status>
</kw>
<msg timestamp="20170809 01:04:28.777" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:28.777" status="PASS" starttime="20170809 01:04:28.476"></status>
</kw>
<msg timestamp="20170809 01:04:28.777" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:28.777" status="PASS" starttime="20170809 01:04:28.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:04:28.778" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:04:28.778" status="FAIL" starttime="20170809 01:04:28.777"></status>
</kw>
<status endtime="20170809 01:04:28.778" status="FAIL" starttime="20170809 01:04:28.476"></status>
</kw>
<status endtime="20170809 01:04:28.778" status="FAIL" starttime="20170809 01:04:27.776"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:38.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:38.784" status="PASS" starttime="20170809 01:04:38.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:38.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:38.784" status="PASS" starttime="20170809 01:04:38.784"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:38.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:38.785" status="PASS" starttime="20170809 01:04:38.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:38.786" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:38.786" status="PASS" starttime="20170809 01:04:38.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:38.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:38.993" status="PASS" starttime="20170809 01:04:38.786"></status>
</kw>
<msg timestamp="20170809 01:04:38.993" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:38.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:38.993" status="PASS" starttime="20170809 01:04:38.786"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:38.994" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:38.994" status="PASS" starttime="20170809 01:04:38.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:38.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:38.994" status="PASS" starttime="20170809 01:04:38.994"></status>
</kw>
<status endtime="20170809 01:04:38.994" status="PASS" starttime="20170809 01:04:38.782"></status>
</kw>
<status endtime="20170809 01:04:38.995" status="PASS" starttime="20170809 01:04:38.782"></status>
</kw>
<status endtime="20170809 01:04:38.995" status="PASS" starttime="20170809 01:04:38.781"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:38.995" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:04:38.995" status="PASS" starttime="20170809 01:04:38.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:38.997" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:38.997" status="PASS" starttime="20170809 01:04:38.997"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:38.998" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:38.998" status="PASS" starttime="20170809 01:04:38.998"></status>
</kw>
<status endtime="20170809 01:04:38.999" status="PASS" starttime="20170809 01:04:38.997"></status>
</kw>
<status endtime="20170809 01:04:38.999" status="PASS" starttime="20170809 01:04:38.996"></status>
</kw>
<status endtime="20170809 01:04:38.999" status="PASS" starttime="20170809 01:04:38.996"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:39.062" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:39.063" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.063" status="PASS" starttime="20170809 01:04:38.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:39.067" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:39.068" status="PASS" starttime="20170809 01:04:39.064"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:39.069" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:39.069" status="PASS" starttime="20170809 01:04:39.068"></status>
</kw>
<status endtime="20170809 01:04:39.069" status="PASS" starttime="20170809 01:04:39.068"></status>
</kw>
<status endtime="20170809 01:04:39.069" status="PASS" starttime="20170809 01:04:39.063"></status>
</kw>
<status endtime="20170809 01:04:39.069" status="PASS" starttime="20170809 01:04:39.063"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:39.069" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:39.069" status="PASS" starttime="20170809 01:04:39.069"></status>
</kw>
<msg timestamp="20170809 01:04:39.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.070" status="PASS" starttime="20170809 01:04:38.780"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:39.070" status="PASS" starttime="20170809 01:04:39.070"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:39.071" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:39.071" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:39.071" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:39.071" status="PASS" starttime="20170809 01:04:39.071"></status>
</kw>
<msg timestamp="20170809 01:04:39.071" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:04:39.071" status="PASS" starttime="20170809 01:04:38.780"></status>
</kw>
<msg timestamp="20170809 01:04:39.072" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:04:39.072" status="PASS" starttime="20170809 01:04:38.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:04:39.072" status="PASS" starttime="20170809 01:04:39.072"></status>
</kw>
<status endtime="20170809 01:04:39.072" status="PASS" starttime="20170809 01:04:38.779"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:39.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:39.077" status="PASS" starttime="20170809 01:04:39.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:39.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:39.077" status="PASS" starttime="20170809 01:04:39.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:39.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:39.078" status="PASS" starttime="20170809 01:04:39.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:39.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:39.079" status="PASS" starttime="20170809 01:04:39.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:39.271" status="PASS" starttime="20170809 01:04:39.079"></status>
</kw>
<msg timestamp="20170809 01:04:39.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:39.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.271" status="PASS" starttime="20170809 01:04:39.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:39.272" status="PASS" starttime="20170809 01:04:39.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:39.273" status="PASS" starttime="20170809 01:04:39.272"></status>
</kw>
<status endtime="20170809 01:04:39.273" status="PASS" starttime="20170809 01:04:39.075"></status>
</kw>
<status endtime="20170809 01:04:39.273" status="PASS" starttime="20170809 01:04:39.075"></status>
</kw>
<status endtime="20170809 01:04:39.273" status="PASS" starttime="20170809 01:04:39.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:39.274" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:04:39.274" status="PASS" starttime="20170809 01:04:39.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:39.276" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:39.276" status="PASS" starttime="20170809 01:04:39.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:39.277" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:39.277" status="PASS" starttime="20170809 01:04:39.277"></status>
</kw>
<status endtime="20170809 01:04:39.277" status="PASS" starttime="20170809 01:04:39.276"></status>
</kw>
<status endtime="20170809 01:04:39.277" status="PASS" starttime="20170809 01:04:39.275"></status>
</kw>
<status endtime="20170809 01:04:39.278" status="PASS" starttime="20170809 01:04:39.274"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:39.366" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:39.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.366" status="PASS" starttime="20170809 01:04:39.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:39.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:39.368" status="PASS" starttime="20170809 01:04:39.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:39.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:39.369" status="PASS" starttime="20170809 01:04:39.369"></status>
</kw>
<status endtime="20170809 01:04:39.369" status="PASS" starttime="20170809 01:04:39.368"></status>
</kw>
<status endtime="20170809 01:04:39.369" status="PASS" starttime="20170809 01:04:39.367"></status>
</kw>
<status endtime="20170809 01:04:39.369" status="PASS" starttime="20170809 01:04:39.366"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:39.370" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:39.370" status="PASS" starttime="20170809 01:04:39.369"></status>
</kw>
<msg timestamp="20170809 01:04:39.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.370" status="PASS" starttime="20170809 01:04:39.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:39.371" status="PASS" starttime="20170809 01:04:39.370"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:39.371" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:39.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:39.371" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:39.371" status="PASS" starttime="20170809 01:04:39.371"></status>
</kw>
<msg timestamp="20170809 01:04:39.372" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:04:39.372" status="PASS" starttime="20170809 01:04:39.073"></status>
</kw>
<msg timestamp="20170809 01:04:39.372" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:04:39.372" status="PASS" starttime="20170809 01:04:39.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:04:39.372" status="PASS" starttime="20170809 01:04:39.372"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:39.376" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:39.377" status="PASS" starttime="20170809 01:04:39.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:39.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:39.377" status="PASS" starttime="20170809 01:04:39.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:39.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:39.378" status="PASS" starttime="20170809 01:04:39.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:39.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:39.379" status="PASS" starttime="20170809 01:04:39.378"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:39.559" status="PASS" starttime="20170809 01:04:39.379"></status>
</kw>
<msg timestamp="20170809 01:04:39.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:39.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.559" status="PASS" starttime="20170809 01:04:39.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:39.560" status="PASS" starttime="20170809 01:04:39.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:39.560" status="PASS" starttime="20170809 01:04:39.560"></status>
</kw>
<status endtime="20170809 01:04:39.560" status="PASS" starttime="20170809 01:04:39.375"></status>
</kw>
<status endtime="20170809 01:04:39.560" status="PASS" starttime="20170809 01:04:39.375"></status>
</kw>
<status endtime="20170809 01:04:39.561" status="PASS" starttime="20170809 01:04:39.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:39.561" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:04:39.561" status="PASS" starttime="20170809 01:04:39.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:39.563" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:39.563" status="PASS" starttime="20170809 01:04:39.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:39.564" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:39.565" status="PASS" starttime="20170809 01:04:39.564"></status>
</kw>
<status endtime="20170809 01:04:39.565" status="PASS" starttime="20170809 01:04:39.564"></status>
</kw>
<status endtime="20170809 01:04:39.565" status="PASS" starttime="20170809 01:04:39.562"></status>
</kw>
<status endtime="20170809 01:04:39.565" status="PASS" starttime="20170809 01:04:39.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:39.631" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:04:39.631" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.631" status="PASS" starttime="20170809 01:04:39.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:39.633" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:39.633" status="PASS" starttime="20170809 01:04:39.633"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:39.634" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:39.634" status="PASS" starttime="20170809 01:04:39.634"></status>
</kw>
<status endtime="20170809 01:04:39.634" status="PASS" starttime="20170809 01:04:39.633"></status>
</kw>
<status endtime="20170809 01:04:39.635" status="PASS" starttime="20170809 01:04:39.632"></status>
</kw>
<status endtime="20170809 01:04:39.635" status="PASS" starttime="20170809 01:04:39.632"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:39.635" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:39.635" status="PASS" starttime="20170809 01:04:39.635"></status>
</kw>
<msg timestamp="20170809 01:04:39.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:39.635" status="PASS" starttime="20170809 01:04:39.374"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:39.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:39.636" status="PASS" starttime="20170809 01:04:39.636"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:39.637" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:39.637" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:39.637" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:39.637" status="PASS" starttime="20170809 01:04:39.636"></status>
</kw>
<msg timestamp="20170809 01:04:39.637" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:39.637" status="PASS" starttime="20170809 01:04:39.373"></status>
</kw>
<msg timestamp="20170809 01:04:39.637" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:39.637" status="PASS" starttime="20170809 01:04:39.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:04:39.638" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:04:39.638" status="FAIL" starttime="20170809 01:04:39.638"></status>
</kw>
<status endtime="20170809 01:04:39.638" status="FAIL" starttime="20170809 01:04:39.373"></status>
</kw>
<status endtime="20170809 01:04:39.638" status="FAIL" starttime="20170809 01:04:38.778"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:49.645" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:49.645" status="PASS" starttime="20170809 01:04:49.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:49.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:49.646" status="PASS" starttime="20170809 01:04:49.645"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:49.646" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:49.646" status="PASS" starttime="20170809 01:04:49.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:49.647" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:49.647" status="PASS" starttime="20170809 01:04:49.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:49.830" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:49.830" status="PASS" starttime="20170809 01:04:49.648"></status>
</kw>
<msg timestamp="20170809 01:04:49.831" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:49.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:49.831" status="PASS" starttime="20170809 01:04:49.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:49.831" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:49.831" status="PASS" starttime="20170809 01:04:49.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:49.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:49.832" status="PASS" starttime="20170809 01:04:49.832"></status>
</kw>
<status endtime="20170809 01:04:49.832" status="PASS" starttime="20170809 01:04:49.644"></status>
</kw>
<status endtime="20170809 01:04:49.832" status="PASS" starttime="20170809 01:04:49.642"></status>
</kw>
<status endtime="20170809 01:04:49.832" status="PASS" starttime="20170809 01:04:49.641"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:49.833" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:04:49.833" status="PASS" starttime="20170809 01:04:49.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:49.835" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:49.835" status="PASS" starttime="20170809 01:04:49.834"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:49.836" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:49.836" status="PASS" starttime="20170809 01:04:49.836"></status>
</kw>
<status endtime="20170809 01:04:49.836" status="PASS" starttime="20170809 01:04:49.835"></status>
</kw>
<status endtime="20170809 01:04:49.836" status="PASS" starttime="20170809 01:04:49.834"></status>
</kw>
<status endtime="20170809 01:04:49.836" status="PASS" starttime="20170809 01:04:49.833"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:49.900" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:49.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:49.900" status="PASS" starttime="20170809 01:04:49.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:49.902" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:49.902" status="PASS" starttime="20170809 01:04:49.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:49.903" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:49.903" status="PASS" starttime="20170809 01:04:49.903"></status>
</kw>
<status endtime="20170809 01:04:49.903" status="PASS" starttime="20170809 01:04:49.902"></status>
</kw>
<status endtime="20170809 01:04:49.904" status="PASS" starttime="20170809 01:04:49.901"></status>
</kw>
<status endtime="20170809 01:04:49.904" status="PASS" starttime="20170809 01:04:49.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:49.904" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:49.904" status="PASS" starttime="20170809 01:04:49.904"></status>
</kw>
<msg timestamp="20170809 01:04:49.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:49.904" status="PASS" starttime="20170809 01:04:49.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:49.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:49.905" status="PASS" starttime="20170809 01:04:49.905"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:49.906" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:49.906" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:49.906" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:49.906" status="PASS" starttime="20170809 01:04:49.905"></status>
</kw>
<msg timestamp="20170809 01:04:49.906" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:04:49.906" status="PASS" starttime="20170809 01:04:49.640"></status>
</kw>
<msg timestamp="20170809 01:04:49.906" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:04:49.906" status="PASS" starttime="20170809 01:04:49.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:04:49.907" status="PASS" starttime="20170809 01:04:49.907"></status>
</kw>
<status endtime="20170809 01:04:49.907" status="PASS" starttime="20170809 01:04:49.639"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:49.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:49.911" status="PASS" starttime="20170809 01:04:49.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:49.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:49.911" status="PASS" starttime="20170809 01:04:49.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:49.912" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:49.912" status="PASS" starttime="20170809 01:04:49.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:49.913" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:49.913" status="PASS" starttime="20170809 01:04:49.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:50.123" status="PASS" starttime="20170809 01:04:49.913"></status>
</kw>
<msg timestamp="20170809 01:04:50.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:50.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:50.123" status="PASS" starttime="20170809 01:04:49.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:50.124" status="PASS" starttime="20170809 01:04:50.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:50.125" status="PASS" starttime="20170809 01:04:50.124"></status>
</kw>
<status endtime="20170809 01:04:50.125" status="PASS" starttime="20170809 01:04:49.910"></status>
</kw>
<status endtime="20170809 01:04:50.125" status="PASS" starttime="20170809 01:04:49.909"></status>
</kw>
<status endtime="20170809 01:04:50.125" status="PASS" starttime="20170809 01:04:49.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:50.126" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:04:50.126" status="PASS" starttime="20170809 01:04:50.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:50.128" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:50.128" status="PASS" starttime="20170809 01:04:50.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:50.129" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:04:50.129" status="PASS" starttime="20170809 01:04:50.129"></status>
</kw>
<status endtime="20170809 01:04:50.130" status="PASS" starttime="20170809 01:04:50.129"></status>
</kw>
<status endtime="20170809 01:04:50.130" status="PASS" starttime="20170809 01:04:50.127"></status>
</kw>
<status endtime="20170809 01:04:50.130" status="PASS" starttime="20170809 01:04:50.126"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:50.229" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:04:50.229" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:50.229" status="PASS" starttime="20170809 01:04:50.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:50.231" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:50.231" status="PASS" starttime="20170809 01:04:50.230"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:50.232" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:50.232" status="PASS" starttime="20170809 01:04:50.232"></status>
</kw>
<status endtime="20170809 01:04:50.232" status="PASS" starttime="20170809 01:04:50.231"></status>
</kw>
<status endtime="20170809 01:04:50.232" status="PASS" starttime="20170809 01:04:50.230"></status>
</kw>
<status endtime="20170809 01:04:50.232" status="PASS" starttime="20170809 01:04:50.230"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:50.233" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:50.233" status="PASS" starttime="20170809 01:04:50.232"></status>
</kw>
<msg timestamp="20170809 01:04:50.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:50.233" status="PASS" starttime="20170809 01:04:49.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:50.234" status="PASS" starttime="20170809 01:04:50.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:50.234" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:50.234" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:50.235" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:50.235" status="PASS" starttime="20170809 01:04:50.234"></status>
</kw>
<msg timestamp="20170809 01:04:50.235" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:04:50.235" status="PASS" starttime="20170809 01:04:49.908"></status>
</kw>
<msg timestamp="20170809 01:04:50.235" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:04:50.235" status="PASS" starttime="20170809 01:04:49.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:04:50.236" status="PASS" starttime="20170809 01:04:50.235"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:04:50.240" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:04:50.240" status="PASS" starttime="20170809 01:04:50.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:04:50.241" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:04:50.241" status="PASS" starttime="20170809 01:04:50.240"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:04:50.241" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:04:50.241" status="PASS" starttime="20170809 01:04:50.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:04:50.242" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:04:50.242" status="PASS" starttime="20170809 01:04:50.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.450" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:04:50.450" status="PASS" starttime="20170809 01:04:50.243"></status>
</kw>
<msg timestamp="20170809 01:04:50.450" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:04:50.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:50.451" status="PASS" starttime="20170809 01:04:50.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.451" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:50.451" status="PASS" starttime="20170809 01:04:50.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:50.452" status="PASS" starttime="20170809 01:04:50.451"></status>
</kw>
<status endtime="20170809 01:04:50.452" status="PASS" starttime="20170809 01:04:50.239"></status>
</kw>
<status endtime="20170809 01:04:50.452" status="PASS" starttime="20170809 01:04:50.238"></status>
</kw>
<status endtime="20170809 01:04:50.452" status="PASS" starttime="20170809 01:04:50.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:04:50.453" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:04:50.453" status="PASS" starttime="20170809 01:04:50.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:50.455" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:50.455" status="PASS" starttime="20170809 01:04:50.454"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:50.456" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:04:50.456" status="PASS" starttime="20170809 01:04:50.456"></status>
</kw>
<status endtime="20170809 01:04:50.456" status="PASS" starttime="20170809 01:04:50.455"></status>
</kw>
<status endtime="20170809 01:04:50.456" status="PASS" starttime="20170809 01:04:50.454"></status>
</kw>
<status endtime="20170809 01:04:50.456" status="PASS" starttime="20170809 01:04:50.453"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:04:50.553" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:04:50.553" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:50.553" status="PASS" starttime="20170809 01:04:50.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:04:50.555" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:50.555" status="PASS" starttime="20170809 01:04:50.554"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:04:50.556" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:04:50.556" status="PASS" starttime="20170809 01:04:50.555"></status>
</kw>
<status endtime="20170809 01:04:50.556" status="PASS" starttime="20170809 01:04:50.555"></status>
</kw>
<status endtime="20170809 01:04:50.556" status="PASS" starttime="20170809 01:04:50.554"></status>
</kw>
<status endtime="20170809 01:04:50.556" status="PASS" starttime="20170809 01:04:50.553"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:04:50.557" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:04:50.557" status="PASS" starttime="20170809 01:04:50.556"></status>
</kw>
<msg timestamp="20170809 01:04:50.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:04:50.557" status="PASS" starttime="20170809 01:04:50.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:04:50.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:04:50.558" status="PASS" starttime="20170809 01:04:50.557"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:04:50.558" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:04:50.558" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:04:50.558" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:04:50.558" status="PASS" starttime="20170809 01:04:50.558"></status>
</kw>
<msg timestamp="20170809 01:04:50.558" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:50.559" status="PASS" starttime="20170809 01:04:50.237"></status>
</kw>
<msg timestamp="20170809 01:04:50.559" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:04:50.559" status="PASS" starttime="20170809 01:04:50.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:04:50.559" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:04:50.559" status="FAIL" starttime="20170809 01:04:50.559"></status>
</kw>
<status endtime="20170809 01:04:50.560" status="FAIL" starttime="20170809 01:04:50.236"></status>
</kw>
<status endtime="20170809 01:04:50.560" status="FAIL" starttime="20170809 01:04:49.639"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:00.566" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:00.567" status="PASS" starttime="20170809 01:05:00.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:00.567" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:00.567" status="PASS" starttime="20170809 01:05:00.567"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:00.568" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:00.568" status="PASS" starttime="20170809 01:05:00.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:00.569" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:00.569" status="PASS" starttime="20170809 01:05:00.569"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:00.771" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:00.771" status="PASS" starttime="20170809 01:05:00.570"></status>
</kw>
<msg timestamp="20170809 01:05:00.771" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:00.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:00.771" status="PASS" starttime="20170809 01:05:00.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:00.772" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:00.772" status="PASS" starttime="20170809 01:05:00.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:00.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:00.773" status="PASS" starttime="20170809 01:05:00.772"></status>
</kw>
<status endtime="20170809 01:05:00.773" status="PASS" starttime="20170809 01:05:00.565"></status>
</kw>
<status endtime="20170809 01:05:00.773" status="PASS" starttime="20170809 01:05:00.564"></status>
</kw>
<status endtime="20170809 01:05:00.773" status="PASS" starttime="20170809 01:05:00.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:00.773" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:05:00.774" status="PASS" starttime="20170809 01:05:00.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:00.776" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:00.776" status="PASS" starttime="20170809 01:05:00.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:00.776" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:00.777" status="PASS" starttime="20170809 01:05:00.776"></status>
</kw>
<status endtime="20170809 01:05:00.777" status="PASS" starttime="20170809 01:05:00.776"></status>
</kw>
<status endtime="20170809 01:05:00.777" status="PASS" starttime="20170809 01:05:00.774"></status>
</kw>
<status endtime="20170809 01:05:00.777" status="PASS" starttime="20170809 01:05:00.774"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:00.840" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:00.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:00.840" status="PASS" starttime="20170809 01:05:00.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:00.842" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:00.842" status="PASS" starttime="20170809 01:05:00.841"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:00.843" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:00.843" status="PASS" starttime="20170809 01:05:00.843"></status>
</kw>
<status endtime="20170809 01:05:00.843" status="PASS" starttime="20170809 01:05:00.842"></status>
</kw>
<status endtime="20170809 01:05:00.843" status="PASS" starttime="20170809 01:05:00.841"></status>
</kw>
<status endtime="20170809 01:05:00.843" status="PASS" starttime="20170809 01:05:00.840"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:00.844" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:00.844" status="PASS" starttime="20170809 01:05:00.843"></status>
</kw>
<msg timestamp="20170809 01:05:00.844" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:00.844" status="PASS" starttime="20170809 01:05:00.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:00.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:00.845" status="PASS" starttime="20170809 01:05:00.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:00.845" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:00.845" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:00.845" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:00.845" status="PASS" starttime="20170809 01:05:00.845"></status>
</kw>
<msg timestamp="20170809 01:05:00.846" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:05:00.846" status="PASS" starttime="20170809 01:05:00.562"></status>
</kw>
<msg timestamp="20170809 01:05:00.846" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:05:00.846" status="PASS" starttime="20170809 01:05:00.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:05:00.846" status="PASS" starttime="20170809 01:05:00.846"></status>
</kw>
<status endtime="20170809 01:05:00.847" status="PASS" starttime="20170809 01:05:00.561"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:00.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:00.850" status="PASS" starttime="20170809 01:05:00.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:00.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:00.851" status="PASS" starttime="20170809 01:05:00.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:00.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:00.852" status="PASS" starttime="20170809 01:05:00.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:00.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:00.852" status="PASS" starttime="20170809 01:05:00.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:01.037" status="PASS" starttime="20170809 01:05:00.853"></status>
</kw>
<msg timestamp="20170809 01:05:01.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:01.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:01.037" status="PASS" starttime="20170809 01:05:00.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:01.038" status="PASS" starttime="20170809 01:05:01.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:01.039" status="PASS" starttime="20170809 01:05:01.038"></status>
</kw>
<status endtime="20170809 01:05:01.039" status="PASS" starttime="20170809 01:05:00.849"></status>
</kw>
<status endtime="20170809 01:05:01.039" status="PASS" starttime="20170809 01:05:00.849"></status>
</kw>
<status endtime="20170809 01:05:01.039" status="PASS" starttime="20170809 01:05:00.848"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:01.039" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:05:01.040" status="PASS" starttime="20170809 01:05:01.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:01.042" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:01.042" status="PASS" starttime="20170809 01:05:01.041"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:01.043" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:01.043" status="PASS" starttime="20170809 01:05:01.043"></status>
</kw>
<status endtime="20170809 01:05:01.043" status="PASS" starttime="20170809 01:05:01.042"></status>
</kw>
<status endtime="20170809 01:05:01.043" status="PASS" starttime="20170809 01:05:01.040"></status>
</kw>
<status endtime="20170809 01:05:01.043" status="PASS" starttime="20170809 01:05:01.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:01.133" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:01.133" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:01.133" status="PASS" starttime="20170809 01:05:01.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:01.135" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:01.135" status="PASS" starttime="20170809 01:05:01.135"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:01.136" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:01.136" status="PASS" starttime="20170809 01:05:01.136"></status>
</kw>
<status endtime="20170809 01:05:01.136" status="PASS" starttime="20170809 01:05:01.136"></status>
</kw>
<status endtime="20170809 01:05:01.137" status="PASS" starttime="20170809 01:05:01.134"></status>
</kw>
<status endtime="20170809 01:05:01.137" status="PASS" starttime="20170809 01:05:01.134"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:01.137" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:01.137" status="PASS" starttime="20170809 01:05:01.137"></status>
</kw>
<msg timestamp="20170809 01:05:01.137" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:01.137" status="PASS" starttime="20170809 01:05:00.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:01.138" status="PASS" starttime="20170809 01:05:01.138"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:01.139" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:01.139" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:01.139" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:01.139" status="PASS" starttime="20170809 01:05:01.138"></status>
</kw>
<msg timestamp="20170809 01:05:01.139" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:05:01.139" status="PASS" starttime="20170809 01:05:00.847"></status>
</kw>
<msg timestamp="20170809 01:05:01.139" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:05:01.139" status="PASS" starttime="20170809 01:05:00.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:05:01.140" status="PASS" starttime="20170809 01:05:01.140"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:01.144" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:01.144" status="PASS" starttime="20170809 01:05:01.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:01.145" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:01.145" status="PASS" starttime="20170809 01:05:01.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:01.145" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:01.145" status="PASS" starttime="20170809 01:05:01.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:01.146" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:01.146" status="PASS" starttime="20170809 01:05:01.146"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.330" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:01.331" status="PASS" starttime="20170809 01:05:01.147"></status>
</kw>
<msg timestamp="20170809 01:05:01.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:01.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:01.331" status="PASS" starttime="20170809 01:05:01.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:01.332" status="PASS" starttime="20170809 01:05:01.331"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:01.332" status="PASS" starttime="20170809 01:05:01.332"></status>
</kw>
<status endtime="20170809 01:05:01.332" status="PASS" starttime="20170809 01:05:01.143"></status>
</kw>
<status endtime="20170809 01:05:01.333" status="PASS" starttime="20170809 01:05:01.142"></status>
</kw>
<status endtime="20170809 01:05:01.333" status="PASS" starttime="20170809 01:05:01.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:01.333" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:05:01.333" status="PASS" starttime="20170809 01:05:01.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:01.335" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:01.335" status="PASS" starttime="20170809 01:05:01.335"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:01.336" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:01.336" status="PASS" starttime="20170809 01:05:01.336"></status>
</kw>
<status endtime="20170809 01:05:01.336" status="PASS" starttime="20170809 01:05:01.336"></status>
</kw>
<status endtime="20170809 01:05:01.337" status="PASS" starttime="20170809 01:05:01.334"></status>
</kw>
<status endtime="20170809 01:05:01.337" status="PASS" starttime="20170809 01:05:01.334"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:01.436" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:05:01.436" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:01.436" status="PASS" starttime="20170809 01:05:01.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:01.438" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:01.438" status="PASS" starttime="20170809 01:05:01.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:01.438" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:01.439" status="PASS" starttime="20170809 01:05:01.438"></status>
</kw>
<status endtime="20170809 01:05:01.439" status="PASS" starttime="20170809 01:05:01.438"></status>
</kw>
<status endtime="20170809 01:05:01.439" status="PASS" starttime="20170809 01:05:01.437"></status>
</kw>
<status endtime="20170809 01:05:01.439" status="PASS" starttime="20170809 01:05:01.436"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:01.439" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:01.439" status="PASS" starttime="20170809 01:05:01.439"></status>
</kw>
<msg timestamp="20170809 01:05:01.440" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:01.440" status="PASS" starttime="20170809 01:05:01.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:01.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:01.440" status="PASS" starttime="20170809 01:05:01.440"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:01.441" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:01.441" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:01.441" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:01.441" status="PASS" starttime="20170809 01:05:01.440"></status>
</kw>
<msg timestamp="20170809 01:05:01.441" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:05:01.441" status="PASS" starttime="20170809 01:05:01.141"></status>
</kw>
<msg timestamp="20170809 01:05:01.441" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:05:01.442" status="PASS" starttime="20170809 01:05:01.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:05:01.442" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:05:01.442" status="FAIL" starttime="20170809 01:05:01.442"></status>
</kw>
<status endtime="20170809 01:05:01.442" status="FAIL" starttime="20170809 01:05:01.140"></status>
</kw>
<status endtime="20170809 01:05:01.443" status="FAIL" starttime="20170809 01:05:00.560"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:11.448" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:11.449" status="PASS" starttime="20170809 01:05:11.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:11.449" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:11.449" status="PASS" starttime="20170809 01:05:11.449"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:11.450" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:11.450" status="PASS" starttime="20170809 01:05:11.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:11.451" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:11.451" status="PASS" starttime="20170809 01:05:11.450"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:11.625" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:11.625" status="PASS" starttime="20170809 01:05:11.451"></status>
</kw>
<msg timestamp="20170809 01:05:11.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:11.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:11.626" status="PASS" starttime="20170809 01:05:11.451"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:11.626" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:11.626" status="PASS" starttime="20170809 01:05:11.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:11.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:11.627" status="PASS" starttime="20170809 01:05:11.627"></status>
</kw>
<status endtime="20170809 01:05:11.627" status="PASS" starttime="20170809 01:05:11.448"></status>
</kw>
<status endtime="20170809 01:05:11.627" status="PASS" starttime="20170809 01:05:11.447"></status>
</kw>
<status endtime="20170809 01:05:11.627" status="PASS" starttime="20170809 01:05:11.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:11.628" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:05:11.628" status="PASS" starttime="20170809 01:05:11.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:11.630" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:11.630" status="PASS" starttime="20170809 01:05:11.629"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:11.631" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:11.631" status="PASS" starttime="20170809 01:05:11.631"></status>
</kw>
<status endtime="20170809 01:05:11.631" status="PASS" starttime="20170809 01:05:11.630"></status>
</kw>
<status endtime="20170809 01:05:11.631" status="PASS" starttime="20170809 01:05:11.629"></status>
</kw>
<status endtime="20170809 01:05:11.631" status="PASS" starttime="20170809 01:05:11.628"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:11.695" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:11.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:11.695" status="PASS" starttime="20170809 01:05:11.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:11.700" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:11.700" status="PASS" starttime="20170809 01:05:11.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:11.701" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:11.701" status="PASS" starttime="20170809 01:05:11.701"></status>
</kw>
<status endtime="20170809 01:05:11.701" status="PASS" starttime="20170809 01:05:11.700"></status>
</kw>
<status endtime="20170809 01:05:11.701" status="PASS" starttime="20170809 01:05:11.696"></status>
</kw>
<status endtime="20170809 01:05:11.701" status="PASS" starttime="20170809 01:05:11.696"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:11.702" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:11.702" status="PASS" starttime="20170809 01:05:11.702"></status>
</kw>
<msg timestamp="20170809 01:05:11.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:11.702" status="PASS" starttime="20170809 01:05:11.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:11.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:11.703" status="PASS" starttime="20170809 01:05:11.702"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:11.703" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:11.703" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:11.703" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:11.703" status="PASS" starttime="20170809 01:05:11.703"></status>
</kw>
<msg timestamp="20170809 01:05:11.704" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:05:11.704" status="PASS" starttime="20170809 01:05:11.445"></status>
</kw>
<msg timestamp="20170809 01:05:11.704" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:05:11.704" status="PASS" starttime="20170809 01:05:11.444"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:05:11.705" status="PASS" starttime="20170809 01:05:11.704"></status>
</kw>
<status endtime="20170809 01:05:11.705" status="PASS" starttime="20170809 01:05:11.444"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:11.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:11.709" status="PASS" starttime="20170809 01:05:11.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:11.710" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:11.710" status="PASS" starttime="20170809 01:05:11.709"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:11.710" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:11.710" status="PASS" starttime="20170809 01:05:11.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:11.711" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:11.711" status="PASS" starttime="20170809 01:05:11.711"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:11.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:11.944" status="PASS" starttime="20170809 01:05:11.712"></status>
</kw>
<msg timestamp="20170809 01:05:11.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:11.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:11.944" status="PASS" starttime="20170809 01:05:11.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:11.945" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:11.945" status="PASS" starttime="20170809 01:05:11.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:11.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:11.945" status="PASS" starttime="20170809 01:05:11.945"></status>
</kw>
<status endtime="20170809 01:05:11.945" status="PASS" starttime="20170809 01:05:11.708"></status>
</kw>
<status endtime="20170809 01:05:11.946" status="PASS" starttime="20170809 01:05:11.707"></status>
</kw>
<status endtime="20170809 01:05:11.946" status="PASS" starttime="20170809 01:05:11.706"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:11.946" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:05:11.946" status="PASS" starttime="20170809 01:05:11.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:11.949" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:11.949" status="PASS" starttime="20170809 01:05:11.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:11.950" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:11.950" status="PASS" starttime="20170809 01:05:11.949"></status>
</kw>
<status endtime="20170809 01:05:11.950" status="PASS" starttime="20170809 01:05:11.949"></status>
</kw>
<status endtime="20170809 01:05:11.950" status="PASS" starttime="20170809 01:05:11.947"></status>
</kw>
<status endtime="20170809 01:05:11.950" status="PASS" starttime="20170809 01:05:11.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:12.040" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:12.040" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:12.040" status="PASS" starttime="20170809 01:05:11.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:12.042" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:12.043" status="PASS" starttime="20170809 01:05:12.042"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:12.043" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:12.044" status="PASS" starttime="20170809 01:05:12.043"></status>
</kw>
<status endtime="20170809 01:05:12.044" status="PASS" starttime="20170809 01:05:12.043"></status>
</kw>
<status endtime="20170809 01:05:12.044" status="PASS" starttime="20170809 01:05:12.041"></status>
</kw>
<status endtime="20170809 01:05:12.044" status="PASS" starttime="20170809 01:05:12.041"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:12.044" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:12.044" status="PASS" starttime="20170809 01:05:12.044"></status>
</kw>
<msg timestamp="20170809 01:05:12.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:12.045" status="PASS" starttime="20170809 01:05:11.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:12.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:12.045" status="PASS" starttime="20170809 01:05:12.045"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:12.046" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:12.046" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:12.046" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:12.046" status="PASS" starttime="20170809 01:05:12.046"></status>
</kw>
<msg timestamp="20170809 01:05:12.046" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:05:12.046" status="PASS" starttime="20170809 01:05:11.705"></status>
</kw>
<msg timestamp="20170809 01:05:12.047" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:05:12.047" status="PASS" starttime="20170809 01:05:11.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:05:12.047" status="PASS" starttime="20170809 01:05:12.047"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:12.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:12.051" status="PASS" starttime="20170809 01:05:12.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:12.052" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:12.052" status="PASS" starttime="20170809 01:05:12.052"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:12.053" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:12.053" status="PASS" starttime="20170809 01:05:12.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:12.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:12.053" status="PASS" starttime="20170809 01:05:12.053"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:12.246" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:12.246" status="PASS" starttime="20170809 01:05:12.054"></status>
</kw>
<msg timestamp="20170809 01:05:12.247" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:12.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:12.247" status="PASS" starttime="20170809 01:05:12.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:12.247" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:12.247" status="PASS" starttime="20170809 01:05:12.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:12.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:12.248" status="PASS" starttime="20170809 01:05:12.248"></status>
</kw>
<status endtime="20170809 01:05:12.248" status="PASS" starttime="20170809 01:05:12.050"></status>
</kw>
<status endtime="20170809 01:05:12.248" status="PASS" starttime="20170809 01:05:12.050"></status>
</kw>
<status endtime="20170809 01:05:12.248" status="PASS" starttime="20170809 01:05:12.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:12.249" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:05:12.249" status="PASS" starttime="20170809 01:05:12.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:12.251" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:12.251" status="PASS" starttime="20170809 01:05:12.250"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:12.252" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:12.252" status="PASS" starttime="20170809 01:05:12.252"></status>
</kw>
<status endtime="20170809 01:05:12.252" status="PASS" starttime="20170809 01:05:12.251"></status>
</kw>
<status endtime="20170809 01:05:12.252" status="PASS" starttime="20170809 01:05:12.250"></status>
</kw>
<status endtime="20170809 01:05:12.253" status="PASS" starttime="20170809 01:05:12.249"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:12.323" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:05:12.323" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:12.323" status="PASS" starttime="20170809 01:05:12.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:12.325" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:12.325" status="PASS" starttime="20170809 01:05:12.324"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:12.326" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:12.326" status="PASS" starttime="20170809 01:05:12.325"></status>
</kw>
<status endtime="20170809 01:05:12.326" status="PASS" starttime="20170809 01:05:12.325"></status>
</kw>
<status endtime="20170809 01:05:12.326" status="PASS" starttime="20170809 01:05:12.324"></status>
</kw>
<status endtime="20170809 01:05:12.326" status="PASS" starttime="20170809 01:05:12.323"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:12.326" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:12.326" status="PASS" starttime="20170809 01:05:12.326"></status>
</kw>
<msg timestamp="20170809 01:05:12.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:12.327" status="PASS" starttime="20170809 01:05:12.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:12.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:12.327" status="PASS" starttime="20170809 01:05:12.327"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:12.328" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:12.328" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:12.328" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:12.328" status="PASS" starttime="20170809 01:05:12.328"></status>
</kw>
<msg timestamp="20170809 01:05:12.328" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:05:12.328" status="PASS" starttime="20170809 01:05:12.048"></status>
</kw>
<msg timestamp="20170809 01:05:12.329" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:05:12.329" status="PASS" starttime="20170809 01:05:12.048"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:05:12.329" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:05:12.329" status="FAIL" starttime="20170809 01:05:12.329"></status>
</kw>
<status endtime="20170809 01:05:12.329" status="FAIL" starttime="20170809 01:05:12.047"></status>
</kw>
<status endtime="20170809 01:05:12.330" status="FAIL" starttime="20170809 01:05:11.443"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:22.335" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:22.336" status="PASS" starttime="20170809 01:05:22.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:22.336" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:22.337" status="PASS" starttime="20170809 01:05:22.336"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:22.337" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:22.337" status="PASS" starttime="20170809 01:05:22.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:22.338" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:22.338" status="PASS" starttime="20170809 01:05:22.337"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:22.820" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:22.820" status="PASS" starttime="20170809 01:05:22.338"></status>
</kw>
<msg timestamp="20170809 01:05:22.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:22.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:22.820" status="PASS" starttime="20170809 01:05:22.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:22.821" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:22.821" status="PASS" starttime="20170809 01:05:22.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:22.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:22.821" status="PASS" starttime="20170809 01:05:22.821"></status>
</kw>
<status endtime="20170809 01:05:22.822" status="PASS" starttime="20170809 01:05:22.334"></status>
</kw>
<status endtime="20170809 01:05:22.822" status="PASS" starttime="20170809 01:05:22.333"></status>
</kw>
<status endtime="20170809 01:05:22.822" status="PASS" starttime="20170809 01:05:22.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:22.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:05:22.822" status="PASS" starttime="20170809 01:05:22.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:22.825" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:22.825" status="PASS" starttime="20170809 01:05:22.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:22.826" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:22.826" status="PASS" starttime="20170809 01:05:22.825"></status>
</kw>
<status endtime="20170809 01:05:22.826" status="PASS" starttime="20170809 01:05:22.825"></status>
</kw>
<status endtime="20170809 01:05:22.826" status="PASS" starttime="20170809 01:05:22.823"></status>
</kw>
<status endtime="20170809 01:05:22.826" status="PASS" starttime="20170809 01:05:22.823"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:27.218" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:27.218" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:27.218" status="PASS" starttime="20170809 01:05:22.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:27.221" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:27.221" status="PASS" starttime="20170809 01:05:27.220"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:27.221" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:27.222" status="PASS" starttime="20170809 01:05:27.221"></status>
</kw>
<status endtime="20170809 01:05:27.222" status="PASS" starttime="20170809 01:05:27.221"></status>
</kw>
<status endtime="20170809 01:05:27.222" status="PASS" starttime="20170809 01:05:27.219"></status>
</kw>
<status endtime="20170809 01:05:27.222" status="PASS" starttime="20170809 01:05:27.219"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:27.222" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:27.223" status="PASS" starttime="20170809 01:05:27.222"></status>
</kw>
<msg timestamp="20170809 01:05:27.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:27.223" status="PASS" starttime="20170809 01:05:22.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:27.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:27.223" status="PASS" starttime="20170809 01:05:27.223"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:27.224" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:27.224" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:27.224" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:27.224" status="PASS" starttime="20170809 01:05:27.224"></status>
</kw>
<msg timestamp="20170809 01:05:27.224" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:05:27.225" status="PASS" starttime="20170809 01:05:22.332"></status>
</kw>
<msg timestamp="20170809 01:05:27.225" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:05:27.225" status="PASS" starttime="20170809 01:05:22.331"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:05:27.225" status="PASS" starttime="20170809 01:05:27.225"></status>
</kw>
<status endtime="20170809 01:05:27.225" status="PASS" starttime="20170809 01:05:22.331"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:27.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:27.230" status="PASS" starttime="20170809 01:05:27.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:27.230" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:27.230" status="PASS" starttime="20170809 01:05:27.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:27.231" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:27.231" status="PASS" starttime="20170809 01:05:27.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:27.231" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:27.231" status="PASS" starttime="20170809 01:05:27.231"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:27.713" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:27.713" status="PASS" starttime="20170809 01:05:27.232"></status>
</kw>
<msg timestamp="20170809 01:05:27.713" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:27.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:27.713" status="PASS" starttime="20170809 01:05:27.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:27.714" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:27.714" status="PASS" starttime="20170809 01:05:27.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:27.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:27.715" status="PASS" starttime="20170809 01:05:27.714"></status>
</kw>
<status endtime="20170809 01:05:27.715" status="PASS" starttime="20170809 01:05:27.228"></status>
</kw>
<status endtime="20170809 01:05:27.715" status="PASS" starttime="20170809 01:05:27.228"></status>
</kw>
<status endtime="20170809 01:05:27.715" status="PASS" starttime="20170809 01:05:27.227"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:27.716" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:05:27.716" status="PASS" starttime="20170809 01:05:27.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:27.718" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:27.718" status="PASS" starttime="20170809 01:05:27.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:27.719" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:27.719" status="PASS" starttime="20170809 01:05:27.719"></status>
</kw>
<status endtime="20170809 01:05:27.720" status="PASS" starttime="20170809 01:05:27.719"></status>
</kw>
<status endtime="20170809 01:05:27.720" status="PASS" starttime="20170809 01:05:27.717"></status>
</kw>
<status endtime="20170809 01:05:27.720" status="PASS" starttime="20170809 01:05:27.716"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:30.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:30.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:30.115" status="PASS" starttime="20170809 01:05:27.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:30.117" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:30.117" status="PASS" starttime="20170809 01:05:30.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:30.118" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:30.118" status="PASS" starttime="20170809 01:05:30.118"></status>
</kw>
<status endtime="20170809 01:05:30.118" status="PASS" starttime="20170809 01:05:30.117"></status>
</kw>
<status endtime="20170809 01:05:30.118" status="PASS" starttime="20170809 01:05:30.116"></status>
</kw>
<status endtime="20170809 01:05:30.118" status="PASS" starttime="20170809 01:05:30.116"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:30.119" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:30.119" status="PASS" starttime="20170809 01:05:30.119"></status>
</kw>
<msg timestamp="20170809 01:05:30.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:30.119" status="PASS" starttime="20170809 01:05:27.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:30.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:30.120" status="PASS" starttime="20170809 01:05:30.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:30.120" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:30.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:30.121" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:30.121" status="PASS" starttime="20170809 01:05:30.120"></status>
</kw>
<msg timestamp="20170809 01:05:30.121" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:05:30.121" status="PASS" starttime="20170809 01:05:27.226"></status>
</kw>
<msg timestamp="20170809 01:05:30.121" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:05:30.121" status="PASS" starttime="20170809 01:05:27.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:05:30.122" status="PASS" starttime="20170809 01:05:30.121"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:30.126" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:30.126" status="PASS" starttime="20170809 01:05:30.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:30.127" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:30.127" status="PASS" starttime="20170809 01:05:30.126"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:30.127" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:30.127" status="PASS" starttime="20170809 01:05:30.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:30.128" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:30.128" status="PASS" starttime="20170809 01:05:30.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:30.931" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:30.931" status="PASS" starttime="20170809 01:05:30.129"></status>
</kw>
<msg timestamp="20170809 01:05:30.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:30.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:30.931" status="PASS" starttime="20170809 01:05:30.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:30.932" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:30.932" status="PASS" starttime="20170809 01:05:30.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:30.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:30.933" status="PASS" starttime="20170809 01:05:30.932"></status>
</kw>
<status endtime="20170809 01:05:30.933" status="PASS" starttime="20170809 01:05:30.125"></status>
</kw>
<status endtime="20170809 01:05:30.933" status="PASS" starttime="20170809 01:05:30.124"></status>
</kw>
<status endtime="20170809 01:05:30.933" status="PASS" starttime="20170809 01:05:30.124"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:30.934" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:05:30.934" status="PASS" starttime="20170809 01:05:30.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:30.936" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:30.936" status="PASS" starttime="20170809 01:05:30.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:30.937" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:30.937" status="PASS" starttime="20170809 01:05:30.936"></status>
</kw>
<status endtime="20170809 01:05:30.937" status="PASS" starttime="20170809 01:05:30.936"></status>
</kw>
<status endtime="20170809 01:05:30.937" status="PASS" starttime="20170809 01:05:30.934"></status>
</kw>
<status endtime="20170809 01:05:30.937" status="PASS" starttime="20170809 01:05:30.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:34.997" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:05:34.997" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:34.997" status="PASS" starttime="20170809 01:05:30.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:34.999" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:34.999" status="PASS" starttime="20170809 01:05:34.999"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:35.000" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:35.000" status="PASS" starttime="20170809 01:05:35.000"></status>
</kw>
<status endtime="20170809 01:05:35.001" status="PASS" starttime="20170809 01:05:34.999"></status>
</kw>
<status endtime="20170809 01:05:35.001" status="PASS" starttime="20170809 01:05:34.998"></status>
</kw>
<status endtime="20170809 01:05:35.001" status="PASS" starttime="20170809 01:05:34.998"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:35.001" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:35.001" status="PASS" starttime="20170809 01:05:35.001"></status>
</kw>
<msg timestamp="20170809 01:05:35.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:35.002" status="PASS" starttime="20170809 01:05:30.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:35.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:35.002" status="PASS" starttime="20170809 01:05:35.002"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:35.003" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:35.003" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:35.003" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:35.003" status="PASS" starttime="20170809 01:05:35.002"></status>
</kw>
<msg timestamp="20170809 01:05:35.003" level="INFO">${state} = Off</msg>
<status endtime="20170809 01:05:35.003" status="PASS" starttime="20170809 01:05:30.123"></status>
</kw>
<msg timestamp="20170809 01:05:35.003" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 01:05:35.004" status="PASS" starttime="20170809 01:05:30.122"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:05:35.004" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 01:05:35.004" status="FAIL" starttime="20170809 01:05:35.004"></status>
</kw>
<status endtime="20170809 01:05:35.004" status="FAIL" starttime="20170809 01:05:30.122"></status>
</kw>
<status endtime="20170809 01:05:35.005" status="FAIL" starttime="20170809 01:05:22.330"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:45.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:45.011" status="PASS" starttime="20170809 01:05:45.010"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:45.011" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:45.011" status="PASS" starttime="20170809 01:05:45.011"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:45.012" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:45.012" status="PASS" starttime="20170809 01:05:45.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:45.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:45.012" status="PASS" starttime="20170809 01:05:45.012"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:45.191" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:45.192" status="PASS" starttime="20170809 01:05:45.013"></status>
</kw>
<msg timestamp="20170809 01:05:45.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:45.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:45.192" status="PASS" starttime="20170809 01:05:45.013"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:45.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:45.193" status="PASS" starttime="20170809 01:05:45.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:45.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:45.193" status="PASS" starttime="20170809 01:05:45.193"></status>
</kw>
<status endtime="20170809 01:05:45.194" status="PASS" starttime="20170809 01:05:45.009"></status>
</kw>
<status endtime="20170809 01:05:45.194" status="PASS" starttime="20170809 01:05:45.008"></status>
</kw>
<status endtime="20170809 01:05:45.194" status="PASS" starttime="20170809 01:05:45.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:45.194" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:05:45.194" status="PASS" starttime="20170809 01:05:45.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:45.196" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:45.197" status="PASS" starttime="20170809 01:05:45.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:45.197" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:45.198" status="PASS" starttime="20170809 01:05:45.197"></status>
</kw>
<status endtime="20170809 01:05:45.198" status="PASS" starttime="20170809 01:05:45.197"></status>
</kw>
<status endtime="20170809 01:05:45.198" status="PASS" starttime="20170809 01:05:45.195"></status>
</kw>
<status endtime="20170809 01:05:45.198" status="PASS" starttime="20170809 01:05:45.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:45.261" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:45.262" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:45.262" status="PASS" starttime="20170809 01:05:45.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:45.264" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:45.264" status="PASS" starttime="20170809 01:05:45.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:45.265" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:45.265" status="PASS" starttime="20170809 01:05:45.265"></status>
</kw>
<status endtime="20170809 01:05:45.265" status="PASS" starttime="20170809 01:05:45.264"></status>
</kw>
<status endtime="20170809 01:05:45.265" status="PASS" starttime="20170809 01:05:45.262"></status>
</kw>
<status endtime="20170809 01:05:45.265" status="PASS" starttime="20170809 01:05:45.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:45.266" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:45.266" status="PASS" starttime="20170809 01:05:45.265"></status>
</kw>
<msg timestamp="20170809 01:05:45.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:45.266" status="PASS" starttime="20170809 01:05:45.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:45.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:45.267" status="PASS" starttime="20170809 01:05:45.266"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:45.267" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:45.267" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:45.267" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:45.267" status="PASS" starttime="20170809 01:05:45.267"></status>
</kw>
<msg timestamp="20170809 01:05:45.268" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 01:05:45.268" status="PASS" starttime="20170809 01:05:45.006"></status>
</kw>
<msg timestamp="20170809 01:05:45.268" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 01:05:45.268" status="PASS" starttime="20170809 01:05:45.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 01:05:45.269" level="FAIL">On != Off</msg>
<status endtime="20170809 01:05:45.269" status="FAIL" starttime="20170809 01:05:45.268"></status>
</kw>
<status endtime="20170809 01:05:45.269" status="FAIL" starttime="20170809 01:05:45.006"></status>
</kw>
<status endtime="20170809 01:05:45.269" status="FAIL" starttime="20170809 01:05:45.005"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:55.274" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:55.275" status="PASS" starttime="20170809 01:05:55.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:55.275" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:55.275" status="PASS" starttime="20170809 01:05:55.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:55.276" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:55.276" status="PASS" starttime="20170809 01:05:55.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:55.277" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:55.277" status="PASS" starttime="20170809 01:05:55.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.462" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:55.463" status="PASS" starttime="20170809 01:05:55.277"></status>
</kw>
<msg timestamp="20170809 01:05:55.463" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:55.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:55.463" status="PASS" starttime="20170809 01:05:55.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.463" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:55.463" status="PASS" starttime="20170809 01:05:55.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:55.464" status="PASS" starttime="20170809 01:05:55.464"></status>
</kw>
<status endtime="20170809 01:05:55.464" status="PASS" starttime="20170809 01:05:55.273"></status>
</kw>
<status endtime="20170809 01:05:55.464" status="PASS" starttime="20170809 01:05:55.273"></status>
</kw>
<status endtime="20170809 01:05:55.465" status="PASS" starttime="20170809 01:05:55.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:55.465" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:05:55.465" status="PASS" starttime="20170809 01:05:55.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:55.467" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:55.467" status="PASS" starttime="20170809 01:05:55.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:55.468" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:55.468" status="PASS" starttime="20170809 01:05:55.468"></status>
</kw>
<status endtime="20170809 01:05:55.468" status="PASS" starttime="20170809 01:05:55.467"></status>
</kw>
<status endtime="20170809 01:05:55.468" status="PASS" starttime="20170809 01:05:55.466"></status>
</kw>
<status endtime="20170809 01:05:55.468" status="PASS" starttime="20170809 01:05:55.465"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:55.531" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:55.531" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:55.532" status="PASS" starttime="20170809 01:05:55.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:55.533" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:55.533" status="PASS" starttime="20170809 01:05:55.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:55.534" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:55.534" status="PASS" starttime="20170809 01:05:55.534"></status>
</kw>
<status endtime="20170809 01:05:55.535" status="PASS" starttime="20170809 01:05:55.534"></status>
</kw>
<status endtime="20170809 01:05:55.535" status="PASS" starttime="20170809 01:05:55.532"></status>
</kw>
<status endtime="20170809 01:05:55.535" status="PASS" starttime="20170809 01:05:55.532"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:55.535" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:55.535" status="PASS" starttime="20170809 01:05:55.535"></status>
</kw>
<msg timestamp="20170809 01:05:55.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:55.535" status="PASS" starttime="20170809 01:05:55.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:55.536" status="PASS" starttime="20170809 01:05:55.536"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:55.537" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:55.537" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:55.537" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:55.537" status="PASS" starttime="20170809 01:05:55.536"></status>
</kw>
<msg timestamp="20170809 01:05:55.537" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:05:55.537" status="PASS" starttime="20170809 01:05:55.271"></status>
</kw>
<msg timestamp="20170809 01:05:55.537" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:05:55.537" status="PASS" starttime="20170809 01:05:55.270"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:05:55.538" status="PASS" starttime="20170809 01:05:55.538"></status>
</kw>
<status endtime="20170809 01:05:55.538" status="PASS" starttime="20170809 01:05:55.270"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:55.542" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:55.542" status="PASS" starttime="20170809 01:05:55.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:55.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:55.543" status="PASS" starttime="20170809 01:05:55.543"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:55.543" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:55.543" status="PASS" starttime="20170809 01:05:55.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:55.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:55.544" status="PASS" starttime="20170809 01:05:55.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:55.721" status="PASS" starttime="20170809 01:05:55.545"></status>
</kw>
<msg timestamp="20170809 01:05:55.721" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:55.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:55.721" status="PASS" starttime="20170809 01:05:55.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.722" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:55.722" status="PASS" starttime="20170809 01:05:55.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:55.723" status="PASS" starttime="20170809 01:05:55.722"></status>
</kw>
<status endtime="20170809 01:05:55.723" status="PASS" starttime="20170809 01:05:55.541"></status>
</kw>
<status endtime="20170809 01:05:55.723" status="PASS" starttime="20170809 01:05:55.540"></status>
</kw>
<status endtime="20170809 01:05:55.723" status="PASS" starttime="20170809 01:05:55.540"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:55.724" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:05:55.724" status="PASS" starttime="20170809 01:05:55.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:55.726" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:55.726" status="PASS" starttime="20170809 01:05:55.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:55.727" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:05:55.727" status="PASS" starttime="20170809 01:05:55.727"></status>
</kw>
<status endtime="20170809 01:05:55.727" status="PASS" starttime="20170809 01:05:55.726"></status>
</kw>
<status endtime="20170809 01:05:55.727" status="PASS" starttime="20170809 01:05:55.725"></status>
</kw>
<status endtime="20170809 01:05:55.727" status="PASS" starttime="20170809 01:05:55.724"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:55.816" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:05:55.816" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:55.816" status="PASS" starttime="20170809 01:05:55.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:55.818" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:55.818" status="PASS" starttime="20170809 01:05:55.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:55.819" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:55.819" status="PASS" starttime="20170809 01:05:55.819"></status>
</kw>
<status endtime="20170809 01:05:55.819" status="PASS" starttime="20170809 01:05:55.818"></status>
</kw>
<status endtime="20170809 01:05:55.819" status="PASS" starttime="20170809 01:05:55.817"></status>
</kw>
<status endtime="20170809 01:05:55.819" status="PASS" starttime="20170809 01:05:55.816"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:55.820" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:55.820" status="PASS" starttime="20170809 01:05:55.819"></status>
</kw>
<msg timestamp="20170809 01:05:55.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:55.820" status="PASS" starttime="20170809 01:05:55.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:55.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:55.821" status="PASS" starttime="20170809 01:05:55.820"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:55.821" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:55.821" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:55.821" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:55.821" status="PASS" starttime="20170809 01:05:55.821"></status>
</kw>
<msg timestamp="20170809 01:05:55.822" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:05:55.822" status="PASS" starttime="20170809 01:05:55.539"></status>
</kw>
<msg timestamp="20170809 01:05:55.822" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:05:55.822" status="PASS" starttime="20170809 01:05:55.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:05:55.822" status="PASS" starttime="20170809 01:05:55.822"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:05:55.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:05:55.827" status="PASS" starttime="20170809 01:05:55.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:05:55.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:05:55.828" status="PASS" starttime="20170809 01:05:55.827"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:05:55.828" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:05:55.828" status="PASS" starttime="20170809 01:05:55.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:05:55.829" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:05:55.829" status="PASS" starttime="20170809 01:05:55.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:05:56.029" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:05:56.029" status="PASS" starttime="20170809 01:05:55.830"></status>
</kw>
<msg timestamp="20170809 01:05:56.029" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:05:56.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:56.029" status="PASS" starttime="20170809 01:05:55.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:05:56.030" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:56.030" status="PASS" starttime="20170809 01:05:56.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:56.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:56.030" status="PASS" starttime="20170809 01:05:56.030"></status>
</kw>
<status endtime="20170809 01:05:56.030" status="PASS" starttime="20170809 01:05:55.826"></status>
</kw>
<status endtime="20170809 01:05:56.031" status="PASS" starttime="20170809 01:05:55.825"></status>
</kw>
<status endtime="20170809 01:05:56.031" status="PASS" starttime="20170809 01:05:55.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:05:56.031" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:05:56.031" status="PASS" starttime="20170809 01:05:56.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:56.033" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:56.033" status="PASS" starttime="20170809 01:05:56.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:56.034" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:05:56.034" status="PASS" starttime="20170809 01:05:56.034"></status>
</kw>
<status endtime="20170809 01:05:56.035" status="PASS" starttime="20170809 01:05:56.033"></status>
</kw>
<status endtime="20170809 01:05:56.035" status="PASS" starttime="20170809 01:05:56.032"></status>
</kw>
<status endtime="20170809 01:05:56.035" status="PASS" starttime="20170809 01:05:56.032"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:05:56.129" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:05:56.130" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:56.130" status="PASS" starttime="20170809 01:05:56.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:05:56.131" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:56.132" status="PASS" starttime="20170809 01:05:56.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:05:56.132" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:05:56.132" status="PASS" starttime="20170809 01:05:56.132"></status>
</kw>
<status endtime="20170809 01:05:56.133" status="PASS" starttime="20170809 01:05:56.132"></status>
</kw>
<status endtime="20170809 01:05:56.133" status="PASS" starttime="20170809 01:05:56.130"></status>
</kw>
<status endtime="20170809 01:05:56.133" status="PASS" starttime="20170809 01:05:56.130"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:05:56.133" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:05:56.133" status="PASS" starttime="20170809 01:05:56.133"></status>
</kw>
<msg timestamp="20170809 01:05:56.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:05:56.133" status="PASS" starttime="20170809 01:05:55.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:05:56.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:05:56.134" status="PASS" starttime="20170809 01:05:56.134"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:05:56.135" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:05:56.135" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:05:56.135" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:05:56.135" status="PASS" starttime="20170809 01:05:56.134"></status>
</kw>
<msg timestamp="20170809 01:05:56.135" level="INFO">${state} = Off</msg>
<status endtime="20170809 01:05:56.135" status="PASS" starttime="20170809 01:05:55.823"></status>
</kw>
<msg timestamp="20170809 01:05:56.135" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 01:05:56.135" status="PASS" starttime="20170809 01:05:55.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:05:56.136" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 01:05:56.136" status="FAIL" starttime="20170809 01:05:56.136"></status>
</kw>
<status endtime="20170809 01:05:56.136" status="FAIL" starttime="20170809 01:05:55.823"></status>
</kw>
<status endtime="20170809 01:05:56.136" status="FAIL" starttime="20170809 01:05:55.269"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:06.141" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:06.142" status="PASS" starttime="20170809 01:06:06.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:06.142" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:06.142" status="PASS" starttime="20170809 01:06:06.142"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:06.143" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:06.143" status="PASS" starttime="20170809 01:06:06.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:06.144" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:06.144" status="PASS" starttime="20170809 01:06:06.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.385" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:06.385" status="PASS" starttime="20170809 01:06:06.145"></status>
</kw>
<msg timestamp="20170809 01:06:06.385" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:06.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:06.386" status="PASS" starttime="20170809 01:06:06.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:06.386" status="PASS" starttime="20170809 01:06:06.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:06.387" status="PASS" starttime="20170809 01:06:06.387"></status>
</kw>
<status endtime="20170809 01:06:06.387" status="PASS" starttime="20170809 01:06:06.141"></status>
</kw>
<status endtime="20170809 01:06:06.387" status="PASS" starttime="20170809 01:06:06.140"></status>
</kw>
<status endtime="20170809 01:06:06.387" status="PASS" starttime="20170809 01:06:06.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:06.388" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:06:06.388" status="PASS" starttime="20170809 01:06:06.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:06.390" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:06.390" status="PASS" starttime="20170809 01:06:06.389"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:06.391" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:06.391" status="PASS" starttime="20170809 01:06:06.391"></status>
</kw>
<status endtime="20170809 01:06:06.391" status="PASS" starttime="20170809 01:06:06.390"></status>
</kw>
<status endtime="20170809 01:06:06.391" status="PASS" starttime="20170809 01:06:06.389"></status>
</kw>
<status endtime="20170809 01:06:06.391" status="PASS" starttime="20170809 01:06:06.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:06.504" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:06.504" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:06.504" status="PASS" starttime="20170809 01:06:06.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:06.506" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:06.506" status="PASS" starttime="20170809 01:06:06.505"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:06.507" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:06.507" status="PASS" starttime="20170809 01:06:06.507"></status>
</kw>
<status endtime="20170809 01:06:06.507" status="PASS" starttime="20170809 01:06:06.506"></status>
</kw>
<status endtime="20170809 01:06:06.507" status="PASS" starttime="20170809 01:06:06.505"></status>
</kw>
<status endtime="20170809 01:06:06.507" status="PASS" starttime="20170809 01:06:06.505"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:06.508" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:06.508" status="PASS" starttime="20170809 01:06:06.508"></status>
</kw>
<msg timestamp="20170809 01:06:06.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:06.508" status="PASS" starttime="20170809 01:06:06.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:06.509" status="PASS" starttime="20170809 01:06:06.508"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:06.509" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:06.509" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:06.509" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:06.510" status="PASS" starttime="20170809 01:06:06.509"></status>
</kw>
<msg timestamp="20170809 01:06:06.510" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:06:06.510" status="PASS" starttime="20170809 01:06:06.138"></status>
</kw>
<msg timestamp="20170809 01:06:06.510" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:06:06.510" status="PASS" starttime="20170809 01:06:06.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:06:06.511" status="PASS" starttime="20170809 01:06:06.510"></status>
</kw>
<status endtime="20170809 01:06:06.511" status="PASS" starttime="20170809 01:06:06.138"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:06.514" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:06.515" status="PASS" starttime="20170809 01:06:06.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:06.516" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:06.516" status="PASS" starttime="20170809 01:06:06.515"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:06.516" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:06.516" status="PASS" starttime="20170809 01:06:06.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:06.517" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:06.517" status="PASS" starttime="20170809 01:06:06.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.710" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:06.710" status="PASS" starttime="20170809 01:06:06.518"></status>
</kw>
<msg timestamp="20170809 01:06:06.711" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:06.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:06.711" status="PASS" starttime="20170809 01:06:06.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.711" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:06.711" status="PASS" starttime="20170809 01:06:06.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:06.712" status="PASS" starttime="20170809 01:06:06.712"></status>
</kw>
<status endtime="20170809 01:06:06.712" status="PASS" starttime="20170809 01:06:06.513"></status>
</kw>
<status endtime="20170809 01:06:06.712" status="PASS" starttime="20170809 01:06:06.513"></status>
</kw>
<status endtime="20170809 01:06:06.712" status="PASS" starttime="20170809 01:06:06.512"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:06.713" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:06:06.713" status="PASS" starttime="20170809 01:06:06.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:06.715" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:06.715" status="PASS" starttime="20170809 01:06:06.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:06.716" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:06.716" status="PASS" starttime="20170809 01:06:06.716"></status>
</kw>
<status endtime="20170809 01:06:06.716" status="PASS" starttime="20170809 01:06:06.715"></status>
</kw>
<status endtime="20170809 01:06:06.716" status="PASS" starttime="20170809 01:06:06.714"></status>
</kw>
<status endtime="20170809 01:06:06.716" status="PASS" starttime="20170809 01:06:06.713"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:06.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:06.835" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:06.836" status="PASS" starttime="20170809 01:06:06.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:06.837" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:06.837" status="PASS" starttime="20170809 01:06:06.837"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:06.838" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:06.838" status="PASS" starttime="20170809 01:06:06.838"></status>
</kw>
<status endtime="20170809 01:06:06.838" status="PASS" starttime="20170809 01:06:06.837"></status>
</kw>
<status endtime="20170809 01:06:06.839" status="PASS" starttime="20170809 01:06:06.836"></status>
</kw>
<status endtime="20170809 01:06:06.839" status="PASS" starttime="20170809 01:06:06.836"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:06.839" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:06.839" status="PASS" starttime="20170809 01:06:06.839"></status>
</kw>
<msg timestamp="20170809 01:06:06.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:06.839" status="PASS" starttime="20170809 01:06:06.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:06.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:06.840" status="PASS" starttime="20170809 01:06:06.840"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:06.840" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:06.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:06.841" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:06.841" status="PASS" starttime="20170809 01:06:06.840"></status>
</kw>
<msg timestamp="20170809 01:06:06.841" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:06:06.841" status="PASS" starttime="20170809 01:06:06.511"></status>
</kw>
<msg timestamp="20170809 01:06:06.841" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:06:06.841" status="PASS" starttime="20170809 01:06:06.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:06:06.842" status="PASS" starttime="20170809 01:06:06.842"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:06.846" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:06.846" status="PASS" starttime="20170809 01:06:06.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:06.847" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:06.847" status="PASS" starttime="20170809 01:06:06.847"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:06.848" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:06.848" status="PASS" starttime="20170809 01:06:06.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:06.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:06.848" status="PASS" starttime="20170809 01:06:06.848"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:07.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:07.027" status="PASS" starttime="20170809 01:06:06.849"></status>
</kw>
<msg timestamp="20170809 01:06:07.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:07.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:07.027" status="PASS" starttime="20170809 01:06:06.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:07.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:07.028" status="PASS" starttime="20170809 01:06:07.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:07.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:07.028" status="PASS" starttime="20170809 01:06:07.028"></status>
</kw>
<status endtime="20170809 01:06:07.029" status="PASS" starttime="20170809 01:06:06.845"></status>
</kw>
<status endtime="20170809 01:06:07.029" status="PASS" starttime="20170809 01:06:06.845"></status>
</kw>
<status endtime="20170809 01:06:07.029" status="PASS" starttime="20170809 01:06:06.844"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:07.029" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:06:07.029" status="PASS" starttime="20170809 01:06:07.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:07.031" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:07.031" status="PASS" starttime="20170809 01:06:07.031"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:07.032" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:07.032" status="PASS" starttime="20170809 01:06:07.032"></status>
</kw>
<status endtime="20170809 01:06:07.033" status="PASS" starttime="20170809 01:06:07.032"></status>
</kw>
<status endtime="20170809 01:06:07.033" status="PASS" starttime="20170809 01:06:07.030"></status>
</kw>
<status endtime="20170809 01:06:07.033" status="PASS" starttime="20170809 01:06:07.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:07.100" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:06:07.100" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:07.100" status="PASS" starttime="20170809 01:06:07.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:07.102" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:07.102" status="PASS" starttime="20170809 01:06:07.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:07.102" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:07.103" status="PASS" starttime="20170809 01:06:07.102"></status>
</kw>
<status endtime="20170809 01:06:07.103" status="PASS" starttime="20170809 01:06:07.102"></status>
</kw>
<status endtime="20170809 01:06:07.103" status="PASS" starttime="20170809 01:06:07.101"></status>
</kw>
<status endtime="20170809 01:06:07.103" status="PASS" starttime="20170809 01:06:07.100"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:07.103" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:07.103" status="PASS" starttime="20170809 01:06:07.103"></status>
</kw>
<msg timestamp="20170809 01:06:07.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:07.104" status="PASS" starttime="20170809 01:06:06.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:07.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:07.104" status="PASS" starttime="20170809 01:06:07.104"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:07.105" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:07.105" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:07.105" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:07.105" status="PASS" starttime="20170809 01:06:07.105"></status>
</kw>
<msg timestamp="20170809 01:06:07.105" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:07.105" status="PASS" starttime="20170809 01:06:06.843"></status>
</kw>
<msg timestamp="20170809 01:06:07.106" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:07.106" status="PASS" starttime="20170809 01:06:06.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:06:07.106" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:06:07.106" status="FAIL" starttime="20170809 01:06:07.106"></status>
</kw>
<status endtime="20170809 01:06:07.107" status="FAIL" starttime="20170809 01:06:06.842"></status>
</kw>
<status endtime="20170809 01:06:07.107" status="FAIL" starttime="20170809 01:06:06.137"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:17.112" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:17.112" status="PASS" starttime="20170809 01:06:17.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:17.113" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:17.113" status="PASS" starttime="20170809 01:06:17.112"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:17.113" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:17.113" status="PASS" starttime="20170809 01:06:17.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:17.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:17.114" status="PASS" starttime="20170809 01:06:17.114"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.381" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:17.381" status="PASS" starttime="20170809 01:06:17.115"></status>
</kw>
<msg timestamp="20170809 01:06:17.381" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:17.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:17.381" status="PASS" starttime="20170809 01:06:17.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.382" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.382" status="PASS" starttime="20170809 01:06:17.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.383" status="PASS" starttime="20170809 01:06:17.382"></status>
</kw>
<status endtime="20170809 01:06:17.383" status="PASS" starttime="20170809 01:06:17.111"></status>
</kw>
<status endtime="20170809 01:06:17.383" status="PASS" starttime="20170809 01:06:17.110"></status>
</kw>
<status endtime="20170809 01:06:17.383" status="PASS" starttime="20170809 01:06:17.110"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:17.384" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:06:17.384" status="PASS" starttime="20170809 01:06:17.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:17.387" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:17.387" status="PASS" starttime="20170809 01:06:17.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:17.388" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:17.388" status="PASS" starttime="20170809 01:06:17.387"></status>
</kw>
<status endtime="20170809 01:06:17.388" status="PASS" starttime="20170809 01:06:17.387"></status>
</kw>
<status endtime="20170809 01:06:17.388" status="PASS" starttime="20170809 01:06:17.385"></status>
</kw>
<status endtime="20170809 01:06:17.388" status="PASS" starttime="20170809 01:06:17.385"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:17.451" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:17.451" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:17.451" status="PASS" starttime="20170809 01:06:17.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:17.453" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:17.453" status="PASS" starttime="20170809 01:06:17.453"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:17.454" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:17.454" status="PASS" starttime="20170809 01:06:17.454"></status>
</kw>
<status endtime="20170809 01:06:17.454" status="PASS" starttime="20170809 01:06:17.453"></status>
</kw>
<status endtime="20170809 01:06:17.455" status="PASS" starttime="20170809 01:06:17.452"></status>
</kw>
<status endtime="20170809 01:06:17.455" status="PASS" starttime="20170809 01:06:17.452"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:17.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:17.455" status="PASS" starttime="20170809 01:06:17.455"></status>
</kw>
<msg timestamp="20170809 01:06:17.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:17.455" status="PASS" starttime="20170809 01:06:17.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.456" status="PASS" starttime="20170809 01:06:17.456"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:17.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:17.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:17.457" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:17.457" status="PASS" starttime="20170809 01:06:17.456"></status>
</kw>
<msg timestamp="20170809 01:06:17.457" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:06:17.457" status="PASS" starttime="20170809 01:06:17.109"></status>
</kw>
<msg timestamp="20170809 01:06:17.458" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:06:17.458" status="PASS" starttime="20170809 01:06:17.108"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:06:17.458" status="PASS" starttime="20170809 01:06:17.458"></status>
</kw>
<status endtime="20170809 01:06:17.458" status="PASS" starttime="20170809 01:06:17.108"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:17.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:17.463" status="PASS" starttime="20170809 01:06:17.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:17.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:17.463" status="PASS" starttime="20170809 01:06:17.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:17.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:17.464" status="PASS" starttime="20170809 01:06:17.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:17.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:17.465" status="PASS" starttime="20170809 01:06:17.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.644" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:17.645" status="PASS" starttime="20170809 01:06:17.465"></status>
</kw>
<msg timestamp="20170809 01:06:17.645" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:17.645" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:17.645" status="PASS" starttime="20170809 01:06:17.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.645" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.646" status="PASS" starttime="20170809 01:06:17.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.646" status="PASS" starttime="20170809 01:06:17.646"></status>
</kw>
<status endtime="20170809 01:06:17.646" status="PASS" starttime="20170809 01:06:17.461"></status>
</kw>
<status endtime="20170809 01:06:17.646" status="PASS" starttime="20170809 01:06:17.460"></status>
</kw>
<status endtime="20170809 01:06:17.647" status="PASS" starttime="20170809 01:06:17.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:17.647" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:06:17.647" status="PASS" starttime="20170809 01:06:17.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:17.649" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:17.649" status="PASS" starttime="20170809 01:06:17.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:17.650" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:17.650" status="PASS" starttime="20170809 01:06:17.650"></status>
</kw>
<status endtime="20170809 01:06:17.650" status="PASS" starttime="20170809 01:06:17.649"></status>
</kw>
<status endtime="20170809 01:06:17.650" status="PASS" starttime="20170809 01:06:17.648"></status>
</kw>
<status endtime="20170809 01:06:17.650" status="PASS" starttime="20170809 01:06:17.647"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:17.742" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:17.742" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:17.742" status="PASS" starttime="20170809 01:06:17.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:17.743" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:17.744" status="PASS" starttime="20170809 01:06:17.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:17.744" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:17.745" status="PASS" starttime="20170809 01:06:17.744"></status>
</kw>
<status endtime="20170809 01:06:17.745" status="PASS" starttime="20170809 01:06:17.744"></status>
</kw>
<status endtime="20170809 01:06:17.745" status="PASS" starttime="20170809 01:06:17.742"></status>
</kw>
<status endtime="20170809 01:06:17.745" status="PASS" starttime="20170809 01:06:17.742"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:17.745" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:17.745" status="PASS" starttime="20170809 01:06:17.745"></status>
</kw>
<msg timestamp="20170809 01:06:17.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:17.746" status="PASS" starttime="20170809 01:06:17.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.746" status="PASS" starttime="20170809 01:06:17.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:17.747" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:17.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:17.747" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:17.747" status="PASS" starttime="20170809 01:06:17.747"></status>
</kw>
<msg timestamp="20170809 01:06:17.747" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:06:17.747" status="PASS" starttime="20170809 01:06:17.459"></status>
</kw>
<msg timestamp="20170809 01:06:17.748" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:06:17.748" status="PASS" starttime="20170809 01:06:17.458"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:06:17.748" status="PASS" starttime="20170809 01:06:17.748"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:17.752" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:17.753" status="PASS" starttime="20170809 01:06:17.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:17.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:17.753" status="PASS" starttime="20170809 01:06:17.753"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:17.754" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:17.754" status="PASS" starttime="20170809 01:06:17.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:17.755" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:17.755" status="PASS" starttime="20170809 01:06:17.754"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:17.941" status="PASS" starttime="20170809 01:06:17.755"></status>
</kw>
<msg timestamp="20170809 01:06:17.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:17.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:17.942" status="PASS" starttime="20170809 01:06:17.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.942" status="PASS" starttime="20170809 01:06:17.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:17.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:17.943" status="PASS" starttime="20170809 01:06:17.942"></status>
</kw>
<status endtime="20170809 01:06:17.943" status="PASS" starttime="20170809 01:06:17.751"></status>
</kw>
<status endtime="20170809 01:06:17.943" status="PASS" starttime="20170809 01:06:17.751"></status>
</kw>
<status endtime="20170809 01:06:17.943" status="PASS" starttime="20170809 01:06:17.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:17.944" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:06:17.944" status="PASS" starttime="20170809 01:06:17.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:17.946" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:17.946" status="PASS" starttime="20170809 01:06:17.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:17.947" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:17.947" status="PASS" starttime="20170809 01:06:17.947"></status>
</kw>
<status endtime="20170809 01:06:17.947" status="PASS" starttime="20170809 01:06:17.946"></status>
</kw>
<status endtime="20170809 01:06:17.947" status="PASS" starttime="20170809 01:06:17.945"></status>
</kw>
<status endtime="20170809 01:06:17.947" status="PASS" starttime="20170809 01:06:17.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:18.015" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:06:18.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:18.015" status="PASS" starttime="20170809 01:06:17.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:18.017" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:18.017" status="PASS" starttime="20170809 01:06:18.016"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:18.018" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:18.018" status="PASS" starttime="20170809 01:06:18.017"></status>
</kw>
<status endtime="20170809 01:06:18.018" status="PASS" starttime="20170809 01:06:18.017"></status>
</kw>
<status endtime="20170809 01:06:18.018" status="PASS" starttime="20170809 01:06:18.016"></status>
</kw>
<status endtime="20170809 01:06:18.018" status="PASS" starttime="20170809 01:06:18.015"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:18.018" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:18.019" status="PASS" starttime="20170809 01:06:18.018"></status>
</kw>
<msg timestamp="20170809 01:06:18.019" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:18.019" status="PASS" starttime="20170809 01:06:17.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:18.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:18.019" status="PASS" starttime="20170809 01:06:18.019"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:18.020" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:18.020" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:18.020" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:18.020" status="PASS" starttime="20170809 01:06:18.020"></status>
</kw>
<msg timestamp="20170809 01:06:18.020" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:18.020" status="PASS" starttime="20170809 01:06:17.749"></status>
</kw>
<msg timestamp="20170809 01:06:18.021" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:18.021" status="PASS" starttime="20170809 01:06:17.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:06:18.021" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:06:18.021" status="FAIL" starttime="20170809 01:06:18.021"></status>
</kw>
<status endtime="20170809 01:06:18.022" status="FAIL" starttime="20170809 01:06:17.748"></status>
</kw>
<status endtime="20170809 01:06:18.022" status="FAIL" starttime="20170809 01:06:17.107"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:28.027" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:28.027" status="PASS" starttime="20170809 01:06:28.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:28.028" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:28.028" status="PASS" starttime="20170809 01:06:28.028"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:28.029" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:28.029" status="PASS" starttime="20170809 01:06:28.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:28.029" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:28.029" status="PASS" starttime="20170809 01:06:28.029"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.279" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:28.279" status="PASS" starttime="20170809 01:06:28.030"></status>
</kw>
<msg timestamp="20170809 01:06:28.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:28.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.279" status="PASS" starttime="20170809 01:06:28.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.280" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.280" status="PASS" starttime="20170809 01:06:28.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.281" status="PASS" starttime="20170809 01:06:28.280"></status>
</kw>
<status endtime="20170809 01:06:28.281" status="PASS" starttime="20170809 01:06:28.026"></status>
</kw>
<status endtime="20170809 01:06:28.281" status="PASS" starttime="20170809 01:06:28.026"></status>
</kw>
<status endtime="20170809 01:06:28.281" status="PASS" starttime="20170809 01:06:28.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:28.282" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:06:28.282" status="PASS" starttime="20170809 01:06:28.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:28.284" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:28.284" status="PASS" starttime="20170809 01:06:28.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:28.285" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:28.285" status="PASS" starttime="20170809 01:06:28.285"></status>
</kw>
<status endtime="20170809 01:06:28.285" status="PASS" starttime="20170809 01:06:28.284"></status>
</kw>
<status endtime="20170809 01:06:28.285" status="PASS" starttime="20170809 01:06:28.283"></status>
</kw>
<status endtime="20170809 01:06:28.285" status="PASS" starttime="20170809 01:06:28.282"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:28.349" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:28.349" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.349" status="PASS" starttime="20170809 01:06:28.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:28.351" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:28.351" status="PASS" starttime="20170809 01:06:28.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:28.352" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:28.352" status="PASS" starttime="20170809 01:06:28.352"></status>
</kw>
<status endtime="20170809 01:06:28.352" status="PASS" starttime="20170809 01:06:28.351"></status>
</kw>
<status endtime="20170809 01:06:28.352" status="PASS" starttime="20170809 01:06:28.350"></status>
</kw>
<status endtime="20170809 01:06:28.352" status="PASS" starttime="20170809 01:06:28.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:28.353" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:28.353" status="PASS" starttime="20170809 01:06:28.352"></status>
</kw>
<msg timestamp="20170809 01:06:28.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.353" status="PASS" starttime="20170809 01:06:28.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.354" status="PASS" starttime="20170809 01:06:28.353"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:28.354" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:28.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:28.354" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:28.354" status="PASS" starttime="20170809 01:06:28.354"></status>
</kw>
<msg timestamp="20170809 01:06:28.355" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:06:28.355" status="PASS" starttime="20170809 01:06:28.024"></status>
</kw>
<msg timestamp="20170809 01:06:28.355" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:06:28.355" status="PASS" starttime="20170809 01:06:28.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:06:28.356" status="PASS" starttime="20170809 01:06:28.355"></status>
</kw>
<status endtime="20170809 01:06:28.356" status="PASS" starttime="20170809 01:06:28.023"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:28.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:28.360" status="PASS" starttime="20170809 01:06:28.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:28.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:28.361" status="PASS" starttime="20170809 01:06:28.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:28.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:28.362" status="PASS" starttime="20170809 01:06:28.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:28.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:28.362" status="PASS" starttime="20170809 01:06:28.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:28.543" status="PASS" starttime="20170809 01:06:28.363"></status>
</kw>
<msg timestamp="20170809 01:06:28.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:28.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.543" status="PASS" starttime="20170809 01:06:28.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.544" status="PASS" starttime="20170809 01:06:28.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.545" status="PASS" starttime="20170809 01:06:28.545"></status>
</kw>
<status endtime="20170809 01:06:28.545" status="PASS" starttime="20170809 01:06:28.359"></status>
</kw>
<status endtime="20170809 01:06:28.545" status="PASS" starttime="20170809 01:06:28.358"></status>
</kw>
<status endtime="20170809 01:06:28.545" status="PASS" starttime="20170809 01:06:28.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:28.546" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:06:28.546" status="PASS" starttime="20170809 01:06:28.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:28.548" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:28.548" status="PASS" starttime="20170809 01:06:28.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:28.549" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:28.549" status="PASS" starttime="20170809 01:06:28.549"></status>
</kw>
<status endtime="20170809 01:06:28.549" status="PASS" starttime="20170809 01:06:28.548"></status>
</kw>
<status endtime="20170809 01:06:28.549" status="PASS" starttime="20170809 01:06:28.547"></status>
</kw>
<status endtime="20170809 01:06:28.549" status="PASS" starttime="20170809 01:06:28.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:28.645" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:28.646" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.646" status="PASS" starttime="20170809 01:06:28.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:28.647" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:28.647" status="PASS" starttime="20170809 01:06:28.647"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:28.648" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:28.648" status="PASS" starttime="20170809 01:06:28.648"></status>
</kw>
<status endtime="20170809 01:06:28.649" status="PASS" starttime="20170809 01:06:28.648"></status>
</kw>
<status endtime="20170809 01:06:28.649" status="PASS" starttime="20170809 01:06:28.646"></status>
</kw>
<status endtime="20170809 01:06:28.649" status="PASS" starttime="20170809 01:06:28.646"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:28.649" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:28.649" status="PASS" starttime="20170809 01:06:28.649"></status>
</kw>
<msg timestamp="20170809 01:06:28.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.649" status="PASS" starttime="20170809 01:06:28.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.650" status="PASS" starttime="20170809 01:06:28.650"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:28.651" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:28.651" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:28.651" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:28.651" status="PASS" starttime="20170809 01:06:28.650"></status>
</kw>
<msg timestamp="20170809 01:06:28.651" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:06:28.651" status="PASS" starttime="20170809 01:06:28.356"></status>
</kw>
<msg timestamp="20170809 01:06:28.651" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:06:28.651" status="PASS" starttime="20170809 01:06:28.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:06:28.652" status="PASS" starttime="20170809 01:06:28.652"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:28.656" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:28.657" status="PASS" starttime="20170809 01:06:28.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:28.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:28.657" status="PASS" starttime="20170809 01:06:28.657"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:28.658" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:28.658" status="PASS" starttime="20170809 01:06:28.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:28.659" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:28.659" status="PASS" starttime="20170809 01:06:28.658"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.882" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:28.882" status="PASS" starttime="20170809 01:06:28.659"></status>
</kw>
<msg timestamp="20170809 01:06:28.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:28.883" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.883" status="PASS" starttime="20170809 01:06:28.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.883" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.883" status="PASS" starttime="20170809 01:06:28.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.884" status="PASS" starttime="20170809 01:06:28.883"></status>
</kw>
<status endtime="20170809 01:06:28.884" status="PASS" starttime="20170809 01:06:28.655"></status>
</kw>
<status endtime="20170809 01:06:28.884" status="PASS" starttime="20170809 01:06:28.655"></status>
</kw>
<status endtime="20170809 01:06:28.884" status="PASS" starttime="20170809 01:06:28.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:28.885" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:06:28.885" status="PASS" starttime="20170809 01:06:28.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:28.887" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:28.887" status="PASS" starttime="20170809 01:06:28.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:28.891" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:28.891" status="PASS" starttime="20170809 01:06:28.888"></status>
</kw>
<status endtime="20170809 01:06:28.891" status="PASS" starttime="20170809 01:06:28.887"></status>
</kw>
<status endtime="20170809 01:06:28.891" status="PASS" starttime="20170809 01:06:28.886"></status>
</kw>
<status endtime="20170809 01:06:28.891" status="PASS" starttime="20170809 01:06:28.885"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:28.964" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:06:28.964" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.965" status="PASS" starttime="20170809 01:06:28.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:28.966" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:28.966" status="PASS" starttime="20170809 01:06:28.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:28.967" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:28.967" status="PASS" starttime="20170809 01:06:28.967"></status>
</kw>
<status endtime="20170809 01:06:28.968" status="PASS" starttime="20170809 01:06:28.967"></status>
</kw>
<status endtime="20170809 01:06:28.968" status="PASS" starttime="20170809 01:06:28.965"></status>
</kw>
<status endtime="20170809 01:06:28.968" status="PASS" starttime="20170809 01:06:28.965"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:28.968" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:28.968" status="PASS" starttime="20170809 01:06:28.968"></status>
</kw>
<msg timestamp="20170809 01:06:28.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:28.968" status="PASS" starttime="20170809 01:06:28.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:28.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:28.969" status="PASS" starttime="20170809 01:06:28.969"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:28.970" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:28.970" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:28.970" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:28.970" status="PASS" starttime="20170809 01:06:28.969"></status>
</kw>
<msg timestamp="20170809 01:06:28.970" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:28.970" status="PASS" starttime="20170809 01:06:28.653"></status>
</kw>
<msg timestamp="20170809 01:06:28.970" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:28.970" status="PASS" starttime="20170809 01:06:28.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:06:28.971" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:06:28.971" status="FAIL" starttime="20170809 01:06:28.971"></status>
</kw>
<status endtime="20170809 01:06:28.971" status="FAIL" starttime="20170809 01:06:28.652"></status>
</kw>
<status endtime="20170809 01:06:28.971" status="FAIL" starttime="20170809 01:06:28.022"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:38.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:38.977" status="PASS" starttime="20170809 01:06:38.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:38.977" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:38.977" status="PASS" starttime="20170809 01:06:38.977"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:38.978" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:38.978" status="PASS" starttime="20170809 01:06:38.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:38.978" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:38.979" status="PASS" starttime="20170809 01:06:38.978"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:39.161" status="PASS" starttime="20170809 01:06:38.979"></status>
</kw>
<msg timestamp="20170809 01:06:39.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:39.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.161" status="PASS" starttime="20170809 01:06:38.979"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.162" status="PASS" starttime="20170809 01:06:39.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.163" status="PASS" starttime="20170809 01:06:39.162"></status>
</kw>
<status endtime="20170809 01:06:39.163" status="PASS" starttime="20170809 01:06:38.975"></status>
</kw>
<status endtime="20170809 01:06:39.163" status="PASS" starttime="20170809 01:06:38.975"></status>
</kw>
<status endtime="20170809 01:06:39.163" status="PASS" starttime="20170809 01:06:38.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:39.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:06:39.164" status="PASS" starttime="20170809 01:06:39.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:39.166" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:39.166" status="PASS" starttime="20170809 01:06:39.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:39.167" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:39.167" status="PASS" starttime="20170809 01:06:39.166"></status>
</kw>
<status endtime="20170809 01:06:39.167" status="PASS" starttime="20170809 01:06:39.166"></status>
</kw>
<status endtime="20170809 01:06:39.167" status="PASS" starttime="20170809 01:06:39.164"></status>
</kw>
<status endtime="20170809 01:06:39.167" status="PASS" starttime="20170809 01:06:39.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:39.232" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:39.232" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.232" status="PASS" starttime="20170809 01:06:39.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:39.234" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:39.234" status="PASS" starttime="20170809 01:06:39.233"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:39.235" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:39.235" status="PASS" starttime="20170809 01:06:39.234"></status>
</kw>
<status endtime="20170809 01:06:39.235" status="PASS" starttime="20170809 01:06:39.234"></status>
</kw>
<status endtime="20170809 01:06:39.235" status="PASS" starttime="20170809 01:06:39.233"></status>
</kw>
<status endtime="20170809 01:06:39.235" status="PASS" starttime="20170809 01:06:39.232"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:39.235" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:39.236" status="PASS" starttime="20170809 01:06:39.235"></status>
</kw>
<msg timestamp="20170809 01:06:39.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.236" status="PASS" starttime="20170809 01:06:38.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.236" status="PASS" starttime="20170809 01:06:39.236"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:39.237" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:39.237" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:39.237" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:39.237" status="PASS" starttime="20170809 01:06:39.237"></status>
</kw>
<msg timestamp="20170809 01:06:39.238" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:06:39.238" status="PASS" starttime="20170809 01:06:38.973"></status>
</kw>
<msg timestamp="20170809 01:06:39.238" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:06:39.238" status="PASS" starttime="20170809 01:06:38.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:06:39.238" status="PASS" starttime="20170809 01:06:39.238"></status>
</kw>
<status endtime="20170809 01:06:39.239" status="PASS" starttime="20170809 01:06:38.972"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:39.242" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:39.243" status="PASS" starttime="20170809 01:06:39.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:39.243" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:39.243" status="PASS" starttime="20170809 01:06:39.243"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:39.244" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:39.244" status="PASS" starttime="20170809 01:06:39.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:39.245" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:39.245" status="PASS" starttime="20170809 01:06:39.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.468" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:39.468" status="PASS" starttime="20170809 01:06:39.245"></status>
</kw>
<msg timestamp="20170809 01:06:39.468" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:39.468" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.468" status="PASS" starttime="20170809 01:06:39.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.469" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.469" status="PASS" starttime="20170809 01:06:39.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.469" status="PASS" starttime="20170809 01:06:39.469"></status>
</kw>
<status endtime="20170809 01:06:39.470" status="PASS" starttime="20170809 01:06:39.241"></status>
</kw>
<status endtime="20170809 01:06:39.470" status="PASS" starttime="20170809 01:06:39.241"></status>
</kw>
<status endtime="20170809 01:06:39.470" status="PASS" starttime="20170809 01:06:39.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:39.470" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:06:39.470" status="PASS" starttime="20170809 01:06:39.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:39.472" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:39.472" status="PASS" starttime="20170809 01:06:39.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:39.473" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:39.474" status="PASS" starttime="20170809 01:06:39.473"></status>
</kw>
<status endtime="20170809 01:06:39.474" status="PASS" starttime="20170809 01:06:39.473"></status>
</kw>
<status endtime="20170809 01:06:39.474" status="PASS" starttime="20170809 01:06:39.471"></status>
</kw>
<status endtime="20170809 01:06:39.474" status="PASS" starttime="20170809 01:06:39.471"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:39.586" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:39.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.587" status="PASS" starttime="20170809 01:06:39.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:39.588" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:39.588" status="PASS" starttime="20170809 01:06:39.588"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:39.589" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:39.589" status="PASS" starttime="20170809 01:06:39.589"></status>
</kw>
<status endtime="20170809 01:06:39.590" status="PASS" starttime="20170809 01:06:39.589"></status>
</kw>
<status endtime="20170809 01:06:39.590" status="PASS" starttime="20170809 01:06:39.587"></status>
</kw>
<status endtime="20170809 01:06:39.590" status="PASS" starttime="20170809 01:06:39.587"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:39.590" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:39.590" status="PASS" starttime="20170809 01:06:39.590"></status>
</kw>
<msg timestamp="20170809 01:06:39.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.590" status="PASS" starttime="20170809 01:06:39.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.591" status="PASS" starttime="20170809 01:06:39.591"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:39.592" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:39.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:39.592" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:39.592" status="PASS" starttime="20170809 01:06:39.591"></status>
</kw>
<msg timestamp="20170809 01:06:39.592" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:06:39.592" status="PASS" starttime="20170809 01:06:39.239"></status>
</kw>
<msg timestamp="20170809 01:06:39.592" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:06:39.592" status="PASS" starttime="20170809 01:06:39.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:06:39.593" status="PASS" starttime="20170809 01:06:39.593"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:39.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:39.598" status="PASS" starttime="20170809 01:06:39.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:39.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:39.598" status="PASS" starttime="20170809 01:06:39.598"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:39.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:39.599" status="PASS" starttime="20170809 01:06:39.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:39.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:39.599" status="PASS" starttime="20170809 01:06:39.599"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.842" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:39.842" status="PASS" starttime="20170809 01:06:39.600"></status>
</kw>
<msg timestamp="20170809 01:06:39.842" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:39.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.842" status="PASS" starttime="20170809 01:06:39.600"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.843" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.843" status="PASS" starttime="20170809 01:06:39.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.844" status="PASS" starttime="20170809 01:06:39.843"></status>
</kw>
<status endtime="20170809 01:06:39.844" status="PASS" starttime="20170809 01:06:39.596"></status>
</kw>
<status endtime="20170809 01:06:39.844" status="PASS" starttime="20170809 01:06:39.596"></status>
</kw>
<status endtime="20170809 01:06:39.844" status="PASS" starttime="20170809 01:06:39.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:39.845" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:06:39.845" status="PASS" starttime="20170809 01:06:39.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:39.847" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:39.847" status="PASS" starttime="20170809 01:06:39.846"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:39.848" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:39.848" status="PASS" starttime="20170809 01:06:39.848"></status>
</kw>
<status endtime="20170809 01:06:39.848" status="PASS" starttime="20170809 01:06:39.847"></status>
</kw>
<status endtime="20170809 01:06:39.848" status="PASS" starttime="20170809 01:06:39.846"></status>
</kw>
<status endtime="20170809 01:06:39.849" status="PASS" starttime="20170809 01:06:39.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:39.915" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:06:39.915" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.915" status="PASS" starttime="20170809 01:06:39.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:39.917" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:39.917" status="PASS" starttime="20170809 01:06:39.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:39.918" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:39.918" status="PASS" starttime="20170809 01:06:39.918"></status>
</kw>
<status endtime="20170809 01:06:39.918" status="PASS" starttime="20170809 01:06:39.917"></status>
</kw>
<status endtime="20170809 01:06:39.919" status="PASS" starttime="20170809 01:06:39.916"></status>
</kw>
<status endtime="20170809 01:06:39.919" status="PASS" starttime="20170809 01:06:39.916"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:39.919" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:39.919" status="PASS" starttime="20170809 01:06:39.919"></status>
</kw>
<msg timestamp="20170809 01:06:39.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:39.919" status="PASS" starttime="20170809 01:06:39.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:39.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:39.920" status="PASS" starttime="20170809 01:06:39.920"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:39.921" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:39.921" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:39.921" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:39.921" status="PASS" starttime="20170809 01:06:39.920"></status>
</kw>
<msg timestamp="20170809 01:06:39.921" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:39.921" status="PASS" starttime="20170809 01:06:39.594"></status>
</kw>
<msg timestamp="20170809 01:06:39.921" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:39.921" status="PASS" starttime="20170809 01:06:39.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:06:39.922" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:06:39.922" status="FAIL" starttime="20170809 01:06:39.922"></status>
</kw>
<status endtime="20170809 01:06:39.922" status="FAIL" starttime="20170809 01:06:39.593"></status>
</kw>
<status endtime="20170809 01:06:39.922" status="FAIL" starttime="20170809 01:06:38.972"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:49.927" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:49.928" status="PASS" starttime="20170809 01:06:49.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:49.928" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:49.928" status="PASS" starttime="20170809 01:06:49.928"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:49.929" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:49.929" status="PASS" starttime="20170809 01:06:49.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:49.930" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:49.930" status="PASS" starttime="20170809 01:06:49.930"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.108" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:50.109" status="PASS" starttime="20170809 01:06:49.932"></status>
</kw>
<msg timestamp="20170809 01:06:50.109" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:50.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.109" status="PASS" starttime="20170809 01:06:49.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.109" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.110" status="PASS" starttime="20170809 01:06:50.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.110" status="PASS" starttime="20170809 01:06:50.110"></status>
</kw>
<status endtime="20170809 01:06:50.110" status="PASS" starttime="20170809 01:06:49.926"></status>
</kw>
<status endtime="20170809 01:06:50.110" status="PASS" starttime="20170809 01:06:49.926"></status>
</kw>
<status endtime="20170809 01:06:50.111" status="PASS" starttime="20170809 01:06:49.925"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:50.111" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:06:50.111" status="PASS" starttime="20170809 01:06:50.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:50.113" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:50.113" status="PASS" starttime="20170809 01:06:50.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:50.114" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:50.114" status="PASS" starttime="20170809 01:06:50.114"></status>
</kw>
<status endtime="20170809 01:06:50.114" status="PASS" starttime="20170809 01:06:50.113"></status>
</kw>
<status endtime="20170809 01:06:50.115" status="PASS" starttime="20170809 01:06:50.112"></status>
</kw>
<status endtime="20170809 01:06:50.115" status="PASS" starttime="20170809 01:06:50.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:50.179" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:50.179" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.179" status="PASS" starttime="20170809 01:06:50.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:50.181" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:50.181" status="PASS" starttime="20170809 01:06:50.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:50.182" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:50.182" status="PASS" starttime="20170809 01:06:50.181"></status>
</kw>
<status endtime="20170809 01:06:50.182" status="PASS" starttime="20170809 01:06:50.181"></status>
</kw>
<status endtime="20170809 01:06:50.182" status="PASS" starttime="20170809 01:06:50.180"></status>
</kw>
<status endtime="20170809 01:06:50.182" status="PASS" starttime="20170809 01:06:50.179"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:50.182" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:50.182" status="PASS" starttime="20170809 01:06:50.182"></status>
</kw>
<msg timestamp="20170809 01:06:50.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.183" status="PASS" starttime="20170809 01:06:49.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.183" status="PASS" starttime="20170809 01:06:50.183"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:50.184" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:50.184" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:50.184" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:50.184" status="PASS" starttime="20170809 01:06:50.184"></status>
</kw>
<msg timestamp="20170809 01:06:50.184" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:06:50.184" status="PASS" starttime="20170809 01:06:49.924"></status>
</kw>
<msg timestamp="20170809 01:06:50.185" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:06:50.185" status="PASS" starttime="20170809 01:06:49.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:06:50.185" status="PASS" starttime="20170809 01:06:50.185"></status>
</kw>
<status endtime="20170809 01:06:50.185" status="PASS" starttime="20170809 01:06:49.923"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:50.189" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:50.190" status="PASS" starttime="20170809 01:06:50.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:50.190" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:50.190" status="PASS" starttime="20170809 01:06:50.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:50.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:50.191" status="PASS" starttime="20170809 01:06:50.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:50.192" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:50.192" status="PASS" starttime="20170809 01:06:50.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.416" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:50.416" status="PASS" starttime="20170809 01:06:50.192"></status>
</kw>
<msg timestamp="20170809 01:06:50.416" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:50.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.416" status="PASS" starttime="20170809 01:06:50.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.417" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.417" status="PASS" starttime="20170809 01:06:50.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.417" status="PASS" starttime="20170809 01:06:50.417"></status>
</kw>
<status endtime="20170809 01:06:50.418" status="PASS" starttime="20170809 01:06:50.188"></status>
</kw>
<status endtime="20170809 01:06:50.418" status="PASS" starttime="20170809 01:06:50.188"></status>
</kw>
<status endtime="20170809 01:06:50.418" status="PASS" starttime="20170809 01:06:50.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:50.418" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:06:50.418" status="PASS" starttime="20170809 01:06:50.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:50.420" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:50.420" status="PASS" starttime="20170809 01:06:50.420"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:50.421" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:06:50.421" status="PASS" starttime="20170809 01:06:50.421"></status>
</kw>
<status endtime="20170809 01:06:50.422" status="PASS" starttime="20170809 01:06:50.421"></status>
</kw>
<status endtime="20170809 01:06:50.422" status="PASS" starttime="20170809 01:06:50.419"></status>
</kw>
<status endtime="20170809 01:06:50.422" status="PASS" starttime="20170809 01:06:50.419"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:50.530" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:06:50.531" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.531" status="PASS" starttime="20170809 01:06:50.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:50.532" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:50.532" status="PASS" starttime="20170809 01:06:50.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:50.533" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:50.533" status="PASS" starttime="20170809 01:06:50.533"></status>
</kw>
<status endtime="20170809 01:06:50.533" status="PASS" starttime="20170809 01:06:50.533"></status>
</kw>
<status endtime="20170809 01:06:50.534" status="PASS" starttime="20170809 01:06:50.531"></status>
</kw>
<status endtime="20170809 01:06:50.534" status="PASS" starttime="20170809 01:06:50.531"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:50.534" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:50.534" status="PASS" starttime="20170809 01:06:50.534"></status>
</kw>
<msg timestamp="20170809 01:06:50.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.535" status="PASS" starttime="20170809 01:06:50.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.535" status="PASS" starttime="20170809 01:06:50.535"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:50.536" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:50.536" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:50.536" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:50.536" status="PASS" starttime="20170809 01:06:50.536"></status>
</kw>
<msg timestamp="20170809 01:06:50.536" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:06:50.536" status="PASS" starttime="20170809 01:06:50.186"></status>
</kw>
<msg timestamp="20170809 01:06:50.537" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:06:50.537" status="PASS" starttime="20170809 01:06:50.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:06:50.537" status="PASS" starttime="20170809 01:06:50.537"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:06:50.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:06:50.542" status="PASS" starttime="20170809 01:06:50.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:06:50.542" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:06:50.542" status="PASS" starttime="20170809 01:06:50.542"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:06:50.543" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:06:50.543" status="PASS" starttime="20170809 01:06:50.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:06:50.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:06:50.544" status="PASS" starttime="20170809 01:06:50.543"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.837" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:06:50.837" status="PASS" starttime="20170809 01:06:50.544"></status>
</kw>
<msg timestamp="20170809 01:06:50.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:06:50.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.837" status="PASS" starttime="20170809 01:06:50.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.838" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.838" status="PASS" starttime="20170809 01:06:50.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.839" status="PASS" starttime="20170809 01:06:50.838"></status>
</kw>
<status endtime="20170809 01:06:50.839" status="PASS" starttime="20170809 01:06:50.541"></status>
</kw>
<status endtime="20170809 01:06:50.839" status="PASS" starttime="20170809 01:06:50.540"></status>
</kw>
<status endtime="20170809 01:06:50.839" status="PASS" starttime="20170809 01:06:50.540"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:06:50.840" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:06:50.840" status="PASS" starttime="20170809 01:06:50.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:50.842" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:50.842" status="PASS" starttime="20170809 01:06:50.841"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:50.843" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:06:50.843" status="PASS" starttime="20170809 01:06:50.843"></status>
</kw>
<status endtime="20170809 01:06:50.843" status="PASS" starttime="20170809 01:06:50.842"></status>
</kw>
<status endtime="20170809 01:06:50.843" status="PASS" starttime="20170809 01:06:50.840"></status>
</kw>
<status endtime="20170809 01:06:50.843" status="PASS" starttime="20170809 01:06:50.840"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:06:50.911" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:06:50.911" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.911" status="PASS" starttime="20170809 01:06:50.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:06:50.913" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:50.913" status="PASS" starttime="20170809 01:06:50.912"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:06:50.914" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:06:50.914" status="PASS" starttime="20170809 01:06:50.913"></status>
</kw>
<status endtime="20170809 01:06:50.914" status="PASS" starttime="20170809 01:06:50.913"></status>
</kw>
<status endtime="20170809 01:06:50.914" status="PASS" starttime="20170809 01:06:50.912"></status>
</kw>
<status endtime="20170809 01:06:50.914" status="PASS" starttime="20170809 01:06:50.911"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:06:50.914" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:06:50.914" status="PASS" starttime="20170809 01:06:50.914"></status>
</kw>
<msg timestamp="20170809 01:06:50.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:06:50.915" status="PASS" starttime="20170809 01:06:50.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:06:50.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:06:50.915" status="PASS" starttime="20170809 01:06:50.915"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:06:50.916" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:06:50.916" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:06:50.916" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:06:50.916" status="PASS" starttime="20170809 01:06:50.916"></status>
</kw>
<msg timestamp="20170809 01:06:50.916" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:50.916" status="PASS" starttime="20170809 01:06:50.538"></status>
</kw>
<msg timestamp="20170809 01:06:50.917" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:06:50.917" status="PASS" starttime="20170809 01:06:50.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:06:50.917" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:06:50.917" status="FAIL" starttime="20170809 01:06:50.917"></status>
</kw>
<status endtime="20170809 01:06:50.917" status="FAIL" starttime="20170809 01:06:50.537"></status>
</kw>
<status endtime="20170809 01:06:50.918" status="FAIL" starttime="20170809 01:06:49.923"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:00.922" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:00.923" status="PASS" starttime="20170809 01:07:00.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:00.923" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:00.924" status="PASS" starttime="20170809 01:07:00.923"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:00.924" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:00.924" status="PASS" starttime="20170809 01:07:00.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:00.925" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:00.925" status="PASS" starttime="20170809 01:07:00.924"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.112" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:01.112" status="PASS" starttime="20170809 01:07:00.926"></status>
</kw>
<msg timestamp="20170809 01:07:01.112" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:01.112" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.112" status="PASS" starttime="20170809 01:07:00.925"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.113" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.113" status="PASS" starttime="20170809 01:07:01.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.114" status="PASS" starttime="20170809 01:07:01.114"></status>
</kw>
<status endtime="20170809 01:07:01.114" status="PASS" starttime="20170809 01:07:00.922"></status>
</kw>
<status endtime="20170809 01:07:01.114" status="PASS" starttime="20170809 01:07:00.921"></status>
</kw>
<status endtime="20170809 01:07:01.114" status="PASS" starttime="20170809 01:07:00.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:01.115" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:07:01.115" status="PASS" starttime="20170809 01:07:01.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:01.117" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:01.117" status="PASS" starttime="20170809 01:07:01.116"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:01.118" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:01.118" status="PASS" starttime="20170809 01:07:01.118"></status>
</kw>
<status endtime="20170809 01:07:01.118" status="PASS" starttime="20170809 01:07:01.117"></status>
</kw>
<status endtime="20170809 01:07:01.118" status="PASS" starttime="20170809 01:07:01.116"></status>
</kw>
<status endtime="20170809 01:07:01.118" status="PASS" starttime="20170809 01:07:01.115"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:01.257" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:01.257" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.257" status="PASS" starttime="20170809 01:07:01.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:01.259" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:01.259" status="PASS" starttime="20170809 01:07:01.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:01.260" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:01.260" status="PASS" starttime="20170809 01:07:01.260"></status>
</kw>
<status endtime="20170809 01:07:01.260" status="PASS" starttime="20170809 01:07:01.259"></status>
</kw>
<status endtime="20170809 01:07:01.260" status="PASS" starttime="20170809 01:07:01.258"></status>
</kw>
<status endtime="20170809 01:07:01.260" status="PASS" starttime="20170809 01:07:01.257"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:01.261" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:01.261" status="PASS" starttime="20170809 01:07:01.261"></status>
</kw>
<msg timestamp="20170809 01:07:01.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.261" status="PASS" starttime="20170809 01:07:00.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.262" status="PASS" starttime="20170809 01:07:01.261"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:01.262" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:01.262" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:01.262" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:01.262" status="PASS" starttime="20170809 01:07:01.262"></status>
</kw>
<msg timestamp="20170809 01:07:01.263" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:07:01.263" status="PASS" starttime="20170809 01:07:00.919"></status>
</kw>
<msg timestamp="20170809 01:07:01.263" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:07:01.263" status="PASS" starttime="20170809 01:07:00.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:07:01.264" status="PASS" starttime="20170809 01:07:01.263"></status>
</kw>
<status endtime="20170809 01:07:01.264" status="PASS" starttime="20170809 01:07:00.919"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:01.268" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:01.268" status="PASS" starttime="20170809 01:07:01.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:01.269" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:01.269" status="PASS" starttime="20170809 01:07:01.268"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:01.269" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:01.269" status="PASS" starttime="20170809 01:07:01.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:01.270" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:01.270" status="PASS" starttime="20170809 01:07:01.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.463" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:01.463" status="PASS" starttime="20170809 01:07:01.271"></status>
</kw>
<msg timestamp="20170809 01:07:01.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:01.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.464" status="PASS" starttime="20170809 01:07:01.270"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.464" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.464" status="PASS" starttime="20170809 01:07:01.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.465" status="PASS" starttime="20170809 01:07:01.465"></status>
</kw>
<status endtime="20170809 01:07:01.465" status="PASS" starttime="20170809 01:07:01.266"></status>
</kw>
<status endtime="20170809 01:07:01.465" status="PASS" starttime="20170809 01:07:01.266"></status>
</kw>
<status endtime="20170809 01:07:01.466" status="PASS" starttime="20170809 01:07:01.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:01.466" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:07:01.466" status="PASS" starttime="20170809 01:07:01.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:01.468" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:01.468" status="PASS" starttime="20170809 01:07:01.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:01.469" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:01.469" status="PASS" starttime="20170809 01:07:01.469"></status>
</kw>
<status endtime="20170809 01:07:01.469" status="PASS" starttime="20170809 01:07:01.468"></status>
</kw>
<status endtime="20170809 01:07:01.469" status="PASS" starttime="20170809 01:07:01.467"></status>
</kw>
<status endtime="20170809 01:07:01.469" status="PASS" starttime="20170809 01:07:01.466"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:01.559" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:01.559" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.559" status="PASS" starttime="20170809 01:07:01.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:01.560" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:01.561" status="PASS" starttime="20170809 01:07:01.560"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:01.561" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:01.561" status="PASS" starttime="20170809 01:07:01.561"></status>
</kw>
<status endtime="20170809 01:07:01.562" status="PASS" starttime="20170809 01:07:01.561"></status>
</kw>
<status endtime="20170809 01:07:01.562" status="PASS" starttime="20170809 01:07:01.559"></status>
</kw>
<status endtime="20170809 01:07:01.562" status="PASS" starttime="20170809 01:07:01.559"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:01.562" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:01.562" status="PASS" starttime="20170809 01:07:01.562"></status>
</kw>
<msg timestamp="20170809 01:07:01.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.562" status="PASS" starttime="20170809 01:07:01.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.563" status="PASS" starttime="20170809 01:07:01.563"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:01.564" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:01.564" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:01.564" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:01.564" status="PASS" starttime="20170809 01:07:01.563"></status>
</kw>
<msg timestamp="20170809 01:07:01.564" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:07:01.564" status="PASS" starttime="20170809 01:07:01.264"></status>
</kw>
<msg timestamp="20170809 01:07:01.564" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:07:01.564" status="PASS" starttime="20170809 01:07:01.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:07:01.565" status="PASS" starttime="20170809 01:07:01.565"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:01.569" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:01.570" status="PASS" starttime="20170809 01:07:01.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:01.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:01.570" status="PASS" starttime="20170809 01:07:01.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:01.571" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:01.571" status="PASS" starttime="20170809 01:07:01.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:01.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:01.571" status="PASS" starttime="20170809 01:07:01.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:01.759" status="PASS" starttime="20170809 01:07:01.572"></status>
</kw>
<msg timestamp="20170809 01:07:01.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:01.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.759" status="PASS" starttime="20170809 01:07:01.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.759" status="PASS" starttime="20170809 01:07:01.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.760" status="PASS" starttime="20170809 01:07:01.760"></status>
</kw>
<status endtime="20170809 01:07:01.760" status="PASS" starttime="20170809 01:07:01.568"></status>
</kw>
<status endtime="20170809 01:07:01.760" status="PASS" starttime="20170809 01:07:01.568"></status>
</kw>
<status endtime="20170809 01:07:01.761" status="PASS" starttime="20170809 01:07:01.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:01.761" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:07:01.761" status="PASS" starttime="20170809 01:07:01.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:01.766" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:01.766" status="PASS" starttime="20170809 01:07:01.763"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:01.767" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:01.767" status="PASS" starttime="20170809 01:07:01.767"></status>
</kw>
<status endtime="20170809 01:07:01.767" status="PASS" starttime="20170809 01:07:01.766"></status>
</kw>
<status endtime="20170809 01:07:01.768" status="PASS" starttime="20170809 01:07:01.762"></status>
</kw>
<status endtime="20170809 01:07:01.768" status="PASS" starttime="20170809 01:07:01.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:01.869" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:07:01.869" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.869" status="PASS" starttime="20170809 01:07:01.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:01.871" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:01.871" status="PASS" starttime="20170809 01:07:01.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:01.872" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:01.872" status="PASS" starttime="20170809 01:07:01.872"></status>
</kw>
<status endtime="20170809 01:07:01.872" status="PASS" starttime="20170809 01:07:01.871"></status>
</kw>
<status endtime="20170809 01:07:01.872" status="PASS" starttime="20170809 01:07:01.870"></status>
</kw>
<status endtime="20170809 01:07:01.873" status="PASS" starttime="20170809 01:07:01.869"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:01.873" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:01.873" status="PASS" starttime="20170809 01:07:01.873"></status>
</kw>
<msg timestamp="20170809 01:07:01.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:01.873" status="PASS" starttime="20170809 01:07:01.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:01.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:01.874" status="PASS" starttime="20170809 01:07:01.873"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:01.874" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:01.874" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:01.875" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:01.875" status="PASS" starttime="20170809 01:07:01.874"></status>
</kw>
<msg timestamp="20170809 01:07:01.875" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:01.875" status="PASS" starttime="20170809 01:07:01.566"></status>
</kw>
<msg timestamp="20170809 01:07:01.875" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:01.875" status="PASS" starttime="20170809 01:07:01.565"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:07:01.876" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:07:01.876" status="FAIL" starttime="20170809 01:07:01.876"></status>
</kw>
<status endtime="20170809 01:07:01.876" status="FAIL" starttime="20170809 01:07:01.565"></status>
</kw>
<status endtime="20170809 01:07:01.876" status="FAIL" starttime="20170809 01:07:00.918"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:11.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:11.882" status="PASS" starttime="20170809 01:07:11.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:11.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:11.882" status="PASS" starttime="20170809 01:07:11.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:11.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:11.883" status="PASS" starttime="20170809 01:07:11.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:11.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:11.884" status="PASS" starttime="20170809 01:07:11.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.193" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:12.194" status="PASS" starttime="20170809 01:07:11.884"></status>
</kw>
<msg timestamp="20170809 01:07:12.194" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:12.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.194" status="PASS" starttime="20170809 01:07:11.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.195" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.195" status="PASS" starttime="20170809 01:07:12.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.195" status="PASS" starttime="20170809 01:07:12.195"></status>
</kw>
<status endtime="20170809 01:07:12.196" status="PASS" starttime="20170809 01:07:11.880"></status>
</kw>
<status endtime="20170809 01:07:12.196" status="PASS" starttime="20170809 01:07:11.880"></status>
</kw>
<status endtime="20170809 01:07:12.196" status="PASS" starttime="20170809 01:07:11.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:12.197" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:07:12.197" status="PASS" starttime="20170809 01:07:12.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:12.203" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:12.203" status="PASS" starttime="20170809 01:07:12.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:12.205" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:12.205" status="PASS" starttime="20170809 01:07:12.204"></status>
</kw>
<status endtime="20170809 01:07:12.205" status="PASS" starttime="20170809 01:07:12.203"></status>
</kw>
<status endtime="20170809 01:07:12.206" status="PASS" starttime="20170809 01:07:12.200"></status>
</kw>
<status endtime="20170809 01:07:12.206" status="PASS" starttime="20170809 01:07:12.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:12.271" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:12.271" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.271" status="PASS" starttime="20170809 01:07:12.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:12.273" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:12.273" status="PASS" starttime="20170809 01:07:12.273"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:12.274" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:12.274" status="PASS" starttime="20170809 01:07:12.274"></status>
</kw>
<status endtime="20170809 01:07:12.274" status="PASS" starttime="20170809 01:07:12.273"></status>
</kw>
<status endtime="20170809 01:07:12.274" status="PASS" starttime="20170809 01:07:12.272"></status>
</kw>
<status endtime="20170809 01:07:12.275" status="PASS" starttime="20170809 01:07:12.272"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:12.275" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:12.275" status="PASS" starttime="20170809 01:07:12.275"></status>
</kw>
<msg timestamp="20170809 01:07:12.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.275" status="PASS" starttime="20170809 01:07:11.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.276" status="PASS" starttime="20170809 01:07:12.276"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:12.277" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:12.277" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:12.277" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:12.277" status="PASS" starttime="20170809 01:07:12.276"></status>
</kw>
<msg timestamp="20170809 01:07:12.277" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:07:12.277" status="PASS" starttime="20170809 01:07:11.878"></status>
</kw>
<msg timestamp="20170809 01:07:12.277" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:07:12.277" status="PASS" starttime="20170809 01:07:11.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:07:12.278" status="PASS" starttime="20170809 01:07:12.278"></status>
</kw>
<status endtime="20170809 01:07:12.278" status="PASS" starttime="20170809 01:07:11.877"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:12.282" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:12.282" status="PASS" starttime="20170809 01:07:12.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:12.283" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:12.283" status="PASS" starttime="20170809 01:07:12.283"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:12.284" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:12.284" status="PASS" starttime="20170809 01:07:12.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:12.284" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:12.284" status="PASS" starttime="20170809 01:07:12.284"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.482" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:12.482" status="PASS" starttime="20170809 01:07:12.285"></status>
</kw>
<msg timestamp="20170809 01:07:12.482" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:12.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.482" status="PASS" starttime="20170809 01:07:12.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.483" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.483" status="PASS" starttime="20170809 01:07:12.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.484" status="PASS" starttime="20170809 01:07:12.483"></status>
</kw>
<status endtime="20170809 01:07:12.484" status="PASS" starttime="20170809 01:07:12.281"></status>
</kw>
<status endtime="20170809 01:07:12.484" status="PASS" starttime="20170809 01:07:12.280"></status>
</kw>
<status endtime="20170809 01:07:12.484" status="PASS" starttime="20170809 01:07:12.280"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:12.485" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:07:12.485" status="PASS" starttime="20170809 01:07:12.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:12.487" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:12.487" status="PASS" starttime="20170809 01:07:12.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:12.488" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:12.488" status="PASS" starttime="20170809 01:07:12.487"></status>
</kw>
<status endtime="20170809 01:07:12.488" status="PASS" starttime="20170809 01:07:12.487"></status>
</kw>
<status endtime="20170809 01:07:12.488" status="PASS" starttime="20170809 01:07:12.485"></status>
</kw>
<status endtime="20170809 01:07:12.488" status="PASS" starttime="20170809 01:07:12.485"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:12.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:12.582" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.582" status="PASS" starttime="20170809 01:07:12.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:12.583" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:12.583" status="PASS" starttime="20170809 01:07:12.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:12.584" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:12.584" status="PASS" starttime="20170809 01:07:12.584"></status>
</kw>
<status endtime="20170809 01:07:12.585" status="PASS" starttime="20170809 01:07:12.584"></status>
</kw>
<status endtime="20170809 01:07:12.585" status="PASS" starttime="20170809 01:07:12.582"></status>
</kw>
<status endtime="20170809 01:07:12.585" status="PASS" starttime="20170809 01:07:12.582"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:12.585" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:12.585" status="PASS" starttime="20170809 01:07:12.585"></status>
</kw>
<msg timestamp="20170809 01:07:12.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.585" status="PASS" starttime="20170809 01:07:12.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.586" status="PASS" starttime="20170809 01:07:12.586"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:12.587" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:12.587" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:12.587" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:12.587" status="PASS" starttime="20170809 01:07:12.586"></status>
</kw>
<msg timestamp="20170809 01:07:12.587" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:07:12.587" status="PASS" starttime="20170809 01:07:12.279"></status>
</kw>
<msg timestamp="20170809 01:07:12.587" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:07:12.587" status="PASS" starttime="20170809 01:07:12.278"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:07:12.588" status="PASS" starttime="20170809 01:07:12.588"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:12.592" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:12.592" status="PASS" starttime="20170809 01:07:12.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:12.593" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:12.593" status="PASS" starttime="20170809 01:07:12.593"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:12.594" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:12.594" status="PASS" starttime="20170809 01:07:12.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:12.594" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:12.594" status="PASS" starttime="20170809 01:07:12.594"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:12.787" status="PASS" starttime="20170809 01:07:12.595"></status>
</kw>
<msg timestamp="20170809 01:07:12.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:12.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.787" status="PASS" starttime="20170809 01:07:12.595"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.788" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.788" status="PASS" starttime="20170809 01:07:12.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.789" status="PASS" starttime="20170809 01:07:12.788"></status>
</kw>
<status endtime="20170809 01:07:12.789" status="PASS" starttime="20170809 01:07:12.591"></status>
</kw>
<status endtime="20170809 01:07:12.789" status="PASS" starttime="20170809 01:07:12.591"></status>
</kw>
<status endtime="20170809 01:07:12.789" status="PASS" starttime="20170809 01:07:12.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:12.789" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:07:12.790" status="PASS" starttime="20170809 01:07:12.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:12.792" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:12.792" status="PASS" starttime="20170809 01:07:12.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:12.793" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:12.793" status="PASS" starttime="20170809 01:07:12.793"></status>
</kw>
<status endtime="20170809 01:07:12.793" status="PASS" starttime="20170809 01:07:12.792"></status>
</kw>
<status endtime="20170809 01:07:12.793" status="PASS" starttime="20170809 01:07:12.790"></status>
</kw>
<status endtime="20170809 01:07:12.793" status="PASS" starttime="20170809 01:07:12.790"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:12.874" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:07:12.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.875" status="PASS" starttime="20170809 01:07:12.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:12.876" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:12.877" status="PASS" starttime="20170809 01:07:12.876"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:12.877" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:12.878" status="PASS" starttime="20170809 01:07:12.877"></status>
</kw>
<status endtime="20170809 01:07:12.878" status="PASS" starttime="20170809 01:07:12.877"></status>
</kw>
<status endtime="20170809 01:07:12.878" status="PASS" starttime="20170809 01:07:12.875"></status>
</kw>
<status endtime="20170809 01:07:12.878" status="PASS" starttime="20170809 01:07:12.875"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:12.878" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:12.878" status="PASS" starttime="20170809 01:07:12.878"></status>
</kw>
<msg timestamp="20170809 01:07:12.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:12.879" status="PASS" starttime="20170809 01:07:12.590"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:12.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:12.879" status="PASS" starttime="20170809 01:07:12.879"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:12.880" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:12.880" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:12.880" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:12.880" status="PASS" starttime="20170809 01:07:12.879"></status>
</kw>
<msg timestamp="20170809 01:07:12.880" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:12.880" status="PASS" starttime="20170809 01:07:12.589"></status>
</kw>
<msg timestamp="20170809 01:07:12.880" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:12.881" status="PASS" starttime="20170809 01:07:12.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:07:12.881" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:07:12.881" status="FAIL" starttime="20170809 01:07:12.881"></status>
</kw>
<status endtime="20170809 01:07:12.881" status="FAIL" starttime="20170809 01:07:12.588"></status>
</kw>
<status endtime="20170809 01:07:12.882" status="FAIL" starttime="20170809 01:07:11.877"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:22.886" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:22.887" status="PASS" starttime="20170809 01:07:22.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:22.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:22.887" status="PASS" starttime="20170809 01:07:22.887"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:22.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:22.888" status="PASS" starttime="20170809 01:07:22.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:22.889" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:22.889" status="PASS" starttime="20170809 01:07:22.888"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:23.089" status="PASS" starttime="20170809 01:07:22.889"></status>
</kw>
<msg timestamp="20170809 01:07:23.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:23.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.090" status="PASS" starttime="20170809 01:07:22.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.090" status="PASS" starttime="20170809 01:07:23.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.091" status="PASS" starttime="20170809 01:07:23.091"></status>
</kw>
<status endtime="20170809 01:07:23.091" status="PASS" starttime="20170809 01:07:22.886"></status>
</kw>
<status endtime="20170809 01:07:23.091" status="PASS" starttime="20170809 01:07:22.885"></status>
</kw>
<status endtime="20170809 01:07:23.091" status="PASS" starttime="20170809 01:07:22.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:23.092" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:07:23.092" status="PASS" starttime="20170809 01:07:23.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:23.094" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:23.094" status="PASS" starttime="20170809 01:07:23.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:23.095" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:23.095" status="PASS" starttime="20170809 01:07:23.095"></status>
</kw>
<status endtime="20170809 01:07:23.095" status="PASS" starttime="20170809 01:07:23.094"></status>
</kw>
<status endtime="20170809 01:07:23.096" status="PASS" starttime="20170809 01:07:23.093"></status>
</kw>
<status endtime="20170809 01:07:23.096" status="PASS" starttime="20170809 01:07:23.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:23.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:23.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.160" status="PASS" starttime="20170809 01:07:23.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:23.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:23.162" status="PASS" starttime="20170809 01:07:23.161"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:23.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:23.163" status="PASS" starttime="20170809 01:07:23.162"></status>
</kw>
<status endtime="20170809 01:07:23.163" status="PASS" starttime="20170809 01:07:23.162"></status>
</kw>
<status endtime="20170809 01:07:23.163" status="PASS" starttime="20170809 01:07:23.161"></status>
</kw>
<status endtime="20170809 01:07:23.163" status="PASS" starttime="20170809 01:07:23.160"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:23.163" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:23.164" status="PASS" starttime="20170809 01:07:23.163"></status>
</kw>
<msg timestamp="20170809 01:07:23.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.164" status="PASS" starttime="20170809 01:07:22.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.164" status="PASS" starttime="20170809 01:07:23.164"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:23.165" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:23.165" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:23.165" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:23.165" status="PASS" starttime="20170809 01:07:23.165"></status>
</kw>
<msg timestamp="20170809 01:07:23.166" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:07:23.166" status="PASS" starttime="20170809 01:07:22.883"></status>
</kw>
<msg timestamp="20170809 01:07:23.166" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:07:23.166" status="PASS" starttime="20170809 01:07:22.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:07:23.166" status="PASS" starttime="20170809 01:07:23.166"></status>
</kw>
<status endtime="20170809 01:07:23.167" status="PASS" starttime="20170809 01:07:22.883"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:23.170" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:23.171" status="PASS" starttime="20170809 01:07:23.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:23.171" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:23.171" status="PASS" starttime="20170809 01:07:23.171"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:23.172" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:23.172" status="PASS" starttime="20170809 01:07:23.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:23.173" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:23.173" status="PASS" starttime="20170809 01:07:23.172"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.357" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:23.357" status="PASS" starttime="20170809 01:07:23.173"></status>
</kw>
<msg timestamp="20170809 01:07:23.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:23.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.357" status="PASS" starttime="20170809 01:07:23.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.358" status="PASS" starttime="20170809 01:07:23.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.359" status="PASS" starttime="20170809 01:07:23.358"></status>
</kw>
<status endtime="20170809 01:07:23.359" status="PASS" starttime="20170809 01:07:23.169"></status>
</kw>
<status endtime="20170809 01:07:23.359" status="PASS" starttime="20170809 01:07:23.169"></status>
</kw>
<status endtime="20170809 01:07:23.359" status="PASS" starttime="20170809 01:07:23.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:23.360" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:07:23.360" status="PASS" starttime="20170809 01:07:23.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:23.362" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:23.362" status="PASS" starttime="20170809 01:07:23.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:23.363" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:23.363" status="PASS" starttime="20170809 01:07:23.362"></status>
</kw>
<status endtime="20170809 01:07:23.363" status="PASS" starttime="20170809 01:07:23.362"></status>
</kw>
<status endtime="20170809 01:07:23.363" status="PASS" starttime="20170809 01:07:23.360"></status>
</kw>
<status endtime="20170809 01:07:23.363" status="PASS" starttime="20170809 01:07:23.360"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:23.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:23.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.463" status="PASS" starttime="20170809 01:07:23.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:23.465" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:23.465" status="PASS" starttime="20170809 01:07:23.464"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:23.466" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:23.466" status="PASS" starttime="20170809 01:07:23.466"></status>
</kw>
<status endtime="20170809 01:07:23.466" status="PASS" starttime="20170809 01:07:23.465"></status>
</kw>
<status endtime="20170809 01:07:23.466" status="PASS" starttime="20170809 01:07:23.464"></status>
</kw>
<status endtime="20170809 01:07:23.466" status="PASS" starttime="20170809 01:07:23.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:23.467" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:23.467" status="PASS" starttime="20170809 01:07:23.466"></status>
</kw>
<msg timestamp="20170809 01:07:23.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.467" status="PASS" starttime="20170809 01:07:23.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.468" status="PASS" starttime="20170809 01:07:23.467"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:23.468" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:23.468" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:23.468" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:23.468" status="PASS" starttime="20170809 01:07:23.468"></status>
</kw>
<msg timestamp="20170809 01:07:23.469" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:07:23.469" status="PASS" starttime="20170809 01:07:23.167"></status>
</kw>
<msg timestamp="20170809 01:07:23.469" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:07:23.469" status="PASS" starttime="20170809 01:07:23.167"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:07:23.470" status="PASS" starttime="20170809 01:07:23.469"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:23.474" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:23.474" status="PASS" starttime="20170809 01:07:23.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:23.475" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:23.475" status="PASS" starttime="20170809 01:07:23.474"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:23.475" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:23.475" status="PASS" starttime="20170809 01:07:23.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:23.476" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:23.476" status="PASS" starttime="20170809 01:07:23.476"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:23.669" status="PASS" starttime="20170809 01:07:23.477"></status>
</kw>
<msg timestamp="20170809 01:07:23.669" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:23.669" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.669" status="PASS" starttime="20170809 01:07:23.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.670" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.670" status="PASS" starttime="20170809 01:07:23.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.670" status="PASS" starttime="20170809 01:07:23.670"></status>
</kw>
<status endtime="20170809 01:07:23.671" status="PASS" starttime="20170809 01:07:23.473"></status>
</kw>
<status endtime="20170809 01:07:23.671" status="PASS" starttime="20170809 01:07:23.472"></status>
</kw>
<status endtime="20170809 01:07:23.671" status="PASS" starttime="20170809 01:07:23.472"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:23.671" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:07:23.671" status="PASS" starttime="20170809 01:07:23.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:23.674" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:23.674" status="PASS" starttime="20170809 01:07:23.673"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:23.675" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:23.675" status="PASS" starttime="20170809 01:07:23.675"></status>
</kw>
<status endtime="20170809 01:07:23.675" status="PASS" starttime="20170809 01:07:23.674"></status>
</kw>
<status endtime="20170809 01:07:23.675" status="PASS" starttime="20170809 01:07:23.672"></status>
</kw>
<status endtime="20170809 01:07:23.675" status="PASS" starttime="20170809 01:07:23.672"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:23.743" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:07:23.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.743" status="PASS" starttime="20170809 01:07:23.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:23.745" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:23.745" status="PASS" starttime="20170809 01:07:23.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:23.746" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:23.746" status="PASS" starttime="20170809 01:07:23.746"></status>
</kw>
<status endtime="20170809 01:07:23.746" status="PASS" starttime="20170809 01:07:23.745"></status>
</kw>
<status endtime="20170809 01:07:23.746" status="PASS" starttime="20170809 01:07:23.744"></status>
</kw>
<status endtime="20170809 01:07:23.747" status="PASS" starttime="20170809 01:07:23.744"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:23.747" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:23.747" status="PASS" starttime="20170809 01:07:23.747"></status>
</kw>
<msg timestamp="20170809 01:07:23.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:23.747" status="PASS" starttime="20170809 01:07:23.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:23.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:23.748" status="PASS" starttime="20170809 01:07:23.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:23.748" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:23.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:23.749" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:23.749" status="PASS" starttime="20170809 01:07:23.748"></status>
</kw>
<msg timestamp="20170809 01:07:23.749" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:23.749" status="PASS" starttime="20170809 01:07:23.471"></status>
</kw>
<msg timestamp="20170809 01:07:23.749" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:23.749" status="PASS" starttime="20170809 01:07:23.470"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:07:23.750" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:07:23.750" status="FAIL" starttime="20170809 01:07:23.749"></status>
</kw>
<status endtime="20170809 01:07:23.750" status="FAIL" starttime="20170809 01:07:23.470"></status>
</kw>
<status endtime="20170809 01:07:23.750" status="FAIL" starttime="20170809 01:07:22.882"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:33.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:33.756" status="PASS" starttime="20170809 01:07:33.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:33.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:33.756" status="PASS" starttime="20170809 01:07:33.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:33.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:33.757" status="PASS" starttime="20170809 01:07:33.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:33.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:33.758" status="PASS" starttime="20170809 01:07:33.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:33.960" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:33.960" status="PASS" starttime="20170809 01:07:33.758"></status>
</kw>
<msg timestamp="20170809 01:07:33.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:33.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:33.961" status="PASS" starttime="20170809 01:07:33.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:33.961" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:33.961" status="PASS" starttime="20170809 01:07:33.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:33.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:33.962" status="PASS" starttime="20170809 01:07:33.961"></status>
</kw>
<status endtime="20170809 01:07:33.962" status="PASS" starttime="20170809 01:07:33.754"></status>
</kw>
<status endtime="20170809 01:07:33.962" status="PASS" starttime="20170809 01:07:33.754"></status>
</kw>
<status endtime="20170809 01:07:33.962" status="PASS" starttime="20170809 01:07:33.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:33.963" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:07:33.963" status="PASS" starttime="20170809 01:07:33.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:33.965" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:33.965" status="PASS" starttime="20170809 01:07:33.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:33.966" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:33.966" status="PASS" starttime="20170809 01:07:33.966"></status>
</kw>
<status endtime="20170809 01:07:33.966" status="PASS" starttime="20170809 01:07:33.965"></status>
</kw>
<status endtime="20170809 01:07:33.966" status="PASS" starttime="20170809 01:07:33.964"></status>
</kw>
<status endtime="20170809 01:07:33.966" status="PASS" starttime="20170809 01:07:33.963"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:34.038" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:34.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.038" status="PASS" starttime="20170809 01:07:33.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:34.040" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:34.040" status="PASS" starttime="20170809 01:07:34.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:34.041" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:34.041" status="PASS" starttime="20170809 01:07:34.041"></status>
</kw>
<status endtime="20170809 01:07:34.041" status="PASS" starttime="20170809 01:07:34.040"></status>
</kw>
<status endtime="20170809 01:07:34.041" status="PASS" starttime="20170809 01:07:34.039"></status>
</kw>
<status endtime="20170809 01:07:34.041" status="PASS" starttime="20170809 01:07:34.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:34.042" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:34.042" status="PASS" starttime="20170809 01:07:34.042"></status>
</kw>
<msg timestamp="20170809 01:07:34.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.042" status="PASS" starttime="20170809 01:07:33.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:34.043" status="PASS" starttime="20170809 01:07:34.043"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:34.044" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:34.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:34.044" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:34.044" status="PASS" starttime="20170809 01:07:34.043"></status>
</kw>
<msg timestamp="20170809 01:07:34.044" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:07:34.044" status="PASS" starttime="20170809 01:07:33.752"></status>
</kw>
<msg timestamp="20170809 01:07:34.044" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:07:34.044" status="PASS" starttime="20170809 01:07:33.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:07:34.045" status="PASS" starttime="20170809 01:07:34.045"></status>
</kw>
<status endtime="20170809 01:07:34.045" status="PASS" starttime="20170809 01:07:33.751"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:34.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:34.049" status="PASS" starttime="20170809 01:07:34.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:34.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:34.050" status="PASS" starttime="20170809 01:07:34.050"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:34.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:34.050" status="PASS" starttime="20170809 01:07:34.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:34.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:34.051" status="PASS" starttime="20170809 01:07:34.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.238" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:34.238" status="PASS" starttime="20170809 01:07:34.052"></status>
</kw>
<msg timestamp="20170809 01:07:34.238" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:34.238" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.238" status="PASS" starttime="20170809 01:07:34.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.239" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:34.239" status="PASS" starttime="20170809 01:07:34.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:34.240" status="PASS" starttime="20170809 01:07:34.239"></status>
</kw>
<status endtime="20170809 01:07:34.240" status="PASS" starttime="20170809 01:07:34.048"></status>
</kw>
<status endtime="20170809 01:07:34.240" status="PASS" starttime="20170809 01:07:34.047"></status>
</kw>
<status endtime="20170809 01:07:34.240" status="PASS" starttime="20170809 01:07:34.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:34.241" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:07:34.241" status="PASS" starttime="20170809 01:07:34.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:34.243" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:34.243" status="PASS" starttime="20170809 01:07:34.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:34.244" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:34.244" status="PASS" starttime="20170809 01:07:34.243"></status>
</kw>
<status endtime="20170809 01:07:34.244" status="PASS" starttime="20170809 01:07:34.243"></status>
</kw>
<status endtime="20170809 01:07:34.244" status="PASS" starttime="20170809 01:07:34.241"></status>
</kw>
<status endtime="20170809 01:07:34.244" status="PASS" starttime="20170809 01:07:34.241"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:34.333" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:34.333" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.333" status="PASS" starttime="20170809 01:07:34.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:34.335" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:34.335" status="PASS" starttime="20170809 01:07:34.335"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:34.336" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:34.336" status="PASS" starttime="20170809 01:07:34.336"></status>
</kw>
<status endtime="20170809 01:07:34.336" status="PASS" starttime="20170809 01:07:34.335"></status>
</kw>
<status endtime="20170809 01:07:34.337" status="PASS" starttime="20170809 01:07:34.334"></status>
</kw>
<status endtime="20170809 01:07:34.337" status="PASS" starttime="20170809 01:07:34.334"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:34.337" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:34.337" status="PASS" starttime="20170809 01:07:34.337"></status>
</kw>
<msg timestamp="20170809 01:07:34.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.337" status="PASS" starttime="20170809 01:07:34.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:34.338" status="PASS" starttime="20170809 01:07:34.338"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:34.338" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:34.339" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:34.339" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:34.339" status="PASS" starttime="20170809 01:07:34.338"></status>
</kw>
<msg timestamp="20170809 01:07:34.339" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:07:34.339" status="PASS" starttime="20170809 01:07:34.046"></status>
</kw>
<msg timestamp="20170809 01:07:34.339" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:07:34.339" status="PASS" starttime="20170809 01:07:34.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:07:34.340" status="PASS" starttime="20170809 01:07:34.340"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:34.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:34.344" status="PASS" starttime="20170809 01:07:34.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:34.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:34.345" status="PASS" starttime="20170809 01:07:34.345"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:34.346" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:34.346" status="PASS" starttime="20170809 01:07:34.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:34.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:34.346" status="PASS" starttime="20170809 01:07:34.346"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:34.532" status="PASS" starttime="20170809 01:07:34.347"></status>
</kw>
<msg timestamp="20170809 01:07:34.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:34.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.532" status="PASS" starttime="20170809 01:07:34.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:34.533" status="PASS" starttime="20170809 01:07:34.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:34.534" status="PASS" starttime="20170809 01:07:34.533"></status>
</kw>
<status endtime="20170809 01:07:34.534" status="PASS" starttime="20170809 01:07:34.343"></status>
</kw>
<status endtime="20170809 01:07:34.534" status="PASS" starttime="20170809 01:07:34.343"></status>
</kw>
<status endtime="20170809 01:07:34.534" status="PASS" starttime="20170809 01:07:34.342"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:34.535" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:07:34.535" status="PASS" starttime="20170809 01:07:34.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:34.540" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:34.540" status="PASS" starttime="20170809 01:07:34.539"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:34.541" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:34.541" status="PASS" starttime="20170809 01:07:34.541"></status>
</kw>
<status endtime="20170809 01:07:34.541" status="PASS" starttime="20170809 01:07:34.540"></status>
</kw>
<status endtime="20170809 01:07:34.541" status="PASS" starttime="20170809 01:07:34.535"></status>
</kw>
<status endtime="20170809 01:07:34.541" status="PASS" starttime="20170809 01:07:34.535"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:34.629" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:07:34.629" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.629" status="PASS" starttime="20170809 01:07:34.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:34.631" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:34.631" status="PASS" starttime="20170809 01:07:34.631"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:34.632" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:34.632" status="PASS" starttime="20170809 01:07:34.632"></status>
</kw>
<status endtime="20170809 01:07:34.632" status="PASS" starttime="20170809 01:07:34.631"></status>
</kw>
<status endtime="20170809 01:07:34.632" status="PASS" starttime="20170809 01:07:34.630"></status>
</kw>
<status endtime="20170809 01:07:34.632" status="PASS" starttime="20170809 01:07:34.629"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:34.633" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:34.633" status="PASS" starttime="20170809 01:07:34.633"></status>
</kw>
<msg timestamp="20170809 01:07:34.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:34.633" status="PASS" starttime="20170809 01:07:34.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:34.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:34.634" status="PASS" starttime="20170809 01:07:34.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:34.634" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:34.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:34.635" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:34.635" status="PASS" starttime="20170809 01:07:34.634"></status>
</kw>
<msg timestamp="20170809 01:07:34.635" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:34.635" status="PASS" starttime="20170809 01:07:34.341"></status>
</kw>
<msg timestamp="20170809 01:07:34.635" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:34.635" status="PASS" starttime="20170809 01:07:34.341"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:07:34.636" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:07:34.636" status="FAIL" starttime="20170809 01:07:34.635"></status>
</kw>
<status endtime="20170809 01:07:34.636" status="FAIL" starttime="20170809 01:07:34.340"></status>
</kw>
<status endtime="20170809 01:07:34.636" status="FAIL" starttime="20170809 01:07:33.751"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:44.641" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:44.642" status="PASS" starttime="20170809 01:07:44.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:44.642" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:44.642" status="PASS" starttime="20170809 01:07:44.642"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:44.643" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:44.643" status="PASS" starttime="20170809 01:07:44.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:44.644" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:44.644" status="PASS" starttime="20170809 01:07:44.643"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:44.836" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:44.836" status="PASS" starttime="20170809 01:07:44.645"></status>
</kw>
<msg timestamp="20170809 01:07:44.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:44.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:44.836" status="PASS" starttime="20170809 01:07:44.644"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:44.837" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:44.837" status="PASS" starttime="20170809 01:07:44.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:44.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:44.838" status="PASS" starttime="20170809 01:07:44.837"></status>
</kw>
<status endtime="20170809 01:07:44.838" status="PASS" starttime="20170809 01:07:44.640"></status>
</kw>
<status endtime="20170809 01:07:44.838" status="PASS" starttime="20170809 01:07:44.640"></status>
</kw>
<status endtime="20170809 01:07:44.838" status="PASS" starttime="20170809 01:07:44.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:44.839" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:07:44.839" status="PASS" starttime="20170809 01:07:44.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:44.841" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:44.841" status="PASS" starttime="20170809 01:07:44.840"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:44.842" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:44.842" status="PASS" starttime="20170809 01:07:44.841"></status>
</kw>
<status endtime="20170809 01:07:44.842" status="PASS" starttime="20170809 01:07:44.841"></status>
</kw>
<status endtime="20170809 01:07:44.842" status="PASS" starttime="20170809 01:07:44.839"></status>
</kw>
<status endtime="20170809 01:07:44.842" status="PASS" starttime="20170809 01:07:44.839"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:44.920" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:44.920" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:44.920" status="PASS" starttime="20170809 01:07:44.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:44.922" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:44.922" status="PASS" starttime="20170809 01:07:44.921"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:44.923" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:44.923" status="PASS" starttime="20170809 01:07:44.923"></status>
</kw>
<status endtime="20170809 01:07:44.923" status="PASS" starttime="20170809 01:07:44.922"></status>
</kw>
<status endtime="20170809 01:07:44.923" status="PASS" starttime="20170809 01:07:44.921"></status>
</kw>
<status endtime="20170809 01:07:44.923" status="PASS" starttime="20170809 01:07:44.921"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:44.924" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:44.924" status="PASS" starttime="20170809 01:07:44.923"></status>
</kw>
<msg timestamp="20170809 01:07:44.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:44.924" status="PASS" starttime="20170809 01:07:44.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:44.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:44.925" status="PASS" starttime="20170809 01:07:44.924"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:44.925" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:44.925" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:44.925" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:44.925" status="PASS" starttime="20170809 01:07:44.925"></status>
</kw>
<msg timestamp="20170809 01:07:44.926" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:07:44.926" status="PASS" starttime="20170809 01:07:44.638"></status>
</kw>
<msg timestamp="20170809 01:07:44.926" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:07:44.926" status="PASS" starttime="20170809 01:07:44.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:07:44.927" status="PASS" starttime="20170809 01:07:44.926"></status>
</kw>
<status endtime="20170809 01:07:44.927" status="PASS" starttime="20170809 01:07:44.637"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:44.931" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:44.931" status="PASS" starttime="20170809 01:07:44.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:44.932" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:44.932" status="PASS" starttime="20170809 01:07:44.931"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:44.932" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:44.932" status="PASS" starttime="20170809 01:07:44.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:44.933" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:44.933" status="PASS" starttime="20170809 01:07:44.932"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.121" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:45.121" status="PASS" starttime="20170809 01:07:44.934"></status>
</kw>
<msg timestamp="20170809 01:07:45.121" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:45.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:45.121" status="PASS" starttime="20170809 01:07:44.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.122" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:45.122" status="PASS" starttime="20170809 01:07:45.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:45.123" status="PASS" starttime="20170809 01:07:45.122"></status>
</kw>
<status endtime="20170809 01:07:45.123" status="PASS" starttime="20170809 01:07:44.930"></status>
</kw>
<status endtime="20170809 01:07:45.123" status="PASS" starttime="20170809 01:07:44.929"></status>
</kw>
<status endtime="20170809 01:07:45.123" status="PASS" starttime="20170809 01:07:44.928"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:45.124" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:07:45.124" status="PASS" starttime="20170809 01:07:45.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:45.126" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:45.126" status="PASS" starttime="20170809 01:07:45.125"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:45.127" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:45.127" status="PASS" starttime="20170809 01:07:45.126"></status>
</kw>
<status endtime="20170809 01:07:45.127" status="PASS" starttime="20170809 01:07:45.126"></status>
</kw>
<status endtime="20170809 01:07:45.127" status="PASS" starttime="20170809 01:07:45.124"></status>
</kw>
<status endtime="20170809 01:07:45.127" status="PASS" starttime="20170809 01:07:45.124"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:45.217" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:45.217" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:45.217" status="PASS" starttime="20170809 01:07:45.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:45.219" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:45.219" status="PASS" starttime="20170809 01:07:45.218"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:45.220" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:45.220" status="PASS" starttime="20170809 01:07:45.220"></status>
</kw>
<status endtime="20170809 01:07:45.220" status="PASS" starttime="20170809 01:07:45.219"></status>
</kw>
<status endtime="20170809 01:07:45.220" status="PASS" starttime="20170809 01:07:45.218"></status>
</kw>
<status endtime="20170809 01:07:45.220" status="PASS" starttime="20170809 01:07:45.217"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:45.221" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:45.221" status="PASS" starttime="20170809 01:07:45.221"></status>
</kw>
<msg timestamp="20170809 01:07:45.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:45.221" status="PASS" starttime="20170809 01:07:44.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:45.222" status="PASS" starttime="20170809 01:07:45.221"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:45.222" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:45.222" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:45.222" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:45.223" status="PASS" starttime="20170809 01:07:45.222"></status>
</kw>
<msg timestamp="20170809 01:07:45.223" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:07:45.223" status="PASS" starttime="20170809 01:07:44.927"></status>
</kw>
<msg timestamp="20170809 01:07:45.223" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:07:45.223" status="PASS" starttime="20170809 01:07:44.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:07:45.224" status="PASS" starttime="20170809 01:07:45.223"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:45.228" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:45.228" status="PASS" starttime="20170809 01:07:45.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:45.228" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:45.228" status="PASS" starttime="20170809 01:07:45.228"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:45.229" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:45.229" status="PASS" starttime="20170809 01:07:45.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:45.230" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:45.230" status="PASS" starttime="20170809 01:07:45.229"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:45.436" status="PASS" starttime="20170809 01:07:45.230"></status>
</kw>
<msg timestamp="20170809 01:07:45.436" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:45.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:45.436" status="PASS" starttime="20170809 01:07:45.230"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:45.437" status="PASS" starttime="20170809 01:07:45.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:45.438" status="PASS" starttime="20170809 01:07:45.437"></status>
</kw>
<status endtime="20170809 01:07:45.438" status="PASS" starttime="20170809 01:07:45.227"></status>
</kw>
<status endtime="20170809 01:07:45.438" status="PASS" starttime="20170809 01:07:45.226"></status>
</kw>
<status endtime="20170809 01:07:45.438" status="PASS" starttime="20170809 01:07:45.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:45.439" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:07:45.439" status="PASS" starttime="20170809 01:07:45.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:45.441" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:45.441" status="PASS" starttime="20170809 01:07:45.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:45.442" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:45.442" status="PASS" starttime="20170809 01:07:45.442"></status>
</kw>
<status endtime="20170809 01:07:45.442" status="PASS" starttime="20170809 01:07:45.441"></status>
</kw>
<status endtime="20170809 01:07:45.442" status="PASS" starttime="20170809 01:07:45.440"></status>
</kw>
<status endtime="20170809 01:07:45.442" status="PASS" starttime="20170809 01:07:45.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:45.534" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:07:45.534" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:45.534" status="PASS" starttime="20170809 01:07:45.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:45.536" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:45.536" status="PASS" starttime="20170809 01:07:45.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:45.537" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:45.537" status="PASS" starttime="20170809 01:07:45.537"></status>
</kw>
<status endtime="20170809 01:07:45.537" status="PASS" starttime="20170809 01:07:45.536"></status>
</kw>
<status endtime="20170809 01:07:45.538" status="PASS" starttime="20170809 01:07:45.535"></status>
</kw>
<status endtime="20170809 01:07:45.538" status="PASS" starttime="20170809 01:07:45.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:45.538" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:45.538" status="PASS" starttime="20170809 01:07:45.538"></status>
</kw>
<msg timestamp="20170809 01:07:45.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:45.538" status="PASS" starttime="20170809 01:07:45.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:45.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:45.539" status="PASS" starttime="20170809 01:07:45.539"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:45.539" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:45.540" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:45.540" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:45.540" status="PASS" starttime="20170809 01:07:45.539"></status>
</kw>
<msg timestamp="20170809 01:07:45.540" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:45.540" status="PASS" starttime="20170809 01:07:45.224"></status>
</kw>
<msg timestamp="20170809 01:07:45.540" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:45.540" status="PASS" starttime="20170809 01:07:45.224"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:07:45.541" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:07:45.541" status="FAIL" starttime="20170809 01:07:45.541"></status>
</kw>
<status endtime="20170809 01:07:45.541" status="FAIL" starttime="20170809 01:07:45.224"></status>
</kw>
<status endtime="20170809 01:07:45.541" status="FAIL" starttime="20170809 01:07:44.637"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:55.547" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:55.547" status="PASS" starttime="20170809 01:07:55.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:55.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:55.548" status="PASS" starttime="20170809 01:07:55.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:55.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:55.548" status="PASS" starttime="20170809 01:07:55.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:55.549" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:55.549" status="PASS" starttime="20170809 01:07:55.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:55.734" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:55.734" status="PASS" starttime="20170809 01:07:55.550"></status>
</kw>
<msg timestamp="20170809 01:07:55.734" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:55.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:55.734" status="PASS" starttime="20170809 01:07:55.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:55.735" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:55.735" status="PASS" starttime="20170809 01:07:55.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:55.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:55.736" status="PASS" starttime="20170809 01:07:55.735"></status>
</kw>
<status endtime="20170809 01:07:55.736" status="PASS" starttime="20170809 01:07:55.545"></status>
</kw>
<status endtime="20170809 01:07:55.736" status="PASS" starttime="20170809 01:07:55.545"></status>
</kw>
<status endtime="20170809 01:07:55.736" status="PASS" starttime="20170809 01:07:55.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:55.737" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:07:55.737" status="PASS" starttime="20170809 01:07:55.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:55.739" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:55.739" status="PASS" starttime="20170809 01:07:55.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:55.740" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:55.740" status="PASS" starttime="20170809 01:07:55.739"></status>
</kw>
<status endtime="20170809 01:07:55.740" status="PASS" starttime="20170809 01:07:55.739"></status>
</kw>
<status endtime="20170809 01:07:55.740" status="PASS" starttime="20170809 01:07:55.737"></status>
</kw>
<status endtime="20170809 01:07:55.740" status="PASS" starttime="20170809 01:07:55.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:55.842" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:55.842" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:55.842" status="PASS" starttime="20170809 01:07:55.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:55.844" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:55.844" status="PASS" starttime="20170809 01:07:55.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:55.845" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:55.845" status="PASS" starttime="20170809 01:07:55.844"></status>
</kw>
<status endtime="20170809 01:07:55.845" status="PASS" starttime="20170809 01:07:55.844"></status>
</kw>
<status endtime="20170809 01:07:55.845" status="PASS" starttime="20170809 01:07:55.843"></status>
</kw>
<status endtime="20170809 01:07:55.845" status="PASS" starttime="20170809 01:07:55.842"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:55.846" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:55.846" status="PASS" starttime="20170809 01:07:55.846"></status>
</kw>
<msg timestamp="20170809 01:07:55.846" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:55.846" status="PASS" starttime="20170809 01:07:55.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:55.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:55.847" status="PASS" starttime="20170809 01:07:55.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:55.847" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:55.847" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:55.848" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:55.848" status="PASS" starttime="20170809 01:07:55.847"></status>
</kw>
<msg timestamp="20170809 01:07:55.848" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:07:55.848" status="PASS" starttime="20170809 01:07:55.543"></status>
</kw>
<msg timestamp="20170809 01:07:55.848" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:07:55.848" status="PASS" starttime="20170809 01:07:55.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:07:55.849" status="PASS" starttime="20170809 01:07:55.848"></status>
</kw>
<status endtime="20170809 01:07:55.849" status="PASS" starttime="20170809 01:07:55.542"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:55.852" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:55.853" status="PASS" starttime="20170809 01:07:55.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:55.853" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:55.853" status="PASS" starttime="20170809 01:07:55.853"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:55.854" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:55.854" status="PASS" starttime="20170809 01:07:55.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:55.855" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:55.855" status="PASS" starttime="20170809 01:07:55.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.048" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:56.048" status="PASS" starttime="20170809 01:07:55.856"></status>
</kw>
<msg timestamp="20170809 01:07:56.048" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:56.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:56.048" status="PASS" starttime="20170809 01:07:55.855"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.049" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:56.049" status="PASS" starttime="20170809 01:07:56.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:56.050" status="PASS" starttime="20170809 01:07:56.049"></status>
</kw>
<status endtime="20170809 01:07:56.050" status="PASS" starttime="20170809 01:07:55.851"></status>
</kw>
<status endtime="20170809 01:07:56.050" status="PASS" starttime="20170809 01:07:55.851"></status>
</kw>
<status endtime="20170809 01:07:56.050" status="PASS" starttime="20170809 01:07:55.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:56.051" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:07:56.051" status="PASS" starttime="20170809 01:07:56.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:56.053" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:56.053" status="PASS" starttime="20170809 01:07:56.052"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:56.054" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:07:56.055" status="PASS" starttime="20170809 01:07:56.054"></status>
</kw>
<status endtime="20170809 01:07:56.055" status="PASS" starttime="20170809 01:07:56.054"></status>
</kw>
<status endtime="20170809 01:07:56.055" status="PASS" starttime="20170809 01:07:56.051"></status>
</kw>
<status endtime="20170809 01:07:56.055" status="PASS" starttime="20170809 01:07:56.051"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:56.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:07:56.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:56.145" status="PASS" starttime="20170809 01:07:56.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:56.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:56.147" status="PASS" starttime="20170809 01:07:56.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:56.147" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:56.147" status="PASS" starttime="20170809 01:07:56.147"></status>
</kw>
<status endtime="20170809 01:07:56.148" status="PASS" starttime="20170809 01:07:56.147"></status>
</kw>
<status endtime="20170809 01:07:56.148" status="PASS" starttime="20170809 01:07:56.145"></status>
</kw>
<status endtime="20170809 01:07:56.148" status="PASS" starttime="20170809 01:07:56.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:56.148" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:56.148" status="PASS" starttime="20170809 01:07:56.148"></status>
</kw>
<msg timestamp="20170809 01:07:56.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:56.149" status="PASS" starttime="20170809 01:07:55.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:56.149" status="PASS" starttime="20170809 01:07:56.149"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:56.150" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:56.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:56.150" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:56.150" status="PASS" starttime="20170809 01:07:56.149"></status>
</kw>
<msg timestamp="20170809 01:07:56.150" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:07:56.150" status="PASS" starttime="20170809 01:07:55.849"></status>
</kw>
<msg timestamp="20170809 01:07:56.151" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:07:56.151" status="PASS" starttime="20170809 01:07:55.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:07:56.151" status="PASS" starttime="20170809 01:07:56.151"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:07:56.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:07:56.155" status="PASS" starttime="20170809 01:07:56.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:07:56.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:07:56.156" status="PASS" starttime="20170809 01:07:56.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:07:56.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:07:56.157" status="PASS" starttime="20170809 01:07:56.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:07:56.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:07:56.157" status="PASS" starttime="20170809 01:07:56.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.371" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:07:56.371" status="PASS" starttime="20170809 01:07:56.158"></status>
</kw>
<msg timestamp="20170809 01:07:56.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:07:56.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:56.371" status="PASS" starttime="20170809 01:07:56.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:56.372" status="PASS" starttime="20170809 01:07:56.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:56.373" status="PASS" starttime="20170809 01:07:56.372"></status>
</kw>
<status endtime="20170809 01:07:56.373" status="PASS" starttime="20170809 01:07:56.154"></status>
</kw>
<status endtime="20170809 01:07:56.373" status="PASS" starttime="20170809 01:07:56.154"></status>
</kw>
<status endtime="20170809 01:07:56.373" status="PASS" starttime="20170809 01:07:56.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:07:56.374" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:07:56.374" status="PASS" starttime="20170809 01:07:56.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:56.376" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:56.376" status="PASS" starttime="20170809 01:07:56.375"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:56.377" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:07:56.377" status="PASS" starttime="20170809 01:07:56.377"></status>
</kw>
<status endtime="20170809 01:07:56.377" status="PASS" starttime="20170809 01:07:56.376"></status>
</kw>
<status endtime="20170809 01:07:56.377" status="PASS" starttime="20170809 01:07:56.375"></status>
</kw>
<status endtime="20170809 01:07:56.377" status="PASS" starttime="20170809 01:07:56.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:07:56.444" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:07:56.444" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:56.444" status="PASS" starttime="20170809 01:07:56.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:07:56.446" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:56.446" status="PASS" starttime="20170809 01:07:56.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:07:56.447" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:07:56.447" status="PASS" starttime="20170809 01:07:56.447"></status>
</kw>
<status endtime="20170809 01:07:56.447" status="PASS" starttime="20170809 01:07:56.446"></status>
</kw>
<status endtime="20170809 01:07:56.447" status="PASS" starttime="20170809 01:07:56.445"></status>
</kw>
<status endtime="20170809 01:07:56.447" status="PASS" starttime="20170809 01:07:56.445"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:07:56.448" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:07:56.448" status="PASS" starttime="20170809 01:07:56.448"></status>
</kw>
<msg timestamp="20170809 01:07:56.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:07:56.448" status="PASS" starttime="20170809 01:07:56.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:07:56.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:07:56.449" status="PASS" starttime="20170809 01:07:56.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:07:56.449" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:07:56.449" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:07:56.449" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:07:56.450" status="PASS" starttime="20170809 01:07:56.449"></status>
</kw>
<msg timestamp="20170809 01:07:56.450" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:56.450" status="PASS" starttime="20170809 01:07:56.152"></status>
</kw>
<msg timestamp="20170809 01:07:56.450" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:07:56.450" status="PASS" starttime="20170809 01:07:56.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:07:56.451" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:07:56.451" status="FAIL" starttime="20170809 01:07:56.450"></status>
</kw>
<status endtime="20170809 01:07:56.451" status="FAIL" starttime="20170809 01:07:56.151"></status>
</kw>
<status endtime="20170809 01:07:56.451" status="FAIL" starttime="20170809 01:07:55.542"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:06.457" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:06.457" status="PASS" starttime="20170809 01:08:06.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:06.458" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:06.458" status="PASS" starttime="20170809 01:08:06.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:06.458" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:06.459" status="PASS" starttime="20170809 01:08:06.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:06.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:06.459" status="PASS" starttime="20170809 01:08:06.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:06.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:06.637" status="PASS" starttime="20170809 01:08:06.460"></status>
</kw>
<msg timestamp="20170809 01:08:06.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:06.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:06.637" status="PASS" starttime="20170809 01:08:06.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:06.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:06.638" status="PASS" starttime="20170809 01:08:06.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:06.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:06.639" status="PASS" starttime="20170809 01:08:06.638"></status>
</kw>
<status endtime="20170809 01:08:06.639" status="PASS" starttime="20170809 01:08:06.456"></status>
</kw>
<status endtime="20170809 01:08:06.639" status="PASS" starttime="20170809 01:08:06.455"></status>
</kw>
<status endtime="20170809 01:08:06.639" status="PASS" starttime="20170809 01:08:06.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:06.640" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:08:06.640" status="PASS" starttime="20170809 01:08:06.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:06.642" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:06.642" status="PASS" starttime="20170809 01:08:06.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:06.644" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:06.644" status="PASS" starttime="20170809 01:08:06.643"></status>
</kw>
<status endtime="20170809 01:08:06.644" status="PASS" starttime="20170809 01:08:06.642"></status>
</kw>
<status endtime="20170809 01:08:06.644" status="PASS" starttime="20170809 01:08:06.641"></status>
</kw>
<status endtime="20170809 01:08:06.644" status="PASS" starttime="20170809 01:08:06.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:07.607" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:07.607" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:07.607" status="PASS" starttime="20170809 01:08:06.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:07.610" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:07.610" status="PASS" starttime="20170809 01:08:07.609"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:07.611" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:07.611" status="PASS" starttime="20170809 01:08:07.611"></status>
</kw>
<status endtime="20170809 01:08:07.611" status="PASS" starttime="20170809 01:08:07.610"></status>
</kw>
<status endtime="20170809 01:08:07.611" status="PASS" starttime="20170809 01:08:07.608"></status>
</kw>
<status endtime="20170809 01:08:07.611" status="PASS" starttime="20170809 01:08:07.608"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:07.612" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:07.612" status="PASS" starttime="20170809 01:08:07.612"></status>
</kw>
<msg timestamp="20170809 01:08:07.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:07.612" status="PASS" starttime="20170809 01:08:06.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:07.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:07.613" status="PASS" starttime="20170809 01:08:07.612"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:07.613" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:07.613" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:07.613" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:07.613" status="PASS" starttime="20170809 01:08:07.613"></status>
</kw>
<msg timestamp="20170809 01:08:07.614" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:08:07.614" status="PASS" starttime="20170809 01:08:06.453"></status>
</kw>
<msg timestamp="20170809 01:08:07.614" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:08:07.614" status="PASS" starttime="20170809 01:08:06.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:08:07.615" status="PASS" starttime="20170809 01:08:07.614"></status>
</kw>
<status endtime="20170809 01:08:07.615" status="PASS" starttime="20170809 01:08:06.452"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:07.618" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:07.619" status="PASS" starttime="20170809 01:08:07.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:07.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:07.619" status="PASS" starttime="20170809 01:08:07.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:07.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:07.620" status="PASS" starttime="20170809 01:08:07.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:07.620" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:07.620" status="PASS" starttime="20170809 01:08:07.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:07.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:07.808" status="PASS" starttime="20170809 01:08:07.621"></status>
</kw>
<msg timestamp="20170809 01:08:07.808" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:07.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:07.808" status="PASS" starttime="20170809 01:08:07.621"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:07.809" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:07.809" status="PASS" starttime="20170809 01:08:07.809"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:07.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:07.810" status="PASS" starttime="20170809 01:08:07.809"></status>
</kw>
<status endtime="20170809 01:08:07.810" status="PASS" starttime="20170809 01:08:07.617"></status>
</kw>
<status endtime="20170809 01:08:07.810" status="PASS" starttime="20170809 01:08:07.617"></status>
</kw>
<status endtime="20170809 01:08:07.810" status="PASS" starttime="20170809 01:08:07.616"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:07.811" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:08:07.811" status="PASS" starttime="20170809 01:08:07.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:07.813" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:07.813" status="PASS" starttime="20170809 01:08:07.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:07.814" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:07.814" status="PASS" starttime="20170809 01:08:07.814"></status>
</kw>
<status endtime="20170809 01:08:07.814" status="PASS" starttime="20170809 01:08:07.813"></status>
</kw>
<status endtime="20170809 01:08:07.815" status="PASS" starttime="20170809 01:08:07.812"></status>
</kw>
<status endtime="20170809 01:08:07.815" status="PASS" starttime="20170809 01:08:07.811"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:08.345" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:08.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:08.345" status="PASS" starttime="20170809 01:08:07.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:08.347" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:08.347" status="PASS" starttime="20170809 01:08:08.347"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:08.348" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:08.348" status="PASS" starttime="20170809 01:08:08.348"></status>
</kw>
<status endtime="20170809 01:08:08.349" status="PASS" starttime="20170809 01:08:08.348"></status>
</kw>
<status endtime="20170809 01:08:08.349" status="PASS" starttime="20170809 01:08:08.346"></status>
</kw>
<status endtime="20170809 01:08:08.349" status="PASS" starttime="20170809 01:08:08.346"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:08.349" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:08.349" status="PASS" starttime="20170809 01:08:08.349"></status>
</kw>
<msg timestamp="20170809 01:08:08.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:08.349" status="PASS" starttime="20170809 01:08:07.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:08.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:08.350" status="PASS" starttime="20170809 01:08:08.350"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:08.351" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:08.351" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:08.351" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:08.351" status="PASS" starttime="20170809 01:08:08.350"></status>
</kw>
<msg timestamp="20170809 01:08:08.351" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:08:08.351" status="PASS" starttime="20170809 01:08:07.615"></status>
</kw>
<msg timestamp="20170809 01:08:08.351" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:08:08.351" status="PASS" starttime="20170809 01:08:07.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:08:08.352" status="PASS" starttime="20170809 01:08:08.352"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:08.356" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:08.357" status="PASS" starttime="20170809 01:08:08.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:08.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:08.357" status="PASS" starttime="20170809 01:08:08.357"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:08.358" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:08.358" status="PASS" starttime="20170809 01:08:08.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:08.361" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:08.361" status="PASS" starttime="20170809 01:08:08.358"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:08.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:08.828" status="PASS" starttime="20170809 01:08:08.362"></status>
</kw>
<msg timestamp="20170809 01:08:08.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:08.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:08.829" status="PASS" starttime="20170809 01:08:08.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:08.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:08.829" status="PASS" starttime="20170809 01:08:08.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:08.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:08.830" status="PASS" starttime="20170809 01:08:08.830"></status>
</kw>
<status endtime="20170809 01:08:08.830" status="PASS" starttime="20170809 01:08:08.355"></status>
</kw>
<status endtime="20170809 01:08:08.830" status="PASS" starttime="20170809 01:08:08.355"></status>
</kw>
<status endtime="20170809 01:08:08.830" status="PASS" starttime="20170809 01:08:08.354"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:08.831" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:08:08.831" status="PASS" starttime="20170809 01:08:08.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:08.833" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:08.833" status="PASS" starttime="20170809 01:08:08.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:08.834" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:08.834" status="PASS" starttime="20170809 01:08:08.834"></status>
</kw>
<status endtime="20170809 01:08:08.834" status="PASS" starttime="20170809 01:08:08.833"></status>
</kw>
<status endtime="20170809 01:08:08.834" status="PASS" starttime="20170809 01:08:08.832"></status>
</kw>
<status endtime="20170809 01:08:08.834" status="PASS" starttime="20170809 01:08:08.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:09.922" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:08:09.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:09.922" status="PASS" starttime="20170809 01:08:08.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:09.924" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:09.924" status="PASS" starttime="20170809 01:08:09.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:09.925" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:09.925" status="PASS" starttime="20170809 01:08:09.925"></status>
</kw>
<status endtime="20170809 01:08:09.925" status="PASS" starttime="20170809 01:08:09.924"></status>
</kw>
<status endtime="20170809 01:08:09.925" status="PASS" starttime="20170809 01:08:09.923"></status>
</kw>
<status endtime="20170809 01:08:09.925" status="PASS" starttime="20170809 01:08:09.922"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:09.926" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:09.926" status="PASS" starttime="20170809 01:08:09.926"></status>
</kw>
<msg timestamp="20170809 01:08:09.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:09.926" status="PASS" starttime="20170809 01:08:08.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:09.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:09.927" status="PASS" starttime="20170809 01:08:09.926"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:09.927" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:09.927" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:09.927" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:09.928" status="PASS" starttime="20170809 01:08:09.927"></status>
</kw>
<msg timestamp="20170809 01:08:09.928" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:08:09.928" status="PASS" starttime="20170809 01:08:08.353"></status>
</kw>
<msg timestamp="20170809 01:08:09.928" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:08:09.928" status="PASS" starttime="20170809 01:08:08.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:08:09.929" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:08:09.929" status="FAIL" starttime="20170809 01:08:09.928"></status>
</kw>
<status endtime="20170809 01:08:09.929" status="FAIL" starttime="20170809 01:08:08.352"></status>
</kw>
<status endtime="20170809 01:08:09.929" status="FAIL" starttime="20170809 01:08:06.451"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:19.934" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:19.935" status="PASS" starttime="20170809 01:08:19.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:19.935" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:19.935" status="PASS" starttime="20170809 01:08:19.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:19.936" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:19.936" status="PASS" starttime="20170809 01:08:19.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:19.937" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:19.937" status="PASS" starttime="20170809 01:08:19.936"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:20.494" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:20.494" status="PASS" starttime="20170809 01:08:19.938"></status>
</kw>
<msg timestamp="20170809 01:08:20.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:20.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:20.494" status="PASS" starttime="20170809 01:08:19.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:20.495" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:20.495" status="PASS" starttime="20170809 01:08:20.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:20.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:20.496" status="PASS" starttime="20170809 01:08:20.495"></status>
</kw>
<status endtime="20170809 01:08:20.496" status="PASS" starttime="20170809 01:08:19.934"></status>
</kw>
<status endtime="20170809 01:08:20.496" status="PASS" starttime="20170809 01:08:19.933"></status>
</kw>
<status endtime="20170809 01:08:20.496" status="PASS" starttime="20170809 01:08:19.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:20.497" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:08:20.497" status="PASS" starttime="20170809 01:08:20.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:20.499" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:20.499" status="PASS" starttime="20170809 01:08:20.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:20.500" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:20.500" status="PASS" starttime="20170809 01:08:20.500"></status>
</kw>
<status endtime="20170809 01:08:20.500" status="PASS" starttime="20170809 01:08:20.499"></status>
</kw>
<status endtime="20170809 01:08:20.500" status="PASS" starttime="20170809 01:08:20.498"></status>
</kw>
<status endtime="20170809 01:08:20.501" status="PASS" starttime="20170809 01:08:20.497"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:22.971" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:22.971" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:22.971" status="PASS" starttime="20170809 01:08:20.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:22.973" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:22.973" status="PASS" starttime="20170809 01:08:22.973"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:22.974" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:22.974" status="PASS" starttime="20170809 01:08:22.974"></status>
</kw>
<status endtime="20170809 01:08:22.975" status="PASS" starttime="20170809 01:08:22.974"></status>
</kw>
<status endtime="20170809 01:08:22.975" status="PASS" starttime="20170809 01:08:22.972"></status>
</kw>
<status endtime="20170809 01:08:22.975" status="PASS" starttime="20170809 01:08:22.971"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:22.975" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:22.975" status="PASS" starttime="20170809 01:08:22.975"></status>
</kw>
<msg timestamp="20170809 01:08:22.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:22.975" status="PASS" starttime="20170809 01:08:19.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:22.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:22.976" status="PASS" starttime="20170809 01:08:22.976"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:22.977" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:22.977" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:22.977" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:22.977" status="PASS" starttime="20170809 01:08:22.976"></status>
</kw>
<msg timestamp="20170809 01:08:22.977" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 01:08:22.977" status="PASS" starttime="20170809 01:08:19.931"></status>
</kw>
<msg timestamp="20170809 01:08:22.977" level="INFO">${power_state} = Off</msg>
<status endtime="20170809 01:08:22.977" status="PASS" starttime="20170809 01:08:19.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170809 01:08:22.978" level="FAIL">On != Off</msg>
<status endtime="20170809 01:08:22.978" status="FAIL" starttime="20170809 01:08:22.978"></status>
</kw>
<status endtime="20170809 01:08:22.979" status="FAIL" starttime="20170809 01:08:19.930"></status>
</kw>
<status endtime="20170809 01:08:22.979" status="FAIL" starttime="20170809 01:08:19.929"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:32.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:32.986" status="PASS" starttime="20170809 01:08:32.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:32.987" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:32.987" status="PASS" starttime="20170809 01:08:32.987"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:32.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:32.988" status="PASS" starttime="20170809 01:08:32.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:32.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:32.989" status="PASS" starttime="20170809 01:08:32.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:33.167" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:33.167" status="PASS" starttime="20170809 01:08:32.990"></status>
</kw>
<msg timestamp="20170809 01:08:33.167" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:33.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:33.167" status="PASS" starttime="20170809 01:08:32.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:33.168" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:33.168" status="PASS" starttime="20170809 01:08:33.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:33.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:33.169" status="PASS" starttime="20170809 01:08:33.168"></status>
</kw>
<status endtime="20170809 01:08:33.169" status="PASS" starttime="20170809 01:08:32.984"></status>
</kw>
<status endtime="20170809 01:08:33.169" status="PASS" starttime="20170809 01:08:32.984"></status>
</kw>
<status endtime="20170809 01:08:33.169" status="PASS" starttime="20170809 01:08:32.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:33.170" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:08:33.170" status="PASS" starttime="20170809 01:08:33.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:33.172" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:33.172" status="PASS" starttime="20170809 01:08:33.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:33.173" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:33.173" status="PASS" starttime="20170809 01:08:33.173"></status>
</kw>
<status endtime="20170809 01:08:33.173" status="PASS" starttime="20170809 01:08:33.172"></status>
</kw>
<status endtime="20170809 01:08:33.173" status="PASS" starttime="20170809 01:08:33.171"></status>
</kw>
<status endtime="20170809 01:08:33.173" status="PASS" starttime="20170809 01:08:33.170"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:33.678" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:33.678" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:33.678" status="PASS" starttime="20170809 01:08:33.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:33.680" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:33.680" status="PASS" starttime="20170809 01:08:33.679"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:33.681" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:33.681" status="PASS" starttime="20170809 01:08:33.681"></status>
</kw>
<status endtime="20170809 01:08:33.681" status="PASS" starttime="20170809 01:08:33.680"></status>
</kw>
<status endtime="20170809 01:08:33.681" status="PASS" starttime="20170809 01:08:33.679"></status>
</kw>
<status endtime="20170809 01:08:33.681" status="PASS" starttime="20170809 01:08:33.678"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:33.682" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:33.682" status="PASS" starttime="20170809 01:08:33.681"></status>
</kw>
<msg timestamp="20170809 01:08:33.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:33.682" status="PASS" starttime="20170809 01:08:32.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:33.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:33.683" status="PASS" starttime="20170809 01:08:33.682"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:33.683" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:33.683" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:33.683" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:33.683" status="PASS" starttime="20170809 01:08:33.683"></status>
</kw>
<msg timestamp="20170809 01:08:33.684" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:08:33.684" status="PASS" starttime="20170809 01:08:32.981"></status>
</kw>
<msg timestamp="20170809 01:08:33.684" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:08:33.684" status="PASS" starttime="20170809 01:08:32.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:08:33.684" status="PASS" starttime="20170809 01:08:33.684"></status>
</kw>
<status endtime="20170809 01:08:33.685" status="PASS" starttime="20170809 01:08:32.980"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:33.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:33.689" status="PASS" starttime="20170809 01:08:33.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:33.690" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:33.690" status="PASS" starttime="20170809 01:08:33.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:33.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:33.690" status="PASS" starttime="20170809 01:08:33.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:33.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:33.691" status="PASS" starttime="20170809 01:08:33.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:34.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:34.072" status="PASS" starttime="20170809 01:08:33.692"></status>
</kw>
<msg timestamp="20170809 01:08:34.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:34.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:34.072" status="PASS" starttime="20170809 01:08:33.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:34.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:34.073" status="PASS" starttime="20170809 01:08:34.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:34.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:34.073" status="PASS" starttime="20170809 01:08:34.073"></status>
</kw>
<status endtime="20170809 01:08:34.074" status="PASS" starttime="20170809 01:08:33.687"></status>
</kw>
<status endtime="20170809 01:08:34.074" status="PASS" starttime="20170809 01:08:33.687"></status>
</kw>
<status endtime="20170809 01:08:34.074" status="PASS" starttime="20170809 01:08:33.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:34.074" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:08:34.074" status="PASS" starttime="20170809 01:08:34.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:34.077" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:34.077" status="PASS" starttime="20170809 01:08:34.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:34.077" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:34.078" status="PASS" starttime="20170809 01:08:34.077"></status>
</kw>
<status endtime="20170809 01:08:34.078" status="PASS" starttime="20170809 01:08:34.077"></status>
</kw>
<status endtime="20170809 01:08:34.078" status="PASS" starttime="20170809 01:08:34.075"></status>
</kw>
<status endtime="20170809 01:08:34.078" status="PASS" starttime="20170809 01:08:34.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:34.669" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:34.670" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:34.670" status="PASS" starttime="20170809 01:08:34.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:34.671" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:34.671" status="PASS" starttime="20170809 01:08:34.671"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:34.672" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:34.672" status="PASS" starttime="20170809 01:08:34.672"></status>
</kw>
<status endtime="20170809 01:08:34.673" status="PASS" starttime="20170809 01:08:34.672"></status>
</kw>
<status endtime="20170809 01:08:34.673" status="PASS" starttime="20170809 01:08:34.670"></status>
</kw>
<status endtime="20170809 01:08:34.673" status="PASS" starttime="20170809 01:08:34.670"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:34.673" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:34.673" status="PASS" starttime="20170809 01:08:34.673"></status>
</kw>
<msg timestamp="20170809 01:08:34.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:34.673" status="PASS" starttime="20170809 01:08:33.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:34.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:34.674" status="PASS" starttime="20170809 01:08:34.674"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:34.675" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:34.675" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:34.675" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:34.675" status="PASS" starttime="20170809 01:08:34.674"></status>
</kw>
<msg timestamp="20170809 01:08:34.675" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:08:34.675" status="PASS" starttime="20170809 01:08:33.685"></status>
</kw>
<msg timestamp="20170809 01:08:34.676" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:08:34.676" status="PASS" starttime="20170809 01:08:33.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:08:34.676" status="PASS" starttime="20170809 01:08:34.676"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:34.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:34.681" status="PASS" starttime="20170809 01:08:34.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:34.681" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:34.681" status="PASS" starttime="20170809 01:08:34.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:34.682" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:34.682" status="PASS" starttime="20170809 01:08:34.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:34.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:34.683" status="PASS" starttime="20170809 01:08:34.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:34.952" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:34.953" status="PASS" starttime="20170809 01:08:34.683"></status>
</kw>
<msg timestamp="20170809 01:08:34.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:34.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:34.953" status="PASS" starttime="20170809 01:08:34.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:34.953" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:34.953" status="PASS" starttime="20170809 01:08:34.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:34.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:34.954" status="PASS" starttime="20170809 01:08:34.954"></status>
</kw>
<status endtime="20170809 01:08:34.954" status="PASS" starttime="20170809 01:08:34.680"></status>
</kw>
<status endtime="20170809 01:08:34.955" status="PASS" starttime="20170809 01:08:34.679"></status>
</kw>
<status endtime="20170809 01:08:34.955" status="PASS" starttime="20170809 01:08:34.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:34.955" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:08:34.955" status="PASS" starttime="20170809 01:08:34.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:34.957" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:34.957" status="PASS" starttime="20170809 01:08:34.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:34.958" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:34.958" status="PASS" starttime="20170809 01:08:34.958"></status>
</kw>
<status endtime="20170809 01:08:34.959" status="PASS" starttime="20170809 01:08:34.958"></status>
</kw>
<status endtime="20170809 01:08:34.959" status="PASS" starttime="20170809 01:08:34.956"></status>
</kw>
<status endtime="20170809 01:08:34.959" status="PASS" starttime="20170809 01:08:34.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:35.041" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:08:35.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:35.042" status="PASS" starttime="20170809 01:08:34.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:35.043" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:35.043" status="PASS" starttime="20170809 01:08:35.043"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:35.044" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:35.044" status="PASS" starttime="20170809 01:08:35.044"></status>
</kw>
<status endtime="20170809 01:08:35.044" status="PASS" starttime="20170809 01:08:35.043"></status>
</kw>
<status endtime="20170809 01:08:35.045" status="PASS" starttime="20170809 01:08:35.042"></status>
</kw>
<status endtime="20170809 01:08:35.045" status="PASS" starttime="20170809 01:08:35.042"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:35.045" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:35.045" status="PASS" starttime="20170809 01:08:35.045"></status>
</kw>
<msg timestamp="20170809 01:08:35.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:35.045" status="PASS" starttime="20170809 01:08:34.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:35.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:35.046" status="PASS" starttime="20170809 01:08:35.046"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:35.047" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:35.047" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:35.047" level="INFO">${content} = {u'message': u'200 OK', u'data': u'Off', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:35.047" status="PASS" starttime="20170809 01:08:35.046"></status>
</kw>
<msg timestamp="20170809 01:08:35.047" level="INFO">${state} = Off</msg>
<status endtime="20170809 01:08:35.047" status="PASS" starttime="20170809 01:08:34.677"></status>
</kw>
<msg timestamp="20170809 01:08:35.047" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170809 01:08:35.047" status="PASS" starttime="20170809 01:08:34.677"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:08:35.048" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 01:08:35.048" status="FAIL" starttime="20170809 01:08:35.048"></status>
</kw>
<status endtime="20170809 01:08:35.048" status="FAIL" starttime="20170809 01:08:34.676"></status>
</kw>
<status endtime="20170809 01:08:35.048" status="FAIL" starttime="20170809 01:08:32.979"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:45.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:45.054" status="PASS" starttime="20170809 01:08:45.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:45.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:45.054" status="PASS" starttime="20170809 01:08:45.054"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:45.055" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:45.055" status="PASS" starttime="20170809 01:08:45.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:45.056" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:45.056" status="PASS" starttime="20170809 01:08:45.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:45.260" status="PASS" starttime="20170809 01:08:45.057"></status>
</kw>
<msg timestamp="20170809 01:08:45.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:45.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:45.260" status="PASS" starttime="20170809 01:08:45.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:45.260" status="PASS" starttime="20170809 01:08:45.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:45.261" status="PASS" starttime="20170809 01:08:45.261"></status>
</kw>
<status endtime="20170809 01:08:45.261" status="PASS" starttime="20170809 01:08:45.053"></status>
</kw>
<status endtime="20170809 01:08:45.261" status="PASS" starttime="20170809 01:08:45.052"></status>
</kw>
<status endtime="20170809 01:08:45.262" status="PASS" starttime="20170809 01:08:45.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:45.262" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:08:45.262" status="PASS" starttime="20170809 01:08:45.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:45.264" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:45.264" status="PASS" starttime="20170809 01:08:45.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:45.265" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:45.265" status="PASS" starttime="20170809 01:08:45.265"></status>
</kw>
<status endtime="20170809 01:08:45.265" status="PASS" starttime="20170809 01:08:45.264"></status>
</kw>
<status endtime="20170809 01:08:45.265" status="PASS" starttime="20170809 01:08:45.263"></status>
</kw>
<status endtime="20170809 01:08:45.266" status="PASS" starttime="20170809 01:08:45.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:45.339" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:45.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:45.339" status="PASS" starttime="20170809 01:08:45.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:45.341" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:45.341" status="PASS" starttime="20170809 01:08:45.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:45.342" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:45.342" status="PASS" starttime="20170809 01:08:45.341"></status>
</kw>
<status endtime="20170809 01:08:45.342" status="PASS" starttime="20170809 01:08:45.341"></status>
</kw>
<status endtime="20170809 01:08:45.342" status="PASS" starttime="20170809 01:08:45.340"></status>
</kw>
<status endtime="20170809 01:08:45.342" status="PASS" starttime="20170809 01:08:45.339"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:45.342" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:45.342" status="PASS" starttime="20170809 01:08:45.342"></status>
</kw>
<msg timestamp="20170809 01:08:45.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:45.343" status="PASS" starttime="20170809 01:08:45.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:45.343" status="PASS" starttime="20170809 01:08:45.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:45.344" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:45.344" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:45.344" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:45.344" status="PASS" starttime="20170809 01:08:45.344"></status>
</kw>
<msg timestamp="20170809 01:08:45.344" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:08:45.345" status="PASS" starttime="20170809 01:08:45.050"></status>
</kw>
<msg timestamp="20170809 01:08:45.345" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:08:45.345" status="PASS" starttime="20170809 01:08:45.050"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:08:45.345" status="PASS" starttime="20170809 01:08:45.345"></status>
</kw>
<status endtime="20170809 01:08:45.346" status="PASS" starttime="20170809 01:08:45.049"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:45.349" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:45.350" status="PASS" starttime="20170809 01:08:45.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:45.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:45.351" status="PASS" starttime="20170809 01:08:45.350"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:45.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:45.351" status="PASS" starttime="20170809 01:08:45.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:45.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:45.352" status="PASS" starttime="20170809 01:08:45.351"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.589" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:45.590" status="PASS" starttime="20170809 01:08:45.352"></status>
</kw>
<msg timestamp="20170809 01:08:45.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:45.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:45.590" status="PASS" starttime="20170809 01:08:45.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.590" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:45.591" status="PASS" starttime="20170809 01:08:45.590"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:45.591" status="PASS" starttime="20170809 01:08:45.591"></status>
</kw>
<status endtime="20170809 01:08:45.591" status="PASS" starttime="20170809 01:08:45.348"></status>
</kw>
<status endtime="20170809 01:08:45.591" status="PASS" starttime="20170809 01:08:45.348"></status>
</kw>
<status endtime="20170809 01:08:45.592" status="PASS" starttime="20170809 01:08:45.347"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:45.592" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:08:45.592" status="PASS" starttime="20170809 01:08:45.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:45.594" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:45.594" status="PASS" starttime="20170809 01:08:45.594"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:45.595" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:45.595" status="PASS" starttime="20170809 01:08:45.595"></status>
</kw>
<status endtime="20170809 01:08:45.595" status="PASS" starttime="20170809 01:08:45.594"></status>
</kw>
<status endtime="20170809 01:08:45.596" status="PASS" starttime="20170809 01:08:45.593"></status>
</kw>
<status endtime="20170809 01:08:45.596" status="PASS" starttime="20170809 01:08:45.592"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:45.890" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:45.890" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:45.890" status="PASS" starttime="20170809 01:08:45.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:45.892" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:45.892" status="PASS" starttime="20170809 01:08:45.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:45.893" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:45.893" status="PASS" starttime="20170809 01:08:45.892"></status>
</kw>
<status endtime="20170809 01:08:45.893" status="PASS" starttime="20170809 01:08:45.892"></status>
</kw>
<status endtime="20170809 01:08:45.893" status="PASS" starttime="20170809 01:08:45.891"></status>
</kw>
<status endtime="20170809 01:08:45.893" status="PASS" starttime="20170809 01:08:45.890"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:45.893" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:45.893" status="PASS" starttime="20170809 01:08:45.893"></status>
</kw>
<msg timestamp="20170809 01:08:45.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:45.894" status="PASS" starttime="20170809 01:08:45.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:45.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:45.894" status="PASS" starttime="20170809 01:08:45.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:45.895" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:45.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:45.895" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:45.895" status="PASS" starttime="20170809 01:08:45.895"></status>
</kw>
<msg timestamp="20170809 01:08:45.895" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:08:45.895" status="PASS" starttime="20170809 01:08:45.346"></status>
</kw>
<msg timestamp="20170809 01:08:45.896" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:08:45.896" status="PASS" starttime="20170809 01:08:45.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:08:45.896" status="PASS" starttime="20170809 01:08:45.896"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:45.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:45.901" status="PASS" starttime="20170809 01:08:45.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:45.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:45.901" status="PASS" starttime="20170809 01:08:45.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:45.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:45.902" status="PASS" starttime="20170809 01:08:45.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:45.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:45.903" status="PASS" starttime="20170809 01:08:45.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:46.959" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:46.959" status="PASS" starttime="20170809 01:08:45.903"></status>
</kw>
<msg timestamp="20170809 01:08:46.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:46.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:46.960" status="PASS" starttime="20170809 01:08:45.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:46.960" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:46.960" status="PASS" starttime="20170809 01:08:46.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:46.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:46.961" status="PASS" starttime="20170809 01:08:46.961"></status>
</kw>
<status endtime="20170809 01:08:46.961" status="PASS" starttime="20170809 01:08:45.900"></status>
</kw>
<status endtime="20170809 01:08:46.961" status="PASS" starttime="20170809 01:08:45.899"></status>
</kw>
<status endtime="20170809 01:08:46.961" status="PASS" starttime="20170809 01:08:45.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:46.962" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:08:46.962" status="PASS" starttime="20170809 01:08:46.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:46.964" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:46.964" status="PASS" starttime="20170809 01:08:46.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:46.965" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:46.965" status="PASS" starttime="20170809 01:08:46.965"></status>
</kw>
<status endtime="20170809 01:08:46.965" status="PASS" starttime="20170809 01:08:46.964"></status>
</kw>
<status endtime="20170809 01:08:46.965" status="PASS" starttime="20170809 01:08:46.963"></status>
</kw>
<status endtime="20170809 01:08:46.965" status="PASS" starttime="20170809 01:08:46.962"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:47.219" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:08:47.219" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:47.219" status="PASS" starttime="20170809 01:08:46.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:47.221" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:47.221" status="PASS" starttime="20170809 01:08:47.221"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:47.222" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:47.222" status="PASS" starttime="20170809 01:08:47.222"></status>
</kw>
<status endtime="20170809 01:08:47.222" status="PASS" starttime="20170809 01:08:47.221"></status>
</kw>
<status endtime="20170809 01:08:47.223" status="PASS" starttime="20170809 01:08:47.220"></status>
</kw>
<status endtime="20170809 01:08:47.223" status="PASS" starttime="20170809 01:08:47.220"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:47.223" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:47.223" status="PASS" starttime="20170809 01:08:47.223"></status>
</kw>
<msg timestamp="20170809 01:08:47.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:47.223" status="PASS" starttime="20170809 01:08:45.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:47.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:47.224" status="PASS" starttime="20170809 01:08:47.224"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:47.224" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:47.225" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:47.225" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:47.225" status="PASS" starttime="20170809 01:08:47.224"></status>
</kw>
<msg timestamp="20170809 01:08:47.225" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:08:47.225" status="PASS" starttime="20170809 01:08:45.897"></status>
</kw>
<msg timestamp="20170809 01:08:47.225" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:08:47.225" status="PASS" starttime="20170809 01:08:45.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:08:47.226" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:08:47.226" status="FAIL" starttime="20170809 01:08:47.225"></status>
</kw>
<status endtime="20170809 01:08:47.226" status="FAIL" starttime="20170809 01:08:45.896"></status>
</kw>
<status endtime="20170809 01:08:47.226" status="FAIL" starttime="20170809 01:08:45.049"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:57.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:57.232" status="PASS" starttime="20170809 01:08:57.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:57.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:57.232" status="PASS" starttime="20170809 01:08:57.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:57.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:57.233" status="PASS" starttime="20170809 01:08:57.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:57.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:57.234" status="PASS" starttime="20170809 01:08:57.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.414" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:57.414" status="PASS" starttime="20170809 01:08:57.234"></status>
</kw>
<msg timestamp="20170809 01:08:57.414" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:57.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:57.414" status="PASS" starttime="20170809 01:08:57.234"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.415" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.415" status="PASS" starttime="20170809 01:08:57.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.415" status="PASS" starttime="20170809 01:08:57.415"></status>
</kw>
<status endtime="20170809 01:08:57.415" status="PASS" starttime="20170809 01:08:57.231"></status>
</kw>
<status endtime="20170809 01:08:57.416" status="PASS" starttime="20170809 01:08:57.230"></status>
</kw>
<status endtime="20170809 01:08:57.416" status="PASS" starttime="20170809 01:08:57.229"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:57.416" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:08:57.416" status="PASS" starttime="20170809 01:08:57.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:57.418" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:57.419" status="PASS" starttime="20170809 01:08:57.418"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:57.419" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:57.420" status="PASS" starttime="20170809 01:08:57.419"></status>
</kw>
<status endtime="20170809 01:08:57.420" status="PASS" starttime="20170809 01:08:57.419"></status>
</kw>
<status endtime="20170809 01:08:57.420" status="PASS" starttime="20170809 01:08:57.417"></status>
</kw>
<status endtime="20170809 01:08:57.420" status="PASS" starttime="20170809 01:08:57.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:57.483" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:57.483" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:57.483" status="PASS" starttime="20170809 01:08:57.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:57.485" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:57.485" status="PASS" starttime="20170809 01:08:57.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:57.486" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:57.486" status="PASS" starttime="20170809 01:08:57.486"></status>
</kw>
<status endtime="20170809 01:08:57.486" status="PASS" starttime="20170809 01:08:57.485"></status>
</kw>
<status endtime="20170809 01:08:57.486" status="PASS" starttime="20170809 01:08:57.484"></status>
</kw>
<status endtime="20170809 01:08:57.486" status="PASS" starttime="20170809 01:08:57.483"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:57.487" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:57.487" status="PASS" starttime="20170809 01:08:57.486"></status>
</kw>
<msg timestamp="20170809 01:08:57.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:57.487" status="PASS" starttime="20170809 01:08:57.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.488" status="PASS" starttime="20170809 01:08:57.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:57.488" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:57.488" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:57.488" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:57.488" status="PASS" starttime="20170809 01:08:57.488"></status>
</kw>
<msg timestamp="20170809 01:08:57.489" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:08:57.489" status="PASS" starttime="20170809 01:08:57.228"></status>
</kw>
<msg timestamp="20170809 01:08:57.489" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:08:57.489" status="PASS" starttime="20170809 01:08:57.228"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:08:57.489" status="PASS" starttime="20170809 01:08:57.489"></status>
</kw>
<status endtime="20170809 01:08:57.490" status="PASS" starttime="20170809 01:08:57.227"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:57.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:57.497" status="PASS" starttime="20170809 01:08:57.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:57.497" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:57.497" status="PASS" starttime="20170809 01:08:57.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:57.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:57.498" status="PASS" starttime="20170809 01:08:57.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:57.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:57.499" status="PASS" starttime="20170809 01:08:57.498"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.693" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:57.693" status="PASS" starttime="20170809 01:08:57.500"></status>
</kw>
<msg timestamp="20170809 01:08:57.693" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:57.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:57.694" status="PASS" starttime="20170809 01:08:57.499"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.694" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.694" status="PASS" starttime="20170809 01:08:57.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.695" status="PASS" starttime="20170809 01:08:57.694"></status>
</kw>
<status endtime="20170809 01:08:57.695" status="PASS" starttime="20170809 01:08:57.492"></status>
</kw>
<status endtime="20170809 01:08:57.695" status="PASS" starttime="20170809 01:08:57.492"></status>
</kw>
<status endtime="20170809 01:08:57.695" status="PASS" starttime="20170809 01:08:57.491"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:57.696" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:08:57.696" status="PASS" starttime="20170809 01:08:57.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:57.698" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:57.698" status="PASS" starttime="20170809 01:08:57.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:57.699" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:08:57.699" status="PASS" starttime="20170809 01:08:57.699"></status>
</kw>
<status endtime="20170809 01:08:57.699" status="PASS" starttime="20170809 01:08:57.698"></status>
</kw>
<status endtime="20170809 01:08:57.699" status="PASS" starttime="20170809 01:08:57.697"></status>
</kw>
<status endtime="20170809 01:08:57.699" status="PASS" starttime="20170809 01:08:57.696"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:57.790" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:08:57.790" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:57.790" status="PASS" starttime="20170809 01:08:57.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:57.792" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:57.792" status="PASS" starttime="20170809 01:08:57.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:57.793" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:57.793" status="PASS" starttime="20170809 01:08:57.792"></status>
</kw>
<status endtime="20170809 01:08:57.793" status="PASS" starttime="20170809 01:08:57.792"></status>
</kw>
<status endtime="20170809 01:08:57.793" status="PASS" starttime="20170809 01:08:57.791"></status>
</kw>
<status endtime="20170809 01:08:57.793" status="PASS" starttime="20170809 01:08:57.790"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:57.793" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:57.794" status="PASS" starttime="20170809 01:08:57.793"></status>
</kw>
<msg timestamp="20170809 01:08:57.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:57.794" status="PASS" starttime="20170809 01:08:57.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.794" status="PASS" starttime="20170809 01:08:57.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:57.795" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:57.795" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:57.795" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:57.795" status="PASS" starttime="20170809 01:08:57.795"></status>
</kw>
<msg timestamp="20170809 01:08:57.795" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:08:57.795" status="PASS" starttime="20170809 01:08:57.490"></status>
</kw>
<msg timestamp="20170809 01:08:57.796" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:08:57.796" status="PASS" starttime="20170809 01:08:57.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:08:57.796" status="PASS" starttime="20170809 01:08:57.796"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:08:57.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:08:57.801" status="PASS" starttime="20170809 01:08:57.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:08:57.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:08:57.802" status="PASS" starttime="20170809 01:08:57.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:08:57.802" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:08:57.802" status="PASS" starttime="20170809 01:08:57.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:08:57.803" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:08:57.803" status="PASS" starttime="20170809 01:08:57.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:08:57.990" status="PASS" starttime="20170809 01:08:57.804"></status>
</kw>
<msg timestamp="20170809 01:08:57.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:08:57.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:57.990" status="PASS" starttime="20170809 01:08:57.803"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.991" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.991" status="PASS" starttime="20170809 01:08:57.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:57.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:57.992" status="PASS" starttime="20170809 01:08:57.991"></status>
</kw>
<status endtime="20170809 01:08:57.992" status="PASS" starttime="20170809 01:08:57.800"></status>
</kw>
<status endtime="20170809 01:08:57.992" status="PASS" starttime="20170809 01:08:57.799"></status>
</kw>
<status endtime="20170809 01:08:57.992" status="PASS" starttime="20170809 01:08:57.799"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:08:57.993" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:08:57.993" status="PASS" starttime="20170809 01:08:57.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:57.995" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:57.995" status="PASS" starttime="20170809 01:08:57.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:57.996" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:08:57.996" status="PASS" starttime="20170809 01:08:57.995"></status>
</kw>
<status endtime="20170809 01:08:57.996" status="PASS" starttime="20170809 01:08:57.995"></status>
</kw>
<status endtime="20170809 01:08:57.996" status="PASS" starttime="20170809 01:08:57.993"></status>
</kw>
<status endtime="20170809 01:08:57.996" status="PASS" starttime="20170809 01:08:57.993"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:08:58.075" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:08:58.076" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:58.076" status="PASS" starttime="20170809 01:08:57.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:08:58.077" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:58.077" status="PASS" starttime="20170809 01:08:58.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:08:58.078" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:08:58.078" status="PASS" starttime="20170809 01:08:58.078"></status>
</kw>
<status endtime="20170809 01:08:58.079" status="PASS" starttime="20170809 01:08:58.078"></status>
</kw>
<status endtime="20170809 01:08:58.079" status="PASS" starttime="20170809 01:08:58.076"></status>
</kw>
<status endtime="20170809 01:08:58.079" status="PASS" starttime="20170809 01:08:58.076"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:08:58.079" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:08:58.079" status="PASS" starttime="20170809 01:08:58.079"></status>
</kw>
<msg timestamp="20170809 01:08:58.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:08:58.079" status="PASS" starttime="20170809 01:08:57.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:08:58.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:08:58.080" status="PASS" starttime="20170809 01:08:58.080"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:08:58.081" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:08:58.081" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:08:58.081" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:08:58.081" status="PASS" starttime="20170809 01:08:58.080"></status>
</kw>
<msg timestamp="20170809 01:08:58.081" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:08:58.081" status="PASS" starttime="20170809 01:08:57.797"></status>
</kw>
<msg timestamp="20170809 01:08:58.081" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:08:58.081" status="PASS" starttime="20170809 01:08:57.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:08:58.082" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:08:58.082" status="FAIL" starttime="20170809 01:08:58.082"></status>
</kw>
<status endtime="20170809 01:08:58.082" status="FAIL" starttime="20170809 01:08:57.797"></status>
</kw>
<status endtime="20170809 01:08:58.082" status="FAIL" starttime="20170809 01:08:57.227"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:08.088" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:08.088" status="PASS" starttime="20170809 01:09:08.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:08.089" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:08.089" status="PASS" starttime="20170809 01:09:08.088"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:08.089" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:08.089" status="PASS" starttime="20170809 01:09:08.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:08.090" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:08.090" status="PASS" starttime="20170809 01:09:08.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:08.278" status="PASS" starttime="20170809 01:09:08.091"></status>
</kw>
<msg timestamp="20170809 01:09:08.278" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:08.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:08.278" status="PASS" starttime="20170809 01:09:08.090"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.279" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:08.279" status="PASS" starttime="20170809 01:09:08.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:08.279" status="PASS" starttime="20170809 01:09:08.279"></status>
</kw>
<status endtime="20170809 01:09:08.279" status="PASS" starttime="20170809 01:09:08.087"></status>
</kw>
<status endtime="20170809 01:09:08.280" status="PASS" starttime="20170809 01:09:08.086"></status>
</kw>
<status endtime="20170809 01:09:08.280" status="PASS" starttime="20170809 01:09:08.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:08.280" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:09:08.280" status="PASS" starttime="20170809 01:09:08.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:08.282" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:08.283" status="PASS" starttime="20170809 01:09:08.282"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:08.283" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:08.284" status="PASS" starttime="20170809 01:09:08.283"></status>
</kw>
<status endtime="20170809 01:09:08.284" status="PASS" starttime="20170809 01:09:08.283"></status>
</kw>
<status endtime="20170809 01:09:08.284" status="PASS" starttime="20170809 01:09:08.281"></status>
</kw>
<status endtime="20170809 01:09:08.284" status="PASS" starttime="20170809 01:09:08.281"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:08.497" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:08.497" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:08.497" status="PASS" starttime="20170809 01:09:08.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:08.499" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:08.499" status="PASS" starttime="20170809 01:09:08.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:08.499" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:08.500" status="PASS" starttime="20170809 01:09:08.499"></status>
</kw>
<status endtime="20170809 01:09:08.500" status="PASS" starttime="20170809 01:09:08.499"></status>
</kw>
<status endtime="20170809 01:09:08.500" status="PASS" starttime="20170809 01:09:08.498"></status>
</kw>
<status endtime="20170809 01:09:08.500" status="PASS" starttime="20170809 01:09:08.497"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:08.500" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:08.500" status="PASS" starttime="20170809 01:09:08.500"></status>
</kw>
<msg timestamp="20170809 01:09:08.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:08.501" status="PASS" starttime="20170809 01:09:08.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:08.501" status="PASS" starttime="20170809 01:09:08.501"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:08.502" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:08.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:08.502" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:08.502" status="PASS" starttime="20170809 01:09:08.501"></status>
</kw>
<msg timestamp="20170809 01:09:08.502" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:09:08.502" status="PASS" starttime="20170809 01:09:08.084"></status>
</kw>
<msg timestamp="20170809 01:09:08.503" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:09:08.503" status="PASS" starttime="20170809 01:09:08.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:09:08.503" status="PASS" starttime="20170809 01:09:08.503"></status>
</kw>
<status endtime="20170809 01:09:08.503" status="PASS" starttime="20170809 01:09:08.084"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:08.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:08.507" status="PASS" starttime="20170809 01:09:08.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:08.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:08.508" status="PASS" starttime="20170809 01:09:08.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:08.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:08.509" status="PASS" starttime="20170809 01:09:08.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:08.509" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:08.509" status="PASS" starttime="20170809 01:09:08.509"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.829" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:08.829" status="PASS" starttime="20170809 01:09:08.510"></status>
</kw>
<msg timestamp="20170809 01:09:08.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:08.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:08.830" status="PASS" starttime="20170809 01:09:08.510"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.830" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:08.830" status="PASS" starttime="20170809 01:09:08.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:08.831" status="PASS" starttime="20170809 01:09:08.831"></status>
</kw>
<status endtime="20170809 01:09:08.831" status="PASS" starttime="20170809 01:09:08.506"></status>
</kw>
<status endtime="20170809 01:09:08.831" status="PASS" starttime="20170809 01:09:08.505"></status>
</kw>
<status endtime="20170809 01:09:08.831" status="PASS" starttime="20170809 01:09:08.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:08.832" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:09:08.832" status="PASS" starttime="20170809 01:09:08.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:08.834" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:08.834" status="PASS" starttime="20170809 01:09:08.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:08.835" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:08.835" status="PASS" starttime="20170809 01:09:08.835"></status>
</kw>
<status endtime="20170809 01:09:08.835" status="PASS" starttime="20170809 01:09:08.834"></status>
</kw>
<status endtime="20170809 01:09:08.835" status="PASS" starttime="20170809 01:09:08.833"></status>
</kw>
<status endtime="20170809 01:09:08.835" status="PASS" starttime="20170809 01:09:08.832"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:08.937" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:08.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:08.937" status="PASS" starttime="20170809 01:09:08.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:08.939" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:08.939" status="PASS" starttime="20170809 01:09:08.939"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:08.940" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:08.940" status="PASS" starttime="20170809 01:09:08.940"></status>
</kw>
<status endtime="20170809 01:09:08.940" status="PASS" starttime="20170809 01:09:08.939"></status>
</kw>
<status endtime="20170809 01:09:08.941" status="PASS" starttime="20170809 01:09:08.938"></status>
</kw>
<status endtime="20170809 01:09:08.941" status="PASS" starttime="20170809 01:09:08.938"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:08.941" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:08.941" status="PASS" starttime="20170809 01:09:08.941"></status>
</kw>
<msg timestamp="20170809 01:09:08.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:08.942" status="PASS" starttime="20170809 01:09:08.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:08.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:08.943" status="PASS" starttime="20170809 01:09:08.942"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:08.943" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:08.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:08.944" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:08.944" status="PASS" starttime="20170809 01:09:08.943"></status>
</kw>
<msg timestamp="20170809 01:09:08.944" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:09:08.944" status="PASS" starttime="20170809 01:09:08.504"></status>
</kw>
<msg timestamp="20170809 01:09:08.944" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:09:08.944" status="PASS" starttime="20170809 01:09:08.503"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:09:08.945" status="PASS" starttime="20170809 01:09:08.945"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:08.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:08.950" status="PASS" starttime="20170809 01:09:08.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:08.951" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:08.951" status="PASS" starttime="20170809 01:09:08.950"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:08.951" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:08.951" status="PASS" starttime="20170809 01:09:08.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:08.952" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:08.952" status="PASS" starttime="20170809 01:09:08.952"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:09.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:09.241" status="PASS" starttime="20170809 01:09:08.953"></status>
</kw>
<msg timestamp="20170809 01:09:09.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:09.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:09.242" status="PASS" starttime="20170809 01:09:08.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:09.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:09.243" status="PASS" starttime="20170809 01:09:09.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:09.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:09.244" status="PASS" starttime="20170809 01:09:09.243"></status>
</kw>
<status endtime="20170809 01:09:09.244" status="PASS" starttime="20170809 01:09:08.949"></status>
</kw>
<status endtime="20170809 01:09:09.244" status="PASS" starttime="20170809 01:09:08.948"></status>
</kw>
<status endtime="20170809 01:09:09.244" status="PASS" starttime="20170809 01:09:08.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:09.245" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:09:09.245" status="PASS" starttime="20170809 01:09:09.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:09.248" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:09.248" status="PASS" starttime="20170809 01:09:09.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:09.250" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:09.250" status="PASS" starttime="20170809 01:09:09.250"></status>
</kw>
<status endtime="20170809 01:09:09.251" status="PASS" starttime="20170809 01:09:09.248"></status>
</kw>
<status endtime="20170809 01:09:09.251" status="PASS" starttime="20170809 01:09:09.246"></status>
</kw>
<status endtime="20170809 01:09:09.251" status="PASS" starttime="20170809 01:09:09.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:09.317" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:09:09.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:09.317" status="PASS" starttime="20170809 01:09:09.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:09.319" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:09.319" status="PASS" starttime="20170809 01:09:09.319"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:09.320" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:09.320" status="PASS" starttime="20170809 01:09:09.320"></status>
</kw>
<status endtime="20170809 01:09:09.320" status="PASS" starttime="20170809 01:09:09.319"></status>
</kw>
<status endtime="20170809 01:09:09.320" status="PASS" starttime="20170809 01:09:09.318"></status>
</kw>
<status endtime="20170809 01:09:09.320" status="PASS" starttime="20170809 01:09:09.318"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:09.321" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:09.321" status="PASS" starttime="20170809 01:09:09.321"></status>
</kw>
<msg timestamp="20170809 01:09:09.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:09.321" status="PASS" starttime="20170809 01:09:08.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:09.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:09.322" status="PASS" starttime="20170809 01:09:09.321"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:09.322" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:09.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:09.322" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:09.322" status="PASS" starttime="20170809 01:09:09.322"></status>
</kw>
<msg timestamp="20170809 01:09:09.323" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:09.323" status="PASS" starttime="20170809 01:09:08.946"></status>
</kw>
<msg timestamp="20170809 01:09:09.323" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:09.323" status="PASS" starttime="20170809 01:09:08.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:09:09.324" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:09:09.324" status="FAIL" starttime="20170809 01:09:09.323"></status>
</kw>
<status endtime="20170809 01:09:09.324" status="FAIL" starttime="20170809 01:09:08.945"></status>
</kw>
<status endtime="20170809 01:09:09.324" status="FAIL" starttime="20170809 01:09:08.083"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:19.329" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:19.330" status="PASS" starttime="20170809 01:09:19.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:19.330" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:19.330" status="PASS" starttime="20170809 01:09:19.330"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:19.331" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:19.331" status="PASS" starttime="20170809 01:09:19.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:19.331" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:19.331" status="PASS" starttime="20170809 01:09:19.331"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.513" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:19.513" status="PASS" starttime="20170809 01:09:19.332"></status>
</kw>
<msg timestamp="20170809 01:09:19.513" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:19.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:19.514" status="PASS" starttime="20170809 01:09:19.332"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.514" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:19.514" status="PASS" starttime="20170809 01:09:19.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:19.515" status="PASS" starttime="20170809 01:09:19.515"></status>
</kw>
<status endtime="20170809 01:09:19.515" status="PASS" starttime="20170809 01:09:19.328"></status>
</kw>
<status endtime="20170809 01:09:19.515" status="PASS" starttime="20170809 01:09:19.328"></status>
</kw>
<status endtime="20170809 01:09:19.515" status="PASS" starttime="20170809 01:09:19.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:19.516" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:09:19.516" status="PASS" starttime="20170809 01:09:19.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:19.518" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:19.518" status="PASS" starttime="20170809 01:09:19.517"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:19.519" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:19.519" status="PASS" starttime="20170809 01:09:19.519"></status>
</kw>
<status endtime="20170809 01:09:19.519" status="PASS" starttime="20170809 01:09:19.518"></status>
</kw>
<status endtime="20170809 01:09:19.519" status="PASS" starttime="20170809 01:09:19.517"></status>
</kw>
<status endtime="20170809 01:09:19.519" status="PASS" starttime="20170809 01:09:19.516"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:19.583" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:19.583" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:19.583" status="PASS" starttime="20170809 01:09:19.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:19.585" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:19.585" status="PASS" starttime="20170809 01:09:19.585"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:19.586" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:19.586" status="PASS" starttime="20170809 01:09:19.586"></status>
</kw>
<status endtime="20170809 01:09:19.586" status="PASS" starttime="20170809 01:09:19.585"></status>
</kw>
<status endtime="20170809 01:09:19.586" status="PASS" starttime="20170809 01:09:19.584"></status>
</kw>
<status endtime="20170809 01:09:19.586" status="PASS" starttime="20170809 01:09:19.583"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:19.587" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:19.587" status="PASS" starttime="20170809 01:09:19.587"></status>
</kw>
<msg timestamp="20170809 01:09:19.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:19.587" status="PASS" starttime="20170809 01:09:19.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:19.588" status="PASS" starttime="20170809 01:09:19.587"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:19.588" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:19.588" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:19.589" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:19.589" status="PASS" starttime="20170809 01:09:19.588"></status>
</kw>
<msg timestamp="20170809 01:09:19.589" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:09:19.589" status="PASS" starttime="20170809 01:09:19.326"></status>
</kw>
<msg timestamp="20170809 01:09:19.589" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:09:19.589" status="PASS" starttime="20170809 01:09:19.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:09:19.590" status="PASS" starttime="20170809 01:09:19.589"></status>
</kw>
<status endtime="20170809 01:09:19.590" status="PASS" starttime="20170809 01:09:19.325"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:19.594" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:19.594" status="PASS" starttime="20170809 01:09:19.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:19.595" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:19.595" status="PASS" starttime="20170809 01:09:19.594"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:19.595" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:19.595" status="PASS" starttime="20170809 01:09:19.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:19.596" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:19.596" status="PASS" starttime="20170809 01:09:19.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:19.799" status="PASS" starttime="20170809 01:09:19.597"></status>
</kw>
<msg timestamp="20170809 01:09:19.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:19.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:19.800" status="PASS" starttime="20170809 01:09:19.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.801" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:19.801" status="PASS" starttime="20170809 01:09:19.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:19.802" status="PASS" starttime="20170809 01:09:19.801"></status>
</kw>
<status endtime="20170809 01:09:19.802" status="PASS" starttime="20170809 01:09:19.593"></status>
</kw>
<status endtime="20170809 01:09:19.802" status="PASS" starttime="20170809 01:09:19.592"></status>
</kw>
<status endtime="20170809 01:09:19.802" status="PASS" starttime="20170809 01:09:19.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:19.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:09:19.802" status="PASS" starttime="20170809 01:09:19.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:19.805" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:19.805" status="PASS" starttime="20170809 01:09:19.804"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:19.806" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:19.806" status="PASS" starttime="20170809 01:09:19.805"></status>
</kw>
<status endtime="20170809 01:09:19.806" status="PASS" starttime="20170809 01:09:19.805"></status>
</kw>
<status endtime="20170809 01:09:19.806" status="PASS" starttime="20170809 01:09:19.803"></status>
</kw>
<status endtime="20170809 01:09:19.806" status="PASS" starttime="20170809 01:09:19.803"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:19.900" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:19.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:19.900" status="PASS" starttime="20170809 01:09:19.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:19.902" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:19.902" status="PASS" starttime="20170809 01:09:19.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:19.903" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:19.903" status="PASS" starttime="20170809 01:09:19.903"></status>
</kw>
<status endtime="20170809 01:09:19.903" status="PASS" starttime="20170809 01:09:19.902"></status>
</kw>
<status endtime="20170809 01:09:19.903" status="PASS" starttime="20170809 01:09:19.901"></status>
</kw>
<status endtime="20170809 01:09:19.903" status="PASS" starttime="20170809 01:09:19.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:19.904" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:19.904" status="PASS" starttime="20170809 01:09:19.904"></status>
</kw>
<msg timestamp="20170809 01:09:19.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:19.904" status="PASS" starttime="20170809 01:09:19.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:19.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:19.905" status="PASS" starttime="20170809 01:09:19.905"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:19.905" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:19.905" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:19.906" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:19.906" status="PASS" starttime="20170809 01:09:19.905"></status>
</kw>
<msg timestamp="20170809 01:09:19.906" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:09:19.906" status="PASS" starttime="20170809 01:09:19.590"></status>
</kw>
<msg timestamp="20170809 01:09:19.906" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:09:19.906" status="PASS" starttime="20170809 01:09:19.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:09:19.907" status="PASS" starttime="20170809 01:09:19.907"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:19.911" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:19.911" status="PASS" starttime="20170809 01:09:19.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:19.912" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:19.912" status="PASS" starttime="20170809 01:09:19.912"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:19.913" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:19.913" status="PASS" starttime="20170809 01:09:19.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:19.913" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:19.913" status="PASS" starttime="20170809 01:09:19.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:20.131" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:20.131" status="PASS" starttime="20170809 01:09:19.914"></status>
</kw>
<msg timestamp="20170809 01:09:20.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:20.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:20.132" status="PASS" starttime="20170809 01:09:19.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:20.132" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:20.132" status="PASS" starttime="20170809 01:09:20.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:20.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:20.133" status="PASS" starttime="20170809 01:09:20.133"></status>
</kw>
<status endtime="20170809 01:09:20.133" status="PASS" starttime="20170809 01:09:19.910"></status>
</kw>
<status endtime="20170809 01:09:20.133" status="PASS" starttime="20170809 01:09:19.910"></status>
</kw>
<status endtime="20170809 01:09:20.133" status="PASS" starttime="20170809 01:09:19.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:20.134" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:09:20.134" status="PASS" starttime="20170809 01:09:20.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:20.136" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:20.136" status="PASS" starttime="20170809 01:09:20.135"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:20.137" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:20.137" status="PASS" starttime="20170809 01:09:20.137"></status>
</kw>
<status endtime="20170809 01:09:20.137" status="PASS" starttime="20170809 01:09:20.136"></status>
</kw>
<status endtime="20170809 01:09:20.138" status="PASS" starttime="20170809 01:09:20.135"></status>
</kw>
<status endtime="20170809 01:09:20.138" status="PASS" starttime="20170809 01:09:20.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:20.205" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:09:20.205" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:20.205" status="PASS" starttime="20170809 01:09:20.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:20.206" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:20.207" status="PASS" starttime="20170809 01:09:20.206"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:20.207" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:20.208" status="PASS" starttime="20170809 01:09:20.207"></status>
</kw>
<status endtime="20170809 01:09:20.208" status="PASS" starttime="20170809 01:09:20.207"></status>
</kw>
<status endtime="20170809 01:09:20.208" status="PASS" starttime="20170809 01:09:20.206"></status>
</kw>
<status endtime="20170809 01:09:20.208" status="PASS" starttime="20170809 01:09:20.205"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:20.208" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:20.208" status="PASS" starttime="20170809 01:09:20.208"></status>
</kw>
<msg timestamp="20170809 01:09:20.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:20.209" status="PASS" starttime="20170809 01:09:19.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:20.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:20.209" status="PASS" starttime="20170809 01:09:20.209"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:20.210" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:20.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:20.210" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:20.210" status="PASS" starttime="20170809 01:09:20.210"></status>
</kw>
<msg timestamp="20170809 01:09:20.210" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:20.210" status="PASS" starttime="20170809 01:09:19.908"></status>
</kw>
<msg timestamp="20170809 01:09:20.211" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:20.211" status="PASS" starttime="20170809 01:09:19.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:09:20.211" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:09:20.211" status="FAIL" starttime="20170809 01:09:20.211"></status>
</kw>
<status endtime="20170809 01:09:20.211" status="FAIL" starttime="20170809 01:09:19.907"></status>
</kw>
<status endtime="20170809 01:09:20.212" status="FAIL" starttime="20170809 01:09:19.324"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:30.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:30.217" status="PASS" starttime="20170809 01:09:30.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:30.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:30.218" status="PASS" starttime="20170809 01:09:30.218"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:30.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:30.219" status="PASS" starttime="20170809 01:09:30.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:30.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:30.219" status="PASS" starttime="20170809 01:09:30.219"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:30.407" status="PASS" starttime="20170809 01:09:30.220"></status>
</kw>
<msg timestamp="20170809 01:09:30.407" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:30.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:30.407" status="PASS" starttime="20170809 01:09:30.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.408" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.408" status="PASS" starttime="20170809 01:09:30.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.408" status="PASS" starttime="20170809 01:09:30.408"></status>
</kw>
<status endtime="20170809 01:09:30.408" status="PASS" starttime="20170809 01:09:30.216"></status>
</kw>
<status endtime="20170809 01:09:30.409" status="PASS" starttime="20170809 01:09:30.215"></status>
</kw>
<status endtime="20170809 01:09:30.409" status="PASS" starttime="20170809 01:09:30.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:30.409" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:09:30.409" status="PASS" starttime="20170809 01:09:30.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:30.411" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:30.411" status="PASS" starttime="20170809 01:09:30.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:30.412" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:30.413" status="PASS" starttime="20170809 01:09:30.412"></status>
</kw>
<status endtime="20170809 01:09:30.413" status="PASS" starttime="20170809 01:09:30.412"></status>
</kw>
<status endtime="20170809 01:09:30.413" status="PASS" starttime="20170809 01:09:30.410"></status>
</kw>
<status endtime="20170809 01:09:30.413" status="PASS" starttime="20170809 01:09:30.410"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:30.477" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:30.477" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:30.478" status="PASS" starttime="20170809 01:09:30.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:30.479" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:30.479" status="PASS" starttime="20170809 01:09:30.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:30.481" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:30.481" status="PASS" starttime="20170809 01:09:30.480"></status>
</kw>
<status endtime="20170809 01:09:30.481" status="PASS" starttime="20170809 01:09:30.480"></status>
</kw>
<status endtime="20170809 01:09:30.481" status="PASS" starttime="20170809 01:09:30.478"></status>
</kw>
<status endtime="20170809 01:09:30.481" status="PASS" starttime="20170809 01:09:30.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:30.482" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:30.482" status="PASS" starttime="20170809 01:09:30.482"></status>
</kw>
<msg timestamp="20170809 01:09:30.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:30.482" status="PASS" starttime="20170809 01:09:30.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.483" status="PASS" starttime="20170809 01:09:30.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:30.484" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:30.484" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:30.484" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:30.484" status="PASS" starttime="20170809 01:09:30.483"></status>
</kw>
<msg timestamp="20170809 01:09:30.484" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:09:30.484" status="PASS" starttime="20170809 01:09:30.213"></status>
</kw>
<msg timestamp="20170809 01:09:30.484" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:09:30.484" status="PASS" starttime="20170809 01:09:30.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:09:30.485" status="PASS" starttime="20170809 01:09:30.485"></status>
</kw>
<status endtime="20170809 01:09:30.485" status="PASS" starttime="20170809 01:09:30.213"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:30.492" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:30.492" status="PASS" starttime="20170809 01:09:30.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:30.493" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:30.493" status="PASS" starttime="20170809 01:09:30.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:30.494" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:30.494" status="PASS" starttime="20170809 01:09:30.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:30.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:30.495" status="PASS" starttime="20170809 01:09:30.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:30.692" status="PASS" starttime="20170809 01:09:30.495"></status>
</kw>
<msg timestamp="20170809 01:09:30.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:30.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:30.692" status="PASS" starttime="20170809 01:09:30.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.693" status="PASS" starttime="20170809 01:09:30.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.694" status="PASS" starttime="20170809 01:09:30.693"></status>
</kw>
<status endtime="20170809 01:09:30.694" status="PASS" starttime="20170809 01:09:30.488"></status>
</kw>
<status endtime="20170809 01:09:30.694" status="PASS" starttime="20170809 01:09:30.487"></status>
</kw>
<status endtime="20170809 01:09:30.694" status="PASS" starttime="20170809 01:09:30.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:30.695" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:09:30.695" status="PASS" starttime="20170809 01:09:30.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:30.697" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:30.697" status="PASS" starttime="20170809 01:09:30.696"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:30.698" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:30.698" status="PASS" starttime="20170809 01:09:30.697"></status>
</kw>
<status endtime="20170809 01:09:30.698" status="PASS" starttime="20170809 01:09:30.697"></status>
</kw>
<status endtime="20170809 01:09:30.698" status="PASS" starttime="20170809 01:09:30.695"></status>
</kw>
<status endtime="20170809 01:09:30.698" status="PASS" starttime="20170809 01:09:30.695"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:30.791" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:30.791" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:30.791" status="PASS" starttime="20170809 01:09:30.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:30.793" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:30.793" status="PASS" starttime="20170809 01:09:30.793"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:30.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:30.795" status="PASS" starttime="20170809 01:09:30.794"></status>
</kw>
<status endtime="20170809 01:09:30.795" status="PASS" starttime="20170809 01:09:30.793"></status>
</kw>
<status endtime="20170809 01:09:30.795" status="PASS" starttime="20170809 01:09:30.792"></status>
</kw>
<status endtime="20170809 01:09:30.795" status="PASS" starttime="20170809 01:09:30.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:30.795" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:30.795" status="PASS" starttime="20170809 01:09:30.795"></status>
</kw>
<msg timestamp="20170809 01:09:30.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:30.796" status="PASS" starttime="20170809 01:09:30.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.796" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.796" status="PASS" starttime="20170809 01:09:30.796"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:30.797" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:30.797" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:30.797" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:30.797" status="PASS" starttime="20170809 01:09:30.797"></status>
</kw>
<msg timestamp="20170809 01:09:30.797" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:09:30.797" status="PASS" starttime="20170809 01:09:30.486"></status>
</kw>
<msg timestamp="20170809 01:09:30.798" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:09:30.798" status="PASS" starttime="20170809 01:09:30.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:09:30.798" status="PASS" starttime="20170809 01:09:30.798"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:30.802" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:30.803" status="PASS" starttime="20170809 01:09:30.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:30.803" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:30.803" status="PASS" starttime="20170809 01:09:30.803"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:30.804" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:30.804" status="PASS" starttime="20170809 01:09:30.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:30.805" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:30.805" status="PASS" starttime="20170809 01:09:30.804"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.981" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:30.981" status="PASS" starttime="20170809 01:09:30.805"></status>
</kw>
<msg timestamp="20170809 01:09:30.981" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:30.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:30.981" status="PASS" starttime="20170809 01:09:30.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.982" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.982" status="PASS" starttime="20170809 01:09:30.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:30.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:30.983" status="PASS" starttime="20170809 01:09:30.982"></status>
</kw>
<status endtime="20170809 01:09:30.984" status="PASS" starttime="20170809 01:09:30.802"></status>
</kw>
<status endtime="20170809 01:09:30.984" status="PASS" starttime="20170809 01:09:30.801"></status>
</kw>
<status endtime="20170809 01:09:30.984" status="PASS" starttime="20170809 01:09:30.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:30.984" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:09:30.984" status="PASS" starttime="20170809 01:09:30.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:30.986" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:30.986" status="PASS" starttime="20170809 01:09:30.986"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:30.987" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:30.987" status="PASS" starttime="20170809 01:09:30.987"></status>
</kw>
<status endtime="20170809 01:09:30.988" status="PASS" starttime="20170809 01:09:30.987"></status>
</kw>
<status endtime="20170809 01:09:30.988" status="PASS" starttime="20170809 01:09:30.985"></status>
</kw>
<status endtime="20170809 01:09:30.988" status="PASS" starttime="20170809 01:09:30.985"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:31.076" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:09:31.077" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:31.077" status="PASS" starttime="20170809 01:09:30.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:31.078" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:31.078" status="PASS" starttime="20170809 01:09:31.078"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:31.079" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:31.079" status="PASS" starttime="20170809 01:09:31.079"></status>
</kw>
<status endtime="20170809 01:09:31.080" status="PASS" starttime="20170809 01:09:31.079"></status>
</kw>
<status endtime="20170809 01:09:31.080" status="PASS" starttime="20170809 01:09:31.077"></status>
</kw>
<status endtime="20170809 01:09:31.080" status="PASS" starttime="20170809 01:09:31.077"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:31.080" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:31.080" status="PASS" starttime="20170809 01:09:31.080"></status>
</kw>
<msg timestamp="20170809 01:09:31.080" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:31.080" status="PASS" starttime="20170809 01:09:30.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:31.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:31.081" status="PASS" starttime="20170809 01:09:31.081"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:31.082" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:31.082" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:31.082" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:31.082" status="PASS" starttime="20170809 01:09:31.082"></status>
</kw>
<msg timestamp="20170809 01:09:31.083" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:31.083" status="PASS" starttime="20170809 01:09:30.799"></status>
</kw>
<msg timestamp="20170809 01:09:31.083" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:31.083" status="PASS" starttime="20170809 01:09:30.799"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:09:31.084" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:09:31.084" status="FAIL" starttime="20170809 01:09:31.083"></status>
</kw>
<status endtime="20170809 01:09:31.084" status="FAIL" starttime="20170809 01:09:30.798"></status>
</kw>
<status endtime="20170809 01:09:31.085" status="FAIL" starttime="20170809 01:09:30.212"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:41.090" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:41.091" status="PASS" starttime="20170809 01:09:41.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:41.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:41.091" status="PASS" starttime="20170809 01:09:41.091"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:41.092" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:41.092" status="PASS" starttime="20170809 01:09:41.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:41.092" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:41.093" status="PASS" starttime="20170809 01:09:41.092"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:41.273" status="PASS" starttime="20170809 01:09:41.093"></status>
</kw>
<msg timestamp="20170809 01:09:41.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:41.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.273" status="PASS" starttime="20170809 01:09:41.093"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.274" status="PASS" starttime="20170809 01:09:41.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.275" status="PASS" starttime="20170809 01:09:41.274"></status>
</kw>
<status endtime="20170809 01:09:41.275" status="PASS" starttime="20170809 01:09:41.089"></status>
</kw>
<status endtime="20170809 01:09:41.275" status="PASS" starttime="20170809 01:09:41.088"></status>
</kw>
<status endtime="20170809 01:09:41.275" status="PASS" starttime="20170809 01:09:41.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:41.276" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:09:41.276" status="PASS" starttime="20170809 01:09:41.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:41.278" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:41.278" status="PASS" starttime="20170809 01:09:41.277"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:41.279" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:41.279" status="PASS" starttime="20170809 01:09:41.278"></status>
</kw>
<status endtime="20170809 01:09:41.279" status="PASS" starttime="20170809 01:09:41.278"></status>
</kw>
<status endtime="20170809 01:09:41.279" status="PASS" starttime="20170809 01:09:41.276"></status>
</kw>
<status endtime="20170809 01:09:41.279" status="PASS" starttime="20170809 01:09:41.276"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:41.372" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:41.372" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.372" status="PASS" starttime="20170809 01:09:41.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:41.374" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:41.374" status="PASS" starttime="20170809 01:09:41.374"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:41.375" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:41.376" status="PASS" starttime="20170809 01:09:41.375"></status>
</kw>
<status endtime="20170809 01:09:41.376" status="PASS" starttime="20170809 01:09:41.374"></status>
</kw>
<status endtime="20170809 01:09:41.376" status="PASS" starttime="20170809 01:09:41.373"></status>
</kw>
<status endtime="20170809 01:09:41.376" status="PASS" starttime="20170809 01:09:41.373"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:41.376" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:41.376" status="PASS" starttime="20170809 01:09:41.376"></status>
</kw>
<msg timestamp="20170809 01:09:41.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.377" status="PASS" starttime="20170809 01:09:41.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.377" status="PASS" starttime="20170809 01:09:41.377"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:41.378" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:41.378" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:41.378" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:41.378" status="PASS" starttime="20170809 01:09:41.377"></status>
</kw>
<msg timestamp="20170809 01:09:41.378" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:09:41.378" status="PASS" starttime="20170809 01:09:41.087"></status>
</kw>
<msg timestamp="20170809 01:09:41.379" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:09:41.379" status="PASS" starttime="20170809 01:09:41.086"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:09:41.379" status="PASS" starttime="20170809 01:09:41.379"></status>
</kw>
<status endtime="20170809 01:09:41.379" status="PASS" starttime="20170809 01:09:41.086"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:41.383" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:41.383" status="PASS" starttime="20170809 01:09:41.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:41.384" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:41.384" status="PASS" starttime="20170809 01:09:41.384"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:41.385" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:41.385" status="PASS" starttime="20170809 01:09:41.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:41.385" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:41.385" status="PASS" starttime="20170809 01:09:41.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.584" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:41.584" status="PASS" starttime="20170809 01:09:41.386"></status>
</kw>
<msg timestamp="20170809 01:09:41.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:41.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.584" status="PASS" starttime="20170809 01:09:41.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.585" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.585" status="PASS" starttime="20170809 01:09:41.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.586" status="PASS" starttime="20170809 01:09:41.585"></status>
</kw>
<status endtime="20170809 01:09:41.586" status="PASS" starttime="20170809 01:09:41.382"></status>
</kw>
<status endtime="20170809 01:09:41.586" status="PASS" starttime="20170809 01:09:41.382"></status>
</kw>
<status endtime="20170809 01:09:41.586" status="PASS" starttime="20170809 01:09:41.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:41.587" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:09:41.587" status="PASS" starttime="20170809 01:09:41.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:41.589" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:41.590" status="PASS" starttime="20170809 01:09:41.588"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:41.590" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:41.591" status="PASS" starttime="20170809 01:09:41.590"></status>
</kw>
<status endtime="20170809 01:09:41.591" status="PASS" starttime="20170809 01:09:41.590"></status>
</kw>
<status endtime="20170809 01:09:41.591" status="PASS" starttime="20170809 01:09:41.588"></status>
</kw>
<status endtime="20170809 01:09:41.591" status="PASS" starttime="20170809 01:09:41.587"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:41.680" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:41.680" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.680" status="PASS" starttime="20170809 01:09:41.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:41.682" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:41.682" status="PASS" starttime="20170809 01:09:41.681"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:41.683" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:41.683" status="PASS" starttime="20170809 01:09:41.682"></status>
</kw>
<status endtime="20170809 01:09:41.683" status="PASS" starttime="20170809 01:09:41.682"></status>
</kw>
<status endtime="20170809 01:09:41.683" status="PASS" starttime="20170809 01:09:41.681"></status>
</kw>
<status endtime="20170809 01:09:41.683" status="PASS" starttime="20170809 01:09:41.680"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:41.683" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:41.683" status="PASS" starttime="20170809 01:09:41.683"></status>
</kw>
<msg timestamp="20170809 01:09:41.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.684" status="PASS" starttime="20170809 01:09:41.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.684" status="PASS" starttime="20170809 01:09:41.684"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:41.685" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:41.685" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:41.685" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:41.685" status="PASS" starttime="20170809 01:09:41.685"></status>
</kw>
<msg timestamp="20170809 01:09:41.685" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:09:41.685" status="PASS" starttime="20170809 01:09:41.380"></status>
</kw>
<msg timestamp="20170809 01:09:41.686" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:09:41.686" status="PASS" starttime="20170809 01:09:41.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:09:41.686" status="PASS" starttime="20170809 01:09:41.686"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:41.690" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:41.691" status="PASS" starttime="20170809 01:09:41.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:41.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:41.691" status="PASS" starttime="20170809 01:09:41.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:41.692" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:41.692" status="PASS" starttime="20170809 01:09:41.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:41.693" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:41.693" status="PASS" starttime="20170809 01:09:41.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.908" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:41.908" status="PASS" starttime="20170809 01:09:41.693"></status>
</kw>
<msg timestamp="20170809 01:09:41.908" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:41.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.908" status="PASS" starttime="20170809 01:09:41.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.909" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.909" status="PASS" starttime="20170809 01:09:41.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.910" status="PASS" starttime="20170809 01:09:41.909"></status>
</kw>
<status endtime="20170809 01:09:41.910" status="PASS" starttime="20170809 01:09:41.689"></status>
</kw>
<status endtime="20170809 01:09:41.910" status="PASS" starttime="20170809 01:09:41.689"></status>
</kw>
<status endtime="20170809 01:09:41.910" status="PASS" starttime="20170809 01:09:41.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:41.911" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:09:41.911" status="PASS" starttime="20170809 01:09:41.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:41.913" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:41.913" status="PASS" starttime="20170809 01:09:41.912"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:41.914" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:41.914" status="PASS" starttime="20170809 01:09:41.913"></status>
</kw>
<status endtime="20170809 01:09:41.914" status="PASS" starttime="20170809 01:09:41.913"></status>
</kw>
<status endtime="20170809 01:09:41.914" status="PASS" starttime="20170809 01:09:41.911"></status>
</kw>
<status endtime="20170809 01:09:41.914" status="PASS" starttime="20170809 01:09:41.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:41.995" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:09:41.995" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.995" status="PASS" starttime="20170809 01:09:41.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:41.996" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:41.997" status="PASS" starttime="20170809 01:09:41.996"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:41.997" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:41.997" status="PASS" starttime="20170809 01:09:41.997"></status>
</kw>
<status endtime="20170809 01:09:41.998" status="PASS" starttime="20170809 01:09:41.997"></status>
</kw>
<status endtime="20170809 01:09:41.998" status="PASS" starttime="20170809 01:09:41.995"></status>
</kw>
<status endtime="20170809 01:09:41.998" status="PASS" starttime="20170809 01:09:41.995"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:41.998" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:41.998" status="PASS" starttime="20170809 01:09:41.998"></status>
</kw>
<msg timestamp="20170809 01:09:41.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:41.999" status="PASS" starttime="20170809 01:09:41.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:41.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:41.999" status="PASS" starttime="20170809 01:09:41.999"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:42.000" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:42.000" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:42.000" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:42.000" status="PASS" starttime="20170809 01:09:41.999"></status>
</kw>
<msg timestamp="20170809 01:09:42.001" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:42.001" status="PASS" starttime="20170809 01:09:41.687"></status>
</kw>
<msg timestamp="20170809 01:09:42.001" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:42.001" status="PASS" starttime="20170809 01:09:41.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:09:42.002" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:09:42.002" status="FAIL" starttime="20170809 01:09:42.002"></status>
</kw>
<status endtime="20170809 01:09:42.002" status="FAIL" starttime="20170809 01:09:41.686"></status>
</kw>
<status endtime="20170809 01:09:42.003" status="FAIL" starttime="20170809 01:09:41.085"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:52.008" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:52.009" status="PASS" starttime="20170809 01:09:52.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:52.009" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:52.009" status="PASS" starttime="20170809 01:09:52.009"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:52.010" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:52.010" status="PASS" starttime="20170809 01:09:52.010"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:52.011" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:52.011" status="PASS" starttime="20170809 01:09:52.010"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:52.218" status="PASS" starttime="20170809 01:09:52.011"></status>
</kw>
<msg timestamp="20170809 01:09:52.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:52.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.218" status="PASS" starttime="20170809 01:09:52.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.219" status="PASS" starttime="20170809 01:09:52.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.220" status="PASS" starttime="20170809 01:09:52.219"></status>
</kw>
<status endtime="20170809 01:09:52.220" status="PASS" starttime="20170809 01:09:52.007"></status>
</kw>
<status endtime="20170809 01:09:52.220" status="PASS" starttime="20170809 01:09:52.006"></status>
</kw>
<status endtime="20170809 01:09:52.220" status="PASS" starttime="20170809 01:09:52.006"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:52.221" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:09:52.221" status="PASS" starttime="20170809 01:09:52.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:52.223" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:52.223" status="PASS" starttime="20170809 01:09:52.222"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:52.224" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:52.224" status="PASS" starttime="20170809 01:09:52.224"></status>
</kw>
<status endtime="20170809 01:09:52.224" status="PASS" starttime="20170809 01:09:52.223"></status>
</kw>
<status endtime="20170809 01:09:52.224" status="PASS" starttime="20170809 01:09:52.222"></status>
</kw>
<status endtime="20170809 01:09:52.224" status="PASS" starttime="20170809 01:09:52.221"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:52.287" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:52.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.288" status="PASS" starttime="20170809 01:09:52.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:52.290" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:52.290" status="PASS" starttime="20170809 01:09:52.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:52.291" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:52.291" status="PASS" starttime="20170809 01:09:52.290"></status>
</kw>
<status endtime="20170809 01:09:52.291" status="PASS" starttime="20170809 01:09:52.290"></status>
</kw>
<status endtime="20170809 01:09:52.291" status="PASS" starttime="20170809 01:09:52.288"></status>
</kw>
<status endtime="20170809 01:09:52.291" status="PASS" starttime="20170809 01:09:52.288"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:52.291" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:52.292" status="PASS" starttime="20170809 01:09:52.291"></status>
</kw>
<msg timestamp="20170809 01:09:52.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.292" status="PASS" starttime="20170809 01:09:52.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.292" status="PASS" starttime="20170809 01:09:52.292"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:52.293" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:52.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:52.293" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:52.293" status="PASS" starttime="20170809 01:09:52.293"></status>
</kw>
<msg timestamp="20170809 01:09:52.293" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:09:52.294" status="PASS" starttime="20170809 01:09:52.005"></status>
</kw>
<msg timestamp="20170809 01:09:52.294" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:09:52.294" status="PASS" starttime="20170809 01:09:52.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:09:52.294" status="PASS" starttime="20170809 01:09:52.294"></status>
</kw>
<status endtime="20170809 01:09:52.294" status="PASS" starttime="20170809 01:09:52.004"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:52.298" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:52.298" status="PASS" starttime="20170809 01:09:52.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:52.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:52.299" status="PASS" starttime="20170809 01:09:52.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:52.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:52.300" status="PASS" starttime="20170809 01:09:52.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:52.300" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:52.300" status="PASS" starttime="20170809 01:09:52.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.480" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:52.480" status="PASS" starttime="20170809 01:09:52.301"></status>
</kw>
<msg timestamp="20170809 01:09:52.480" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:52.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.480" status="PASS" starttime="20170809 01:09:52.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.481" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.481" status="PASS" starttime="20170809 01:09:52.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.481" status="PASS" starttime="20170809 01:09:52.481"></status>
</kw>
<status endtime="20170809 01:09:52.482" status="PASS" starttime="20170809 01:09:52.297"></status>
</kw>
<status endtime="20170809 01:09:52.482" status="PASS" starttime="20170809 01:09:52.297"></status>
</kw>
<status endtime="20170809 01:09:52.482" status="PASS" starttime="20170809 01:09:52.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:52.482" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:09:52.482" status="PASS" starttime="20170809 01:09:52.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:52.485" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:52.485" status="PASS" starttime="20170809 01:09:52.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:52.486" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:09:52.486" status="PASS" starttime="20170809 01:09:52.486"></status>
</kw>
<status endtime="20170809 01:09:52.486" status="PASS" starttime="20170809 01:09:52.485"></status>
</kw>
<status endtime="20170809 01:09:52.486" status="PASS" starttime="20170809 01:09:52.483"></status>
</kw>
<status endtime="20170809 01:09:52.486" status="PASS" starttime="20170809 01:09:52.483"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:52.577" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:09:52.578" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.578" status="PASS" starttime="20170809 01:09:52.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:52.579" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:52.579" status="PASS" starttime="20170809 01:09:52.579"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:52.580" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:52.580" status="PASS" starttime="20170809 01:09:52.580"></status>
</kw>
<status endtime="20170809 01:09:52.580" status="PASS" starttime="20170809 01:09:52.580"></status>
</kw>
<status endtime="20170809 01:09:52.581" status="PASS" starttime="20170809 01:09:52.578"></status>
</kw>
<status endtime="20170809 01:09:52.581" status="PASS" starttime="20170809 01:09:52.578"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:52.581" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:52.581" status="PASS" starttime="20170809 01:09:52.581"></status>
</kw>
<msg timestamp="20170809 01:09:52.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.581" status="PASS" starttime="20170809 01:09:52.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.582" status="PASS" starttime="20170809 01:09:52.582"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:52.583" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:52.583" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:52.583" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:52.583" status="PASS" starttime="20170809 01:09:52.582"></status>
</kw>
<msg timestamp="20170809 01:09:52.583" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:09:52.583" status="PASS" starttime="20170809 01:09:52.295"></status>
</kw>
<msg timestamp="20170809 01:09:52.583" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:09:52.583" status="PASS" starttime="20170809 01:09:52.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:09:52.584" status="PASS" starttime="20170809 01:09:52.584"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:09:52.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:09:52.588" status="PASS" starttime="20170809 01:09:52.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:09:52.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:09:52.589" status="PASS" starttime="20170809 01:09:52.588"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:09:52.589" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:09:52.589" status="PASS" starttime="20170809 01:09:52.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:09:52.590" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:09:52.590" status="PASS" starttime="20170809 01:09:52.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.794" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:09:52.794" status="PASS" starttime="20170809 01:09:52.591"></status>
</kw>
<msg timestamp="20170809 01:09:52.794" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:09:52.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.794" status="PASS" starttime="20170809 01:09:52.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.795" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.795" status="PASS" starttime="20170809 01:09:52.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.796" status="PASS" starttime="20170809 01:09:52.795"></status>
</kw>
<status endtime="20170809 01:09:52.796" status="PASS" starttime="20170809 01:09:52.587"></status>
</kw>
<status endtime="20170809 01:09:52.796" status="PASS" starttime="20170809 01:09:52.586"></status>
</kw>
<status endtime="20170809 01:09:52.796" status="PASS" starttime="20170809 01:09:52.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:09:52.796" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:09:52.797" status="PASS" starttime="20170809 01:09:52.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:52.799" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:52.799" status="PASS" starttime="20170809 01:09:52.798"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:52.800" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:09:52.800" status="PASS" starttime="20170809 01:09:52.799"></status>
</kw>
<status endtime="20170809 01:09:52.800" status="PASS" starttime="20170809 01:09:52.799"></status>
</kw>
<status endtime="20170809 01:09:52.800" status="PASS" starttime="20170809 01:09:52.797"></status>
</kw>
<status endtime="20170809 01:09:52.800" status="PASS" starttime="20170809 01:09:52.797"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:09:52.913" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:09:52.913" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.913" status="PASS" starttime="20170809 01:09:52.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:09:52.915" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:52.915" status="PASS" starttime="20170809 01:09:52.914"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:09:52.915" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:09:52.916" status="PASS" starttime="20170809 01:09:52.915"></status>
</kw>
<status endtime="20170809 01:09:52.916" status="PASS" starttime="20170809 01:09:52.915"></status>
</kw>
<status endtime="20170809 01:09:52.916" status="PASS" starttime="20170809 01:09:52.913"></status>
</kw>
<status endtime="20170809 01:09:52.916" status="PASS" starttime="20170809 01:09:52.913"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:09:52.916" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:09:52.916" status="PASS" starttime="20170809 01:09:52.916"></status>
</kw>
<msg timestamp="20170809 01:09:52.917" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:09:52.917" status="PASS" starttime="20170809 01:09:52.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:09:52.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:09:52.917" status="PASS" starttime="20170809 01:09:52.917"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:09:52.918" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:09:52.918" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:09:52.918" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:09:52.918" status="PASS" starttime="20170809 01:09:52.918"></status>
</kw>
<msg timestamp="20170809 01:09:52.919" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:52.919" status="PASS" starttime="20170809 01:09:52.585"></status>
</kw>
<msg timestamp="20170809 01:09:52.919" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:09:52.919" status="PASS" starttime="20170809 01:09:52.584"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:09:52.920" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:09:52.920" status="FAIL" starttime="20170809 01:09:52.919"></status>
</kw>
<status endtime="20170809 01:09:52.920" status="FAIL" starttime="20170809 01:09:52.584"></status>
</kw>
<status endtime="20170809 01:09:52.921" status="FAIL" starttime="20170809 01:09:52.003"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:02.926" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:02.927" status="PASS" starttime="20170809 01:10:02.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:02.927" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:02.927" status="PASS" starttime="20170809 01:10:02.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:02.928" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:02.928" status="PASS" starttime="20170809 01:10:02.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:02.928" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:02.928" status="PASS" starttime="20170809 01:10:02.928"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.108" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:03.108" status="PASS" starttime="20170809 01:10:02.929"></status>
</kw>
<msg timestamp="20170809 01:10:03.108" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:03.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:03.108" status="PASS" starttime="20170809 01:10:02.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.109" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.109" status="PASS" starttime="20170809 01:10:03.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.109" status="PASS" starttime="20170809 01:10:03.109"></status>
</kw>
<status endtime="20170809 01:10:03.110" status="PASS" starttime="20170809 01:10:02.925"></status>
</kw>
<status endtime="20170809 01:10:03.110" status="PASS" starttime="20170809 01:10:02.924"></status>
</kw>
<status endtime="20170809 01:10:03.110" status="PASS" starttime="20170809 01:10:02.924"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:03.110" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:10:03.110" status="PASS" starttime="20170809 01:10:03.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:03.113" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:03.113" status="PASS" starttime="20170809 01:10:03.112"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:03.113" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:03.114" status="PASS" starttime="20170809 01:10:03.113"></status>
</kw>
<status endtime="20170809 01:10:03.114" status="PASS" starttime="20170809 01:10:03.113"></status>
</kw>
<status endtime="20170809 01:10:03.114" status="PASS" starttime="20170809 01:10:03.111"></status>
</kw>
<status endtime="20170809 01:10:03.114" status="PASS" starttime="20170809 01:10:03.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:03.305" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:10:03.305" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:03.305" status="PASS" starttime="20170809 01:10:03.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:03.310" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:03.310" status="PASS" starttime="20170809 01:10:03.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:03.311" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:03.312" status="PASS" starttime="20170809 01:10:03.311"></status>
</kw>
<status endtime="20170809 01:10:03.312" status="PASS" starttime="20170809 01:10:03.311"></status>
</kw>
<status endtime="20170809 01:10:03.312" status="PASS" starttime="20170809 01:10:03.306"></status>
</kw>
<status endtime="20170809 01:10:03.312" status="PASS" starttime="20170809 01:10:03.306"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:03.312" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:03.312" status="PASS" starttime="20170809 01:10:03.312"></status>
</kw>
<msg timestamp="20170809 01:10:03.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:03.313" status="PASS" starttime="20170809 01:10:02.923"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.313" status="PASS" starttime="20170809 01:10:03.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:03.314" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:03.314" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:03.314" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:10:03.314" status="PASS" starttime="20170809 01:10:03.313"></status>
</kw>
<msg timestamp="20170809 01:10:03.314" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:10:03.314" status="PASS" starttime="20170809 01:10:02.922"></status>
</kw>
<msg timestamp="20170809 01:10:03.315" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:10:03.315" status="PASS" starttime="20170809 01:10:02.922"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:10:03.315" status="PASS" starttime="20170809 01:10:03.315"></status>
</kw>
<status endtime="20170809 01:10:03.315" status="PASS" starttime="20170809 01:10:02.922"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:03.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:03.320" status="PASS" starttime="20170809 01:10:03.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:03.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:03.320" status="PASS" starttime="20170809 01:10:03.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:03.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:03.321" status="PASS" starttime="20170809 01:10:03.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:03.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:03.322" status="PASS" starttime="20170809 01:10:03.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.533" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:03.533" status="PASS" starttime="20170809 01:10:03.322"></status>
</kw>
<msg timestamp="20170809 01:10:03.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:03.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:03.534" status="PASS" starttime="20170809 01:10:03.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.534" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.534" status="PASS" starttime="20170809 01:10:03.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.535" status="PASS" starttime="20170809 01:10:03.535"></status>
</kw>
<status endtime="20170809 01:10:03.535" status="PASS" starttime="20170809 01:10:03.318"></status>
</kw>
<status endtime="20170809 01:10:03.535" status="PASS" starttime="20170809 01:10:03.318"></status>
</kw>
<status endtime="20170809 01:10:03.535" status="PASS" starttime="20170809 01:10:03.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:03.536" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:10:03.536" status="PASS" starttime="20170809 01:10:03.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:03.539" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:03.539" status="PASS" starttime="20170809 01:10:03.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:03.541" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:03.541" status="PASS" starttime="20170809 01:10:03.540"></status>
</kw>
<status endtime="20170809 01:10:03.541" status="PASS" starttime="20170809 01:10:03.539"></status>
</kw>
<status endtime="20170809 01:10:03.541" status="PASS" starttime="20170809 01:10:03.537"></status>
</kw>
<status endtime="20170809 01:10:03.541" status="PASS" starttime="20170809 01:10:03.536"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:03.684" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:10:03.684" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:03.684" status="PASS" starttime="20170809 01:10:03.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:03.686" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:03.686" status="PASS" starttime="20170809 01:10:03.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:03.687" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:03.687" status="PASS" starttime="20170809 01:10:03.687"></status>
</kw>
<status endtime="20170809 01:10:03.687" status="PASS" starttime="20170809 01:10:03.686"></status>
</kw>
<status endtime="20170809 01:10:03.687" status="PASS" starttime="20170809 01:10:03.685"></status>
</kw>
<status endtime="20170809 01:10:03.687" status="PASS" starttime="20170809 01:10:03.684"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:03.688" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:03.688" status="PASS" starttime="20170809 01:10:03.688"></status>
</kw>
<msg timestamp="20170809 01:10:03.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:03.688" status="PASS" starttime="20170809 01:10:03.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.689" status="PASS" starttime="20170809 01:10:03.688"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:03.689" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:03.689" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:03.689" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:10:03.689" status="PASS" starttime="20170809 01:10:03.689"></status>
</kw>
<msg timestamp="20170809 01:10:03.690" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:10:03.690" status="PASS" starttime="20170809 01:10:03.316"></status>
</kw>
<msg timestamp="20170809 01:10:03.690" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:10:03.690" status="PASS" starttime="20170809 01:10:03.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:10:03.691" status="PASS" starttime="20170809 01:10:03.690"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:03.694" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:03.695" status="PASS" starttime="20170809 01:10:03.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:03.695" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:03.695" status="PASS" starttime="20170809 01:10:03.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:03.696" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:03.696" status="PASS" starttime="20170809 01:10:03.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:03.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:03.697" status="PASS" starttime="20170809 01:10:03.696"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:03.973" status="PASS" starttime="20170809 01:10:03.697"></status>
</kw>
<msg timestamp="20170809 01:10:03.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:03.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:03.973" status="PASS" starttime="20170809 01:10:03.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.974" status="PASS" starttime="20170809 01:10:03.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:03.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:03.975" status="PASS" starttime="20170809 01:10:03.974"></status>
</kw>
<status endtime="20170809 01:10:03.975" status="PASS" starttime="20170809 01:10:03.694"></status>
</kw>
<status endtime="20170809 01:10:03.975" status="PASS" starttime="20170809 01:10:03.693"></status>
</kw>
<status endtime="20170809 01:10:03.975" status="PASS" starttime="20170809 01:10:03.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:03.976" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:10:03.976" status="PASS" starttime="20170809 01:10:03.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:03.978" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:10:03.978" status="PASS" starttime="20170809 01:10:03.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:03.978" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:10:03.979" status="PASS" starttime="20170809 01:10:03.978"></status>
</kw>
<status endtime="20170809 01:10:03.979" status="PASS" starttime="20170809 01:10:03.978"></status>
</kw>
<status endtime="20170809 01:10:03.979" status="PASS" starttime="20170809 01:10:03.976"></status>
</kw>
<status endtime="20170809 01:10:03.979" status="PASS" starttime="20170809 01:10:03.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:04.046" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:10:04.046" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:04.046" status="PASS" starttime="20170809 01:10:03.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:04.048" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:04.048" status="PASS" starttime="20170809 01:10:04.047"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:04.049" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:04.049" status="PASS" starttime="20170809 01:10:04.048"></status>
</kw>
<status endtime="20170809 01:10:04.049" status="PASS" starttime="20170809 01:10:04.048"></status>
</kw>
<status endtime="20170809 01:10:04.049" status="PASS" starttime="20170809 01:10:04.047"></status>
</kw>
<status endtime="20170809 01:10:04.049" status="PASS" starttime="20170809 01:10:04.046"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:04.049" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:04.049" status="PASS" starttime="20170809 01:10:04.049"></status>
</kw>
<msg timestamp="20170809 01:10:04.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:04.050" status="PASS" starttime="20170809 01:10:03.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:04.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:04.050" status="PASS" starttime="20170809 01:10:04.050"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:04.051" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:04.051" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:04.051" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:10:04.051" status="PASS" starttime="20170809 01:10:04.051"></status>
</kw>
<msg timestamp="20170809 01:10:04.051" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:10:04.051" status="PASS" starttime="20170809 01:10:03.691"></status>
</kw>
<msg timestamp="20170809 01:10:04.052" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:10:04.052" status="PASS" starttime="20170809 01:10:03.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:10:04.053" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:10:04.053" status="FAIL" starttime="20170809 01:10:04.052"></status>
</kw>
<status endtime="20170809 01:10:04.053" status="FAIL" starttime="20170809 01:10:03.691"></status>
</kw>
<status endtime="20170809 01:10:04.053" status="FAIL" starttime="20170809 01:10:02.921"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:14.060" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:14.060" status="PASS" starttime="20170809 01:10:14.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:14.061" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:14.061" status="PASS" starttime="20170809 01:10:14.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:14.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:14.062" status="PASS" starttime="20170809 01:10:14.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:14.063" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:14.063" status="PASS" starttime="20170809 01:10:14.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.258" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:14.258" status="PASS" starttime="20170809 01:10:14.064"></status>
</kw>
<msg timestamp="20170809 01:10:14.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:14.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:14.258" status="PASS" starttime="20170809 01:10:14.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.259" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.259" status="PASS" starttime="20170809 01:10:14.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.260" status="PASS" starttime="20170809 01:10:14.259"></status>
</kw>
<status endtime="20170809 01:10:14.260" status="PASS" starttime="20170809 01:10:14.058"></status>
</kw>
<status endtime="20170809 01:10:14.260" status="PASS" starttime="20170809 01:10:14.057"></status>
</kw>
<status endtime="20170809 01:10:14.260" status="PASS" starttime="20170809 01:10:14.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:14.261" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 01:10:14.261" status="PASS" starttime="20170809 01:10:14.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:14.263" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:14.263" status="PASS" starttime="20170809 01:10:14.262"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:14.264" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:14.264" status="PASS" starttime="20170809 01:10:14.264"></status>
</kw>
<status endtime="20170809 01:10:14.264" status="PASS" starttime="20170809 01:10:14.263"></status>
</kw>
<status endtime="20170809 01:10:14.264" status="PASS" starttime="20170809 01:10:14.262"></status>
</kw>
<status endtime="20170809 01:10:14.264" status="PASS" starttime="20170809 01:10:14.261"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:14.328" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170809 01:10:14.328" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:14.328" status="PASS" starttime="20170809 01:10:14.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:14.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:14.331" status="PASS" starttime="20170809 01:10:14.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:14.331" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:14.332" status="PASS" starttime="20170809 01:10:14.331"></status>
</kw>
<status endtime="20170809 01:10:14.332" status="PASS" starttime="20170809 01:10:14.331"></status>
</kw>
<status endtime="20170809 01:10:14.332" status="PASS" starttime="20170809 01:10:14.329"></status>
</kw>
<status endtime="20170809 01:10:14.332" status="PASS" starttime="20170809 01:10:14.329"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:14.332" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:14.332" status="PASS" starttime="20170809 01:10:14.332"></status>
</kw>
<msg timestamp="20170809 01:10:14.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:14.333" status="PASS" starttime="20170809 01:10:14.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.333" status="PASS" starttime="20170809 01:10:14.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:14.334" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:14.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:14.334" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok'}</msg>
<status endtime="20170809 01:10:14.334" status="PASS" starttime="20170809 01:10:14.333"></status>
</kw>
<msg timestamp="20170809 01:10:14.334" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 01:10:14.334" status="PASS" starttime="20170809 01:10:14.055"></status>
</kw>
<msg timestamp="20170809 01:10:14.335" level="INFO">${power_state} = On</msg>
<status endtime="20170809 01:10:14.335" status="PASS" starttime="20170809 01:10:14.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 01:10:14.335" status="PASS" starttime="20170809 01:10:14.335"></status>
</kw>
<status endtime="20170809 01:10:14.335" status="PASS" starttime="20170809 01:10:14.054"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:14.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:14.339" status="PASS" starttime="20170809 01:10:14.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:14.340" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:14.340" status="PASS" starttime="20170809 01:10:14.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:14.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:14.341" status="PASS" starttime="20170809 01:10:14.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:14.341" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:14.341" status="PASS" starttime="20170809 01:10:14.341"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:14.673" status="PASS" starttime="20170809 01:10:14.342"></status>
</kw>
<msg timestamp="20170809 01:10:14.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:14.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:14.673" status="PASS" starttime="20170809 01:10:14.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.674" status="PASS" starttime="20170809 01:10:14.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.675" status="PASS" starttime="20170809 01:10:14.674"></status>
</kw>
<status endtime="20170809 01:10:14.675" status="PASS" starttime="20170809 01:10:14.338"></status>
</kw>
<status endtime="20170809 01:10:14.675" status="PASS" starttime="20170809 01:10:14.338"></status>
</kw>
<status endtime="20170809 01:10:14.675" status="PASS" starttime="20170809 01:10:14.337"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:14.675" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:10:14.676" status="PASS" starttime="20170809 01:10:14.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:14.678" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:14.678" status="PASS" starttime="20170809 01:10:14.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:14.679" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:14.679" status="PASS" starttime="20170809 01:10:14.679"></status>
</kw>
<status endtime="20170809 01:10:14.679" status="PASS" starttime="20170809 01:10:14.678"></status>
</kw>
<status endtime="20170809 01:10:14.679" status="PASS" starttime="20170809 01:10:14.676"></status>
</kw>
<status endtime="20170809 01:10:14.679" status="PASS" starttime="20170809 01:10:14.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:14.770" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:10:14.770" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:14.770" status="PASS" starttime="20170809 01:10:14.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:14.772" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:14.772" status="PASS" starttime="20170809 01:10:14.771"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:14.773" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:14.773" status="PASS" starttime="20170809 01:10:14.772"></status>
</kw>
<status endtime="20170809 01:10:14.773" status="PASS" starttime="20170809 01:10:14.772"></status>
</kw>
<status endtime="20170809 01:10:14.773" status="PASS" starttime="20170809 01:10:14.771"></status>
</kw>
<status endtime="20170809 01:10:14.773" status="PASS" starttime="20170809 01:10:14.770"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:14.774" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:14.774" status="PASS" starttime="20170809 01:10:14.773"></status>
</kw>
<msg timestamp="20170809 01:10:14.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:14.774" status="PASS" starttime="20170809 01:10:14.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.775" status="PASS" starttime="20170809 01:10:14.774"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:14.775" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:14.775" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:14.775" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:10:14.775" status="PASS" starttime="20170809 01:10:14.775"></status>
</kw>
<msg timestamp="20170809 01:10:14.775" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:10:14.776" status="PASS" starttime="20170809 01:10:14.336"></status>
</kw>
<msg timestamp="20170809 01:10:14.776" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:10:14.776" status="PASS" starttime="20170809 01:10:14.335"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 01:10:14.777" status="PASS" starttime="20170809 01:10:14.776"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:14.780" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:14.781" status="PASS" starttime="20170809 01:10:14.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:14.781" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:14.781" status="PASS" starttime="20170809 01:10:14.781"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:14.782" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:14.782" status="PASS" starttime="20170809 01:10:14.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:14.783" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:14.783" status="PASS" starttime="20170809 01:10:14.782"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.984" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:14.984" status="PASS" starttime="20170809 01:10:14.783"></status>
</kw>
<msg timestamp="20170809 01:10:14.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:14.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:14.984" status="PASS" starttime="20170809 01:10:14.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.985" status="PASS" starttime="20170809 01:10:14.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:14.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:14.986" status="PASS" starttime="20170809 01:10:14.985"></status>
</kw>
<status endtime="20170809 01:10:14.986" status="PASS" starttime="20170809 01:10:14.780"></status>
</kw>
<status endtime="20170809 01:10:14.986" status="PASS" starttime="20170809 01:10:14.779"></status>
</kw>
<status endtime="20170809 01:10:14.986" status="PASS" starttime="20170809 01:10:14.779"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:14.987" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 01:10:14.987" status="PASS" starttime="20170809 01:10:14.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:14.989" level="INFO">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:10:14.989" status="PASS" starttime="20170809 01:10:14.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:14.990" level="INFO">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 01:10:14.990" status="PASS" starttime="20170809 01:10:14.990"></status>
</kw>
<status endtime="20170809 01:10:14.990" status="PASS" starttime="20170809 01:10:14.989"></status>
</kw>
<status endtime="20170809 01:10:14.991" status="PASS" starttime="20170809 01:10:14.988"></status>
</kw>
<status endtime="20170809 01:10:14.991" status="PASS" starttime="20170809 01:10:14.987"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:15.058" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170809 01:10:15.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:15.058" status="PASS" starttime="20170809 01:10:14.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:15.060" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:15.060" status="PASS" starttime="20170809 01:10:15.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:15.061" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:15.061" status="PASS" starttime="20170809 01:10:15.061"></status>
</kw>
<status endtime="20170809 01:10:15.061" status="PASS" starttime="20170809 01:10:15.060"></status>
</kw>
<status endtime="20170809 01:10:15.061" status="PASS" starttime="20170809 01:10:15.059"></status>
</kw>
<status endtime="20170809 01:10:15.061" status="PASS" starttime="20170809 01:10:15.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:15.062" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:15.062" status="PASS" starttime="20170809 01:10:15.062"></status>
</kw>
<msg timestamp="20170809 01:10:15.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:15.062" status="PASS" starttime="20170809 01:10:14.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:15.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:15.063" status="PASS" starttime="20170809 01:10:15.062"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:15.063" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:15.063" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:15.063" level="INFO">${content} = {u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init', u'status': u'ok'}</msg>
<status endtime="20170809 01:10:15.063" status="PASS" starttime="20170809 01:10:15.063"></status>
</kw>
<msg timestamp="20170809 01:10:15.064" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:10:15.064" status="PASS" starttime="20170809 01:10:14.777"></status>
</kw>
<msg timestamp="20170809 01:10:15.064" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 01:10:15.064" status="PASS" starttime="20170809 01:10:14.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170809 01:10:15.065" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:10:15.065" status="FAIL" starttime="20170809 01:10:15.064"></status>
</kw>
<status endtime="20170809 01:10:15.065" status="FAIL" starttime="20170809 01:10:14.777"></status>
</kw>
<status endtime="20170809 01:10:15.065" status="FAIL" starttime="20170809 01:10:14.053"></status>
</kw>
<msg timestamp="20170809 01:10:15.065" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 01:10:15.065" status="FAIL" starttime="20170809 01:00:06.482"></status>
</kw>
<status endtime="20170809 01:10:15.065" status="FAIL" starttime="20170809 01:00:05.155"></status>
</kw>
<status endtime="20170809 01:10:15.066" status="FAIL" starttime="20170809 00:59:57.668"></status>
</kw>
<status endtime="20170809 01:10:15.066" status="FAIL" starttime="20170809 00:59:57.668"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:15.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:15.074" status="PASS" starttime="20170809 01:10:15.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:15.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:15.074" status="PASS" starttime="20170809 01:10:15.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:15.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:15.076" status="PASS" starttime="20170809 01:10:15.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:15.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:15.076" status="PASS" starttime="20170809 01:10:15.076"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:15.260" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:15.261" status="PASS" starttime="20170809 01:10:15.077"></status>
</kw>
<msg timestamp="20170809 01:10:15.261" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:15.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:15.261" status="PASS" starttime="20170809 01:10:15.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:15.261" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:15.262" status="PASS" starttime="20170809 01:10:15.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:15.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:15.262" status="PASS" starttime="20170809 01:10:15.262"></status>
</kw>
<status endtime="20170809 01:10:15.262" status="PASS" starttime="20170809 01:10:15.071"></status>
</kw>
<status endtime="20170809 01:10:15.262" status="PASS" starttime="20170809 01:10:15.071"></status>
</kw>
<status endtime="20170809 01:10:15.263" status="PASS" starttime="20170809 01:10:15.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:15.263" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 01:10:15.263" status="PASS" starttime="20170809 01:10:15.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:15.265" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:15.265" status="PASS" starttime="20170809 01:10:15.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:15.266" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 01:10:15.266" status="PASS" starttime="20170809 01:10:15.266"></status>
</kw>
<status endtime="20170809 01:10:15.266" status="PASS" starttime="20170809 01:10:15.265"></status>
</kw>
<status endtime="20170809 01:10:15.267" status="PASS" starttime="20170809 01:10:15.264"></status>
</kw>
<status endtime="20170809 01:10:15.267" status="PASS" starttime="20170809 01:10:15.263"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:15.355" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 01:10:15.356" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:15.356" status="PASS" starttime="20170809 01:10:15.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 01:10:15.357" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:15.357" status="PASS" starttime="20170809 01:10:15.357"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 01:10:15.359" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 01:10:15.359" status="PASS" starttime="20170809 01:10:15.358"></status>
</kw>
<status endtime="20170809 01:10:15.359" status="PASS" starttime="20170809 01:10:15.358"></status>
</kw>
<status endtime="20170809 01:10:15.359" status="PASS" starttime="20170809 01:10:15.356"></status>
</kw>
<status endtime="20170809 01:10:15.359" status="PASS" starttime="20170809 01:10:15.356"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:15.360" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:15.360" status="PASS" starttime="20170809 01:10:15.359"></status>
</kw>
<msg timestamp="20170809 01:10:15.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:15.360" status="PASS" starttime="20170809 01:10:15.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:15.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:15.361" status="PASS" starttime="20170809 01:10:15.360"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:15.361" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:15.362" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:15.362" level="INFO">${content} = {u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok'}</msg>
<status endtime="20170809 01:10:15.362" status="PASS" starttime="20170809 01:10:15.361"></status>
</kw>
<msg timestamp="20170809 01:10:15.362" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 01:10:15.362" status="PASS" starttime="20170809 01:10:15.068"></status>
</kw>
<msg timestamp="20170809 01:10:15.362" level="INFO">${host_state} = Running</msg>
<status endtime="20170809 01:10:15.362" status="PASS" starttime="20170809 01:10:15.067"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170809 01:10:15.363" level="FAIL">Running != Quiesced</msg>
<status endtime="20170809 01:10:15.363" status="FAIL" starttime="20170809 01:10:15.363"></status>
</kw>
<msg timestamp="20170809 01:10:15.364" level="INFO">${status} = False</msg>
<status endtime="20170809 01:10:15.364" status="PASS" starttime="20170809 01:10:15.363"></status>
</kw>
<msg timestamp="20170809 01:10:15.364" level="INFO">${status} = False</msg>
<status endtime="20170809 01:10:15.364" status="PASS" starttime="20170809 01:10:15.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 01:10:15.397" level="INFO">Length is 10</msg>
<status endtime="20170809 01:10:15.397" status="PASS" starttime="20170809 01:10:15.397"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 01:10:15.404" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 01:10:18.411" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 01:10:18.411" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.58 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.768 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status endtime="20170809 01:10:18.411" status="PASS" starttime="20170809 01:10:15.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.414" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.58 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.768 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.779 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.658 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.658/0.948/1.589/0.374 ms</msg>
<status endtime="20170809 01:10:18.414" status="PASS" starttime="20170809 01:10:18.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170809 01:10:18.415" status="PASS" starttime="20170809 01:10:18.415"></status>
</kw>
<status endtime="20170809 01:10:18.415" status="PASS" starttime="20170809 01:10:15.396"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 01:10:18.433" level="INFO">${cur_time} = 2017-08-09 01:10:18:432962</msg>
<status endtime="20170809 01:10:18.433" status="PASS" starttime="20170809 01:10:18.433"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 01:10:18.434" level="INFO">${cur_time} = 20170809011018432962</msg>
<status endtime="20170809 01:10:18.434" status="PASS" starttime="20170809 01:10:18.433"></status>
</kw>
<status endtime="20170809 01:10:18.434" status="PASS" starttime="20170809 01:10:18.432"></status>
</kw>
<msg timestamp="20170809 01:10:18.434" level="INFO">${FFDC_TIME} = 20170809011018432962</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 01:10:18.445" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170809 01:10:18.445" status="PASS" starttime="20170809 01:10:18.444"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 01:10:18.445" level="INFO">${suite_name} = 20170809011018432962_TestsTestBasicPoweron</msg>
<status endtime="20170809 01:10:18.445" status="PASS" starttime="20170809 01:10:18.445"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 01:10:18.446" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170809 01:10:18.446" status="PASS" starttime="20170809 01:10:18.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 01:10:18.447" level="INFO">${test_name} = 20170809011018432962_PowerOnTest</msg>
<status endtime="20170809 01:10:18.447" status="PASS" starttime="20170809 01:10:18.446"></status>
</kw>
<status endtime="20170809 01:10:18.447" status="PASS" starttime="20170809 01:10:18.444"></status>
</kw>
<msg timestamp="20170809 01:10:18.447" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/</msg>
<msg timestamp="20170809 01:10:18.447" level="INFO">${FFDC_PREFIX} = 20170809011018432962_</msg>
<msg timestamp="20170809 01:10:18.479" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170809 01:10:18.480" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.480" status="PASS" starttime="20170809 01:10:18.480"></status>
</kw>
<msg timestamp="20170809 01:10:18.487" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.517" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.517" status="PASS" starttime="20170809 01:10:18.516"></status>
</kw>
<status endtime="20170809 01:10:18.517" status="PASS" starttime="20170809 01:10:18.516"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.518" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.518" status="PASS" starttime="20170809 01:10:18.518"></status>
</kw>
<status endtime="20170809 01:10:18.518" status="PASS" starttime="20170809 01:10:18.517"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.520" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.520" status="PASS" starttime="20170809 01:10:18.519"></status>
</kw>
<status endtime="20170809 01:10:18.520" status="PASS" starttime="20170809 01:10:18.519"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.521" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.521" status="PASS" starttime="20170809 01:10:18.521"></status>
</kw>
<status endtime="20170809 01:10:18.521" status="PASS" starttime="20170809 01:10:18.520"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.522" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.522" status="PASS" starttime="20170809 01:10:18.522"></status>
</kw>
<status endtime="20170809 01:10:18.523" status="PASS" starttime="20170809 01:10:18.521"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.524" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.524" status="PASS" starttime="20170809 01:10:18.523"></status>
</kw>
<status endtime="20170809 01:10:18.524" status="PASS" starttime="20170809 01:10:18.523"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.530" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.530" status="PASS" starttime="20170809 01:10:18.529"></status>
</kw>
<status endtime="20170809 01:10:18.530" status="PASS" starttime="20170809 01:10:18.528"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.531" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.531" status="PASS" starttime="20170809 01:10:18.531"></status>
</kw>
<status endtime="20170809 01:10:18.532" status="PASS" starttime="20170809 01:10:18.530"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.533" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.533" status="PASS" starttime="20170809 01:10:18.532"></status>
</kw>
<status endtime="20170809 01:10:18.533" status="PASS" starttime="20170809 01:10:18.532"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.534" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.534" status="PASS" starttime="20170809 01:10:18.534"></status>
</kw>
<status endtime="20170809 01:10:18.535" status="PASS" starttime="20170809 01:10:18.533"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.536" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.536" status="PASS" starttime="20170809 01:10:18.535"></status>
</kw>
<status endtime="20170809 01:10:18.536" status="PASS" starttime="20170809 01:10:18.535"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.537" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.537" status="PASS" starttime="20170809 01:10:18.537"></status>
</kw>
<status endtime="20170809 01:10:18.537" status="PASS" starttime="20170809 01:10:18.536"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.538" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.538" status="PASS" starttime="20170809 01:10:18.538"></status>
</kw>
<status endtime="20170809 01:10:18.538" status="PASS" starttime="20170809 01:10:18.537"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 01:10:18.581" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:18.582" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170809 01:10:18.652" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 01:10:18.667" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170809 01:10:18.667" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 01:10:18.667" level="INFO">${rc} = 0</msg>
<status endtime="20170809 01:10:18.667" status="PASS" starttime="20170809 01:10:18.539"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.668" level="INFO">Length is 0</msg>
<status endtime="20170809 01:10:18.668" status="PASS" starttime="20170809 01:10:18.668"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.669" level="INFO">Length is 11</msg>
<status endtime="20170809 01:10:18.669" status="PASS" starttime="20170809 01:10:18.668"></status>
</kw>
<msg timestamp="20170809 01:10:18.669" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170809 01:10:18.669" status="PASS" starttime="20170809 01:10:18.539"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.670" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.670" status="PASS" starttime="20170809 01:10:18.670"></status>
</kw>
<status endtime="20170809 01:10:18.670" status="PASS" starttime="20170809 01:10:18.669"></status>
</kw>
<status endtime="20170809 01:10:18.670" status="PASS" starttime="20170809 01:10:18.533"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.672" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.672" status="PASS" starttime="20170809 01:10:18.671"></status>
</kw>
<status endtime="20170809 01:10:18.672" status="PASS" starttime="20170809 01:10:18.671"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 01:10:18.673" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170809 01:10:18.674" status="PASS" starttime="20170809 01:10:18.673"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.680" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.680" status="PASS" starttime="20170809 01:10:18.679"></status>
</kw>
<status endtime="20170809 01:10:18.682" status="PASS" starttime="20170809 01:10:18.674"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.683" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.684" status="PASS" starttime="20170809 01:10:18.683"></status>
</kw>
<status endtime="20170809 01:10:18.684" status="PASS" starttime="20170809 01:10:18.682"></status>
</kw>
<status endtime="20170809 01:10:18.684" status="PASS" starttime="20170809 01:10:18.674"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.685" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.685" status="PASS" starttime="20170809 01:10:18.685"></status>
</kw>
<status endtime="20170809 01:10:18.685" status="PASS" starttime="20170809 01:10:18.684"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.687" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.687" status="PASS" starttime="20170809 01:10:18.686"></status>
</kw>
<status endtime="20170809 01:10:18.687" status="PASS" starttime="20170809 01:10:18.686"></status>
</kw>
<status endtime="20170809 01:10:18.687" status="PASS" starttime="20170809 01:10:18.684"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.688" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.688" status="PASS" starttime="20170809 01:10:18.688"></status>
</kw>
<status endtime="20170809 01:10:18.689" status="PASS" starttime="20170809 01:10:18.687"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.690" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.690" status="PASS" starttime="20170809 01:10:18.689"></status>
</kw>
<status endtime="20170809 01:10:18.690" status="PASS" starttime="20170809 01:10:18.689"></status>
</kw>
<status endtime="20170809 01:10:18.690" status="PASS" starttime="20170809 01:10:18.687"></status>
</kw>
<status endtime="20170809 01:10:18.690" status="PASS" starttime="20170809 01:10:18.674"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.691" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:18.691" status="PASS" starttime="20170809 01:10:18.691"></status>
</kw>
<status endtime="20170809 01:10:18.691" status="PASS" starttime="20170809 01:10:18.690"></status>
</kw>
<status endtime="20170809 01:10:18.692" status="PASS" starttime="20170809 01:10:18.515"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 01:10:18.702" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170809 01:10:18.702" status="PASS" starttime="20170809 01:10:18.702"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170809 01:10:18.703" level="INFO">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FF...</msg>
<status endtime="20170809 01:10:18.703" status="PASS" starttime="20170809 01:10:18.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170809 01:10:18.704" status="PASS" starttime="20170809 01:10:18.704"></status>
</kw>
<msg timestamp="20170809 01:10:18.705" level="INFO">@{ffdc_function_list} = [ SEL Log | Core Files | Get Request FFDC | FFDC Generic Report | BMC Specific Files | OS FFDC ]</msg>
<status endtime="20170809 01:10:18.705" status="PASS" starttime="20170809 01:10:18.704"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 01:10:18.707" status="PASS" starttime="20170809 01:10:18.706"></status>
</kw>
<msg timestamp="20170809 01:10:18.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:18.707" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 01:10:18.707" status="PASS" starttime="20170809 01:10:18.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 01:10:18.708" status="PASS" starttime="20170809 01:10:18.707"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:18.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:18.757" status="PASS" starttime="20170809 01:10:18.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:18.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:18.757" status="PASS" starttime="20170809 01:10:18.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:18.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:18.758" status="PASS" starttime="20170809 01:10:18.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:18.759" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:18.759" status="PASS" starttime="20170809 01:10:18.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:18.958" status="PASS" starttime="20170809 01:10:18.760"></status>
</kw>
<msg timestamp="20170809 01:10:18.958" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:18.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:18.958" status="PASS" starttime="20170809 01:10:18.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.959" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:18.959" status="PASS" starttime="20170809 01:10:18.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:18.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:18.960" status="PASS" starttime="20170809 01:10:18.959"></status>
</kw>
<status endtime="20170809 01:10:18.960" status="PASS" starttime="20170809 01:10:18.755"></status>
</kw>
<status endtime="20170809 01:10:18.960" status="PASS" starttime="20170809 01:10:18.754"></status>
</kw>
<status endtime="20170809 01:10:18.960" status="PASS" starttime="20170809 01:10:18.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:18.961" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170809 01:10:18.961" status="PASS" starttime="20170809 01:10:18.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:18.962" status="PASS" starttime="20170809 01:10:18.962"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:19.279" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170809 01:10:19.280" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.280" status="PASS" starttime="20170809 01:10:18.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:19.280" status="PASS" starttime="20170809 01:10:19.280"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:19.281" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:19.281" status="PASS" starttime="20170809 01:10:19.281"></status>
</kw>
<msg timestamp="20170809 01:10:19.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.281" status="PASS" starttime="20170809 01:10:18.752"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:19.282" status="PASS" starttime="20170809 01:10:19.282"></status>
</kw>
<msg timestamp="20170809 01:10:19.282" level="INFO">${status} = True</msg>
<status endtime="20170809 01:10:19.282" status="PASS" starttime="20170809 01:10:19.281"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170809 01:10:19.283" status="PASS" starttime="20170809 01:10:19.283"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:19.284" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9d 6e c9 4d 00 00 00 00 9d 9a fc 5b 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 04 38 72 95 e4 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 8c 3d 21 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 38 8d 6b 44 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 8e 83 79 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 38 8e 8b 33 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 8e 99 df 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 38 8e a4 c2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 38 90 67 4e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 38 90 71 91 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 90 8d fa 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 90 d6 c7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 38 90 e1 04 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 04 38 92 2b 20 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 92 35 3e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 92 7c b5 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 92 86 de 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 04 38 92 90 1a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 04 38 94 0e 21 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 94 16 93 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 09 76 55 68 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 09 76 5d c3 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 04 38 72 95 e4 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 8c 3d 21 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 38 8d 6b 44 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 8e 83 79 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 38 8e 8b 33 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 8e 99 df 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 38 8e a4 c2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 38 90 67 4e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 38 90 71 91 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 90 8d fa 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 90 d6 c7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 38 90 e1 04"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240931848, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502239471686, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240114906, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 f1 8f 37 00 00 00 00 d2 1d fe 01 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 14 63 f6 8d 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 7d 99 e4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 14 7e c7 aa 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 7f e0 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 14 7f e8 95 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 7f f6 e7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 14 80 01 2c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 14 81 c4 a8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 14 81 ce e5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 81 ec 5a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 82 36 bb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 14 82 40 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 14 83 83 a6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 83 8d f1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 83 d3 27 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 83 dd ab 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 14 83 e7 1f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 14 85 63 3f 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 85 6c 24 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 34 6a fc ee 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 34 6b 05 55 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 14 63 f6 8d 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 7d 99 e4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 14 7e c7 aa 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 7f e0 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 14 7f e8 95 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 7f f6 e7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 14 80 01 2c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 14 81 c4 a8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 14 81 ce e5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 81 ec 5a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 82 36 bb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 14 82 40 a0"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240442802, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240560143, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f af a2 a1 00 00 00 00 9f da c2 f5 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 01 2d c1 23 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 47 6d ee 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 48 99 9c 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 49 b2 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 49 b9 f1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 49 c8 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 49 d2 c8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 4b 90 12 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 4b 9a 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 4b b6 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4b fe 5d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 4c 08 71 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 01 4d 47 c9 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 4d 51 cf 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 4d 98 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4d a2 eb 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 01 4d ac 8e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 01 4f 27 a1 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 4f 30 2e 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d dc fd a6 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d dd 05 fe 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 01 2d c1 23 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 47 6d ee 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 48 99 9c 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 49 b2 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 49 b9 f1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 49 c8 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 49 d2 c8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 4b 90 12 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 4b 9a 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 4b b6 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4b fe 5d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 4c 08 71"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240608128, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240725620, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 c5 dc 74 00 00 00 00 a1 f2 06 3d 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 05 3a 33 5c 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 54 04 3f 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 05 55 36 1a 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 05 56 57 a3 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 05 56 5f ab 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 05 56 6e 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 05 56 79 4c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 05 58 40 10 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 05 58 4a 6c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 05 58 66 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 05 58 a3 50 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 05 58 ad 6e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 05 59 e9 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 59 f3 ea 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 05 5a 3a 34 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 05 5a 44 e3 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 05 5a 4e 1c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 05 5b cb 7b 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 5b d3 dd 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 11 f0 65 e0 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 11 f0 6e 25 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240767750, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240885485, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:19.285" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:19.285" level="INFO">${content} = {u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/10': {u'Resolved': 0, u'AdditionalData': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1...</msg>
<status endtime="20170809 01:10:19.285" status="PASS" starttime="20170809 01:10:19.283"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170809 01:10:19.286" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/ent...</msg>
<status endtime="20170809 01:10:19.286" status="PASS" starttime="20170809 01:10:19.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:19.287" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel</msg>
<status endtime="20170809 01:10:19.287" status="PASS" starttime="20170809 01:10:19.286"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.287" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:19.287" status="PASS" starttime="20170809 01:10:19.287"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:19.288" status="PASS" starttime="20170809 01:10:19.288"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:19.293" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:19.294" status="PASS" starttime="20170809 01:10:19.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:19.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:19.295" status="PASS" starttime="20170809 01:10:19.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:19.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:19.296" status="PASS" starttime="20170809 01:10:19.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:19.297" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:19.297" status="PASS" starttime="20170809 01:10:19.296"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.572" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:19.573" status="PASS" starttime="20170809 01:10:19.298"></status>
</kw>
<msg timestamp="20170809 01:10:19.573" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:19.573" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.573" status="PASS" starttime="20170809 01:10:19.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:19.574" status="PASS" starttime="20170809 01:10:19.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.574" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:19.574" status="PASS" starttime="20170809 01:10:19.574"></status>
</kw>
<status endtime="20170809 01:10:19.574" status="PASS" starttime="20170809 01:10:19.292"></status>
</kw>
<status endtime="20170809 01:10:19.574" status="PASS" starttime="20170809 01:10:19.291"></status>
</kw>
<status endtime="20170809 01:10:19.575" status="PASS" starttime="20170809 01:10:19.290"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:19.575" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170809 01:10:19.575" status="PASS" starttime="20170809 01:10:19.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:19.576" status="PASS" starttime="20170809 01:10:19.576"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:19.662" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:19.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.662" status="PASS" starttime="20170809 01:10:19.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:19.663" status="PASS" starttime="20170809 01:10:19.663"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:19.664" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:19.664" status="PASS" starttime="20170809 01:10:19.663"></status>
</kw>
<msg timestamp="20170809 01:10:19.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.664" status="PASS" starttime="20170809 01:10:19.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:19.665" status="PASS" starttime="20170809 01:10:19.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:19.666" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9d 6e c9 4d 00 00 00 00 9d 9a fc 5b 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 04 38 72 95 e4 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 8c 3d 21 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 38 8d 6b 44 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 8e 83 79 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 38 8e 8b 33 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 8e 99 df 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 38 8e a4 c2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 38 90 67 4e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 38 90 71 91 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 90 8d fa 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 90 d6 c7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 38 90 e1 04 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 04 38 92 2b 20 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 92 35 3e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 92 7c b5 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 92 86 de 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 04 38 92 90 1a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 04 38 94 0e 21 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 94 16 93 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 09 76 55 68 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 09 76 5d c3 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 04 38 72 95 e4 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 8c 3d 21 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 38 8d 6b 44 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 8e 83 79 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 38 8e 8b 33 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 8e 99 df 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 38 8e a4 c2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 38 90 67 4e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 38 90 71 91 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 90 8d fa 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 90 d6 c7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 38 90 e1 04"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:19.666" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:19.666" level="INFO">${content} = {u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 ...</msg>
<status endtime="20170809 01:10:19.666" status="PASS" starttime="20170809 01:10:19.665"></status>
</kw>
<msg timestamp="20170809 01:10:19.666" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9d 6e c9 4d 00 00 ...</msg>
<status endtime="20170809 01:10:19.667" status="PASS" starttime="20170809 01:10:19.289"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:19.667" level="INFO">Length is 2</msg>
<msg timestamp="20170809 01:10:19.667" level="INFO">${length} = 2</msg>
<status endtime="20170809 01:10:19.667" status="PASS" starttime="20170809 01:10:19.667"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 01:10:19.668" status="PASS" starttime="20170809 01:10:19.667"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 01:10:19.668" level="INFO">${index} = 1</msg>
<status endtime="20170809 01:10:19.668" status="PASS" starttime="20170809 01:10:19.668"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.670" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:19.670" status="PASS" starttime="20170809 01:10:19.669"></status>
</kw>
<status endtime="20170809 01:10:19.670" status="PASS" starttime="20170809 01:10:19.668"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.671" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:19.671" status="PASS" starttime="20170809 01:10:19.671"></status>
</kw>
<status endtime="20170809 01:10:19.671" status="PASS" starttime="20170809 01:10:19.670"></status>
</kw>
<status endtime="20170809 01:10:19.671" status="PASS" starttime="20170809 01:10:19.288"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:19.672" status="PASS" starttime="20170809 01:10:19.672"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:19.675" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:19.676" status="PASS" starttime="20170809 01:10:19.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:19.677" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:19.677" status="PASS" starttime="20170809 01:10:19.676"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:19.677" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:19.677" status="PASS" starttime="20170809 01:10:19.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:19.678" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:19.678" status="PASS" starttime="20170809 01:10:19.678"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.900" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:19.900" status="PASS" starttime="20170809 01:10:19.679"></status>
</kw>
<msg timestamp="20170809 01:10:19.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:19.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.901" status="PASS" starttime="20170809 01:10:19.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:19.901" status="PASS" starttime="20170809 01:10:19.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:19.902" status="PASS" starttime="20170809 01:10:19.902"></status>
</kw>
<status endtime="20170809 01:10:19.902" status="PASS" starttime="20170809 01:10:19.675"></status>
</kw>
<status endtime="20170809 01:10:19.902" status="PASS" starttime="20170809 01:10:19.674"></status>
</kw>
<status endtime="20170809 01:10:19.902" status="PASS" starttime="20170809 01:10:19.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:19.903" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170809 01:10:19.903" status="PASS" starttime="20170809 01:10:19.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:19.904" status="PASS" starttime="20170809 01:10:19.903"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:19.985" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:19.985" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.985" status="PASS" starttime="20170809 01:10:19.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:19.986" status="PASS" starttime="20170809 01:10:19.985"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:19.986" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:19.986" status="PASS" starttime="20170809 01:10:19.986"></status>
</kw>
<msg timestamp="20170809 01:10:19.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:19.986" status="PASS" starttime="20170809 01:10:19.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:19.987" status="PASS" starttime="20170809 01:10:19.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:19.988" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:19.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:19.988" level="INFO">${content} = {u'message': u'200 OK', u'data': [], u'status': u'ok'}</msg>
<status endtime="20170809 01:10:19.988" status="PASS" starttime="20170809 01:10:19.987"></status>
</kw>
<msg timestamp="20170809 01:10:19.988" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 01:10:19.988" status="PASS" starttime="20170809 01:10:19.672"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:19.989" level="INFO">Length is 0</msg>
<msg timestamp="20170809 01:10:19.989" level="INFO">${length} = 0</msg>
<status endtime="20170809 01:10:19.989" status="PASS" starttime="20170809 01:10:19.988"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 01:10:19.989" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 01:10:19.990" status="PASS" starttime="20170809 01:10:19.989"></status>
</kw>
<status endtime="20170809 01:10:19.990" status="PASS" starttime="20170809 01:10:19.671"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:19.990" status="PASS" starttime="20170809 01:10:19.990"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:19.994" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:19.994" status="PASS" starttime="20170809 01:10:19.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:19.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:19.995" status="PASS" starttime="20170809 01:10:19.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:19.996" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:19.996" status="PASS" starttime="20170809 01:10:19.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:19.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:19.996" status="PASS" starttime="20170809 01:10:19.996"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.195" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:20.196" status="PASS" starttime="20170809 01:10:19.997"></status>
</kw>
<msg timestamp="20170809 01:10:20.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:20.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.196" status="PASS" starttime="20170809 01:10:19.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.196" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.197" status="PASS" starttime="20170809 01:10:20.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.197" status="PASS" starttime="20170809 01:10:20.197"></status>
</kw>
<status endtime="20170809 01:10:20.197" status="PASS" starttime="20170809 01:10:19.993"></status>
</kw>
<status endtime="20170809 01:10:20.197" status="PASS" starttime="20170809 01:10:19.992"></status>
</kw>
<status endtime="20170809 01:10:20.198" status="PASS" starttime="20170809 01:10:19.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:20.198" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170809 01:10:20.198" status="PASS" starttime="20170809 01:10:20.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:20.199" status="PASS" starttime="20170809 01:10:20.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:20.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:20.292" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.292" status="PASS" starttime="20170809 01:10:20.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:20.292" status="PASS" starttime="20170809 01:10:20.292"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:20.293" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:20.293" status="PASS" starttime="20170809 01:10:20.293"></status>
</kw>
<msg timestamp="20170809 01:10:20.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.293" status="PASS" starttime="20170809 01:10:19.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.294" status="PASS" starttime="20170809 01:10:20.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:20.294" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:20.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:20.294" level="INFO">${content} = {u'message': u'200 OK', u'data': [], u'status': u'ok'}</msg>
<status endtime="20170809 01:10:20.294" status="PASS" starttime="20170809 01:10:20.294"></status>
</kw>
<msg timestamp="20170809 01:10:20.295" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 01:10:20.295" status="PASS" starttime="20170809 01:10:19.991"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:20.295" level="INFO">Length is 0</msg>
<msg timestamp="20170809 01:10:20.295" level="INFO">${length} = 0</msg>
<status endtime="20170809 01:10:20.295" status="PASS" starttime="20170809 01:10:20.295"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.296" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 01:10:20.296" status="PASS" starttime="20170809 01:10:20.296"></status>
</kw>
<status endtime="20170809 01:10:20.296" status="PASS" starttime="20170809 01:10:19.990"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:20.297" status="PASS" starttime="20170809 01:10:20.297"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:20.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:20.301" status="PASS" starttime="20170809 01:10:20.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:20.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:20.302" status="PASS" starttime="20170809 01:10:20.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:20.303" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:20.303" status="PASS" starttime="20170809 01:10:20.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:20.304" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:20.304" status="PASS" starttime="20170809 01:10:20.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:20.493" status="PASS" starttime="20170809 01:10:20.305"></status>
</kw>
<msg timestamp="20170809 01:10:20.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:20.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.493" status="PASS" starttime="20170809 01:10:20.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.494" status="PASS" starttime="20170809 01:10:20.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.494" status="PASS" starttime="20170809 01:10:20.494"></status>
</kw>
<status endtime="20170809 01:10:20.494" status="PASS" starttime="20170809 01:10:20.300"></status>
</kw>
<status endtime="20170809 01:10:20.495" status="PASS" starttime="20170809 01:10:20.299"></status>
</kw>
<status endtime="20170809 01:10:20.495" status="PASS" starttime="20170809 01:10:20.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:20.495" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170809 01:10:20.495" status="PASS" starttime="20170809 01:10:20.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:20.496" status="PASS" starttime="20170809 01:10:20.496"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:20.605" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:20.605" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.606" status="PASS" starttime="20170809 01:10:20.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:20.606" status="PASS" starttime="20170809 01:10:20.606"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:20.607" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:20.607" status="PASS" starttime="20170809 01:10:20.607"></status>
</kw>
<msg timestamp="20170809 01:10:20.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.607" status="PASS" starttime="20170809 01:10:20.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.608" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.608" status="PASS" starttime="20170809 01:10:20.608"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:20.609" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 f1 8f 37 00 00 00 00 d2 1d fe 01 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 14 63 f6 8d 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 7d 99 e4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 14 7e c7 aa 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 7f e0 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 14 7f e8 95 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 7f f6 e7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 14 80 01 2c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 14 81 c4 a8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 14 81 ce e5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 81 ec 5a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 82 36 bb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 14 82 40 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 14 83 83 a6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 83 8d f1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 83 d3 27 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 83 dd ab 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 14 83 e7 1f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 14 85 63 3f 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 85 6c 24 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 34 6a fc ee 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 34 6b 05 55 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 14 63 f6 8d 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 7d 99 e4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 14 7e c7 aa 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 7f e0 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 14 7f e8 95 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 7f f6 e7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 14 80 01 2c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 14 81 c4 a8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 14 81 ce e5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 81 ec 5a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 82 36 bb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 14 82 40 a0"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:20.609" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:20.610" level="INFO">${content} = {u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 ...</msg>
<status endtime="20170809 01:10:20.610" status="PASS" starttime="20170809 01:10:20.609"></status>
</kw>
<msg timestamp="20170809 01:10:20.610" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 f1 8f 37 00 00 ...</msg>
<status endtime="20170809 01:10:20.610" status="PASS" starttime="20170809 01:10:20.297"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:20.610" level="INFO">Length is 2</msg>
<msg timestamp="20170809 01:10:20.611" level="INFO">${length} = 2</msg>
<status endtime="20170809 01:10:20.611" status="PASS" starttime="20170809 01:10:20.610"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 01:10:20.611" status="PASS" starttime="20170809 01:10:20.611"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 01:10:20.612" level="INFO">${index} = 1</msg>
<status endtime="20170809 01:10:20.612" status="PASS" starttime="20170809 01:10:20.611"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.613" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:20.613" status="PASS" starttime="20170809 01:10:20.613"></status>
</kw>
<status endtime="20170809 01:10:20.613" status="PASS" starttime="20170809 01:10:20.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.614" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:20.615" status="PASS" starttime="20170809 01:10:20.614"></status>
</kw>
<status endtime="20170809 01:10:20.615" status="PASS" starttime="20170809 01:10:20.614"></status>
</kw>
<status endtime="20170809 01:10:20.615" status="PASS" starttime="20170809 01:10:20.296"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:20.616" status="PASS" starttime="20170809 01:10:20.615"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:20.619" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:20.620" status="PASS" starttime="20170809 01:10:20.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:20.620" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:20.620" status="PASS" starttime="20170809 01:10:20.620"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:20.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:20.621" status="PASS" starttime="20170809 01:10:20.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:20.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:20.621" status="PASS" starttime="20170809 01:10:20.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.870" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:20.870" status="PASS" starttime="20170809 01:10:20.622"></status>
</kw>
<msg timestamp="20170809 01:10:20.870" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:20.870" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.870" status="PASS" starttime="20170809 01:10:20.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.871" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.871" status="PASS" starttime="20170809 01:10:20.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.872" status="PASS" starttime="20170809 01:10:20.871"></status>
</kw>
<status endtime="20170809 01:10:20.872" status="PASS" starttime="20170809 01:10:20.618"></status>
</kw>
<status endtime="20170809 01:10:20.872" status="PASS" starttime="20170809 01:10:20.618"></status>
</kw>
<status endtime="20170809 01:10:20.872" status="PASS" starttime="20170809 01:10:20.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:20.872" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170809 01:10:20.873" status="PASS" starttime="20170809 01:10:20.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:20.873" status="PASS" starttime="20170809 01:10:20.873"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:20.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:20.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.983" status="PASS" starttime="20170809 01:10:20.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:20.984" status="PASS" starttime="20170809 01:10:20.984"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:20.984" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:20.985" status="PASS" starttime="20170809 01:10:20.984"></status>
</kw>
<msg timestamp="20170809 01:10:20.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:20.985" status="PASS" starttime="20170809 01:10:20.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:20.985" status="PASS" starttime="20170809 01:10:20.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:20.986" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:20.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:20.986" level="INFO">${content} = {u'message': u'200 OK', u'data': [], u'status': u'ok'}</msg>
<status endtime="20170809 01:10:20.986" status="PASS" starttime="20170809 01:10:20.986"></status>
</kw>
<msg timestamp="20170809 01:10:20.986" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 01:10:20.987" status="PASS" starttime="20170809 01:10:20.616"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:20.987" level="INFO">Length is 0</msg>
<msg timestamp="20170809 01:10:20.987" level="INFO">${length} = 0</msg>
<status endtime="20170809 01:10:20.987" status="PASS" starttime="20170809 01:10:20.987"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 01:10:20.988" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 01:10:20.988" status="PASS" starttime="20170809 01:10:20.987"></status>
</kw>
<status endtime="20170809 01:10:20.988" status="PASS" starttime="20170809 01:10:20.615"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:20.989" status="PASS" starttime="20170809 01:10:20.988"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:20.992" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:20.993" status="PASS" starttime="20170809 01:10:20.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:20.993" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:20.993" status="PASS" starttime="20170809 01:10:20.993"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:20.994" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:20.994" status="PASS" starttime="20170809 01:10:20.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:20.995" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:20.995" status="PASS" starttime="20170809 01:10:20.994"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.193" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:21.193" status="PASS" starttime="20170809 01:10:20.995"></status>
</kw>
<msg timestamp="20170809 01:10:21.193" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:21.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.194" status="PASS" starttime="20170809 01:10:20.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.194" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.194" status="PASS" starttime="20170809 01:10:21.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.195" status="PASS" starttime="20170809 01:10:21.194"></status>
</kw>
<status endtime="20170809 01:10:21.195" status="PASS" starttime="20170809 01:10:20.991"></status>
</kw>
<status endtime="20170809 01:10:21.195" status="PASS" starttime="20170809 01:10:20.991"></status>
</kw>
<status endtime="20170809 01:10:21.195" status="PASS" starttime="20170809 01:10:20.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:21.196" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170809 01:10:21.196" status="PASS" starttime="20170809 01:10:21.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:21.196" status="PASS" starttime="20170809 01:10:21.196"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:21.284" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:21.284" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.284" status="PASS" starttime="20170809 01:10:21.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:21.284" status="PASS" starttime="20170809 01:10:21.284"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:21.285" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:21.285" status="PASS" starttime="20170809 01:10:21.285"></status>
</kw>
<msg timestamp="20170809 01:10:21.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.285" status="PASS" starttime="20170809 01:10:20.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.286" status="PASS" starttime="20170809 01:10:21.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:21.286" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f af a2 a1 00 00 00 00 9f da c2 f5 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 01 2d c1 23 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 47 6d ee 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 48 99 9c 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 49 b2 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 49 b9 f1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 49 c8 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 49 d2 c8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 4b 90 12 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 4b 9a 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 4b b6 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4b fe 5d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 4c 08 71 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 01 4d 47 c9 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 4d 51 cf 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 4d 98 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4d a2 eb 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 01 4d ac 8e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 01 4f 27 a1 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 4f 30 2e 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d dc fd a6 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d dd 05 fe 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 01 2d c1 23 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 47 6d ee 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 48 99 9c 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 49 b2 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 49 b9 f1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 49 c8 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 49 d2 c8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 4b 90 12 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 4b 9a 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 4b b6 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4b fe 5d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 4c 08 71"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:21.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:21.287" level="INFO">${content} = {u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 ...</msg>
<status endtime="20170809 01:10:21.287" status="PASS" starttime="20170809 01:10:21.286"></status>
</kw>
<msg timestamp="20170809 01:10:21.287" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f af a2 a1 00 00 ...</msg>
<status endtime="20170809 01:10:21.287" status="PASS" starttime="20170809 01:10:20.989"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:21.288" level="INFO">Length is 2</msg>
<msg timestamp="20170809 01:10:21.288" level="INFO">${length} = 2</msg>
<status endtime="20170809 01:10:21.288" status="PASS" starttime="20170809 01:10:21.288"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 01:10:21.289" status="PASS" starttime="20170809 01:10:21.288"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 01:10:21.289" level="INFO">${index} = 1</msg>
<status endtime="20170809 01:10:21.289" status="PASS" starttime="20170809 01:10:21.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.291" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:21.291" status="PASS" starttime="20170809 01:10:21.290"></status>
</kw>
<status endtime="20170809 01:10:21.291" status="PASS" starttime="20170809 01:10:21.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.292" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:21.292" status="PASS" starttime="20170809 01:10:21.292"></status>
</kw>
<status endtime="20170809 01:10:21.292" status="PASS" starttime="20170809 01:10:21.291"></status>
</kw>
<status endtime="20170809 01:10:21.292" status="PASS" starttime="20170809 01:10:20.988"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:21.293" status="PASS" starttime="20170809 01:10:21.293"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:21.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:21.297" status="PASS" starttime="20170809 01:10:21.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:21.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:21.298" status="PASS" starttime="20170809 01:10:21.297"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:21.298" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:21.298" status="PASS" starttime="20170809 01:10:21.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:21.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:21.299" status="PASS" starttime="20170809 01:10:21.298"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.489" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:21.489" status="PASS" starttime="20170809 01:10:21.300"></status>
</kw>
<msg timestamp="20170809 01:10:21.489" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:21.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.490" status="PASS" starttime="20170809 01:10:21.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.490" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.490" status="PASS" starttime="20170809 01:10:21.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.491" status="PASS" starttime="20170809 01:10:21.491"></status>
</kw>
<status endtime="20170809 01:10:21.491" status="PASS" starttime="20170809 01:10:21.296"></status>
</kw>
<status endtime="20170809 01:10:21.491" status="PASS" starttime="20170809 01:10:21.295"></status>
</kw>
<status endtime="20170809 01:10:21.491" status="PASS" starttime="20170809 01:10:21.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:21.492" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170809 01:10:21.492" status="PASS" starttime="20170809 01:10:21.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:21.493" status="PASS" starttime="20170809 01:10:21.492"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:21.575" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:21.575" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.575" status="PASS" starttime="20170809 01:10:21.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:21.576" status="PASS" starttime="20170809 01:10:21.575"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:21.576" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:21.576" status="PASS" starttime="20170809 01:10:21.576"></status>
</kw>
<msg timestamp="20170809 01:10:21.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.576" status="PASS" starttime="20170809 01:10:21.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.577" status="PASS" starttime="20170809 01:10:21.577"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:21.577" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:21.578" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:21.578" level="INFO">${content} = {u'message': u'200 OK', u'data': [], u'status': u'ok'}</msg>
<status endtime="20170809 01:10:21.578" status="PASS" starttime="20170809 01:10:21.577"></status>
</kw>
<msg timestamp="20170809 01:10:21.578" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 01:10:21.578" status="PASS" starttime="20170809 01:10:21.294"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:21.579" level="INFO">Length is 0</msg>
<msg timestamp="20170809 01:10:21.579" level="INFO">${length} = 0</msg>
<status endtime="20170809 01:10:21.579" status="PASS" starttime="20170809 01:10:21.579"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.580" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 01:10:21.580" status="PASS" starttime="20170809 01:10:21.579"></status>
</kw>
<status endtime="20170809 01:10:21.580" status="PASS" starttime="20170809 01:10:21.292"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:21.581" status="PASS" starttime="20170809 01:10:21.580"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:21.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:21.584" status="PASS" starttime="20170809 01:10:21.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:21.585" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:21.585" status="PASS" starttime="20170809 01:10:21.584"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:21.585" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:21.585" status="PASS" starttime="20170809 01:10:21.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:21.586" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:21.586" status="PASS" starttime="20170809 01:10:21.586"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.781" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:21.781" status="PASS" starttime="20170809 01:10:21.587"></status>
</kw>
<msg timestamp="20170809 01:10:21.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:21.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.782" status="PASS" starttime="20170809 01:10:21.586"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.782" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.782" status="PASS" starttime="20170809 01:10:21.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.783" status="PASS" starttime="20170809 01:10:21.783"></status>
</kw>
<status endtime="20170809 01:10:21.783" status="PASS" starttime="20170809 01:10:21.583"></status>
</kw>
<status endtime="20170809 01:10:21.783" status="PASS" starttime="20170809 01:10:21.583"></status>
</kw>
<status endtime="20170809 01:10:21.784" status="PASS" starttime="20170809 01:10:21.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:21.784" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170809 01:10:21.784" status="PASS" starttime="20170809 01:10:21.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:21.785" status="PASS" starttime="20170809 01:10:21.784"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:21.912" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:21.912" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.912" status="PASS" starttime="20170809 01:10:21.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:21.913" status="PASS" starttime="20170809 01:10:21.913"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:21.913" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:21.913" status="PASS" starttime="20170809 01:10:21.913"></status>
</kw>
<msg timestamp="20170809 01:10:21.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:21.914" status="PASS" starttime="20170809 01:10:21.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:21.914" status="PASS" starttime="20170809 01:10:21.914"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:21.915" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 c5 dc 74 00 00 00 00 a1 f2 06 3d 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 05 3a 33 5c 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 54 04 3f 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 05 55 36 1a 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 05 56 57 a3 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 05 56 5f ab 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 05 56 6e 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 05 56 79 4c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 05 58 40 10 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 05 58 4a 6c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 05 58 66 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 05 58 a3 50 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 05 58 ad 6e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 05 59 e9 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 59 f3 ea 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 05 5a 3a 34 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 05 5a 44 e3 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 05 5a 4e 1c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 05 5b cb 7b 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 5b d3 dd 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 11 f0 65 e0 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 11 f0 6e 25 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:21.915" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:21.915" level="INFO">${content} = {u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 ...</msg>
<status endtime="20170809 01:10:21.915" status="PASS" starttime="20170809 01:10:21.914"></status>
</kw>
<msg timestamp="20170809 01:10:21.916" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 c5 dc 74 00 00 ...</msg>
<status endtime="20170809 01:10:21.916" status="PASS" starttime="20170809 01:10:21.581"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:21.916" level="INFO">Length is 2</msg>
<msg timestamp="20170809 01:10:21.916" level="INFO">${length} = 2</msg>
<status endtime="20170809 01:10:21.916" status="PASS" starttime="20170809 01:10:21.916"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 01:10:21.917" status="PASS" starttime="20170809 01:10:21.917"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170809 01:10:21.918" level="INFO">${index} = 1</msg>
<status endtime="20170809 01:10:21.918" status="PASS" starttime="20170809 01:10:21.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.919" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:21.919" status="PASS" starttime="20170809 01:10:21.918"></status>
</kw>
<status endtime="20170809 01:10:21.919" status="PASS" starttime="20170809 01:10:21.918"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:21.920" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:21.920" status="PASS" starttime="20170809 01:10:21.920"></status>
</kw>
<status endtime="20170809 01:10:21.921" status="PASS" starttime="20170809 01:10:21.919"></status>
</kw>
<status endtime="20170809 01:10:21.921" status="PASS" starttime="20170809 01:10:21.580"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 01:10:21.921" status="PASS" starttime="20170809 01:10:21.921"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:21.925" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:21.925" status="PASS" starttime="20170809 01:10:21.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:21.926" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:21.926" status="PASS" starttime="20170809 01:10:21.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:21.926" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:21.926" status="PASS" starttime="20170809 01:10:21.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:21.927" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:21.927" status="PASS" starttime="20170809 01:10:21.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:22.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:22.214" status="PASS" starttime="20170809 01:10:21.928"></status>
</kw>
<msg timestamp="20170809 01:10:22.215" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:22.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:22.215" status="PASS" starttime="20170809 01:10:21.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:22.216" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:22.216" status="PASS" starttime="20170809 01:10:22.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:22.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:22.216" status="PASS" starttime="20170809 01:10:22.216"></status>
</kw>
<status endtime="20170809 01:10:22.216" status="PASS" starttime="20170809 01:10:21.924"></status>
</kw>
<status endtime="20170809 01:10:22.217" status="PASS" starttime="20170809 01:10:21.923"></status>
</kw>
<status endtime="20170809 01:10:22.217" status="PASS" starttime="20170809 01:10:21.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:22.217" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170809 01:10:22.217" status="PASS" starttime="20170809 01:10:22.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:22.218" status="PASS" starttime="20170809 01:10:22.218"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:22.300" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 01:10:22.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:22.300" status="PASS" starttime="20170809 01:10:22.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:22.301" status="PASS" starttime="20170809 01:10:22.300"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:22.301" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:22.301" status="PASS" starttime="20170809 01:10:22.301"></status>
</kw>
<msg timestamp="20170809 01:10:22.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:22.301" status="PASS" starttime="20170809 01:10:21.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:22.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:22.302" status="PASS" starttime="20170809 01:10:22.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 01:10:22.302" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:22.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 01:10:22.303" level="INFO">${content} = {u'message': u'200 OK', u'data': [], u'status': u'ok'}</msg>
<status endtime="20170809 01:10:22.303" status="PASS" starttime="20170809 01:10:22.302"></status>
</kw>
<msg timestamp="20170809 01:10:22.303" level="INFO">${esel_data} = []</msg>
<status endtime="20170809 01:10:22.303" status="PASS" starttime="20170809 01:10:21.922"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 01:10:22.303" level="INFO">Length is 0</msg>
<msg timestamp="20170809 01:10:22.304" level="INFO">${length} = 0</msg>
<status endtime="20170809 01:10:22.304" status="PASS" starttime="20170809 01:10:22.303"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 01:10:22.304" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 01:10:22.304" status="PASS" starttime="20170809 01:10:22.304"></status>
</kw>
<status endtime="20170809 01:10:22.304" status="PASS" starttime="20170809 01:10:21.921"></status>
</kw>
<status endtime="20170809 01:10:22.304" status="PASS" starttime="20170809 01:10:19.288"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170809 01:10:22.309" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 01:10:22.312" level="INFO">${out} = </msg>
<status endtime="20170809 01:10:22.312" status="PASS" starttime="20170809 01:10:22.305"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170809 01:10:22.317" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170809 01:10:22.317" status="FAIL" starttime="20170809 01:10:22.316"></status>
</kw>
<msg timestamp="20170809 01:10:22.317" level="INFO">${status} = False</msg>
<status endtime="20170809 01:10:22.317" status="PASS" starttime="20170809 01:10:22.315"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170809 01:10:22.318" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170809 01:10:22.319" status="PASS" starttime="20170809 01:10:22.318"></status>
</kw>
<status endtime="20170809 01:10:22.319" status="PASS" starttime="20170809 01:10:18.748"></status>
</kw>
<status endtime="20170809 01:10:22.319" status="PASS" starttime="20170809 01:10:18.708"></status>
</kw>
<status endtime="20170809 01:10:22.320" status="PASS" starttime="20170809 01:10:18.705"></status>
</kw>
<status endtime="20170809 01:10:22.320" status="PASS" starttime="20170809 01:10:18.705"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 01:10:22.323" status="PASS" starttime="20170809 01:10:22.322"></status>
</kw>
<msg timestamp="20170809 01:10:22.323" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:22.323" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 01:10:22.323" status="PASS" starttime="20170809 01:10:22.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 01:10:22.324" status="PASS" starttime="20170809 01:10:22.323"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 01:10:22.430" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:22.431" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170809 01:10:22.490" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170809 01:10:22.510" level="INFO">${core_files} = None</msg>
<msg timestamp="20170809 01:10:22.510" level="INFO">${stderr} = None</msg>
<msg timestamp="20170809 01:10:22.510" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 01:10:22.511" level="FAIL">#(UTC) 2017/08/09 01:10:22.508862 -    0.079123 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status endtime="20170809 01:10:22.511" status="FAIL" starttime="20170809 01:10:22.372"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170809 01:10:22.511" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170809 01:10:22.512" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status endtime="20170809 01:10:22.512" status="FAIL" starttime="20170809 01:10:22.511"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170809 01:10:22.582" status="PASS" starttime="20170809 01:10:22.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170809 01:10:23.340" status="PASS" starttime="20170809 01:10:22.584"></status>
</kw>
<status endtime="20170809 01:10:23.340" status="PASS" starttime="20170809 01:10:22.583"></status>
</kw>
<status endtime="20170809 01:10:23.340" status="PASS" starttime="20170809 01:10:22.583"></status>
</kw>
<status endtime="20170809 01:10:23.340" status="PASS" starttime="20170809 01:10:22.536"></status>
</kw>
<status endtime="20170809 01:10:23.340" status="PASS" starttime="20170809 01:10:22.512"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170809 01:10:23.340" status="PASS" starttime="20170809 01:10:23.340"></status>
</kw>
<status endtime="20170809 01:10:23.341" status="FAIL" starttime="20170809 01:10:22.371"></status>
</kw>
<status endtime="20170809 01:10:23.341" status="PASS" starttime="20170809 01:10:22.324"></status>
</kw>
<status endtime="20170809 01:10:23.341" status="PASS" starttime="20170809 01:10:22.321"></status>
</kw>
<status endtime="20170809 01:10:23.341" status="PASS" starttime="20170809 01:10:22.320"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 01:10:23.343" status="PASS" starttime="20170809 01:10:23.343"></status>
</kw>
<msg timestamp="20170809 01:10:23.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:23.343" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 01:10:23.343" status="PASS" starttime="20170809 01:10:23.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 01:10:23.344" status="PASS" starttime="20170809 01:10:23.343"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 01:10:23.384" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170809 01:10:23.384" status="PASS" starttime="20170809 01:10:23.384"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 01:10:23.385" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_elog', '/xyz/open...</msg>
<status endtime="20170809 01:10:23.385" status="PASS" starttime="20170809 01:10:23.385"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:23.386" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_sensor_list.txt</msg>
<status endtime="20170809 01:10:23.386" status="PASS" starttime="20170809 01:10:23.386"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:23.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:23.389" status="PASS" starttime="20170809 01:10:23.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:23.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:23.390" status="PASS" starttime="20170809 01:10:23.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:23.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:23.391" status="PASS" starttime="20170809 01:10:23.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:23.392" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:23.392" status="PASS" starttime="20170809 01:10:23.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.589" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:23.589" status="PASS" starttime="20170809 01:10:23.393"></status>
</kw>
<msg timestamp="20170809 01:10:23.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:23.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:23.589" status="PASS" starttime="20170809 01:10:23.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.590" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:23.590" status="PASS" starttime="20170809 01:10:23.590"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:23.591" status="PASS" starttime="20170809 01:10:23.591"></status>
</kw>
<status endtime="20170809 01:10:23.591" status="PASS" starttime="20170809 01:10:23.388"></status>
</kw>
<status endtime="20170809 01:10:23.591" status="PASS" starttime="20170809 01:10:23.388"></status>
</kw>
<status endtime="20170809 01:10:23.591" status="PASS" starttime="20170809 01:10:23.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:23.592" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170809 01:10:23.592" status="PASS" starttime="20170809 01:10:23.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:23.593" status="PASS" starttime="20170809 01:10:23.592"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:23.764" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 01:10:23.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:23.764" status="PASS" starttime="20170809 01:10:23.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:23.765" status="PASS" starttime="20170809 01:10:23.765"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:23.765" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:23.766" status="PASS" starttime="20170809 01:10:23.765"></status>
</kw>
<msg timestamp="20170809 01:10:23.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:23.766" status="PASS" starttime="20170809 01:10:23.386"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:23.767" status="PASS" starttime="20170809 01:10:23.766"></status>
</kw>
<msg timestamp="20170809 01:10:23.767" level="INFO">${status} = True</msg>
<status endtime="20170809 01:10:23.767" status="PASS" starttime="20170809 01:10:23.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 01:10:23.768" status="PASS" starttime="20170809 01:10:23.767"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 01:10:23.768" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:23.768" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 01:10:23.769" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170809 01:10:23.769" status="PASS" starttime="20170809 01:10:23.768"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.770" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_sensor_list.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:23.770" status="PASS" starttime="20170809 01:10:23.769"></status>
</kw>
<status endtime="20170809 01:10:23.770" status="PASS" starttime="20170809 01:10:23.769"></status>
</kw>
<status endtime="20170809 01:10:23.770" status="PASS" starttime="20170809 01:10:23.386"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:23.771" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_led.txt</msg>
<status endtime="20170809 01:10:23.771" status="PASS" starttime="20170809 01:10:23.771"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:23.774" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:23.775" status="PASS" starttime="20170809 01:10:23.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:23.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:23.775" status="PASS" starttime="20170809 01:10:23.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:23.776" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:23.776" status="PASS" starttime="20170809 01:10:23.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:23.776" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:23.776" status="PASS" starttime="20170809 01:10:23.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.960" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:23.960" status="PASS" starttime="20170809 01:10:23.777"></status>
</kw>
<msg timestamp="20170809 01:10:23.961" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:23.961" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:23.961" status="PASS" starttime="20170809 01:10:23.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.961" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:23.961" status="PASS" starttime="20170809 01:10:23.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:23.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:23.962" status="PASS" starttime="20170809 01:10:23.962"></status>
</kw>
<status endtime="20170809 01:10:23.962" status="PASS" starttime="20170809 01:10:23.773"></status>
</kw>
<status endtime="20170809 01:10:23.962" status="PASS" starttime="20170809 01:10:23.773"></status>
</kw>
<status endtime="20170809 01:10:23.962" status="PASS" starttime="20170809 01:10:23.772"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:23.963" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170809 01:10:23.963" status="PASS" starttime="20170809 01:10:23.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:23.964" status="PASS" starttime="20170809 01:10:23.963"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:24.007" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 01:10:24.007" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 01:10:24.007" status="PASS" starttime="20170809 01:10:23.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:24.008" status="PASS" starttime="20170809 01:10:24.007"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:24.008" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:24.008" status="PASS" starttime="20170809 01:10:24.008"></status>
</kw>
<msg timestamp="20170809 01:10:24.008" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 01:10:24.008" status="PASS" starttime="20170809 01:10:23.771"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 01:10:24.010" level="FAIL">404 != 200</msg>
<status endtime="20170809 01:10:24.010" status="FAIL" starttime="20170809 01:10:24.009"></status>
</kw>
<msg timestamp="20170809 01:10:24.010" level="INFO">${status} = False</msg>
<status endtime="20170809 01:10:24.010" status="PASS" starttime="20170809 01:10:24.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 01:10:24.011" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 01:10:24.011" status="PASS" starttime="20170809 01:10:24.011"></status>
</kw>
<status endtime="20170809 01:10:24.011" status="PASS" starttime="20170809 01:10:24.010"></status>
</kw>
<status endtime="20170809 01:10:24.011" status="PASS" starttime="20170809 01:10:23.770"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:24.012" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_inventory.txt</msg>
<status endtime="20170809 01:10:24.012" status="PASS" starttime="20170809 01:10:24.011"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:24.014" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:24.015" status="PASS" starttime="20170809 01:10:24.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:24.016" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:24.016" status="PASS" starttime="20170809 01:10:24.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:24.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:24.016" status="PASS" starttime="20170809 01:10:24.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:24.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:24.017" status="PASS" starttime="20170809 01:10:24.017"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.228" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:24.228" status="PASS" starttime="20170809 01:10:24.018"></status>
</kw>
<msg timestamp="20170809 01:10:24.228" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:24.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:24.228" status="PASS" starttime="20170809 01:10:24.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.229" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:24.229" status="PASS" starttime="20170809 01:10:24.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:24.229" status="PASS" starttime="20170809 01:10:24.229"></status>
</kw>
<status endtime="20170809 01:10:24.230" status="PASS" starttime="20170809 01:10:24.014"></status>
</kw>
<status endtime="20170809 01:10:24.230" status="PASS" starttime="20170809 01:10:24.013"></status>
</kw>
<status endtime="20170809 01:10:24.230" status="PASS" starttime="20170809 01:10:24.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:24.230" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170809 01:10:24.230" status="PASS" starttime="20170809 01:10:24.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:24.231" status="PASS" starttime="20170809 01:10:24.231"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:24.565" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 01:10:24.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:24.565" status="PASS" starttime="20170809 01:10:24.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:24.565" status="PASS" starttime="20170809 01:10:24.565"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:24.566" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:24.566" status="PASS" starttime="20170809 01:10:24.566"></status>
</kw>
<msg timestamp="20170809 01:10:24.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:24.566" status="PASS" starttime="20170809 01:10:24.012"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:24.567" status="PASS" starttime="20170809 01:10:24.567"></status>
</kw>
<msg timestamp="20170809 01:10:24.567" level="INFO">${status} = True</msg>
<status endtime="20170809 01:10:24.567" status="PASS" starttime="20170809 01:10:24.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 01:10:24.568" status="PASS" starttime="20170809 01:10:24.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 01:10:24.569" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:24.569" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 01:10:24.569" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170809 01:10:24.569" status="PASS" starttime="20170809 01:10:24.568"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.571" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_inventory.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:24.571" status="PASS" starttime="20170809 01:10:24.570"></status>
</kw>
<status endtime="20170809 01:10:24.571" status="PASS" starttime="20170809 01:10:24.569"></status>
</kw>
<status endtime="20170809 01:10:24.571" status="PASS" starttime="20170809 01:10:24.011"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:24.572" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_elog.txt</msg>
<status endtime="20170809 01:10:24.572" status="PASS" starttime="20170809 01:10:24.571"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:24.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:24.575" status="PASS" starttime="20170809 01:10:24.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:24.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:24.576" status="PASS" starttime="20170809 01:10:24.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:24.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:24.576" status="PASS" starttime="20170809 01:10:24.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:24.577" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:24.577" status="PASS" starttime="20170809 01:10:24.577"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:24.759" status="PASS" starttime="20170809 01:10:24.578"></status>
</kw>
<msg timestamp="20170809 01:10:24.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:24.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:24.759" status="PASS" starttime="20170809 01:10:24.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:24.760" status="PASS" starttime="20170809 01:10:24.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:24.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:24.760" status="PASS" starttime="20170809 01:10:24.760"></status>
</kw>
<status endtime="20170809 01:10:24.761" status="PASS" starttime="20170809 01:10:24.574"></status>
</kw>
<status endtime="20170809 01:10:24.761" status="PASS" starttime="20170809 01:10:24.573"></status>
</kw>
<status endtime="20170809 01:10:24.761" status="PASS" starttime="20170809 01:10:24.573"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:24.761" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170809 01:10:24.761" status="PASS" starttime="20170809 01:10:24.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:24.762" status="PASS" starttime="20170809 01:10:24.762"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:25.025" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 01:10:25.025" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:25.025" status="PASS" starttime="20170809 01:10:24.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:25.026" status="PASS" starttime="20170809 01:10:25.025"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:25.026" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:25.026" status="PASS" starttime="20170809 01:10:25.026"></status>
</kw>
<msg timestamp="20170809 01:10:25.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:25.026" status="PASS" starttime="20170809 01:10:24.572"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:25.027" status="PASS" starttime="20170809 01:10:25.027"></status>
</kw>
<msg timestamp="20170809 01:10:25.028" level="INFO">${status} = True</msg>
<status endtime="20170809 01:10:25.028" status="PASS" starttime="20170809 01:10:25.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 01:10:25.028" status="PASS" starttime="20170809 01:10:25.028"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 01:10:25.030" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9d 6e c9 4d 00 00 00 00 9d 9a fc 5b 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 04 38 72 95 e4 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 8c 3d 21 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 38 8d 6b 44 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 8e 83 79 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 38 8e 8b 33 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 8e 99 df 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 38 8e a4 c2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 38 90 67 4e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 38 90 71 91 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 90 8d fa 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 90 d6 c7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 38 90 e1 04 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 04 38 92 2b 20 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 92 35 3e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 92 7c b5 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 92 86 de 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 04 38 92 90 1a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 04 38 94 0e 21 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 94 16 93 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 09 76 55 68 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 09 76 5d c3 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 04 38 72 95 e4 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 04 38 8c 3d 21 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 04 38 8d 6b 44 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 8e 83 79 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 04 38 8e 8b 33 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 04 38 8e 99 df 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 04 38 8e a4 c2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 04 38 90 67 4e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 04 38 90 71 91 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 04 38 90 8d fa 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 04 38 90 d6 c7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 04 38 90 e1 04"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240931848, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502239471686, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240114906, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 f1 8f 37 00 00 00 00 d2 1d fe 01 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 14 63 f6 8d 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 7d 99 e4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 14 7e c7 aa 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 7f e0 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 14 7f e8 95 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 7f f6 e7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 14 80 01 2c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 14 81 c4 a8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 14 81 ce e5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 81 ec 5a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 82 36 bb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 14 82 40 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 14 83 83 a6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 83 8d f1 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 83 d3 27 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 83 dd ab 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 14 83 e7 1f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 14 85 63 3f 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 85 6c 24 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 34 6a fc ee 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 34 6b 05 55 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 14 63 f6 8d 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 14 7d 99 e4 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 14 7e c7 aa 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 7f e0 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 14 7f e8 95 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 14 7f f6 e7 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 14 80 01 2c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 14 81 c4 a8 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 14 81 ce e5 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 14 81 ec 5a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 14 82 36 bb 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 14 82 40 a0"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240442802, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240560143, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f af a2 a1 00 00 00 00 9f da c2 f5 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 01 2d c1 23 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 47 6d ee 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 48 99 9c 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 49 b2 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 49 b9 f1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 49 c8 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 49 d2 c8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 4b 90 12 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 4b 9a 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 4b b6 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4b fe 5d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 4c 08 71 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 01 4d 47 c9 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 4d 51 cf 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 4d 98 13 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4d a2 eb 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 01 4d ac 8e 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 01 4f 27 a1 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 4f 30 2e 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d dc fd a6 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d dd 05 fe 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 01 2d c1 23 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 01 47 6d ee 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 01 48 99 9c 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 49 b2 e4 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 01 49 b9 f1 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 01 49 c8 85 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 01 49 d2 c8 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 01 4b 90 12 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 01 4b 9a 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 01 4b b6 38 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 01 4b fe 5d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 01 4c 08 71"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240608128, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240725620, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a1 c5 dc 74 00 00 00 00 a1 f2 06 3d 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 02 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 20 00 60 00 70 00 50 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 05 3a 33 5c 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 54 04 3f 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 05 55 36 1a 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 05 56 57 a3 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 05 56 5f ab 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 05 56 6e 9a 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 05 56 79 4c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 05 58 40 10 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 05 58 4a 6c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 05 58 66 d2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 05 58 a3 50 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 05 58 ad 6e 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 05 59 e9 53 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 59 f3 ea 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 05 5a 3a 34 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 05 5a 44 e3 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 05 5a 4e 1c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 05 5b cb 7b 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 05 5b d3 dd 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 11 f0 65 e0 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 11 f0 6e 25 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240767750, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502240885485, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 01:10:25.031" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 01:10:25.031" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu...</msg>
<status endtime="20170809 01:10:25.031" status="PASS" starttime="20170809 01:10:25.028"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.033" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_elog.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.033" status="PASS" starttime="20170809 01:10:25.032"></status>
</kw>
<status endtime="20170809 01:10:25.033" status="PASS" starttime="20170809 01:10:25.031"></status>
</kw>
<status endtime="20170809 01:10:25.033" status="PASS" starttime="20170809 01:10:24.571"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:25.034" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_record_log.txt</msg>
<status endtime="20170809 01:10:25.034" status="PASS" starttime="20170809 01:10:25.033"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 01:10:25.037" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 01:10:25.037" status="PASS" starttime="20170809 01:10:25.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 01:10:25.038" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 01:10:25.038" status="PASS" starttime="20170809 01:10:25.037"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 01:10:25.038" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 01:10:25.038" status="PASS" starttime="20170809 01:10:25.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 01:10:25.039" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 01:10:25.039" status="PASS" starttime="20170809 01:10:25.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 01:10:25.254" status="PASS" starttime="20170809 01:10:25.040"></status>
</kw>
<msg timestamp="20170809 01:10:25.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:25.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 01:10:25.254" status="PASS" starttime="20170809 01:10:25.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:25.255" status="PASS" starttime="20170809 01:10:25.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 01:10:25.255" status="PASS" starttime="20170809 01:10:25.255"></status>
</kw>
<status endtime="20170809 01:10:25.256" status="PASS" starttime="20170809 01:10:25.036"></status>
</kw>
<status endtime="20170809 01:10:25.256" status="PASS" starttime="20170809 01:10:25.035"></status>
</kw>
<status endtime="20170809 01:10:25.256" status="PASS" starttime="20170809 01:10:25.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 01:10:25.256" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170809 01:10:25.256" status="PASS" starttime="20170809 01:10:25.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 01:10:25.257" status="PASS" starttime="20170809 01:10:25.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 01:10:25.302" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 01:10:25.302" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 01:10:25.302" status="PASS" starttime="20170809 01:10:25.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 01:10:25.303" status="PASS" starttime="20170809 01:10:25.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 01:10:25.303" level="INFO">Delete All Sessions</msg>
<status endtime="20170809 01:10:25.303" status="PASS" starttime="20170809 01:10:25.303"></status>
</kw>
<msg timestamp="20170809 01:10:25.303" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 01:10:25.303" status="PASS" starttime="20170809 01:10:25.034"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 01:10:25.305" level="FAIL">404 != 200</msg>
<status endtime="20170809 01:10:25.305" status="FAIL" starttime="20170809 01:10:25.304"></status>
</kw>
<msg timestamp="20170809 01:10:25.305" level="INFO">${status} = False</msg>
<status endtime="20170809 01:10:25.305" status="PASS" starttime="20170809 01:10:25.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 01:10:25.306" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:25.306"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:25.305"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:25.033"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:23.385"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:23.384"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:23.384"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:23.384"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:23.383"></status>
</kw>
<status endtime="20170809 01:10:25.306" status="PASS" starttime="20170809 01:10:23.344"></status>
</kw>
<status endtime="20170809 01:10:25.307" status="PASS" starttime="20170809 01:10:23.341"></status>
</kw>
<status endtime="20170809 01:10:25.307" status="PASS" starttime="20170809 01:10:23.341"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 01:10:25.308" status="PASS" starttime="20170809 01:10:25.308"></status>
</kw>
<msg timestamp="20170809 01:10:25.309" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:25.309" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 01:10:25.309" status="PASS" starttime="20170809 01:10:25.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 01:10:25.309" status="PASS" starttime="20170809 01:10:25.309"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 01:10:25.358" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170809 01:10:25.358" status="PASS" starttime="20170809 01:10:25.357"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 01:10:25.359" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status endtime="20170809 01:10:25.359" status="PASS" starttime="20170809 01:10:25.358"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.364" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170809 01:10:25.364" status="PASS" starttime="20170809 01:10:25.359"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.367" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.367" status="PASS" starttime="20170809 01:10:25.367"></status>
</kw>
<status endtime="20170809 01:10:25.367" status="PASS" starttime="20170809 01:10:25.366"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.369" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.369" status="PASS" starttime="20170809 01:10:25.368"></status>
</kw>
<status endtime="20170809 01:10:25.369" status="PASS" starttime="20170809 01:10:25.368"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.370" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.370" status="PASS" starttime="20170809 01:10:25.370"></status>
</kw>
<status endtime="20170809 01:10:25.370" status="PASS" starttime="20170809 01:10:25.369"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.371" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.371" status="PASS" starttime="20170809 01:10:25.371"></status>
</kw>
<status endtime="20170809 01:10:25.372" status="PASS" starttime="20170809 01:10:25.370"></status>
</kw>
<status endtime="20170809 01:10:25.372" status="PASS" starttime="20170809 01:10:25.366"></status>
</kw>
<status endtime="20170809 01:10:25.372" status="PASS" starttime="20170809 01:10:25.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:25.372" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170809 01:10:25.372" status="PASS" starttime="20170809 01:10:25.372"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:25.502" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:25.502" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170809 01:10:25.579" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:25.579" status="PASS" starttime="20170809 01:10:25.431"></status>
</kw>
<msg timestamp="20170809 01:10:25.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:25.579" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Tue Aug 8 21:19:50 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170809 01:10:25.579" status="PASS" starttime="20170809 01:10:25.373"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:25.580" level="INFO">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Tue Aug 8 21:19:50 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170809 01:10:25.580" status="PASS" starttime="20170809 01:10:25.580"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:25.581" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:25.581" status="PASS" starttime="20170809 01:10:25.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.587" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.587" status="PASS" starttime="20170809 01:10:25.587"></status>
</kw>
<status endtime="20170809 01:10:25.588" status="PASS" starttime="20170809 01:10:25.586"></status>
</kw>
<status endtime="20170809 01:10:25.588" status="PASS" starttime="20170809 01:10:25.581"></status>
</kw>
<status endtime="20170809 01:10:25.588" status="PASS" starttime="20170809 01:10:25.364"></status>
</kw>
<status endtime="20170809 01:10:25.588" status="PASS" starttime="20170809 01:10:25.364"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.591" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.591" status="PASS" starttime="20170809 01:10:25.590"></status>
</kw>
<status endtime="20170809 01:10:25.591" status="PASS" starttime="20170809 01:10:25.590"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.592" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.592" status="PASS" starttime="20170809 01:10:25.592"></status>
</kw>
<status endtime="20170809 01:10:25.592" status="PASS" starttime="20170809 01:10:25.591"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.594" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.594" status="PASS" starttime="20170809 01:10:25.593"></status>
</kw>
<status endtime="20170809 01:10:25.594" status="PASS" starttime="20170809 01:10:25.593"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.595" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.595" status="PASS" starttime="20170809 01:10:25.595"></status>
</kw>
<status endtime="20170809 01:10:25.595" status="PASS" starttime="20170809 01:10:25.594"></status>
</kw>
<status endtime="20170809 01:10:25.595" status="PASS" starttime="20170809 01:10:25.589"></status>
</kw>
<status endtime="20170809 01:10:25.595" status="PASS" starttime="20170809 01:10:25.589"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:25.596" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170809 01:10:25.596" status="PASS" starttime="20170809 01:10:25.596"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:25.725" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:25.725" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170809 01:10:25.782" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:25.782" status="PASS" starttime="20170809 01:10:25.653"></status>
</kw>
<msg timestamp="20170809 01:10:25.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:25.782" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170809 01:10:25.783" status="PASS" starttime="20170809 01:10:25.596"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:25.783" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170809 01:10:25.783" status="PASS" starttime="20170809 01:10:25.783"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:25.784" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:25.784" status="PASS" starttime="20170809 01:10:25.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.790" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.791" status="PASS" starttime="20170809 01:10:25.790"></status>
</kw>
<status endtime="20170809 01:10:25.791" status="PASS" starttime="20170809 01:10:25.789"></status>
</kw>
<status endtime="20170809 01:10:25.791" status="PASS" starttime="20170809 01:10:25.784"></status>
</kw>
<status endtime="20170809 01:10:25.791" status="PASS" starttime="20170809 01:10:25.588"></status>
</kw>
<status endtime="20170809 01:10:25.791" status="PASS" starttime="20170809 01:10:25.588"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.794" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.794" status="PASS" starttime="20170809 01:10:25.793"></status>
</kw>
<status endtime="20170809 01:10:25.794" status="PASS" starttime="20170809 01:10:25.793"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.795" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.795" status="PASS" starttime="20170809 01:10:25.795"></status>
</kw>
<status endtime="20170809 01:10:25.795" status="PASS" starttime="20170809 01:10:25.794"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.797" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.797" status="PASS" starttime="20170809 01:10:25.796"></status>
</kw>
<status endtime="20170809 01:10:25.797" status="PASS" starttime="20170809 01:10:25.796"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.798" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.798" status="PASS" starttime="20170809 01:10:25.797"></status>
</kw>
<status endtime="20170809 01:10:25.798" status="PASS" starttime="20170809 01:10:25.797"></status>
</kw>
<status endtime="20170809 01:10:25.798" status="PASS" starttime="20170809 01:10:25.792"></status>
</kw>
<status endtime="20170809 01:10:25.798" status="PASS" starttime="20170809 01:10:25.792"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:25.799" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170809 01:10:25.799" status="PASS" starttime="20170809 01:10:25.798"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:25.922" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:25.922" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170809 01:10:25.985" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:25.985" status="PASS" starttime="20170809 01:10:25.856"></status>
</kw>
<msg timestamp="20170809 01:10:25.985" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:25.985" level="INFO">${ret_values} = (u' 01:10:31 up 16 min,  load average: 0.96, 0.96, 0.76', u'', 0)</msg>
<status endtime="20170809 01:10:25.985" status="PASS" starttime="20170809 01:10:25.799"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:25.986" level="INFO">${stdout} =  01:10:31 up 16 min,  load average: 0.96, 0.96, 0.76</msg>
<status endtime="20170809 01:10:25.986" status="PASS" starttime="20170809 01:10:25.985"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:25.987" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:25.987" status="PASS" starttime="20170809 01:10:25.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.993" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.993" status="PASS" starttime="20170809 01:10:25.993"></status>
</kw>
<status endtime="20170809 01:10:25.993" status="PASS" starttime="20170809 01:10:25.992"></status>
</kw>
<status endtime="20170809 01:10:25.994" status="PASS" starttime="20170809 01:10:25.987"></status>
</kw>
<status endtime="20170809 01:10:25.994" status="PASS" starttime="20170809 01:10:25.791"></status>
</kw>
<status endtime="20170809 01:10:25.994" status="PASS" starttime="20170809 01:10:25.791"></status>
</kw>
<status endtime="20170809 01:10:25.994" status="PASS" starttime="20170809 01:10:25.364"></status>
</kw>
<status endtime="20170809 01:10:25.994" status="PASS" starttime="20170809 01:10:25.358"></status>
</kw>
<status endtime="20170809 01:10:25.994" status="PASS" starttime="20170809 01:10:25.358"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 01:10:25.995" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170809 01:10:25.995" status="PASS" starttime="20170809 01:10:25.995"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.996" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170809 01:10:25.996" status="PASS" starttime="20170809 01:10:25.995"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:25.999" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:25.999" status="PASS" starttime="20170809 01:10:25.998"></status>
</kw>
<status endtime="20170809 01:10:25.999" status="PASS" starttime="20170809 01:10:25.998"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.000" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.000" status="PASS" starttime="20170809 01:10:26.000"></status>
</kw>
<status endtime="20170809 01:10:26.001" status="PASS" starttime="20170809 01:10:25.999"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.002" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.002" status="PASS" starttime="20170809 01:10:26.001"></status>
</kw>
<status endtime="20170809 01:10:26.002" status="PASS" starttime="20170809 01:10:26.001"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.003" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.003" status="PASS" starttime="20170809 01:10:26.003"></status>
</kw>
<status endtime="20170809 01:10:26.003" status="PASS" starttime="20170809 01:10:26.002"></status>
</kw>
<status endtime="20170809 01:10:26.004" status="PASS" starttime="20170809 01:10:25.997"></status>
</kw>
<status endtime="20170809 01:10:26.004" status="PASS" starttime="20170809 01:10:25.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:26.004" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170809 01:10:26.004" status="PASS" starttime="20170809 01:10:26.004"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:26.146" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:26.146" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170809 01:10:26.214" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:26.214" status="PASS" starttime="20170809 01:10:26.071"></status>
</kw>
<msg timestamp="20170809 01:10:26.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:26.214" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-201"\nVERSION_ID="v1.99.8-201-gb983102"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170809 01:10:26.214" status="PASS" starttime="20170809 01:10:26.005"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:26.215" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-201"
VERSION_ID="v1.99.8-201-gb983102"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170809 01:10:26.215" status="PASS" starttime="20170809 01:10:26.214"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:26.215" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:26.215" status="PASS" starttime="20170809 01:10:26.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.222" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.222" status="PASS" starttime="20170809 01:10:26.222"></status>
</kw>
<status endtime="20170809 01:10:26.222" status="PASS" starttime="20170809 01:10:26.221"></status>
</kw>
<status endtime="20170809 01:10:26.223" status="PASS" starttime="20170809 01:10:26.216"></status>
</kw>
<status endtime="20170809 01:10:26.223" status="PASS" starttime="20170809 01:10:25.996"></status>
</kw>
<status endtime="20170809 01:10:26.223" status="PASS" starttime="20170809 01:10:25.996"></status>
</kw>
<status endtime="20170809 01:10:26.223" status="PASS" starttime="20170809 01:10:25.996"></status>
</kw>
<status endtime="20170809 01:10:26.223" status="PASS" starttime="20170809 01:10:25.994"></status>
</kw>
<status endtime="20170809 01:10:26.223" status="PASS" starttime="20170809 01:10:25.994"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 01:10:26.224" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170809 01:10:26.224" status="PASS" starttime="20170809 01:10:26.224"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.225" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170809 01:10:26.225" status="PASS" starttime="20170809 01:10:26.224"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.228" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.228" status="PASS" starttime="20170809 01:10:26.227"></status>
</kw>
<status endtime="20170809 01:10:26.228" status="PASS" starttime="20170809 01:10:26.227"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.229" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.229" status="PASS" starttime="20170809 01:10:26.229"></status>
</kw>
<status endtime="20170809 01:10:26.229" status="PASS" starttime="20170809 01:10:26.228"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.231" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.231" status="PASS" starttime="20170809 01:10:26.230"></status>
</kw>
<status endtime="20170809 01:10:26.231" status="PASS" starttime="20170809 01:10:26.230"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:26.232" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:26.232" status="PASS" starttime="20170809 01:10:26.231"></status>
</kw>
<status endtime="20170809 01:10:26.232" status="PASS" starttime="20170809 01:10:26.231"></status>
</kw>
<status endtime="20170809 01:10:26.232" status="PASS" starttime="20170809 01:10:26.226"></status>
</kw>
<status endtime="20170809 01:10:26.232" status="PASS" starttime="20170809 01:10:26.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:26.233" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170809 01:10:26.233" status="PASS" starttime="20170809 01:10:26.232"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:26.368" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:26.369" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170809 01:10:27.848" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:27.849" status="PASS" starttime="20170809 01:10:26.297"></status>
</kw>
<msg timestamp="20170809 01:10:27.849" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:27.849" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status endtime="20170809 01:10:27.849" status="PASS" starttime="20170809 01:10:26.233"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:27.850" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status endtime="20170809 01:10:27.850" status="PASS" starttime="20170809 01:10:27.849"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:27.850" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:27.850" status="PASS" starttime="20170809 01:10:27.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:27.857" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:27.857" status="PASS" starttime="20170809 01:10:27.857"></status>
</kw>
<status endtime="20170809 01:10:27.857" status="PASS" starttime="20170809 01:10:27.856"></status>
</kw>
<status endtime="20170809 01:10:27.857" status="PASS" starttime="20170809 01:10:27.851"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:26.225"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:26.225"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:26.225"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:26.223"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:26.223"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:25.358"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:25.356"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:25.309"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:25.307"></status>
</kw>
<status endtime="20170809 01:10:27.858" status="PASS" starttime="20170809 01:10:25.307"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 01:10:27.860" status="PASS" starttime="20170809 01:10:27.860"></status>
</kw>
<msg timestamp="20170809 01:10:27.860" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:27.860" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 01:10:27.860" status="PASS" starttime="20170809 01:10:27.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 01:10:27.861" status="PASS" starttime="20170809 01:10:27.861"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 01:10:27.901" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170809 01:10:27.901" status="PASS" starttime="20170809 01:10:27.901"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 01:10:27.902" level="INFO">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg'...</msg>
<status endtime="20170809 01:10:27.902" status="PASS" starttime="20170809 01:10:27.902"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:27.903" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_meminfo.txt</msg>
<status endtime="20170809 01:10:27.903" status="PASS" starttime="20170809 01:10:27.903"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 01:10:27.904" status="PASS" starttime="20170809 01:10:27.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:27.905" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170809 01:10:27.905" status="PASS" starttime="20170809 01:10:27.905"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:28.032" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:28.033" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170809 01:10:28.091" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:28.091" status="PASS" starttime="20170809 01:10:27.970"></status>
</kw>
<msg timestamp="20170809 01:10:28.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:28.091" level="INFO">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          249208 kB\nMemAvailable:     318228 kB\nBuffers:           15624 kB\nCached:            69696 kB\nSwapCached:            0 kB\nActive:           12297...</msg>
<status endtime="20170809 01:10:28.091" status="PASS" starttime="20170809 01:10:27.905"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:28.092" level="INFO">${stdout} = MemTotal:         432260 kB
MemFree:          249208 kB
MemAvailable:     318228 kB
Buffers:           15624 kB
Cached:            69696 kB
SwapCached:            0 kB
Active:           122976 kB
Inac...</msg>
<status endtime="20170809 01:10:28.092" status="PASS" starttime="20170809 01:10:28.092"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:28.093" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:28.093" status="PASS" starttime="20170809 01:10:28.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:28.100" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_meminfo.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:28.100" status="PASS" starttime="20170809 01:10:28.099"></status>
</kw>
<status endtime="20170809 01:10:28.100" status="PASS" starttime="20170809 01:10:28.098"></status>
</kw>
<status endtime="20170809 01:10:28.100" status="PASS" starttime="20170809 01:10:28.093"></status>
</kw>
<status endtime="20170809 01:10:28.100" status="PASS" starttime="20170809 01:10:27.903"></status>
</kw>
<status endtime="20170809 01:10:28.100" status="PASS" starttime="20170809 01:10:27.902"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:28.101" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170809 01:10:28.101" status="PASS" starttime="20170809 01:10:28.100"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 01:10:28.102" status="PASS" starttime="20170809 01:10:28.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:28.103" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170809 01:10:28.103" status="PASS" starttime="20170809 01:10:28.102"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:28.223" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:28.224" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170809 01:10:28.805" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:28.806" status="PASS" starttime="20170809 01:10:28.155"></status>
</kw>
<msg timestamp="20170809 01:10:28.806" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:28.807" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 01:10 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 01:10 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170809 01:10:28.807" status="PASS" starttime="20170809 01:10:28.103"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:28.808" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 01:10 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 01:10 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170809 01:10:28.808" status="PASS" starttime="20170809 01:10:28.807"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:28.809" level="INFO">${stderr} = ls: /proc/2855/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170809 01:10:28.809" status="PASS" starttime="20170809 01:10:28.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:28.816" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:28.816" status="PASS" starttime="20170809 01:10:28.815"></status>
</kw>
<status endtime="20170809 01:10:28.816" status="PASS" starttime="20170809 01:10:28.814"></status>
</kw>
<status endtime="20170809 01:10:28.816" status="PASS" starttime="20170809 01:10:28.809"></status>
</kw>
<status endtime="20170809 01:10:28.816" status="PASS" starttime="20170809 01:10:28.101"></status>
</kw>
<status endtime="20170809 01:10:28.816" status="PASS" starttime="20170809 01:10:28.100"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:28.817" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_procinfo.txt</msg>
<status endtime="20170809 01:10:28.817" status="PASS" starttime="20170809 01:10:28.817"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 01:10:28.818" status="PASS" starttime="20170809 01:10:28.818"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:28.819" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170809 01:10:28.819" status="PASS" starttime="20170809 01:10:28.819"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:28.932" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:28.937" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170809 01:10:28.984" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:28.985" status="PASS" starttime="20170809 01:10:28.871"></status>
</kw>
<msg timestamp="20170809 01:10:28.985" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:28.985" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170809 01:10:28.985" status="PASS" starttime="20170809 01:10:28.819"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:28.986" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170809 01:10:28.986" status="PASS" starttime="20170809 01:10:28.986"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:28.987" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:28.987" status="PASS" starttime="20170809 01:10:28.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:28.997" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_procinfo.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:28.997" status="PASS" starttime="20170809 01:10:28.996"></status>
</kw>
<status endtime="20170809 01:10:28.997" status="PASS" starttime="20170809 01:10:28.995"></status>
</kw>
<status endtime="20170809 01:10:28.997" status="PASS" starttime="20170809 01:10:28.987"></status>
</kw>
<status endtime="20170809 01:10:28.997" status="PASS" starttime="20170809 01:10:28.817"></status>
</kw>
<status endtime="20170809 01:10:28.997" status="PASS" starttime="20170809 01:10:28.816"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:28.998" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_journalctl.txt</msg>
<status endtime="20170809 01:10:28.998" status="PASS" starttime="20170809 01:10:28.998"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 01:10:28.999" status="PASS" starttime="20170809 01:10:28.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:29.000" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170809 01:10:29.000" status="PASS" starttime="20170809 01:10:28.999"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:29.117" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:29.118" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170809 01:10:32.063" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:32.064" status="PASS" starttime="20170809 01:10:29.049"></status>
</kw>
<msg timestamp="20170809 01:10:32.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:32.068" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 00:54:06 UTC, end at Wed 2017-08-09 01:10:30 UTC. --\nAug 09 00:54:06 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 00:54:06 witherspoon kernel: Linu...</msg>
<status endtime="20170809 01:10:32.068" status="PASS" starttime="20170809 01:10:29.000"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:32.070" level="INFO">${stdout} = -- Logs begin at Wed 2017-08-09 00:54:06 UTC, end at Wed 2017-08-09 01:10:30 UTC. --
Aug 09 00:54:06 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 00:54:06 witherspoon kernel: Linux ver...</msg>
<status endtime="20170809 01:10:32.070" status="PASS" starttime="20170809 01:10:32.069"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:32.071" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:32.071" status="PASS" starttime="20170809 01:10:32.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.079" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_journalctl.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:32.079" status="PASS" starttime="20170809 01:10:32.078"></status>
</kw>
<status endtime="20170809 01:10:32.079" status="PASS" starttime="20170809 01:10:32.076"></status>
</kw>
<status endtime="20170809 01:10:32.079" status="PASS" starttime="20170809 01:10:32.071"></status>
</kw>
<status endtime="20170809 01:10:32.080" status="PASS" starttime="20170809 01:10:28.998"></status>
</kw>
<status endtime="20170809 01:10:32.080" status="PASS" starttime="20170809 01:10:28.997"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:32.080" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_dmesg.txt</msg>
<status endtime="20170809 01:10:32.081" status="PASS" starttime="20170809 01:10:32.080"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 01:10:32.082" status="PASS" starttime="20170809 01:10:32.081"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:32.083" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170809 01:10:32.083" status="PASS" starttime="20170809 01:10:32.082"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:32.207" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:32.208" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170809 01:10:32.275" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:32.276" status="PASS" starttime="20170809 01:10:32.138"></status>
</kw>
<msg timestamp="20170809 01:10:32.276" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:32.276" level="INFO">${ret_values} = (u'[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB\n[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB\n[    2.7...</msg>
<status endtime="20170809 01:10:32.276" status="PASS" starttime="20170809 01:10:32.083"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:32.277" level="INFO">${stdout} = [    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB
[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB
[    2.780000...</msg>
<status endtime="20170809 01:10:32.277" status="PASS" starttime="20170809 01:10:32.276"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:32.277" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:32.277" status="PASS" starttime="20170809 01:10:32.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.284" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_dmesg.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:32.284" status="PASS" starttime="20170809 01:10:32.284"></status>
</kw>
<status endtime="20170809 01:10:32.284" status="PASS" starttime="20170809 01:10:32.283"></status>
</kw>
<status endtime="20170809 01:10:32.284" status="PASS" starttime="20170809 01:10:32.278"></status>
</kw>
<status endtime="20170809 01:10:32.285" status="PASS" starttime="20170809 01:10:32.081"></status>
</kw>
<status endtime="20170809 01:10:32.285" status="PASS" starttime="20170809 01:10:32.080"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 01:10:32.285" level="INFO">${logpath} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_proc_list.txt</msg>
<status endtime="20170809 01:10:32.285" status="PASS" starttime="20170809 01:10:32.285"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 01:10:32.287" status="PASS" starttime="20170809 01:10:32.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:32.287" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170809 01:10:32.287" status="PASS" starttime="20170809 01:10:32.287"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 01:10:32.405" level="INFO">index=1
term_type=vt100
newline=

path_separator=/
timeout=25 seconds
width=80
prompt=# 
height=24
port=22
alias=bmc_connection
encoding=UTF-8
host=9.3.86.161</msg>
<msg timestamp="20170809 01:10:32.405" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170809 01:10:32.725" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170809 01:10:32.725" status="PASS" starttime="20170809 01:10:32.340"></status>
</kw>
<msg timestamp="20170809 01:10:32.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:32.726" level="INFO">${ret_values} = (u'Mem: 183128K used, 249132K free, 14720K shrd, 15624K buff, 69704K cached\nCPU:   7% usr  14% sys   0% nic  78% idle   0% io   0% irq   0% sirq\nLoad average: 1.05 0.98 0.77 1/165 2859\n  PID  PPID ...</msg>
<status endtime="20170809 01:10:32.726" status="PASS" starttime="20170809 01:10:32.288"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 01:10:32.727" level="INFO">${stdout} = Mem: 183128K used, 249132K free, 14720K shrd, 15624K buff, 69704K cached
CPU:   7% usr  14% sys   0% nic  78% idle   0% io   0% irq   0% sirq
Load average: 1.05 0.98 0.77 1/165 2859
  PID  PPID USER  ...</msg>
<status endtime="20170809 01:10:32.727" status="PASS" starttime="20170809 01:10:32.726"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 01:10:32.727" level="INFO">${stderr} = </msg>
<status endtime="20170809 01:10:32.727" status="PASS" starttime="20170809 01:10:32.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.734" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_proc_list.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/20170809011018432962_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:32.734" status="PASS" starttime="20170809 01:10:32.733"></status>
</kw>
<status endtime="20170809 01:10:32.734" status="PASS" starttime="20170809 01:10:32.733"></status>
</kw>
<status endtime="20170809 01:10:32.734" status="PASS" starttime="20170809 01:10:32.728"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:32.286"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:32.285"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.902"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.901"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.901"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.901"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.900"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.861"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.859"></status>
</kw>
<status endtime="20170809 01:10:32.735" status="PASS" starttime="20170809 01:10:27.858"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 01:10:32.737" status="PASS" starttime="20170809 01:10:32.737"></status>
</kw>
<msg timestamp="20170809 01:10:32.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 01:10:32.737" level="INFO">${ret_values} = None</msg>
<status endtime="20170809 01:10:32.737" status="PASS" starttime="20170809 01:10:32.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 01:10:32.738" status="PASS" starttime="20170809 01:10:32.737"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170809 01:10:32.785" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170809 01:10:32.785" status="PASS" starttime="20170809 01:10:32.785"></status>
</kw>
<status endtime="20170809 01:10:32.785" status="PASS" starttime="20170809 01:10:32.784"></status>
</kw>
<status endtime="20170809 01:10:32.785" status="PASS" starttime="20170809 01:10:32.738"></status>
</kw>
<status endtime="20170809 01:10:32.785" status="PASS" starttime="20170809 01:10:32.735"></status>
</kw>
<status endtime="20170809 01:10:32.785" status="PASS" starttime="20170809 01:10:32.735"></status>
</kw>
<status endtime="20170809 01:10:32.786" status="PASS" starttime="20170809 01:10:18.705"></status>
</kw>
<status endtime="20170809 01:10:32.786" status="PASS" starttime="20170809 01:10:18.702"></status>
</kw>
<status endtime="20170809 01:10:32.786" status="PASS" starttime="20170809 01:10:18.702"></status>
</kw>
<status endtime="20170809 01:10:32.786" status="PASS" starttime="20170809 01:10:18.702"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170809 01:10:32.797" status="PASS" starttime="20170809 01:10:32.797"></status>
</kw>
<status endtime="20170809 01:10:32.797" status="PASS" starttime="20170809 01:10:32.786"></status>
</kw>
<status endtime="20170809 01:10:32.797" status="PASS" starttime="20170809 01:10:18.701"></status>
</kw>
<status endtime="20170809 01:10:32.798" status="PASS" starttime="20170809 01:10:15.365"></status>
</kw>
<status endtime="20170809 01:10:32.798" status="PASS" starttime="20170809 01:10:15.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170809 01:10:32.798" status="PASS" starttime="20170809 01:10:32.798"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 01:10:32.809" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170809 01:10:32.809" status="PASS" starttime="20170809 01:10:32.799"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 01:10:32.810" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/16110/obmc-robot/logs/20170809011018432962_TestsTestBasicPoweron/20170809011018432962_PowerOnTest/</msg>
<status endtime="20170809 01:10:32.810" status="PASS" starttime="20170809 01:10:32.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170809 01:10:32.811" status="PASS" starttime="20170809 01:10:32.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170809 01:10:32.812" status="PASS" starttime="20170809 01:10:32.811"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.815" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs"&gt;/tmp/fspcibld/16110/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170809 01:10:32.815" status="PASS" starttime="20170809 01:10:32.814"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.816" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170809 01:10:32.816" status="PASS" starttime="20170809 01:10:32.816"></status>
</kw>
<msg timestamp="20170809 01:10:32.816" level="INFO">${exist} = True</msg>
<status endtime="20170809 01:10:32.816" status="PASS" starttime="20170809 01:10:32.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170809 01:10:32.817" status="PASS" starttime="20170809 01:10:32.816"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170809 01:10:32.817" status="PASS" starttime="20170809 01:10:32.817"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 01:10:32.819" level="INFO">${cur_time} = 2017-08-09 01:10:32:818628</msg>
<status endtime="20170809 01:10:32.819" status="PASS" starttime="20170809 01:10:32.818"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 01:10:32.820" level="INFO">${cur_time} = 20170809011032818628</msg>
<status endtime="20170809 01:10:32.820" status="PASS" starttime="20170809 01:10:32.819"></status>
</kw>
<msg timestamp="20170809 01:10:32.820" level="INFO">${cur_time} = 20170809011032818628</msg>
<status endtime="20170809 01:10:32.820" status="PASS" starttime="20170809 01:10:32.817"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.821" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16110/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:32.821" status="PASS" starttime="20170809 01:10:32.820"></status>
</kw>
<status endtime="20170809 01:10:32.821" status="PASS" starttime="20170809 01:10:32.799"></status>
</kw>
<status endtime="20170809 01:10:32.821" status="PASS" starttime="20170809 01:10:15.066"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170809 01:10:32.823" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 01:10:32.823" status="PASS" starttime="20170809 01:10:32.823"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170809 01:10:32.824" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 01:10:32.824" status="PASS" starttime="20170809 01:10:32.823"></status>
</kw>
<msg timestamp="20170809 01:10:32.824" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 01:10:32.824" status="PASS" starttime="20170809 01:10:32.822"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:32.825" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 01:10:32.825" status="PASS" starttime="20170809 01:10:32.825"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 01:10:32.825" status="PASS" starttime="20170809 01:10:32.825"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 01:10:32.831" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 01:10:32.835" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 01:10:32.835" level="INFO">${output} = /tmp/fspcibld/16110/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 01:10:32.835" status="PASS" starttime="20170809 01:10:32.826"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 01:10:32.838" status="PASS" starttime="20170809 01:10:32.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 01:10:32.839" status="PASS" starttime="20170809 01:10:32.839"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:32.840" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 01:10:32.840" status="PASS" starttime="20170809 01:10:32.839"></status>
</kw>
<msg timestamp="20170809 01:10:32.841" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 01:10:32.841" status="PASS" starttime="20170809 01:10:32.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:32.841" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170809 01:10:32.842" status="PASS" starttime="20170809 01:10:32.841"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 01:10:32.842" status="PASS" starttime="20170809 01:10:32.842"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170809 01:10:32.847" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 01:10:32.857" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 01:10:32.857" level="INFO">${os_con_pid} = </msg>
<status endtime="20170809 01:10:32.857" status="PASS" starttime="20170809 01:10:32.842"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170809 01:10:32.860" status="PASS" starttime="20170809 01:10:32.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 01:10:32.861" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170809 01:10:32.861" status="PASS" starttime="20170809 01:10:32.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 01:10:32.862" status="PASS" starttime="20170809 01:10:32.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 01:10:32.863" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 01:10:32.863" level="INFO">${output} = None</msg>
<status endtime="20170809 01:10:32.863" status="PASS" starttime="20170809 01:10:32.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 01:10:32.864" status="PASS" starttime="20170809 01:10:32.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.870" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/16110/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/16110/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170809 01:10:32.870" status="PASS" starttime="20170809 01:10:32.867"></status>
</kw>
<status endtime="20170809 01:10:32.870" status="PASS" starttime="20170809 01:10:32.865"></status>
</kw>
<status endtime="20170809 01:10:32.870" status="PASS" starttime="20170809 01:10:32.864"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170809 01:10:32.870" level="INFO">${output} = </msg>
<status endtime="20170809 01:10:32.870" status="PASS" starttime="20170809 01:10:32.870"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170809 01:10:32.871" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170809 01:10:32.871" status="PASS" starttime="20170809 01:10:32.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170809 01:10:32.920" status="PASS" starttime="20170809 01:10:32.872"></status>
</kw>
<msg timestamp="20170809 01:10:32.922" level="INFO">${rc} = 0</msg>
<msg timestamp="20170809 01:10:32.922" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170809 01:10:32.922" status="PASS" starttime="20170809 01:10:32.871"></status>
</kw>
<msg timestamp="20170809 01:10:32.923" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170809 01:10:32.923" status="PASS" starttime="20170809 01:10:32.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170809 01:10:32.926" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85013|secure|Booting in non-secure mode.
  3.85014|secure|SecureROM invalid - skipping functionality
  6.26885|ISTEP  6. 5 - host_init_fsi
  6.34799|ISTEP  6. 6 - host_set_ipl_parms
  6.36951|ISTEP  6. 7 - host_discover_targets
  6.89381|================================================
  6.89558|Error reported by i2c (0x0700) PLID 0x90000005
  6.89740|  Bus Arbitration Lost Error was found in the I2C status register.
  6.89740|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  6.89741|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  6.89922|  UserData1  Status Register Value : 0x080e080000050001
  6.89923|  UserData2  Master Target : 0x0300006c0190004d
  6.89923|------------------------------------------------
  6.89924|  Callout type             : Hardware Callout
  6.89924|  CPU id                   : 3
  6.89925|  Target                   : Physical:/Sys0/Node0/Proc1
  6.89926|  Deconfig State           : NO_DECONFIG
  6.89926|  GARD Error Type          : GARD_NULL
  6.89927|  Priority                 : SRCI_PRIORITY_HIGH
  6.89927|------------------------------------------------
  6.89928|  Callout type             : Procedure Callout
  6.89928|  Procedure                : EPUB_PRC_HB_CODE
  6.89929|  Priority                 : SRCI_PRIORITY_LOW
  6.89929|------------------------------------------------
  6.89929|  
  6.89930|------------------------------------------------
  6.89930|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  6.89931|================================================
159.17011|IPMI: shutdown requested
159.22024|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85052|secure|Booting in non-secure mode.
  3.85053|secure|SecureROM invalid - skipping functionality
  4.94274|ISTEP  6. 5 - host_init_fsi
  5.02582|ISTEP  6. 6 - host_set_ipl_parms
  5.03303|ISTEP  6. 7 - host_discover_targets
  5.24929|================================================
  5.25110|Error reported by i2c (0x0700) PLID 0x90000007
  5.25292|  Bus Arbitration Lost Error was found in the I2C status register.
  5.25293|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.25293|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.25474|  UserData1  Status Register Value : 0x080e080000050001
  5.25475|  UserData2  Master Target : 0x0300006c0190004d
  5.25475|------------------------------------------------
  5.25476|  Callout type             : Hardware Callout
  5.25476|  CPU id                   : 2
  5.25477|  Target                   : Physical:/Sys0/Node0/Proc1
  5.25477|  Deconfig State           : NO_DECONFIG
  5.25478|  GARD Error Type          : GARD_NULL
  5.25478|  Priority                 : SRCI_PRIORITY_HIGH
  5.25479|------------------------------------------------
  5.25479|  Callout type             : Procedure Callout
  5.25480|  Procedure                : EPUB_PRC_HB_CODE
  5.25480|  Priority                 : SRCI_PRIORITY_LOW
  5.25481|------------------------------------------------
  5.25481|  
  5.25481|------------------------------------------------
  5.25482|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.25482|================================================
163.04377|IPMI: shutdown requested
163.05129|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85055|secure|Booting in non-secure mode.
  3.85056|secure|SecureROM invalid - skipping functionality
  5.02187|ISTEP  6. 5 - host_init_fsi
  5.09431|ISTEP  6. 6 - host_set_ipl_parms
  5.10142|ISTEP  6. 7 - host_discover_targets
  5.31440|================================================
  5.31621|Error reported by i2c (0x0700) PLID 0x90000009
  5.31803|  Bus Arbitration Lost Error was found in the I2C status register.
  5.31804|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.31804|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.31987|  UserData1  Status Register Value : 0x080e080000050001
  5.31987|  UserData2  Master Target : 0x0300006c0190004d
  5.31988|------------------------------------------------
  5.31988|  Callout type             : Hardware Callout
  5.31989|  CPU id                   : 2
  5.31989|  Target                   : Physical:/Sys0/Node0/Proc1
  5.31990|  Deconfig State           : NO_DECONFIG
  5.31990|  GARD Error Type          : GARD_NULL
  5.31991|  Priority                 : SRCI_PRIORITY_HIGH
  5.31991|------------------------------------------------
  5.31992|  Callout type             : Procedure Callout
  5.31992|  Procedure                : EPUB_PRC_HB_CODE
  5.31993|  Priority                 : SRCI_PRIORITY_LOW
  5.31993|------------------------------------------------
  5.31994|  
  5.31994|------------------------------------------------
  5.31995|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.31995|================================================
163.52088|IPMI: shutdown requested
163.52857|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85173|secure|Booting in non-secure mode.
  3.85174|secure|SecureROM invalid - skipping functionality
  4.88044|ISTEP  6. 5 - host_init_fsi
  4.95319|ISTEP  6. 6 - host_set_ipl_parms
  4.95991|ISTEP  6. 7 - host_discover_targets
  5.17217|================================================
  5.17398|Error reported by i2c (0x0700) PLID 0x9000000B
  5.17581|  Bus Arbitration Lost Error was found in the I2C status register.
  5.17581|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.17582|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.17764|  UserData1  Status Register Value : 0x080e080000050001
  5.17764|  UserData2  Master Target : 0x0300006c0190004d
  5.17765|------------------------------------------------
  5.17765|  Callout type             : Hardware Callout
  5.17765|  CPU id                   : 3
  5.17766|  Target                   : Physical:/Sys0/Node0/Proc1
  5.17767|  Deconfig State           : NO_DECONFIG
  5.17767|  GARD Error Type          : GARD_NULL
  5.17768|  Priority                 : SRCI_PRIORITY_HIGH
  5.17768|------------------------------------------------
  5.17769|  Callout type             : Procedure Callout
  5.17769|  Procedure                : EPUB_PRC_HB_CODE
  5.17770|  Priority                 : SRCI_PRIORITY_LOW
  5.17770|------------------------------------------------
  5.17770|  
  5.17771|------------------------------------------------
  5.17771|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.17772|================================================
</msg>
<status endtime="20170809 01:10:32.926" status="PASS" starttime="20170809 01:10:32.925"></status>
</kw>
<status endtime="20170809 01:10:32.926" status="PASS" starttime="20170809 01:10:15.066"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170809 01:10:32.927" status="FAIL" starttime="20170809 00:59:57.512">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170809 01:10:32.928" status="FAIL" starttime="20170809 00:59:57.475"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170809 01:10:32.931" status="FAIL" starttime="20170809 00:59:51.151"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="1" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
